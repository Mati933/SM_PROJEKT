
Pliss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d484  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0800d658  0800d658  0001d658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db84  0800db84  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800db84  0800db84  0001db84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db8c  0800db8c  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db8c  0800db8c  0001db8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db90  0800db90  0001db90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800db94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000240  0800ddd4  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000954  0800ddd4  00020954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd27  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044c8  00000000  00000000  0003ff97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  00044460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  00045bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa67  00000000  00000000  00047178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e99a  00000000  00000000  00071bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faa10  00000000  00000000  00090579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018af89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079b8  00000000  00000000  0018afdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000240 	.word	0x20000240
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d63c 	.word	0x0800d63c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000244 	.word	0x20000244
 800020c:	0800d63c 	.word	0x0800d63c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <pid_init>:
 *  Created on: Nov 22, 2021
 *      Author: Ja
 */
#include "PID.h"
void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6178      	str	r0, [r7, #20]
 8001034:	ed87 0a04 	vstr	s0, [r7, #16]
 8001038:	edc7 0a03 	vstr	s1, [r7, #12]
 800103c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001040:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2200      	movs	r2, #0
 800104c:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	615a      	str	r2, [r3, #20]
}
 8001066:	bf00      	nop
 8001068:	371c      	adds	r7, #28
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <pid_reset>:

void pid_reset(pid_str *pid_data)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <pid_calculate>:
int pid_calculate(pid_str *pid_data, int setpoint, int process_variable)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	441a      	add	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c8:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	ee07 3a90 	vmov	s15, r3
 80010f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001110:	ed97 7a07 	vldr	s14, [r7, #28]
 8001114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111c:	db08      	blt.n	8001130 <pid_calculate+0x9c>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112a:	edc7 7a07 	vstr	s15, [r7, #28]
 800112e:	e016      	b.n	800115e <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	425b      	negs	r3, r3
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	d808      	bhi.n	800115e <pid_calculate+0xca>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	425b      	negs	r3, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

	if((int)(p_term + i_term + d_term)<-1000)
 8001164:	ed97 7a05 	vldr	s14, [r7, #20]
 8001168:	edd7 7a07 	vldr	s15, [r7, #28]
 800116c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001170:	edd7 7a04 	vldr	s15, [r7, #16]
 8001174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001178:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800117c:	ee17 3a90 	vmov	r3, s15
 8001180:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001184:	da01      	bge.n	800118a <pid_calculate+0xf6>
	{
		return (int)-1000;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <pid_calculate+0x120>)
 8001188:	e00d      	b.n	80011a6 <pid_calculate+0x112>
	}
	else
	{
		return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 800118a:	ed97 7a05 	vldr	s14, [r7, #20]
 800118e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001196:	edd7 7a04 	vldr	s15, [r7, #16]
 800119a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
	}



}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	fffffc18 	.word	0xfffffc18

080011b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ca:	4b7b      	ldr	r3, [pc, #492]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011cc:	4a7b      	ldr	r2, [pc, #492]	; (80013bc <MX_ADC1_Init+0x204>)
 80011ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d0:	4b79      	ldr	r3, [pc, #484]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d6:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011dc:	4b76      	ldr	r3, [pc, #472]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011de:	2201      	movs	r2, #1
 80011e0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e2:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e8:	4b73      	ldr	r3, [pc, #460]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f0:	4b71      	ldr	r3, [pc, #452]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f6:	4b70      	ldr	r3, [pc, #448]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011f8:	4a71      	ldr	r2, [pc, #452]	; (80013c0 <MX_ADC1_Init+0x208>)
 80011fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fc:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <MX_ADC1_Init+0x200>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8001202:	4b6d      	ldr	r3, [pc, #436]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001204:	2210      	movs	r2, #16
 8001206:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001208:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <MX_ADC1_Init+0x200>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001210:	4b69      	ldr	r3, [pc, #420]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001212:	2201      	movs	r2, #1
 8001214:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001216:	4868      	ldr	r0, [pc, #416]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001218:	f001 fc7a 	bl	8002b10 <HAL_ADC_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 ff9d 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001226:	2303      	movs	r3, #3
 8001228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122a:	2301      	movs	r3, #1
 800122c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4860      	ldr	r0, [pc, #384]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001238:	f001 fee8 	bl	800300c <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001242:	f000 ff8d 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001246:	2302      	movs	r3, #2
 8001248:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	4619      	mov	r1, r3
 800124e:	485a      	ldr	r0, [pc, #360]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001250:	f001 fedc 	bl	800300c <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800125a:	f000 ff81 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800125e:	2303      	movs	r3, #3
 8001260:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001262:	463b      	mov	r3, r7
 8001264:	4619      	mov	r1, r3
 8001266:	4854      	ldr	r0, [pc, #336]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001268:	f001 fed0 	bl	800300c <HAL_ADC_ConfigChannel>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001272:	f000 ff75 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001276:	2304      	movs	r3, #4
 8001278:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	484e      	ldr	r0, [pc, #312]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001280:	f001 fec4 	bl	800300c <HAL_ADC_ConfigChannel>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 800128a:	f000 ff69 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800128e:	2305      	movs	r3, #5
 8001290:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	4619      	mov	r1, r3
 8001296:	4848      	ldr	r0, [pc, #288]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001298:	f001 feb8 	bl	800300c <HAL_ADC_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80012a2:	f000 ff5d 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012a6:	2306      	movs	r3, #6
 80012a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4842      	ldr	r0, [pc, #264]	; (80013b8 <MX_ADC1_Init+0x200>)
 80012b0:	f001 feac 	bl	800300c <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80012ba:	f000 ff51 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012be:	2307      	movs	r3, #7
 80012c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	483c      	ldr	r0, [pc, #240]	; (80013b8 <MX_ADC1_Init+0x200>)
 80012c8:	f001 fea0 	bl	800300c <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 80012d2:	f000 ff45 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80012d6:	2308      	movs	r3, #8
 80012d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4836      	ldr	r0, [pc, #216]	; (80013b8 <MX_ADC1_Init+0x200>)
 80012e0:	f001 fe94 	bl	800300c <HAL_ADC_ConfigChannel>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80012ea:	f000 ff39 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80012ee:	2309      	movs	r3, #9
 80012f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4830      	ldr	r0, [pc, #192]	; (80013b8 <MX_ADC1_Init+0x200>)
 80012f8:	f001 fe88 	bl	800300c <HAL_ADC_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001302:	f000 ff2d 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001306:	230a      	movs	r3, #10
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	482a      	ldr	r0, [pc, #168]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001310:	f001 fe7c 	bl	800300c <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0x166>
  {
    Error_Handler();
 800131a:	f000 ff21 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800131e:	230b      	movs	r3, #11
 8001320:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	4619      	mov	r1, r3
 8001326:	4824      	ldr	r0, [pc, #144]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001328:	f001 fe70 	bl	800300c <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x17e>
  {
    Error_Handler();
 8001332:	f000 ff15 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001336:	230c      	movs	r3, #12
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	481e      	ldr	r0, [pc, #120]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001340:	f001 fe64 	bl	800300c <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 800134a:	f000 ff09 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_13;
 800134e:	230d      	movs	r3, #13
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001358:	f001 fe58 	bl	800300c <HAL_ADC_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8001362:	f000 fefd 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001366:	230e      	movs	r3, #14
 8001368:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001370:	f001 fe4c 	bl	800300c <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0x1c6>
  {
    Error_Handler();
 800137a:	f000 fef1 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_15;
 800137e:	230f      	movs	r3, #15
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_ADC1_Init+0x200>)
 8001388:	f001 fe40 	bl	800300c <HAL_ADC_ConfigChannel>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 8001392:	f000 fee5 	bl	8002160 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8001396:	2310      	movs	r3, #16
 8001398:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139a:	463b      	mov	r3, r7
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_ADC1_Init+0x200>)
 80013a0:	f001 fe34 	bl	800300c <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 80013aa:	f000 fed9 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200002d8 	.word	0x200002d8
 80013bc:	40012000 	.word	0x40012000
 80013c0:	0f000001 	.word	0x0f000001

080013c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_ADC_MspInit+0x84>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d12b      	bne.n	800143e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <HAL_ADC_MspInit+0x88>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <HAL_ADC_MspInit+0x88>)
 80013ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_ADC_MspInit+0x88>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <HAL_ADC_MspInit+0x88>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <HAL_ADC_MspInit+0x88>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_ADC_MspInit+0x88>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001416:	2308      	movs	r3, #8
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4809      	ldr	r0, [pc, #36]	; (8001450 <HAL_ADC_MspInit+0x8c>)
 800142a:	f002 f9e1 	bl	80037f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2012      	movs	r0, #18
 8001434:	f002 f913 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001438:	2012      	movs	r0, #18
 800143a:	f002 f92c 	bl	8003696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40012000 	.word	0x40012000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000

08001454 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	791b      	ldrb	r3, [r3, #4]
 8001468:	b299      	uxth	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f107 020f 	add.w	r2, r7, #15
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	f002 fc2b 	bl	8003cd0 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 800147a:	2310      	movs	r3, #16
 800147c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6818      	ldr	r0, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	b299      	uxth	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f107 020f 	add.w	r2, r7, #15
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	f002 fc1c 	bl	8003cd0 <HAL_I2C_Master_Transmit>
}
 8001498:	bf00      	nop
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	791b      	ldrb	r3, [r3, #4]
 80014b0:	b299      	uxth	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f107 020c 	add.w	r2, r7, #12
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2302      	movs	r3, #2
 80014be:	f002 fcfb 	bl	8003eb8 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 80014c2:	7b3b      	ldrb	r3, [r7, #12]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	7b7a      	ldrb	r2, [r7, #13]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff f84a 	bl	8000564 <__aeabi_i2d>
 80014d0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <BH1750_ReadLux+0x58>)
 80014d6:	f7ff f9d9 	bl	800088c <__aeabi_ddiv>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fba1 	bl	8000c28 <__aeabi_d2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	ee07 3a90 	vmov	s15, r3
}
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	3ff33333 	.word	0x3ff33333

080014fc <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001502:	f107 031c 	add.w	r3, r7, #28
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	4b8b      	ldr	r3, [pc, #556]	; (8001740 <MX_GPIO_Init+0x244>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a8a      	ldr	r2, [pc, #552]	; (8001740 <MX_GPIO_Init+0x244>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b88      	ldr	r3, [pc, #544]	; (8001740 <MX_GPIO_Init+0x244>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	61bb      	str	r3, [r7, #24]
 8001528:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800152a:	4b85      	ldr	r3, [pc, #532]	; (8001740 <MX_GPIO_Init+0x244>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a84      	ldr	r2, [pc, #528]	; (8001740 <MX_GPIO_Init+0x244>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b82      	ldr	r3, [pc, #520]	; (8001740 <MX_GPIO_Init+0x244>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	4b7f      	ldr	r3, [pc, #508]	; (8001740 <MX_GPIO_Init+0x244>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a7e      	ldr	r2, [pc, #504]	; (8001740 <MX_GPIO_Init+0x244>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <MX_GPIO_Init+0x244>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b79      	ldr	r3, [pc, #484]	; (8001740 <MX_GPIO_Init+0x244>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a78      	ldr	r2, [pc, #480]	; (8001740 <MX_GPIO_Init+0x244>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b76      	ldr	r3, [pc, #472]	; (8001740 <MX_GPIO_Init+0x244>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b73      	ldr	r3, [pc, #460]	; (8001740 <MX_GPIO_Init+0x244>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a72      	ldr	r2, [pc, #456]	; (8001740 <MX_GPIO_Init+0x244>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b70      	ldr	r3, [pc, #448]	; (8001740 <MX_GPIO_Init+0x244>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b6d      	ldr	r3, [pc, #436]	; (8001740 <MX_GPIO_Init+0x244>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a6c      	ldr	r2, [pc, #432]	; (8001740 <MX_GPIO_Init+0x244>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <MX_GPIO_Init+0x244>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <MX_GPIO_Init+0x244>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a66      	ldr	r2, [pc, #408]	; (8001740 <MX_GPIO_Init+0x244>)
 80015a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b64      	ldr	r3, [pc, #400]	; (8001740 <MX_GPIO_Init+0x244>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|D4_Pin|D5_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f240 4124 	movw	r1, #1060	; 0x424
 80015c0:	4860      	ldr	r0, [pc, #384]	; (8001744 <MX_GPIO_Init+0x248>)
 80015c2:	f002 fac1 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	210c      	movs	r1, #12
 80015ca:	485f      	ldr	r0, [pc, #380]	; (8001748 <MX_GPIO_Init+0x24c>)
 80015cc:	f002 fabc 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f244 0181 	movw	r1, #16513	; 0x4081
 80015d6:	485d      	ldr	r0, [pc, #372]	; (800174c <MX_GPIO_Init+0x250>)
 80015d8:	f002 fab6 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	485b      	ldr	r0, [pc, #364]	; (8001750 <MX_GPIO_Init+0x254>)
 80015e2:	f002 fab1 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2101      	movs	r1, #1
 80015ea:	485a      	ldr	r0, [pc, #360]	; (8001754 <MX_GPIO_Init+0x258>)
 80015ec:	f002 faac 	bl	8003b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	4b58      	ldr	r3, [pc, #352]	; (8001758 <MX_GPIO_Init+0x25c>)
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	4850      	ldr	r0, [pc, #320]	; (8001748 <MX_GPIO_Init+0x24c>)
 8001606:	f002 f8f3 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D7_Pin|D4_Pin|D5_Pin;
 800160a:	f240 4324 	movw	r3, #1060	; 0x424
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	4848      	ldr	r0, [pc, #288]	; (8001744 <MX_GPIO_Init+0x248>)
 8001624:	f002 f8e4 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001628:	2332      	movs	r3, #50	; 0x32
 800162a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001638:	230b      	movs	r3, #11
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4841      	ldr	r0, [pc, #260]	; (8001748 <MX_GPIO_Init+0x24c>)
 8001644:	f002 f8d4 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin;
 8001648:	230c      	movs	r3, #12
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	483a      	ldr	r0, [pc, #232]	; (8001748 <MX_GPIO_Init+0x24c>)
 8001660:	f002 f8c6 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001664:	2386      	movs	r3, #134	; 0x86
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001674:	230b      	movs	r3, #11
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	4837      	ldr	r0, [pc, #220]	; (800175c <MX_GPIO_Init+0x260>)
 8001680:	f002 f8b6 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001684:	f244 0381 	movw	r3, #16513	; 0x4081
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	482b      	ldr	r0, [pc, #172]	; (800174c <MX_GPIO_Init+0x250>)
 800169e:	f002 f8a7 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016b4:	230b      	movs	r3, #11
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4823      	ldr	r0, [pc, #140]	; (800174c <MX_GPIO_Init+0x250>)
 80016c0:	f002 f896 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016c4:	2340      	movs	r3, #64	; 0x40
 80016c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c8:	2301      	movs	r3, #1
 80016ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	481d      	ldr	r0, [pc, #116]	; (8001750 <MX_GPIO_Init+0x254>)
 80016dc:	f002 f888 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4817      	ldr	r0, [pc, #92]	; (8001750 <MX_GPIO_Init+0x254>)
 80016f4:	f002 f87c 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D6_Pin;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4811      	ldr	r0, [pc, #68]	; (8001754 <MX_GPIO_Init+0x258>)
 8001710:	f002 f86e 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001714:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001726:	230b      	movs	r3, #11
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	4619      	mov	r1, r3
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_GPIO_Init+0x254>)
 8001732:	f002 f85d 	bl	80037f0 <HAL_GPIO_Init>

}
 8001736:	bf00      	nop
 8001738:	3730      	adds	r7, #48	; 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40021400 	.word	0x40021400
 8001748:	40020800 	.word	0x40020800
 800174c:	40020400 	.word	0x40020400
 8001750:	40021800 	.word	0x40021800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	10110000 	.word	0x10110000
 800175c:	40020000 	.word	0x40020000

08001760 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MX_I2C1_Init+0x74>)
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <MX_I2C1_Init+0x78>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_I2C1_Init+0x74>)
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <MX_I2C1_Init+0x7c>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_I2C1_Init+0x74>)
 8001778:	2201      	movs	r2, #1
 800177a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <MX_I2C1_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_I2C1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_I2C1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_I2C1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <MX_I2C1_Init+0x74>)
 800179c:	f002 fa08 	bl	8003bb0 <HAL_I2C_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017a6:	f000 fcdb 	bl	8002160 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <MX_I2C1_Init+0x74>)
 80017ae:	f002 fe59 	bl	8004464 <HAL_I2CEx_ConfigAnalogFilter>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017b8:	f000 fcd2 	bl	8002160 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017bc:	2100      	movs	r1, #0
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_I2C1_Init+0x74>)
 80017c0:	f002 fe9b 	bl	80044fa <HAL_I2CEx_ConfigDigitalFilter>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ca:	f000 fcc9 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000320 	.word	0x20000320
 80017d8:	40005400 	.word	0x40005400
 80017dc:	00808cd2 	.word	0x00808cd2

080017e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_I2C_MspInit+0x7c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d128      	bne.n	8001854 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_I2C_MspInit+0x80>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_I2C_MspInit+0x80>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_I2C_MspInit+0x80>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800181a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001820:	2312      	movs	r3, #18
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182c:	2304      	movs	r3, #4
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_I2C_MspInit+0x84>)
 8001838:	f001 ffda 	bl	80037f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_I2C_MspInit+0x80>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_I2C_MspInit+0x80>)
 8001842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_I2C_MspInit+0x80>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005400 	.word	0x40005400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020400 	.word	0x40020400

08001868 <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6898      	ldr	r0, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	899b      	ldrh	r3, [r3, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	4619      	mov	r1, r3
 8001880:	f002 f962 	bl	8003b48 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7d9b      	ldrb	r3, [r3, #22]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d115      	bne.n	80018b8 <lcd_write_command+0x50>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	7f1b      	ldrb	r3, [r3, #28]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <lcd_write_command+0x3c>
    {
      lcd_write(hlcd, (command >> 4), LCD_NIB);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2204      	movs	r2, #4
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f842 	bl	8001928 <lcd_write>
    }
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2204      	movs	r2, #4
 80018ae:	4619      	mov	r1, r3
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f839 	bl	8001928 <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 80018b6:	e005      	b.n	80018c4 <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	2208      	movs	r2, #8
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f832 	bl	8001928 <lcd_write>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6898      	ldr	r0, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	899b      	ldrh	r3, [r3, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4619      	mov	r1, r3
 80018e4:	f002 f930 	bl	8003b48 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7d9b      	ldrb	r3, [r3, #22]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2204      	movs	r2, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f814 	bl	8001928 <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 8001900:	78fb      	ldrb	r3, [r7, #3]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2204      	movs	r2, #4
 800190a:	4619      	mov	r1, r3
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f80b 	bl	8001928 <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 8001912:	e005      	b.n	8001920 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	2208      	movs	r2, #8
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f000 f804 	bl	8001928 <lcd_write>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
 8001934:	4613      	mov	r3, r2
 8001936:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6918      	ldr	r0, [r3, #16]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	8a9b      	ldrh	r3, [r3, #20]
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	f002 f900 	bl	8003b48 <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e019      	b.n	8001982 <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	8819      	ldrh	r1, [r3, #0]
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	fa42 f303 	asr.w	r3, r2, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	f002 f8e6 	bl	8003b48 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	3301      	adds	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	78bb      	ldrb	r3, [r7, #2]
 8001986:	429a      	cmp	r2, r3
 8001988:	d3e1      	bcc.n	800194e <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6918      	ldr	r0, [r3, #16]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	8a9b      	ldrh	r3, [r3, #20]
 8001992:	2200      	movs	r2, #0
 8001994:	4619      	mov	r1, r3
 8001996:	f002 f8d7 	bl	8003b48 <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 800199a:	2132      	movs	r1, #50	; 0x32
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f804 	bl	80019aa <lcd_delay_us>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 f82c 	bl	8005a20 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 80019c8:	bf00      	nop
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f8      	bhi.n	80019ca <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4618      	mov	r0, r3
 80019de:	f004 f88f 	bl	8005b00 <HAL_TIM_Base_Stop>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 80019f8:	f643 315f 	movw	r1, #15199	; 0x3b5f
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffd4 	bl	80019aa <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	7d9b      	ldrb	r3, [r3, #22]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d120      	bne.n	8001a4c <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff2b 	bl	8001868 <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001a12:	f241 0167 	movw	r1, #4199	; 0x1067
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ffc7 	bl	80019aa <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff22 	bl	8001868 <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001a24:	21c8      	movs	r1, #200	; 0xc8
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffbf 	bl	80019aa <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 8001a2c:	2103      	movs	r1, #3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ff1a 	bl	8001868 <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 8001a34:	2102      	movs	r1, #2
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff ff16 	bl	8001868 <lcd_write_command>

    hlcd->IsInitialized = 1;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 8001a42:	2128      	movs	r1, #40	; 0x28
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff0f 	bl	8001868 <lcd_write_command>
 8001a4a:	e01f      	b.n	8001a8c <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7d9b      	ldrb	r3, [r3, #22]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d11b      	bne.n	8001a8c <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001a54:	2130      	movs	r1, #48	; 0x30
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff06 	bl	8001868 <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001a5c:	f241 0167 	movw	r1, #4199	; 0x1067
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffa2 	bl	80019aa <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001a66:	2130      	movs	r1, #48	; 0x30
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fefd 	bl	8001868 <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001a6e:	21c8      	movs	r1, #200	; 0xc8
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff9a 	bl	80019aa <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 8001a76:	2130      	movs	r1, #48	; 0x30
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff fef5 	bl	8001868 <lcd_write_command>

	hlcd->IsInitialized = 1;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 8001a84:	2138      	movs	r1, #56	; 0x38
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff feee 	bl	8001868 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff feea 	bl	8001868 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 8001a94:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ff86 	bl	80019aa <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001a9e:	210c      	movs	r1, #12
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fee1 	bl	8001868 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 8001aa6:	2106      	movs	r1, #6
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fedd 	bl	8001868 <lcd_write_command>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 8001ab6:	b590      	push	{r4, r7, lr}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e00a      	b.n	8001adc <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fefb 	bl	80018cc <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
 8001adc:	7bfc      	ldrb	r4, [r7, #15]
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f7fe fb96 	bl	8000210 <strlen>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	429c      	cmp	r4, r3
 8001ae8:	d3ed      	bcc.n	8001ac6 <LCD_printStr+0x10>
}
 8001aea:	bf00      	nop
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}

08001af4 <LCD_SetCursor>:
 * @param[in] row  Display row (line): 0 to N
 * @param[in] col  Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_SetCursor(LCD_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
 8001b00:	4613      	mov	r3, r2
 8001b02:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  lcd_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <LCD_SetCursor+0x30>)
 8001b08:	5cd2      	ldrb	r2, [r2, r3]
 8001b0a:	78bb      	ldrb	r3, [r7, #2]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	3b80      	subs	r3, #128	; 0x80
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fea6 	bl	8001868 <lcd_write_command>
  #endif
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	0800d69c 	.word	0x0800d69c

08001b28 <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 8001b28:	b40e      	push	{r1, r2, r3}
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b095      	sub	sp, #84	; 0x54
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 8001b32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b36:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b40:	4618      	mov	r0, r3
 8001b42:	f008 fad5 	bl	800a0f0 <vsiprintf>
  LCD_printStr(hlcd, buffer);
 8001b46:	f107 0310 	add.w	r3, r7, #16
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff ffb2 	bl	8001ab6 <LCD_printStr>
  va_end(args);
}
 8001b52:	bf00      	nop
 8001b54:	3754      	adds	r7, #84	; 0x54
 8001b56:	46bd      	mov	sp, r7
 8001b58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b5c:	b003      	add	sp, #12
 8001b5e:	4770      	bx	lr

08001b60 <__io_putchar>:
uint8_t value;
int rand2;
uint32_t adc,adc2;

int __io_putchar(int ch)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b0a      	cmp	r3, #10
 8001b6c:	d109      	bne.n	8001b82 <__io_putchar+0x22>
	{
		int ch2='\r';
 8001b6e:	230d      	movs	r3, #13
 8001b70:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 8001b72:	f107 010c 	add.w	r1, r7, #12
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <__io_putchar+0x3c>)
 8001b7e:	f005 f991 	bl	8006ea4 <HAL_UART_Transmit>

	}
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001b82:	1d39      	adds	r1, r7, #4
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4804      	ldr	r0, [pc, #16]	; (8001b9c <__io_putchar+0x3c>)
 8001b8c:	f005 f98a 	bl	8006ea4 <HAL_UART_Transmit>
	return ch;
 8001b90:	687b      	ldr	r3, [r7, #4]
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200004b8 	.word	0x200004b8

08001ba0 <losowa>:
int c=10;
int m=89;
int los=0;
float x=0;
float losowa()
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0


	    los=(a*los+c)%m;
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <losowa+0x90>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <losowa+0x94>)
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	fb02 f203 	mul.w	r2, r2, r3
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <losowa+0x98>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <losowa+0x9c>)
 8001bb8:	6812      	ldr	r2, [r2, #0]
 8001bba:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bbe:	fb02 f201 	mul.w	r2, r2, r1
 8001bc2:	1a9b      	subs	r3, r3, r2
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <losowa+0x94>)
 8001bc6:	6013      	str	r3, [r2, #0]
	    x=(float)los/(float)m-0.5;
 8001bc8:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <losowa+0x94>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <losowa+0x9c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <losowa+0xa0>)
 8001bee:	edc3 7a00 	vstr	s15, [r3]
	    x=abs(x*400);
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <losowa+0xa0>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001c44 <losowa+0xa4>
 8001bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c04:	ee17 3a90 	vmov	r3, s15
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfb8      	it	lt
 8001c0c:	425b      	neglt	r3, r3
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <losowa+0xa0>)
 8001c18:	edc3 7a00 	vstr	s15, [r3]

	    return x;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <losowa+0xa0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	ee07 3a90 	vmov	s15, r3
}
 8001c24:	eeb0 0a67 	vmov.f32	s0, s15
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000054 	.word	0x20000054
 8001c34:	200002c0 	.word	0x200002c0
 8001c38:	20000058 	.word	0x20000058
 8001c3c:	2000005c 	.word	0x2000005c
 8001c40:	200002c4 	.word	0x200002c4
 8001c44:	43c80000 	.word	0x43c80000

08001c48 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
	if(hadc==&hadc1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <HAL_ADC_ConvCpltCallback+0x54>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d11c      	bne.n	8001c92 <HAL_ADC_ConvCpltCallback+0x4a>
	{
		adc=HAL_ADC_GetValue(&hadc1);
 8001c58:	4810      	ldr	r0, [pc, #64]	; (8001c9c <HAL_ADC_ConvCpltCallback+0x54>)
 8001c5a:	f001 f9b6 	bl	8002fca <HAL_ADC_GetValue>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <HAL_ADC_ConvCpltCallback+0x58>)
 8001c62:	6013      	str	r3, [r2, #0]
		if(abs(adc-adc2)>50)
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_ADC_ConvCpltCallback+0x58>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bfb8      	it	lt
 8001c72:	425b      	neglt	r3, r3
 8001c74:	2b32      	cmp	r3, #50	; 0x32
 8001c76:	dd0c      	ble.n	8001c92 <HAL_ADC_ConvCpltCallback+0x4a>
		{

			value_SP=70*adc/4096;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_ADC_ConvCpltCallback+0x58>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2246      	movs	r2, #70	; 0x46
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	0b1b      	lsrs	r3, r3, #12
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_ADC_ConvCpltCallback+0x60>)
 8001c88:	601a      	str	r2, [r3, #0]
			adc2=adc;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_ADC_ConvCpltCallback+0x58>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001c90:	6013      	str	r3, [r2, #0]
		}

	}

}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200002d8 	.word	0x200002d8
 8001ca0:	20000378 	.word	0x20000378
 8001ca4:	2000037c 	.word	0x2000037c
 8001ca8:	20000044 	.word	0x20000044

08001cac <HAL_TIM_PeriodElapsedCallback>:

//PID
int j=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d17d      	bne.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x10c>
  {

	 //PV
	 value_PV=BH1750_ReadLux(&hbh1750_1);
 8001cbc:	485b      	ldr	r0, [pc, #364]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001cbe:	f7ff fbef 	bl	80014a0 <BH1750_ReadLux>
 8001cc2:	eef0 7a40 	vmov.f32	s15, s0
 8001cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cca:	ee17 2a90 	vmov	r2, s15
 8001cce:	4b58      	ldr	r3, [pc, #352]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001cd0:	601a      	str	r2, [r3, #0]


	 value_U=pid_calculate(PID, value_SP, value_PV);
 8001cd2:	4b58      	ldr	r3, [pc, #352]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001cd8:	6811      	ldr	r1, [r2, #0]
 8001cda:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff f9d8 	bl	8001094 <pid_calculate>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a55      	ldr	r2, [pc, #340]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001ce8:	6013      	str	r3, [r2, #0]
	 PWM=__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8001cea:	4b55      	ldr	r3, [pc, #340]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001cf4:	601a      	str	r2, [r3, #0]
	 PWM=PWM+value_U;
 8001cf6:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4413      	add	r3, r2
 8001d00:	4a50      	ldr	r2, [pc, #320]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d02:	6013      	str	r3, [r2, #0]
	 if(PWM<0)
 8001d04:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	da03      	bge.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0x68>
	 {
		 PWM=0;
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e008      	b.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x7a>
	 }
	 else if(PWM>1000)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d1c:	dd03      	ble.n	8001d26 <HAL_TIM_PeriodElapsedCallback+0x7a>
	 {
		 PWM=1000;
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d24:	601a      	str	r2, [r3, #0]
	 }
	 printf("PV%dSP%dCV%d\n",value_PV,value_SP,PWM);
 8001d26:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b45      	ldr	r3, [pc, #276]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4845      	ldr	r0, [pc, #276]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d34:	f007 fa64 	bl	8009200 <iprintf>
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b40      	ldr	r3, [pc, #256]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
	 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d46:	4841      	ldr	r0, [pc, #260]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001d48:	f001 ff17 	bl	8003b7a <HAL_GPIO_TogglePin>

	 float uchyb=((float)value_SP-(float)value_PV)/(float)value_SP*100;
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	4b35      	ldr	r3, [pc, #212]	; (8001e30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	ee07 3a90 	vmov	s15, r3
 8001d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d68:	4b33      	ldr	r3, [pc, #204]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d78:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001e50 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	edc7 7a03 	vstr	s15, [r7, #12]
	 LCD_SetCursor(&hlcd1, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	4832      	ldr	r0, [pc, #200]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001d8a:	f7ff feb3 	bl	8001af4 <LCD_SetCursor>
	 LCD_printf(&hlcd1, "PWM: %d",PWM);
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4930      	ldr	r1, [pc, #192]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001d96:	482f      	ldr	r0, [pc, #188]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001d98:	f7ff fec6 	bl	8001b28 <LCD_printf>
	 LCD_SetCursor(&hlcd1, 1, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2101      	movs	r1, #1
 8001da0:	482c      	ldr	r0, [pc, #176]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001da2:	f7ff fea7 	bl	8001af4 <LCD_SetCursor>
	 LCD_printf(&hlcd1, "Uchyb: %.2f",uchyb);
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f7fe fbee 	bl	8000588 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	492a      	ldr	r1, [pc, #168]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001db2:	4828      	ldr	r0, [pc, #160]	; (8001e54 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001db4:	f7ff feb8 	bl	8001b28 <LCD_printf>


	  }

  if (htim == &htim10)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d12f      	bne.n	8001e20 <HAL_TIM_PeriodElapsedCallback+0x174>
  {
	  if(zak==1)
 8001dc0:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dca:	eef4 7a47 	vcmp.f32	s15, s14
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	d112      	bne.n	8001dfa <HAL_TIM_PeriodElapsedCallback+0x14e>
	  {
	  rand2=losowa();
 8001dd4:	f7ff fee4 	bl	8001ba0 <losowa>
 8001dd8:	eef0 7a40 	vmov.f32	s15, s0
 8001ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de0:	ee17 2a90 	vmov	r2, s15
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001de6:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, rand2);
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	639a      	str	r2, [r3, #56]	; 0x38
	  j=1;
 8001df2:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		j=0;
	  }

  }
}
 8001df8:	e012      	b.n	8001e20 <HAL_TIM_PeriodElapsedCallback+0x174>
	  else if(zak==0&&j==1)
 8001dfa:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	d10a      	bne.n	8001e20 <HAL_TIM_PeriodElapsedCallback+0x174>
 8001e0a:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_PeriodElapsedCallback+0x174>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2200      	movs	r2, #0
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
		j=0;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000420 	.word	0x20000420
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000380 	.word	0x20000380
 8001e34:	2000036c 	.word	0x2000036c
 8001e38:	20000044 	.word	0x20000044
 8001e3c:	20000374 	.word	0x20000374
 8001e40:	200003d4 	.word	0x200003d4
 8001e44:	20000264 	.word	0x20000264
 8001e48:	0800d658 	.word	0x0800d658
 8001e4c:	40020400 	.word	0x40020400
 8001e50:	42c80000 	.word	0x42c80000
 8001e54:	20000024 	.word	0x20000024
 8001e58:	0800d668 	.word	0x0800d668
 8001e5c:	0800d670 	.word	0x0800d670
 8001e60:	20000388 	.word	0x20000388
 8001e64:	20000260 	.word	0x20000260
 8001e68:	20000370 	.word	0x20000370
 8001e6c:	200002c8 	.word	0x200002c8

08001e70 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af04      	add	r7, sp, #16
 8001e76:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <HAL_UART_RxCpltCallback+0xbc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d14a      	bne.n	8001f18 <HAL_UART_RxCpltCallback+0xa8>
	{
		if (value == '\r' || value == '\n')
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_UART_RxCpltCallback+0xc0>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b0d      	cmp	r3, #13
 8001e88:	d003      	beq.n	8001e92 <HAL_UART_RxCpltCallback+0x22>
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_UART_RxCpltCallback+0xc0>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b0a      	cmp	r3, #10
 8001e90:	d132      	bne.n	8001ef8 <HAL_UART_RxCpltCallback+0x88>
			{

				if (line_length > 0)
 8001e92:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <HAL_UART_RxCpltCallback+0xc4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d03e      	beq.n	8001f18 <HAL_UART_RxCpltCallback+0xa8>
				{

					line_buffer[line_length] = '\0';
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_UART_RxCpltCallback+0xc4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_UART_RxCpltCallback+0xc8>)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	54d1      	strb	r1, [r2, r3]
					sscanf(line_buffer,"Sp%dKp%fKd%fKi%fZ%f",&value_SP,&kp_init,&kd_init,&ki_init,&zak);
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_UART_RxCpltCallback+0xcc>)
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_UART_RxCpltCallback+0xd0>)
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_UART_RxCpltCallback+0xd4>)
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_UART_RxCpltCallback+0xd8>)
 8001eb2:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_UART_RxCpltCallback+0xdc>)
 8001eb4:	4926      	ldr	r1, [pc, #152]	; (8001f50 <HAL_UART_RxCpltCallback+0xe0>)
 8001eb6:	4820      	ldr	r0, [pc, #128]	; (8001f38 <HAL_UART_RxCpltCallback+0xc8>)
 8001eb8:	f007 f9e0 	bl	800927c <siscanf>
					pid_reset(&PID);
 8001ebc:	4825      	ldr	r0, [pc, #148]	; (8001f54 <HAL_UART_RxCpltCallback+0xe4>)
 8001ebe:	f7ff f8d8 	bl	8001072 <pid_reset>
					pid_init(PID,kp_init,ki_init,kd_init,anti_windup_limit_init);
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_UART_RxCpltCallback+0xe4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_UART_RxCpltCallback+0xd8>)
 8001ec8:	edd2 7a00 	vldr	s15, [r2]
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_UART_RxCpltCallback+0xd0>)
 8001ece:	ed92 7a00 	vldr	s14, [r2]
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_UART_RxCpltCallback+0xd4>)
 8001ed4:	edd2 6a00 	vldr	s13, [r2]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	; (8001f58 <HAL_UART_RxCpltCallback+0xe8>)
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	4611      	mov	r1, r2
 8001ede:	eeb0 1a66 	vmov.f32	s2, s13
 8001ee2:	eef0 0a47 	vmov.f32	s1, s14
 8001ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f89e 	bl	800102c <pid_init>
					/*PWM=0;
					__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);*/



					line_length = 0;
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_UART_RxCpltCallback+0xc4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
				if (line_length > 0)
 8001ef6:	e00f      	b.n	8001f18 <HAL_UART_RxCpltCallback+0xa8>
				}
			}
			else
			{
				if (line_length >= LINE_MAX_LENGTH)
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_UART_RxCpltCallback+0xc4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b4f      	cmp	r3, #79	; 0x4f
 8001efe:	d902      	bls.n	8001f06 <HAL_UART_RxCpltCallback+0x96>
				{
					// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
					line_length = 0;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_UART_RxCpltCallback+0xc4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
				}
				// dopisujemy wartość do bufora
				line_buffer[line_length++] = value;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_UART_RxCpltCallback+0xc4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	4909      	ldr	r1, [pc, #36]	; (8001f34 <HAL_UART_RxCpltCallback+0xc4>)
 8001f0e:	600a      	str	r2, [r1, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_UART_RxCpltCallback+0xc0>)
 8001f12:	7811      	ldrb	r1, [r2, #0]
 8001f14:	4a08      	ldr	r2, [pc, #32]	; (8001f38 <HAL_UART_RxCpltCallback+0xc8>)
 8001f16:	54d1      	strb	r1, [r2, r3]
			}
	}
	  HAL_UART_Receive_IT(&huart3, &value,1);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4905      	ldr	r1, [pc, #20]	; (8001f30 <HAL_UART_RxCpltCallback+0xc0>)
 8001f1c:	480f      	ldr	r0, [pc, #60]	; (8001f5c <HAL_UART_RxCpltCallback+0xec>)
 8001f1e:	f005 f854 	bl	8006fca <HAL_UART_Receive_IT>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40004800 	.word	0x40004800
 8001f30:	20000384 	.word	0x20000384
 8001f34:	200002bc 	.word	0x200002bc
 8001f38:	20000268 	.word	0x20000268
 8001f3c:	20000260 	.word	0x20000260
 8001f40:	2000004c 	.word	0x2000004c
 8001f44:	2000025c 	.word	0x2000025c
 8001f48:	20000048 	.word	0x20000048
 8001f4c:	20000044 	.word	0x20000044
 8001f50:	0800d67c 	.word	0x0800d67c
 8001f54:	2000036c 	.word	0x2000036c
 8001f58:	20000050 	.word	0x20000050
 8001f5c:	200004b8 	.word	0x200004b8

08001f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f64:	f000 fd53 	bl	8002a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f68:	f000 f868 	bl	800203c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f6c:	f7ff fac6 	bl	80014fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001f70:	f000 fc1e 	bl	80027b0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f74:	f000 fc98 	bl	80028a8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001f78:	f7ff fbf2 	bl	8001760 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001f7c:	f000 fa44 	bl	8002408 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001f80:	f000 fac4 	bl	800250c <MX_TIM6_Init>
  MX_ADC1_Init();
 8001f84:	f7ff f918 	bl	80011b8 <MX_ADC1_Init>
  MX_TIM7_Init();
 8001f88:	f000 faf8 	bl	800257c <MX_TIM7_Init>
  MX_TIM10_Init();
 8001f8c:	f000 fb2c 	bl	80025e8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hbh1750_1);
 8001f90:	481d      	ldr	r0, [pc, #116]	; (8002008 <main+0xa8>)
 8001f92:	f7ff fa5f 	bl	8001454 <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001f96:	481d      	ldr	r0, [pc, #116]	; (800200c <main+0xac>)
 8001f98:	f003 fdda 	bl	8005b50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001f9c:	481c      	ldr	r0, [pc, #112]	; (8002010 <main+0xb0>)
 8001f9e:	f003 fdd7 	bl	8005b50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001fa2:	481c      	ldr	r0, [pc, #112]	; (8002014 <main+0xb4>)
 8001fa4:	f003 fdd4 	bl	8005b50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4818      	ldr	r0, [pc, #96]	; (800200c <main+0xac>)
 8001fac:	f003 feaa 	bl	8005d04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001fb0:	2104      	movs	r1, #4
 8001fb2:	4816      	ldr	r0, [pc, #88]	; (800200c <main+0xac>)
 8001fb4:	f003 fea6 	bl	8005d04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001fb8:	2108      	movs	r1, #8
 8001fba:	4814      	ldr	r0, [pc, #80]	; (800200c <main+0xac>)
 8001fbc:	f003 fea2 	bl	8005d04 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart3, &value,1);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4915      	ldr	r1, [pc, #84]	; (8002018 <main+0xb8>)
 8001fc4:	4815      	ldr	r0, [pc, #84]	; (800201c <main+0xbc>)
 8001fc6:	f005 f800 	bl	8006fca <HAL_UART_Receive_IT>
  //pid
  pid_init(PID,kp_init,ki_init,kd_init,anti_windup_limit_init);
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <main+0xc0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a15      	ldr	r2, [pc, #84]	; (8002024 <main+0xc4>)
 8001fd0:	edd2 7a00 	vldr	s15, [r2]
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <main+0xc8>)
 8001fd6:	ed92 7a00 	vldr	s14, [r2]
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <main+0xcc>)
 8001fdc:	edd2 6a00 	vldr	s13, [r2]
 8001fe0:	4a13      	ldr	r2, [pc, #76]	; (8002030 <main+0xd0>)
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8001fea:	eef0 0a47 	vmov.f32	s1, s14
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff f81a 	bl	800102c <pid_init>
  LCD_Init(&hlcd1);
 8001ff8:	480e      	ldr	r0, [pc, #56]	; (8002034 <main+0xd4>)
 8001ffa:	f7ff fcf6 	bl	80019ea <LCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_ADC_Start_IT(&hadc1);
 8001ffe:	480e      	ldr	r0, [pc, #56]	; (8002038 <main+0xd8>)
 8002000:	f000 fdca 	bl	8002b98 <HAL_ADC_Start_IT>
 8002004:	e7fb      	b.n	8001ffe <main+0x9e>
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000
 800200c:	200003d4 	.word	0x200003d4
 8002010:	20000420 	.word	0x20000420
 8002014:	20000388 	.word	0x20000388
 8002018:	20000384 	.word	0x20000384
 800201c:	200004b8 	.word	0x200004b8
 8002020:	2000036c 	.word	0x2000036c
 8002024:	20000048 	.word	0x20000048
 8002028:	2000004c 	.word	0x2000004c
 800202c:	2000025c 	.word	0x2000025c
 8002030:	20000050 	.word	0x20000050
 8002034:	20000024 	.word	0x20000024
 8002038:	200002d8 	.word	0x200002d8

0800203c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b0b4      	sub	sp, #208	; 0xd0
 8002040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002042:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002046:	2230      	movs	r2, #48	; 0x30
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f006 fa56 	bl	80084fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002050:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	2284      	movs	r2, #132	; 0x84
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f006 fa47 	bl	80084fc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800206e:	f002 fbd9 	bl	8004824 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <SystemClock_Config+0x118>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	4a37      	ldr	r2, [pc, #220]	; (8002154 <SystemClock_Config+0x118>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207c:	6413      	str	r3, [r2, #64]	; 0x40
 800207e:	4b35      	ldr	r3, [pc, #212]	; (8002154 <SystemClock_Config+0x118>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <SystemClock_Config+0x11c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002092:	4a31      	ldr	r2, [pc, #196]	; (8002158 <SystemClock_Config+0x11c>)
 8002094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <SystemClock_Config+0x11c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020a2:	603b      	str	r3, [r7, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80020b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80020c2:	2304      	movs	r3, #4
 80020c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80020c8:	2348      	movs	r3, #72	; 0x48
 80020ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020de:	4618      	mov	r0, r3
 80020e0:	f002 fbb0 	bl	8004844 <HAL_RCC_OscConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80020ea:	f000 f839 	bl	8002160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ee:	230f      	movs	r3, #15
 80020f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f4:	2302      	movs	r3, #2
 80020f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800210e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002112:	2102      	movs	r1, #2
 8002114:	4618      	mov	r0, r3
 8002116:	f002 fe39 	bl	8004d8c <HAL_RCC_ClockConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002120:	f000 f81e 	bl	8002160 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <SystemClock_Config+0x120>)
 8002126:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002128:	2300      	movs	r3, #0
 800212a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800212c:	2300      	movs	r3, #0
 800212e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	4618      	mov	r0, r3
 800213c:	f003 f828 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8002146:	f000 f80b 	bl	8002160 <Error_Handler>
  }
}
 800214a:	bf00      	nop
 800214c:	37d0      	adds	r7, #208	; 0xd0
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40007000 	.word	0x40007000
 800215c:	00204100 	.word	0x00204100

08002160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002164:	b672      	cpsid	i
}
 8002166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002168:	e7fe      	b.n	8002168 <Error_Handler+0x8>
	...

0800216c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_MspInit+0x44>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	4a0e      	ldr	r2, [pc, #56]	; (80021b0 <HAL_MspInit+0x44>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	; 0x40
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_MspInit+0x44>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <HAL_MspInit+0x44>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a08      	ldr	r2, [pc, #32]	; (80021b0 <HAL_MspInit+0x44>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_MspInit+0x44>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <NMI_Handler+0x4>

080021ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <MemManage_Handler+0x4>

080021c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002200:	f000 fc42 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <ADC_IRQHandler+0x10>)
 800220e:	f000 fd9b 	bl	8002d48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200002d8 	.word	0x200002d8

0800221c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002222:	f003 fe69 	bl	8005ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000388 	.word	0x20000388

08002230 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <USART3_IRQHandler+0x10>)
 8002236:	f004 ff05 	bl	8007044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200004b8 	.word	0x200004b8

08002244 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM6_DAC_IRQHandler+0x10>)
 800224a:	f003 fe55 	bl	8005ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000420 	.word	0x20000420

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_kill>:

int _kill(int pid, int sig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002272:	f006 f919 	bl	80084a8 <__errno>
 8002276:	4603      	mov	r3, r0
 8002278:	2216      	movs	r2, #22
 800227a:	601a      	str	r2, [r3, #0]
	return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_exit>:

void _exit (int status)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ffe7 	bl	8002268 <_kill>
	while (1) {}		/* Make sure we hang here */
 800229a:	e7fe      	b.n	800229a <_exit+0x12>

0800229c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e00a      	b.n	80022c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ae:	f3af 8000 	nop.w
 80022b2:	4601      	mov	r1, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	b2ca      	uxtb	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf0      	blt.n	80022ae <_read+0x12>
	}

return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e009      	b.n	80022fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fc35 	bl	8001b60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf1      	blt.n	80022e8 <_write+0x12>
	}
	return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_close>:

int _close(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
	return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002336:	605a      	str	r2, [r3, #4]
	return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <_isatty>:

int _isatty(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	return 1;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <_sbrk+0x5c>)
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <_sbrk+0x60>)
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <_sbrk+0x64>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <_sbrk+0x68>)
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d207      	bcs.n	80023b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a8:	f006 f87e 	bl	80084a8 <__errno>
 80023ac:	4603      	mov	r3, r0
 80023ae:	220c      	movs	r2, #12
 80023b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e009      	b.n	80023cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <_sbrk+0x64>)
 80023c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20050000 	.word	0x20050000
 80023d8:	00000400 	.word	0x00000400
 80023dc:	200002cc 	.word	0x200002cc
 80023e0:	20000958 	.word	0x20000958

080023e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <SystemInit+0x20>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <SystemInit+0x20>)
 80023f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08e      	sub	sp, #56	; 0x38
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	605a      	str	r2, [r3, #4]
 8002418:	609a      	str	r2, [r3, #8]
 800241a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002428:	463b      	mov	r3, r7
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	615a      	str	r2, [r3, #20]
 8002438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800243a:	4b32      	ldr	r3, [pc, #200]	; (8002504 <MX_TIM3_Init+0xfc>)
 800243c:	4a32      	ldr	r2, [pc, #200]	; (8002508 <MX_TIM3_Init+0x100>)
 800243e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002440:	4b30      	ldr	r3, [pc, #192]	; (8002504 <MX_TIM3_Init+0xfc>)
 8002442:	2247      	movs	r2, #71	; 0x47
 8002444:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b2f      	ldr	r3, [pc, #188]	; (8002504 <MX_TIM3_Init+0xfc>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <MX_TIM3_Init+0xfc>)
 800244e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002452:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <MX_TIM3_Init+0xfc>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <MX_TIM3_Init+0xfc>)
 800245c:	2200      	movs	r2, #0
 800245e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002460:	4828      	ldr	r0, [pc, #160]	; (8002504 <MX_TIM3_Init+0xfc>)
 8002462:	f003 fa85 	bl	8005970 <HAL_TIM_Base_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800246c:	f7ff fe78 	bl	8002160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800247a:	4619      	mov	r1, r3
 800247c:	4821      	ldr	r0, [pc, #132]	; (8002504 <MX_TIM3_Init+0xfc>)
 800247e:	f003 ff6b 	bl	8006358 <HAL_TIM_ConfigClockSource>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002488:	f7ff fe6a 	bl	8002160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800248c:	481d      	ldr	r0, [pc, #116]	; (8002504 <MX_TIM3_Init+0xfc>)
 800248e:	f003 fbd7 	bl	8005c40 <HAL_TIM_PWM_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002498:	f7ff fe62 	bl	8002160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	4816      	ldr	r0, [pc, #88]	; (8002504 <MX_TIM3_Init+0xfc>)
 80024ac:	f004 fc00 	bl	8006cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80024b6:	f7ff fe53 	bl	8002160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ba:	2360      	movs	r3, #96	; 0x60
 80024bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ca:	463b      	mov	r3, r7
 80024cc:	2200      	movs	r2, #0
 80024ce:	4619      	mov	r1, r3
 80024d0:	480c      	ldr	r0, [pc, #48]	; (8002504 <MX_TIM3_Init+0xfc>)
 80024d2:	f003 fe31 	bl	8006138 <HAL_TIM_PWM_ConfigChannel>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80024dc:	f7ff fe40 	bl	8002160 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e0:	463b      	mov	r3, r7
 80024e2:	2204      	movs	r2, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	4807      	ldr	r0, [pc, #28]	; (8002504 <MX_TIM3_Init+0xfc>)
 80024e8:	f003 fe26 	bl	8006138 <HAL_TIM_PWM_ConfigChannel>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80024f2:	f7ff fe35 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024f6:	4803      	ldr	r0, [pc, #12]	; (8002504 <MX_TIM3_Init+0xfc>)
 80024f8:	f000 f904 	bl	8002704 <HAL_TIM_MspPostInit>

}
 80024fc:	bf00      	nop
 80024fe:	3738      	adds	r7, #56	; 0x38
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200003d4 	.word	0x200003d4
 8002508:	40000400 	.word	0x40000400

0800250c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <MX_TIM6_Init+0x68>)
 800251e:	4a16      	ldr	r2, [pc, #88]	; (8002578 <MX_TIM6_Init+0x6c>)
 8002520:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3599;
 8002522:	4b14      	ldr	r3, [pc, #80]	; (8002574 <MX_TIM6_Init+0x68>)
 8002524:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002528:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <MX_TIM6_Init+0x68>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_TIM6_Init+0x68>)
 8002532:	f242 720f 	movw	r2, #9999	; 0x270f
 8002536:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_TIM6_Init+0x68>)
 800253a:	2200      	movs	r2, #0
 800253c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800253e:	480d      	ldr	r0, [pc, #52]	; (8002574 <MX_TIM6_Init+0x68>)
 8002540:	f003 fa16 	bl	8005970 <HAL_TIM_Base_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800254a:	f7ff fe09 	bl	8002160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <MX_TIM6_Init+0x68>)
 800255c:	f004 fba8 	bl	8006cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002566:	f7ff fdfb 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000420 	.word	0x20000420
 8002578:	40001000 	.word	0x40001000

0800257c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <MX_TIM7_Init+0x64>)
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <MX_TIM7_Init+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 109;
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <MX_TIM7_Init+0x64>)
 8002594:	226d      	movs	r2, #109	; 0x6d
 8002596:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_TIM7_Init+0x64>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <MX_TIM7_Init+0x64>)
 80025a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_TIM7_Init+0x64>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025ac:	480c      	ldr	r0, [pc, #48]	; (80025e0 <MX_TIM7_Init+0x64>)
 80025ae:	f003 f9df 	bl	8005970 <HAL_TIM_Base_Init>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80025b8:	f7ff fdd2 	bl	8002160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025bc:	2300      	movs	r3, #0
 80025be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	4619      	mov	r1, r3
 80025c8:	4805      	ldr	r0, [pc, #20]	; (80025e0 <MX_TIM7_Init+0x64>)
 80025ca:	f004 fb71 	bl	8006cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80025d4:	f7ff fdc4 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000046c 	.word	0x2000046c
 80025e4:	40001400 	.word	0x40001400

080025e8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025ec:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <MX_TIM10_Init+0x40>)
 80025ee:	4a0f      	ldr	r2, [pc, #60]	; (800262c <MX_TIM10_Init+0x44>)
 80025f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 7199;
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <MX_TIM10_Init+0x40>)
 80025f4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80025f8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fa:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <MX_TIM10_Init+0x40>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 19999;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <MX_TIM10_Init+0x40>)
 8002602:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002606:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <MX_TIM10_Init+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_TIM10_Init+0x40>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002614:	4804      	ldr	r0, [pc, #16]	; (8002628 <MX_TIM10_Init+0x40>)
 8002616:	f003 f9ab 	bl	8005970 <HAL_TIM_Base_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002620:	f7ff fd9e 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000388 	.word	0x20000388
 800262c:	40014400 	.word	0x40014400

08002630 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <HAL_TIM_Base_MspInit+0xc0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d10c      	bne.n	800265c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002642:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800265a:	e044      	b.n	80026e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a25      	ldr	r2, [pc, #148]	; (80026f8 <HAL_TIM_Base_MspInit+0xc8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d114      	bne.n	8002690 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 800266c:	f043 0310 	orr.w	r3, r3, #16
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800267e:	2200      	movs	r2, #0
 8002680:	2100      	movs	r1, #0
 8002682:	2036      	movs	r0, #54	; 0x36
 8002684:	f000 ffeb 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002688:	2036      	movs	r0, #54	; 0x36
 800268a:	f001 f804 	bl	8003696 <HAL_NVIC_EnableIRQ>
}
 800268e:	e02a      	b.n	80026e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a19      	ldr	r2, [pc, #100]	; (80026fc <HAL_TIM_Base_MspInit+0xcc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 80026a0:	f043 0320 	orr.w	r3, r3, #32
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	e018      	b.n	80026e6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_TIM_Base_MspInit+0xd0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d113      	bne.n	80026e6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_TIM_Base_MspInit+0xc4>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2019      	movs	r0, #25
 80026dc:	f000 ffbf 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026e0:	2019      	movs	r0, #25
 80026e2:	f000 ffd8 	bl	8003696 <HAL_NVIC_EnableIRQ>
}
 80026e6:	bf00      	nop
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40001000 	.word	0x40001000
 80026fc:	40001400 	.word	0x40001400
 8002700:	40014400 	.word	0x40014400

08002704 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_TIM_MspPostInit+0x9c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d137      	bne.n	8002796 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_TIM_MspPostInit+0xa0>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <HAL_TIM_MspPostInit+0xa0>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <HAL_TIM_MspPostInit+0xa0>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_TIM_MspPostInit+0xa0>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_TIM_MspPostInit+0xa0>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_TIM_MspPostInit+0xa0>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002766:	2302      	movs	r3, #2
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	480d      	ldr	r0, [pc, #52]	; (80027a8 <HAL_TIM_MspPostInit+0xa4>)
 8002772:	f001 f83d 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002786:	2302      	movs	r3, #2
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	4806      	ldr	r0, [pc, #24]	; (80027ac <HAL_TIM_MspPostInit+0xa8>)
 8002792:	f001 f82d 	bl	80037f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40000400 	.word	0x40000400
 80027a4:	40023800 	.word	0x40023800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020800 	.word	0x40020800

080027b0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <MX_USART3_UART_Init+0x5c>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027f2:	4805      	ldr	r0, [pc, #20]	; (8002808 <MX_USART3_UART_Init+0x58>)
 80027f4:	f004 fb08 	bl	8006e08 <HAL_UART_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80027fe:	f7ff fcaf 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200004b8 	.word	0x200004b8
 800280c:	40004800 	.word	0x40004800

08002810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	; 0x28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_UART_MspInit+0x8c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d130      	bne.n	8002894 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_UART_MspInit+0x90>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_UART_MspInit+0x90>)
 8002838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800283c:	6413      	str	r3, [r2, #64]	; 0x40
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_UART_MspInit+0x90>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_UART_MspInit+0x90>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <HAL_UART_MspInit+0x90>)
 8002850:	f043 0308 	orr.w	r3, r3, #8
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_UART_MspInit+0x90>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002874:	2307      	movs	r3, #7
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	4619      	mov	r1, r3
 800287e:	4809      	ldr	r0, [pc, #36]	; (80028a4 <HAL_UART_MspInit+0x94>)
 8002880:	f000 ffb6 	bl	80037f0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002884:	2200      	movs	r2, #0
 8002886:	2100      	movs	r1, #0
 8002888:	2027      	movs	r0, #39	; 0x27
 800288a:	f000 fee8 	bl	800365e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800288e:	2027      	movs	r0, #39	; 0x27
 8002890:	f000 ff01 	bl	8003696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40004800 	.word	0x40004800
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40020c00 	.word	0x40020c00

080028a8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80028b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028b6:	2206      	movs	r2, #6
 80028b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80028ba:	4b11      	ldr	r3, [pc, #68]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028bc:	2202      	movs	r2, #2
 80028be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80028c0:	4b0f      	ldr	r3, [pc, #60]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028c8:	2202      	movs	r2, #2
 80028ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80028ec:	f001 fe51 	bl	8004592 <HAL_PCD_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80028f6:	f7ff fc33 	bl	8002160 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000053c 	.word	0x2000053c

08002904 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08a      	sub	sp, #40	; 0x28
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002924:	d141      	bne.n	80029aa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800293e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002950:	230a      	movs	r3, #10
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4817      	ldr	r0, [pc, #92]	; (80029b8 <HAL_PCD_MspInit+0xb4>)
 800295c:	f000 ff48 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002960:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002966:	2300      	movs	r3, #0
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4810      	ldr	r0, [pc, #64]	; (80029b8 <HAL_PCD_MspInit+0xb4>)
 8002976:	f000 ff3b 	bl	80037f0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 8002980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002984:	6353      	str	r3, [r2, #52]	; 0x34
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 8002988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_PCD_MspInit+0xb0>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029c2:	490e      	ldr	r1, [pc, #56]	; (80029fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c8:	e002      	b.n	80029d0 <LoopCopyDataInit>

080029ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ce:	3304      	adds	r3, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d4:	d3f9      	bcc.n	80029ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d8:	4c0b      	ldr	r4, [pc, #44]	; (8002a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029dc:	e001      	b.n	80029e2 <LoopFillZerobss>

080029de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e0:	3204      	adds	r2, #4

080029e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e4:	d3fb      	bcc.n	80029de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029e6:	f7ff fcfd 	bl	80023e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f005 fd63 	bl	80084b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7ff fab7 	bl	8001f60 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8002a00:	0800db94 	.word	0x0800db94
  ldr r2, =_sbss
 8002a04:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002a08:	20000954 	.word	0x20000954

08002a0c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <CAN1_RX0_IRQHandler>

08002a0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a12:	2003      	movs	r0, #3
 8002a14:	f000 fe18 	bl	8003648 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f000 f805 	bl	8002a28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a1e:	f7ff fba5 	bl	800216c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x54>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_InitTick+0x58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fe33 	bl	80036b2 <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00e      	b.n	8002a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d80a      	bhi.n	8002a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f000 fdfb 	bl	800365e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <HAL_InitTick+0x5c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000060 	.word	0x20000060
 8002a80:	20000068 	.word	0x20000068
 8002a84:	20000064 	.word	0x20000064

08002a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_IncTick+0x24>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_IncTick+0x24>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000068 	.word	0x20000068
 8002aac:	20000940 	.word	0x20000940

08002ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_GetTick+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000940 	.word	0x20000940

08002ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff ffee 	bl	8002ab0 <HAL_GetTick>
 8002ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae0:	d005      	beq.n	8002aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_Delay+0x44>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aee:	bf00      	nop
 8002af0:	f7ff ffde 	bl	8002ab0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d8f7      	bhi.n	8002af0 <HAL_Delay+0x28>
  {
  }
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000068 	.word	0x20000068

08002b10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e031      	b.n	8002b8a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe fc48 	bl	80013c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <HAL_ADC_Init+0x84>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fb9e 	bl	80032a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
 8002b7a:	e001      	b.n	8002b80 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	ffffeefd 	.word	0xffffeefd

08002b98 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d101      	bne.n	8002bb2 <HAL_ADC_Start_IT+0x1a>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e0b5      	b.n	8002d1e <HAL_ADC_Start_IT+0x186>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d018      	beq.n	8002bfa <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002bd8:	4b54      	ldr	r3, [pc, #336]	; (8002d2c <HAL_ADC_Start_IT+0x194>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a54      	ldr	r2, [pc, #336]	; (8002d30 <HAL_ADC_Start_IT+0x198>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0c9a      	lsrs	r2, r3, #18
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002bec:	e002      	b.n	8002bf4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f9      	bne.n	8002bee <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d17d      	bne.n	8002d04 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0c:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <HAL_ADC_Start_IT+0x19c>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d007      	beq.n	8002c36 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c2e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c42:	d106      	bne.n	8002c52 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	f023 0206 	bic.w	r2, r3, #6
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c50:	e002      	b.n	8002c58 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c68:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_ADC_Start_IT+0x1a0>)
 8002c76:	430b      	orrs	r3, r1
 8002c78:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002c7a:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <HAL_ADC_Start_IT+0x1a4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 031f 	and.w	r3, r3, #31
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10f      	bne.n	8002ca6 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d143      	bne.n	8002d1c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	e03a      	b.n	8002d1c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a25      	ldr	r2, [pc, #148]	; (8002d40 <HAL_ADC_Start_IT+0x1a8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d10e      	bne.n	8002cce <HAL_ADC_Start_IT+0x136>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d107      	bne.n	8002cce <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ccc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_ADC_Start_IT+0x1a4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d120      	bne.n	8002d1c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_ADC_Start_IT+0x1ac>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d11b      	bne.n	8002d1c <HAL_ADC_Start_IT+0x184>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d114      	bne.n	8002d1c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	e00b      	b.n	8002d1c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0210 	orr.w	r2, r3, #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000060 	.word	0x20000060
 8002d30:	431bde83 	.word	0x431bde83
 8002d34:	fffff8fe 	.word	0xfffff8fe
 8002d38:	04000020 	.word	0x04000020
 8002d3c:	40012300 	.word	0x40012300
 8002d40:	40012000 	.word	0x40012000
 8002d44:	40012200 	.word	0x40012200

08002d48 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	bf0c      	ite	eq
 8002d66:	2301      	moveq	r3, #1
 8002d68:	2300      	movne	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d049      	beq.n	8002e1e <HAL_ADC_IRQHandler+0xd6>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d046      	beq.n	8002e1e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d105      	bne.n	8002da8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d12b      	bne.n	8002e0e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d127      	bne.n	8002e0e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d119      	bne.n	8002e0e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0220 	bic.w	r2, r2, #32
 8002de8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fe ff1a 	bl	8001c48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0212 	mvn.w	r2, #18
 8002e1c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	bf0c      	ite	eq
 8002e2c:	2301      	moveq	r3, #1
 8002e2e:	2300      	movne	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b80      	cmp	r3, #128	; 0x80
 8002e40:	bf0c      	ite	eq
 8002e42:	2301      	moveq	r3, #1
 8002e44:	2300      	movne	r3, #0
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d057      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x1b8>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d054      	beq.n	8002f00 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d139      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d12b      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d124      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11d      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d119      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 facf 	bl	8003494 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f06f 020c 	mvn.w	r2, #12
 8002efe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	bf0c      	ite	eq
 8002f0e:	2301      	moveq	r3, #1
 8002f10:	2300      	movne	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d017      	beq.n	8002f62 <HAL_ADC_IRQHandler+0x21a>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d014      	beq.n	8002f62 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10d      	bne.n	8002f62 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f846 	bl	8002fe4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0201 	mvn.w	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	bf0c      	ite	eq
 8002f70:	2301      	moveq	r3, #1
 8002f72:	2300      	movne	r3, #0
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x27a>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d012      	beq.n	8002fc2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f043 0202 	orr.w	r2, r3, #2
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0220 	mvn.w	r2, #32
 8002fb0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f820 	bl	8002ff8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0220 	mvn.w	r2, #32
 8002fc0:	601a      	str	r2, [r3, #0]
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x1c>
 8003024:	2302      	movs	r3, #2
 8003026:	e12a      	b.n	800327e <HAL_ADC_ConfigChannel+0x272>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d93a      	bls.n	80030ae <HAL_ADC_ConfigChannel+0xa2>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003040:	d035      	beq.n	80030ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	4613      	mov	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4413      	add	r3, r2
 8003056:	3b1e      	subs	r3, #30
 8003058:	2207      	movs	r2, #7
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	400a      	ands	r2, r1
 8003066:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a87      	ldr	r2, [pc, #540]	; (800328c <HAL_ADC_ConfigChannel+0x280>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10a      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68d9      	ldr	r1, [r3, #12]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	061a      	lsls	r2, r3, #24
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003086:	e035      	b.n	80030f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68d9      	ldr	r1, [r3, #12]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	4603      	mov	r3, r0
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4403      	add	r3, r0
 80030a0:	3b1e      	subs	r3, #30
 80030a2:	409a      	lsls	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ac:	e022      	b.n	80030f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6919      	ldr	r1, [r3, #16]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	2207      	movs	r2, #7
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43da      	mvns	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	400a      	ands	r2, r1
 80030d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6919      	ldr	r1, [r3, #16]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4403      	add	r3, r0
 80030ea:	409a      	lsls	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b06      	cmp	r3, #6
 80030fa:	d824      	bhi.n	8003146 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	3b05      	subs	r3, #5
 800310e:	221f      	movs	r2, #31
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43da      	mvns	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	400a      	ands	r2, r1
 800311c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	4618      	mov	r0, r3
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	3b05      	subs	r3, #5
 8003138:	fa00 f203 	lsl.w	r2, r0, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	635a      	str	r2, [r3, #52]	; 0x34
 8003144:	e04c      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d824      	bhi.n	8003198 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	3b23      	subs	r3, #35	; 0x23
 8003160:	221f      	movs	r2, #31
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	4618      	mov	r0, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b23      	subs	r3, #35	; 0x23
 800318a:	fa00 f203 	lsl.w	r2, r0, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
 8003196:	e023      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	3b41      	subs	r3, #65	; 0x41
 80031aa:	221f      	movs	r2, #31
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43da      	mvns	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3b41      	subs	r3, #65	; 0x41
 80031d4:	fa00 f203 	lsl.w	r2, r0, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2a      	ldr	r2, [pc, #168]	; (8003290 <HAL_ADC_ConfigChannel+0x284>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10a      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x1f4>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_ADC_ConfigChannel+0x288>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a26      	ldr	r2, [pc, #152]	; (8003294 <HAL_ADC_ConfigChannel+0x288>)
 80031fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_ADC_ConfigChannel+0x284>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d109      	bne.n	800321e <HAL_ADC_ConfigChannel+0x212>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b12      	cmp	r3, #18
 8003210:	d105      	bne.n	800321e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_ADC_ConfigChannel+0x288>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_ADC_ConfigChannel+0x288>)
 8003218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800321c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_ADC_ConfigChannel+0x284>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d125      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x268>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_ADC_ConfigChannel+0x280>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d003      	beq.n	800323a <HAL_ADC_ConfigChannel+0x22e>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b11      	cmp	r3, #17
 8003238:	d11c      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_ADC_ConfigChannel+0x288>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_ADC_ConfigChannel+0x288>)
 8003240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003244:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_ADC_ConfigChannel+0x280>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d111      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_ADC_ConfigChannel+0x28c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <HAL_ADC_ConfigChannel+0x290>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0c9a      	lsrs	r2, r3, #18
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003266:	e002      	b.n	800326e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3b01      	subs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f9      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	10000012 	.word	0x10000012
 8003290:	40012000 	.word	0x40012000
 8003294:	40012300 	.word	0x40012300
 8003298:	20000060 	.word	0x20000060
 800329c:	431bde83 	.word	0x431bde83

080032a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <ADC_Init+0x1ec>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a77      	ldr	r2, [pc, #476]	; (800348c <ADC_Init+0x1ec>)
 80032ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <ADC_Init+0x1ec>)
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4973      	ldr	r1, [pc, #460]	; (800348c <ADC_Init+0x1ec>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	021a      	lsls	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	4a58      	ldr	r2, [pc, #352]	; (8003490 <ADC_Init+0x1f0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6899      	ldr	r1, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6899      	ldr	r1, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	e00f      	b.n	800339a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003398:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0202 	bic.w	r2, r2, #2
 80033a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	005a      	lsls	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	3b01      	subs	r3, #1
 80033f4:	035a      	lsls	r2, r3, #13
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	e007      	b.n	8003410 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	3b01      	subs	r3, #1
 800342c:	051a      	lsls	r2, r3, #20
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003452:	025a      	lsls	r2, r3, #9
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	029a      	lsls	r2, r3, #10
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40012300 	.word	0x40012300
 8003490:	0f000001 	.word	0x0f000001

08003494 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <__NVIC_SetPriorityGrouping+0x40>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c4:	4013      	ands	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <__NVIC_SetPriorityGrouping+0x44>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d6:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <__NVIC_SetPriorityGrouping+0x40>)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	60d3      	str	r3, [r2, #12]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00
 80034ec:	05fa0000 	.word	0x05fa0000

080034f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <__NVIC_GetPriorityGrouping+0x18>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	0a1b      	lsrs	r3, r3, #8
 80034fa:	f003 0307 	and.w	r3, r3, #7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	db0b      	blt.n	8003536 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4907      	ldr	r1, [pc, #28]	; (8003544 <__NVIC_EnableIRQ+0x38>)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	2001      	movs	r0, #1
 800352e:	fa00 f202 	lsl.w	r2, r0, r2
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100

08003548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003558:	2b00      	cmp	r3, #0
 800355a:	db0a      	blt.n	8003572 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	490c      	ldr	r1, [pc, #48]	; (8003594 <__NVIC_SetPriority+0x4c>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	b2d2      	uxtb	r2, r2
 800356a:	440b      	add	r3, r1
 800356c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003570:	e00a      	b.n	8003588 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4908      	ldr	r1, [pc, #32]	; (8003598 <__NVIC_SetPriority+0x50>)
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	3b04      	subs	r3, #4
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	b2d2      	uxtb	r2, r2
 8003584:	440b      	add	r3, r1
 8003586:	761a      	strb	r2, [r3, #24]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000e100 	.word	0xe000e100
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800359c:	b480      	push	{r7}
 800359e:	b089      	sub	sp, #36	; 0x24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f1c3 0307 	rsb	r3, r3, #7
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	bf28      	it	cs
 80035ba:	2304      	movcs	r3, #4
 80035bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d902      	bls.n	80035cc <NVIC_EncodePriority+0x30>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3b03      	subs	r3, #3
 80035ca:	e000      	b.n	80035ce <NVIC_EncodePriority+0x32>
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	401a      	ands	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e4:	f04f 31ff 	mov.w	r1, #4294967295
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43d9      	mvns	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f4:	4313      	orrs	r3, r2
         );
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003614:	d301      	bcc.n	800361a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003616:	2301      	movs	r3, #1
 8003618:	e00f      	b.n	800363a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <SysTick_Config+0x40>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003622:	210f      	movs	r1, #15
 8003624:	f04f 30ff 	mov.w	r0, #4294967295
 8003628:	f7ff ff8e 	bl	8003548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <SysTick_Config+0x40>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SysTick_Config+0x40>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	e000e010 	.word	0xe000e010

08003648 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ff29 	bl	80034a8 <__NVIC_SetPriorityGrouping>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365e:	b580      	push	{r7, lr}
 8003660:	b086      	sub	sp, #24
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003670:	f7ff ff3e 	bl	80034f0 <__NVIC_GetPriorityGrouping>
 8003674:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	6978      	ldr	r0, [r7, #20]
 800367c:	f7ff ff8e 	bl	800359c <NVIC_EncodePriority>
 8003680:	4602      	mov	r2, r0
 8003682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff5d 	bl	8003548 <__NVIC_SetPriority>
}
 800368e:	bf00      	nop
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	4603      	mov	r3, r0
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff ff31 	bl	800350c <__NVIC_EnableIRQ>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff ffa2 	bl	8003604 <SysTick_Config>
 80036c0:	4603      	mov	r3, r0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036d8:	f7ff f9ea 	bl	8002ab0 <HAL_GetTick>
 80036dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d008      	beq.n	80036fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e052      	b.n	80037a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0216 	bic.w	r2, r2, #22
 800370a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d103      	bne.n	800372c <HAL_DMA_Abort+0x62>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0208 	bic.w	r2, r2, #8
 800373a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800374c:	e013      	b.n	8003776 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800374e:	f7ff f9af 	bl	8002ab0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b05      	cmp	r3, #5
 800375a:	d90c      	bls.n	8003776 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e015      	b.n	80037a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e4      	bne.n	800374e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	223f      	movs	r2, #63	; 0x3f
 800378a:	409a      	lsls	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d004      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e00c      	b.n	80037e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2205      	movs	r2, #5
 80037cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b089      	sub	sp, #36	; 0x24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003802:	2300      	movs	r3, #0
 8003804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003806:	2300      	movs	r3, #0
 8003808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	e175      	b.n	8003afc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003810:	2201      	movs	r2, #1
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	429a      	cmp	r2, r3
 800382a:	f040 8164 	bne.w	8003af6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d00b      	beq.n	800384e <HAL_GPIO_Init+0x5e>
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d007      	beq.n	800384e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003842:	2b11      	cmp	r3, #17
 8003844:	d003      	beq.n	800384e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b12      	cmp	r3, #18
 800384c:	d130      	bne.n	80038b0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003884:	2201      	movs	r2, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 0201 	and.w	r2, r3, #1
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x100>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b12      	cmp	r3, #18
 80038ee:	d123      	bne.n	8003938 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	08da      	lsrs	r2, r3, #3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3208      	adds	r2, #8
 80038f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	220f      	movs	r2, #15
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	08da      	lsrs	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	3208      	adds	r2, #8
 8003932:	69b9      	ldr	r1, [r7, #24]
 8003934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	2203      	movs	r2, #3
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0203 	and.w	r2, r3, #3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 80be 	beq.w	8003af6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800397a:	4b66      	ldr	r3, [pc, #408]	; (8003b14 <HAL_GPIO_Init+0x324>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a65      	ldr	r2, [pc, #404]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b63      	ldr	r3, [pc, #396]	; (8003b14 <HAL_GPIO_Init+0x324>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003992:	4a61      	ldr	r2, [pc, #388]	; (8003b18 <HAL_GPIO_Init+0x328>)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	4013      	ands	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a58      	ldr	r2, [pc, #352]	; (8003b1c <HAL_GPIO_Init+0x32c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d037      	beq.n	8003a2e <HAL_GPIO_Init+0x23e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a57      	ldr	r2, [pc, #348]	; (8003b20 <HAL_GPIO_Init+0x330>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <HAL_GPIO_Init+0x23a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a56      	ldr	r2, [pc, #344]	; (8003b24 <HAL_GPIO_Init+0x334>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d02b      	beq.n	8003a26 <HAL_GPIO_Init+0x236>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a55      	ldr	r2, [pc, #340]	; (8003b28 <HAL_GPIO_Init+0x338>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d025      	beq.n	8003a22 <HAL_GPIO_Init+0x232>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a54      	ldr	r2, [pc, #336]	; (8003b2c <HAL_GPIO_Init+0x33c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01f      	beq.n	8003a1e <HAL_GPIO_Init+0x22e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a53      	ldr	r2, [pc, #332]	; (8003b30 <HAL_GPIO_Init+0x340>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d019      	beq.n	8003a1a <HAL_GPIO_Init+0x22a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a52      	ldr	r2, [pc, #328]	; (8003b34 <HAL_GPIO_Init+0x344>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x226>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a51      	ldr	r2, [pc, #324]	; (8003b38 <HAL_GPIO_Init+0x348>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00d      	beq.n	8003a12 <HAL_GPIO_Init+0x222>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a50      	ldr	r2, [pc, #320]	; (8003b3c <HAL_GPIO_Init+0x34c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <HAL_GPIO_Init+0x21e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a4f      	ldr	r2, [pc, #316]	; (8003b40 <HAL_GPIO_Init+0x350>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <HAL_GPIO_Init+0x21a>
 8003a06:	2309      	movs	r3, #9
 8003a08:	e012      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a0a:	230a      	movs	r3, #10
 8003a0c:	e010      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	e00e      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a12:	2307      	movs	r3, #7
 8003a14:	e00c      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a16:	2306      	movs	r3, #6
 8003a18:	e00a      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x240>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	; (8003b18 <HAL_GPIO_Init+0x328>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a72:	4a34      	ldr	r2, [pc, #208]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a78:	4b32      	ldr	r3, [pc, #200]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a9c:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003af0:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <HAL_GPIO_Init+0x354>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f ae86 	bls.w	8003810 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40021400 	.word	0x40021400
 8003b34:	40021800 	.word	0x40021800
 8003b38:	40021c00 	.word	0x40021c00
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40022400 	.word	0x40022400
 8003b44:	40013c00 	.word	0x40013c00

08003b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	807b      	strh	r3, [r7, #2]
 8003b54:	4613      	mov	r3, r2
 8003b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b58:	787b      	ldrb	r3, [r7, #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b5e:	887a      	ldrh	r2, [r7, #2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b64:	e003      	b.n	8003b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b66:	887b      	ldrh	r3, [r7, #2]
 8003b68:	041a      	lsls	r2, r3, #16
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	619a      	str	r2, [r3, #24]
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4013      	ands	r3, r2
 8003b92:	041a      	lsls	r2, r3, #16
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	43d9      	mvns	r1, r3
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	400b      	ands	r3, r1
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	619a      	str	r2, [r3, #24]
}
 8003ba2:	bf00      	nop
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e07f      	b.n	8003cc2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7fd fe02 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	; 0x24
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	e006      	b.n	8003c38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d104      	bne.n	8003c4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_I2C_Init+0x11c>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	ea42 0103 	orr.w	r1, r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69d9      	ldr	r1, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1a      	ldr	r2, [r3, #32]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	02008000 	.word	0x02008000

08003cd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	460b      	mov	r3, r1
 8003cde:	817b      	strh	r3, [r7, #10]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	f040 80da 	bne.w	8003ea6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_I2C_Master_Transmit+0x30>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e0d3      	b.n	8003ea8 <HAL_I2C_Master_Transmit+0x1d8>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d08:	f7fe fed2 	bl	8002ab0 <HAL_GetTick>
 8003d0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2319      	movs	r3, #25
 8003d14:	2201      	movs	r2, #1
 8003d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f9e6 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0be      	b.n	8003ea8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2221      	movs	r2, #33	; 0x21
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2210      	movs	r2, #16
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	893a      	ldrh	r2, [r7, #8]
 8003d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2bff      	cmp	r3, #255	; 0xff
 8003d5a:	d90e      	bls.n	8003d7a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	22ff      	movs	r2, #255	; 0xff
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	8979      	ldrh	r1, [r7, #10]
 8003d6a:	4b51      	ldr	r3, [pc, #324]	; (8003eb0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fb48 	bl	8004408 <I2C_TransferConfig>
 8003d78:	e06c      	b.n	8003e54 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	8979      	ldrh	r1, [r7, #10]
 8003d8c:	4b48      	ldr	r3, [pc, #288]	; (8003eb0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 fb37 	bl	8004408 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003d9a:	e05b      	b.n	8003e54 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	6a39      	ldr	r1, [r7, #32]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f9e3 	bl	800416c <I2C_WaitOnTXISFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e07b      	b.n	8003ea8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d034      	beq.n	8003e54 <HAL_I2C_Master_Transmit+0x184>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d130      	bne.n	8003e54 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2180      	movs	r1, #128	; 0x80
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f975 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e04d      	b.n	8003ea8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2bff      	cmp	r3, #255	; 0xff
 8003e14:	d90e      	bls.n	8003e34 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	22ff      	movs	r2, #255	; 0xff
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	8979      	ldrh	r1, [r7, #10]
 8003e24:	2300      	movs	r3, #0
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 faeb 	bl	8004408 <I2C_TransferConfig>
 8003e32:	e00f      	b.n	8003e54 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	8979      	ldrh	r1, [r7, #10]
 8003e46:	2300      	movs	r3, #0
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 fada 	bl	8004408 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d19e      	bne.n	8003d9c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	6a39      	ldr	r1, [r7, #32]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f9c2 	bl	80041ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e01a      	b.n	8003ea8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2220      	movs	r2, #32
 8003e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003e86:	400b      	ands	r3, r1
 8003e88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	e000      	b.n	8003ea8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
  }
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	80002000 	.word	0x80002000
 8003eb4:	fe00e800 	.word	0xfe00e800

08003eb8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	817b      	strh	r3, [r7, #10]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	f040 80db 	bne.w	8004090 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <HAL_I2C_Master_Receive+0x30>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e0d4      	b.n	8004092 <HAL_I2C_Master_Receive+0x1da>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ef0:	f7fe fdde 	bl	8002ab0 <HAL_GetTick>
 8003ef4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2319      	movs	r3, #25
 8003efc:	2201      	movs	r2, #1
 8003efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f8f2 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e0bf      	b.n	8004092 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2222      	movs	r2, #34	; 0x22
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	893a      	ldrh	r2, [r7, #8]
 8003f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2bff      	cmp	r3, #255	; 0xff
 8003f42:	d90e      	bls.n	8003f62 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	22ff      	movs	r2, #255	; 0xff
 8003f48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	8979      	ldrh	r1, [r7, #10]
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <HAL_I2C_Master_Receive+0x1e4>)
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa54 	bl	8004408 <I2C_TransferConfig>
 8003f60:	e06d      	b.n	800403e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	8979      	ldrh	r1, [r7, #10]
 8003f74:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_I2C_Master_Receive+0x1e4>)
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 fa43 	bl	8004408 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003f82:	e05c      	b.n	800403e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f96b 	bl	8004264 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e07c      	b.n	8004092 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d034      	beq.n	800403e <HAL_I2C_Master_Receive+0x186>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d130      	bne.n	800403e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f880 	bl	80040ec <I2C_WaitOnFlagUntilTimeout>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e04d      	b.n	8004092 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2bff      	cmp	r3, #255	; 0xff
 8003ffe:	d90e      	bls.n	800401e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	22ff      	movs	r2, #255	; 0xff
 8004004:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400a:	b2da      	uxtb	r2, r3
 800400c:	8979      	ldrh	r1, [r7, #10]
 800400e:	2300      	movs	r3, #0
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f9f6 	bl	8004408 <I2C_TransferConfig>
 800401c:	e00f      	b.n	800403e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	b2da      	uxtb	r2, r3
 800402e:	8979      	ldrh	r1, [r7, #10]
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f9e5 	bl	8004408 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d19d      	bne.n	8003f84 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	6a39      	ldr	r1, [r7, #32]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f8cd 	bl	80041ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e01a      	b.n	8004092 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2220      	movs	r2, #32
 8004062:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6859      	ldr	r1, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <HAL_I2C_Master_Receive+0x1e8>)
 8004070:	400b      	ands	r3, r1
 8004072:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	80002400 	.word	0x80002400
 80040a0:	fe00e800 	.word	0xfe00e800

080040a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d103      	bne.n	80040c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d007      	beq.n	80040e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	619a      	str	r2, [r3, #24]
  }
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040fc:	e022      	b.n	8004144 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d01e      	beq.n	8004144 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fe fcd3 	bl	8002ab0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d113      	bne.n	8004144 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	f043 0220 	orr.w	r2, r3, #32
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e00f      	b.n	8004164 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	429a      	cmp	r2, r3
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	79fb      	ldrb	r3, [r7, #7]
 800415e:	429a      	cmp	r2, r3
 8004160:	d0cd      	beq.n	80040fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004178:	e02c      	b.n	80041d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8dc 	bl	800433c <I2C_IsAcknowledgeFailed>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e02a      	b.n	80041e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d01e      	beq.n	80041d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004196:	f7fe fc8b 	bl	8002ab0 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d113      	bne.n	80041d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f043 0220 	orr.w	r2, r3, #32
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e007      	b.n	80041e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d1cb      	bne.n	800417a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f8:	e028      	b.n	800424c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68b9      	ldr	r1, [r7, #8]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f89c 	bl	800433c <I2C_IsAcknowledgeFailed>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e026      	b.n	800425c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe fc4f 	bl	8002ab0 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	68ba      	ldr	r2, [r7, #8]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d113      	bne.n	800424c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e007      	b.n	800425c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b20      	cmp	r3, #32
 8004258:	d1cf      	bne.n	80041fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004270:	e055      	b.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f860 	bl	800433c <I2C_IsAcknowledgeFailed>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e053      	b.n	800432e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b20      	cmp	r3, #32
 8004292:	d129      	bne.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f003 0304 	and.w	r3, r3, #4
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d105      	bne.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e03f      	b.n	800432e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2220      	movs	r2, #32
 80042b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80042c2:	400b      	ands	r3, r1
 80042c4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e022      	b.n	800432e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e8:	f7fe fbe2 	bl	8002ab0 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d302      	bcc.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10f      	bne.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b04      	cmp	r3, #4
 800432a:	d1a2      	bne.n	8004272 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	fe00e800 	.word	0xfe00e800

0800433c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b10      	cmp	r3, #16
 8004354:	d151      	bne.n	80043fa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004356:	e022      	b.n	800439e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	d01e      	beq.n	800439e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004360:	f7fe fba6 	bl	8002ab0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <I2C_IsAcknowledgeFailed+0x3a>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d113      	bne.n	800439e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e02e      	b.n	80043fc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d1d5      	bne.n	8004358 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2210      	movs	r2, #16
 80043b2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2220      	movs	r2, #32
 80043ba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f7ff fe71 	bl	80040a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <I2C_IsAcknowledgeFailed+0xc8>)
 80043ce:	400b      	ands	r3, r1
 80043d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	fe00e800 	.word	0xfe00e800

08004408 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	4613      	mov	r3, r2
 8004418:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	0d5b      	lsrs	r3, r3, #21
 8004424:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004428:	4b0d      	ldr	r3, [pc, #52]	; (8004460 <I2C_TransferConfig+0x58>)
 800442a:	430b      	orrs	r3, r1
 800442c:	43db      	mvns	r3, r3
 800442e:	ea02 0103 	and.w	r1, r2, r3
 8004432:	897b      	ldrh	r3, [r7, #10]
 8004434:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004438:	7a7b      	ldrb	r3, [r7, #9]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	431a      	orrs	r2, r3
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	03ff63ff 	.word	0x03ff63ff

08004464 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b20      	cmp	r3, #32
 8004478:	d138      	bne.n	80044ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004484:	2302      	movs	r3, #2
 8004486:	e032      	b.n	80044ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2224      	movs	r2, #36	; 0x24
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0201 	bic.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 0201 	orr.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	e000      	b.n	80044ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044ec:	2302      	movs	r3, #2
  }
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b20      	cmp	r3, #32
 800450e:	d139      	bne.n	8004584 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800451a:	2302      	movs	r3, #2
 800451c:	e033      	b.n	8004586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2224      	movs	r2, #36	; 0x24
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800454c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	e000      	b.n	8004586 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004584:	2302      	movs	r3, #2
  }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004592:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004594:	b08f      	sub	sp, #60	; 0x3c
 8004596:	af0a      	add	r7, sp, #40	; 0x28
 8004598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e116      	b.n	80047d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fe f9a0 	bl	8002904 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2203      	movs	r2, #3
 80045c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d102      	bne.n	80045de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f003 fd00 	bl	8007fe8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	687e      	ldr	r6, [r7, #4]
 80045f0:	466d      	mov	r5, sp
 80045f2:	f106 0410 	add.w	r4, r6, #16
 80045f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004602:	e885 0003 	stmia.w	r5, {r0, r1}
 8004606:	1d33      	adds	r3, r6, #4
 8004608:	cb0e      	ldmia	r3, {r1, r2, r3}
 800460a:	6838      	ldr	r0, [r7, #0]
 800460c:	f003 fc94 	bl	8007f38 <USB_CoreInit>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e0d7      	b.n	80047d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f003 fcee 	bl	800800a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e04a      	b.n	80046ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	333d      	adds	r3, #61	; 0x3d
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	333c      	adds	r3, #60	; 0x3c
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	b298      	uxth	r0, r3
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3342      	adds	r3, #66	; 0x42
 8004670:	4602      	mov	r2, r0
 8004672:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	333f      	adds	r3, #63	; 0x3f
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3344      	adds	r3, #68	; 0x44
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	3348      	adds	r3, #72	; 0x48
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046b0:	7bfa      	ldrb	r2, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3350      	adds	r3, #80	; 0x50
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	3301      	adds	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	7bfa      	ldrb	r2, [r7, #15]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d3af      	bcc.n	8004634 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e044      	b.n	8004764 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	3301      	adds	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d3b5      	bcc.n	80046da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	687e      	ldr	r6, [r7, #4]
 8004776:	466d      	mov	r5, sp
 8004778:	f106 0410 	add.w	r4, r6, #16
 800477c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004784:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004788:	e885 0003 	stmia.w	r5, {r0, r1}
 800478c:	1d33      	adds	r3, r6, #4
 800478e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004790:	6838      	ldr	r0, [r7, #0]
 8004792:	f003 fc65 	bl	8008060 <USB_DevInit>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e014      	b.n	80047d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d102      	bne.n	80047c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f80b 	bl	80047dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fe17 	bl	80083fe <USB_DevDisconnect>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_PCDEx_ActivateLPM+0x44>)
 800480c:	4313      	orrs	r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	10000003 	.word	0x10000003

08004824 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a04      	ldr	r2, [pc, #16]	; (8004840 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]
}
 8004834:	bf00      	nop
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40007000 	.word	0x40007000

08004844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800484c:	2300      	movs	r3, #0
 800484e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e291      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8087 	beq.w	8004976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004868:	4b96      	ldr	r3, [pc, #600]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b04      	cmp	r3, #4
 8004872:	d00c      	beq.n	800488e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004874:	4b93      	ldr	r3, [pc, #588]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d112      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62>
 8004880:	4b90      	ldr	r3, [pc, #576]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488c:	d10b      	bne.n	80048a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488e:	4b8d      	ldr	r3, [pc, #564]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d06c      	beq.n	8004974 <HAL_RCC_OscConfig+0x130>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d168      	bne.n	8004974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e26b      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x7a>
 80048b0:	4b84      	ldr	r3, [pc, #528]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a83      	ldr	r2, [pc, #524]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	e02e      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x9c>
 80048c6:	4b7f      	ldr	r3, [pc, #508]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a7e      	ldr	r2, [pc, #504]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b7c      	ldr	r3, [pc, #496]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7b      	ldr	r2, [pc, #492]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e01d      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0xc0>
 80048ea:	4b76      	ldr	r3, [pc, #472]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a75      	ldr	r2, [pc, #468]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b73      	ldr	r3, [pc, #460]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a72      	ldr	r2, [pc, #456]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80048fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0xd8>
 8004904:	4b6f      	ldr	r3, [pc, #444]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a6e      	ldr	r2, [pc, #440]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	4b6c      	ldr	r3, [pc, #432]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a6b      	ldr	r2, [pc, #428]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fe f8c4 	bl	8002ab0 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800492c:	f7fe f8c0 	bl	8002ab0 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e21f      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0xe8>
 800494a:	e014      	b.n	8004976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fe f8b0 	bl	8002ab0 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004954:	f7fe f8ac 	bl	8002ab0 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e20b      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004966:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x110>
 8004972:	e000      	b.n	8004976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d069      	beq.n	8004a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004982:	4b50      	ldr	r3, [pc, #320]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 030c 	and.w	r3, r3, #12
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498e:	4b4d      	ldr	r3, [pc, #308]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 030c 	and.w	r3, r3, #12
 8004996:	2b08      	cmp	r3, #8
 8004998:	d11c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x190>
 800499a:	4b4a      	ldr	r3, [pc, #296]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d116      	bne.n	80049d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a6:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_RCC_OscConfig+0x17a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e1df      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049be:	4b41      	ldr	r3, [pc, #260]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	493d      	ldr	r1, [pc, #244]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	e040      	b.n	8004a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d023      	beq.n	8004a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049dc:	4b39      	ldr	r3, [pc, #228]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fe f862 	bl	8002ab0 <HAL_GetTick>
 80049ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f0:	f7fe f85e 	bl	8002ab0 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1bd      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b30      	ldr	r3, [pc, #192]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4929      	ldr	r1, [pc, #164]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
 8004a22:	e018      	b.n	8004a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a24:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fe f83e 	bl	8002ab0 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a38:	f7fe f83a 	bl	8002ab0 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e199      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d038      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6a:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6e:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a70:	f043 0301 	orr.w	r3, r3, #1
 8004a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fe f81b 	bl	8002ab0 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7e:	f7fe f817 	bl	8002ab0 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e176      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x23a>
 8004a9c:	e01a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa2:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <HAL_RCC_OscConfig+0x280>)
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fe f801 	bl	8002ab0 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab2:	f7fd fffd 	bl	8002ab0 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d903      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e15c      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
 8004ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b91      	ldr	r3, [pc, #580]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ee      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a4 	beq.w	8004c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae2:	4b8b      	ldr	r3, [pc, #556]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	4a87      	ldr	r2, [pc, #540]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	6413      	str	r3, [r2, #64]	; 0x40
 8004afa:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b0a:	4b82      	ldr	r3, [pc, #520]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d118      	bne.n	8004b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b16:	4b7f      	ldr	r3, [pc, #508]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7e      	ldr	r2, [pc, #504]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b22:	f7fd ffc5 	bl	8002ab0 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fd ffc1 	bl	8002ab0 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e120      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	4b75      	ldr	r3, [pc, #468]	; (8004d14 <HAL_RCC_OscConfig+0x4d0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x31a>
 8004b50:	4b6f      	ldr	r3, [pc, #444]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4a6e      	ldr	r2, [pc, #440]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5c:	e02d      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x33c>
 8004b66:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a69      	ldr	r2, [pc, #420]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	6713      	str	r3, [r2, #112]	; 0x70
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	4a66      	ldr	r2, [pc, #408]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b7e:	e01c      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x35e>
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8c:	4a60      	ldr	r2, [pc, #384]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6713      	str	r3, [r2, #112]	; 0x70
 8004b94:	4b5e      	ldr	r3, [pc, #376]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b98:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a5a      	ldr	r2, [pc, #360]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
 8004bae:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a57      	ldr	r2, [pc, #348]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd ff75 	bl	8002ab0 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7fd ff71 	bl	8002ab0 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0ce      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCC_OscConfig+0x386>
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fd ff5f 	bl	8002ab0 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fd ff5b 	bl	8002ab0 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0b8      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0c:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 80a4 	beq.w	8004d7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d06b      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d149      	bne.n	8004cdc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a30      	ldr	r2, [pc, #192]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c54:	f7fd ff2c 	bl	8002ab0 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5c:	f7fd ff28 	bl	8002ab0 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e087      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f0      	bne.n	8004c5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69da      	ldr	r2, [r3, #28]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	019b      	lsls	r3, r3, #6
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c90:	085b      	lsrs	r3, r3, #1
 8004c92:	3b01      	subs	r3, #1
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	061b      	lsls	r3, r3, #24
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	4a1b      	ldr	r2, [pc, #108]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ca6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca8:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fd fefc 	bl	8002ab0 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fd fef8 	bl	8002ab0 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e057      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x478>
 8004cda:	e04f      	b.n	8004d7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce8:	f7fd fee2 	bl	8002ab0 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf0:	f7fd fede 	bl	8002ab0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e03d      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <HAL_RCC_OscConfig+0x4cc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x4ac>
 8004d0e:	e035      	b.n	8004d7c <HAL_RCC_OscConfig+0x538>
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <HAL_RCC_OscConfig+0x544>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d028      	beq.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d121      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d11a      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d48:	4013      	ands	r3, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d111      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	085b      	lsrs	r3, r3, #1
 8004d60:	3b01      	subs	r3, #1
 8004d62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d107      	bne.n	8004d78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d001      	beq.n	8004d7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0d0      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004da4:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d910      	bls.n	8004dd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 020f 	bic.w	r2, r3, #15
 8004dba:	4965      	ldr	r1, [pc, #404]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b63      	ldr	r3, [pc, #396]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e0b8      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d020      	beq.n	8004e22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dec:	4b59      	ldr	r3, [pc, #356]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a58      	ldr	r2, [pc, #352]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e04:	4b53      	ldr	r3, [pc, #332]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a52      	ldr	r2, [pc, #328]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e10:	4b50      	ldr	r3, [pc, #320]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	494d      	ldr	r1, [pc, #308]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d040      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d107      	bne.n	8004e46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b47      	ldr	r3, [pc, #284]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d115      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07f      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4e:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e073      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5e:	4b3d      	ldr	r3, [pc, #244]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06b      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6e:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f023 0203 	bic.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	4936      	ldr	r1, [pc, #216]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fd fe16 	bl	8002ab0 <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e86:	e00a      	b.n	8004e9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e88:	f7fd fe12 	bl	8002ab0 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e053      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9e:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 020c 	and.w	r2, r3, #12
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1eb      	bne.n	8004e88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d210      	bcs.n	8004ee0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f023 020f 	bic.w	r2, r3, #15
 8004ec6:	4922      	ldr	r1, [pc, #136]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e032      	b.n	8004f46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eec:	4b19      	ldr	r3, [pc, #100]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4916      	ldr	r1, [pc, #88]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f0a:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	490e      	ldr	r1, [pc, #56]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f1e:	f000 f821 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f22:	4602      	mov	r2, r0
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	091b      	lsrs	r3, r3, #4
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	490a      	ldr	r1, [pc, #40]	; (8004f58 <HAL_RCC_ClockConfig+0x1cc>)
 8004f30:	5ccb      	ldrb	r3, [r1, r3]
 8004f32:	fa22 f303 	lsr.w	r3, r2, r3
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_RCC_ClockConfig+0x1d0>)
 8004f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RCC_ClockConfig+0x1d4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7fd fd72 	bl	8002a28 <HAL_InitTick>

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40023c00 	.word	0x40023c00
 8004f54:	40023800 	.word	0x40023800
 8004f58:	0800d6a0 	.word	0x0800d6a0
 8004f5c:	20000060 	.word	0x20000060
 8004f60:	20000064 	.word	0x20000064

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	2300      	movs	r3, #0
 8004f76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f7c:	4b67      	ldr	r3, [pc, #412]	; (800511c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 030c 	and.w	r3, r3, #12
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00d      	beq.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	f200 80bd 	bhi.w	8005108 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x34>
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f96:	e0b7      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f98:	4b61      	ldr	r3, [pc, #388]	; (8005120 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f9a:	60bb      	str	r3, [r7, #8]
      break;
 8004f9c:	e0b7      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f9e:	4b61      	ldr	r3, [pc, #388]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004fa0:	60bb      	str	r3, [r7, #8]
      break;
 8004fa2:	e0b4      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa4:	4b5d      	ldr	r3, [pc, #372]	; (800511c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fae:	4b5b      	ldr	r3, [pc, #364]	; (800511c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d04d      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fba:	4b58      	ldr	r3, [pc, #352]	; (800511c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fca:	f04f 0100 	mov.w	r1, #0
 8004fce:	ea02 0800 	and.w	r8, r2, r0
 8004fd2:	ea03 0901 	and.w	r9, r3, r1
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4649      	mov	r1, r9
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	014b      	lsls	r3, r1, #5
 8004fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fe8:	0142      	lsls	r2, r0, #5
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	ebb0 0008 	subs.w	r0, r0, r8
 8004ff2:	eb61 0109 	sbc.w	r1, r1, r9
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	018b      	lsls	r3, r1, #6
 8005000:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005004:	0182      	lsls	r2, r0, #6
 8005006:	1a12      	subs	r2, r2, r0
 8005008:	eb63 0301 	sbc.w	r3, r3, r1
 800500c:	f04f 0000 	mov.w	r0, #0
 8005010:	f04f 0100 	mov.w	r1, #0
 8005014:	00d9      	lsls	r1, r3, #3
 8005016:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800501a:	00d0      	lsls	r0, r2, #3
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	eb12 0208 	adds.w	r2, r2, r8
 8005024:	eb43 0309 	adc.w	r3, r3, r9
 8005028:	f04f 0000 	mov.w	r0, #0
 800502c:	f04f 0100 	mov.w	r1, #0
 8005030:	0259      	lsls	r1, r3, #9
 8005032:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005036:	0250      	lsls	r0, r2, #9
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4610      	mov	r0, r2
 800503e:	4619      	mov	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	461a      	mov	r2, r3
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	f7fb fe3e 	bl	8000cc8 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e04a      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	461a      	mov	r2, r3
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005066:	f04f 0100 	mov.w	r1, #0
 800506a:	ea02 0400 	and.w	r4, r2, r0
 800506e:	ea03 0501 	and.w	r5, r3, r1
 8005072:	4620      	mov	r0, r4
 8005074:	4629      	mov	r1, r5
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	014b      	lsls	r3, r1, #5
 8005080:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005084:	0142      	lsls	r2, r0, #5
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	1b00      	subs	r0, r0, r4
 800508c:	eb61 0105 	sbc.w	r1, r1, r5
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	018b      	lsls	r3, r1, #6
 800509a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800509e:	0182      	lsls	r2, r0, #6
 80050a0:	1a12      	subs	r2, r2, r0
 80050a2:	eb63 0301 	sbc.w	r3, r3, r1
 80050a6:	f04f 0000 	mov.w	r0, #0
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	00d9      	lsls	r1, r3, #3
 80050b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050b4:	00d0      	lsls	r0, r2, #3
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	1912      	adds	r2, r2, r4
 80050bc:	eb45 0303 	adc.w	r3, r5, r3
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	0299      	lsls	r1, r3, #10
 80050ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050ce:	0290      	lsls	r0, r2, #10
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	461a      	mov	r2, r3
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f7fb fdf2 	bl	8000cc8 <__aeabi_uldivmod>
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	4613      	mov	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050ec:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	3301      	adds	r3, #1
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	60bb      	str	r3, [r7, #8]
      break;
 8005106:	e002      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005108:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800510a:	60bb      	str	r3, [r7, #8]
      break;
 800510c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800510e:	68bb      	ldr	r3, [r7, #8]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800511a:	bf00      	nop
 800511c:	40023800 	.word	0x40023800
 8005120:	00f42400 	.word	0x00f42400
 8005124:	007a1200 	.word	0x007a1200

08005128 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800512c:	4b03      	ldr	r3, [pc, #12]	; (800513c <HAL_RCC_GetHCLKFreq+0x14>)
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	20000060 	.word	0x20000060

08005140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005144:	f7ff fff0 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0a9b      	lsrs	r3, r3, #10
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4903      	ldr	r1, [pc, #12]	; (8005164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40023800 	.word	0x40023800
 8005164:	0800d6b0 	.word	0x0800d6b0

08005168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800516c:	f7ff ffdc 	bl	8005128 <HAL_RCC_GetHCLKFreq>
 8005170:	4602      	mov	r2, r0
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	0b5b      	lsrs	r3, r3, #13
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	4903      	ldr	r1, [pc, #12]	; (800518c <HAL_RCC_GetPCLK2Freq+0x24>)
 800517e:	5ccb      	ldrb	r3, [r1, r3]
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005184:	4618      	mov	r0, r3
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40023800 	.word	0x40023800
 800518c:	0800d6b0 	.word	0x0800d6b0

08005190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d012      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051b8:	4b69      	ldr	r3, [pc, #420]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4a68      	ldr	r2, [pc, #416]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051c2:	6093      	str	r3, [r2, #8]
 80051c4:	4b66      	ldr	r3, [pc, #408]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051cc:	4964      	ldr	r1, [pc, #400]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ea:	4b5d      	ldr	r3, [pc, #372]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f8:	4959      	ldr	r1, [pc, #356]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005208:	d101      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800520a:	2301      	movs	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005216:	2301      	movs	r3, #1
 8005218:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d017      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005226:	4b4e      	ldr	r3, [pc, #312]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	494a      	ldr	r1, [pc, #296]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005244:	d101      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005246:	2301      	movs	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005262:	2301      	movs	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 808b 	beq.w	800538a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005274:	4b3a      	ldr	r3, [pc, #232]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	4a39      	ldr	r2, [pc, #228]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800527a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527e:	6413      	str	r3, [r2, #64]	; 0x40
 8005280:	4b37      	ldr	r3, [pc, #220]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800528c:	4b35      	ldr	r3, [pc, #212]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a34      	ldr	r2, [pc, #208]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005298:	f7fd fc0a 	bl	8002ab0 <HAL_GetTick>
 800529c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a0:	f7fd fc06 	bl	8002ab0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b64      	cmp	r3, #100	; 0x64
 80052ac:	d901      	bls.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e357      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052b2:	4b2c      	ldr	r3, [pc, #176]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d035      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d02e      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052dc:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	4a1d      	ldr	r2, [pc, #116]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052f2:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	4a1a      	ldr	r2, [pc, #104]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052fe:	4a18      	ldr	r2, [pc, #96]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b01      	cmp	r3, #1
 800530e:	d114      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005310:	f7fd fbce 	bl	8002ab0 <HAL_GetTick>
 8005314:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	e00a      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fd fbca 	bl	8002ab0 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	; 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e319      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ee      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005346:	d111      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005354:	4b04      	ldr	r3, [pc, #16]	; (8005368 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005356:	400b      	ands	r3, r1
 8005358:	4901      	ldr	r1, [pc, #4]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535a:	4313      	orrs	r3, r2
 800535c:	608b      	str	r3, [r1, #8]
 800535e:	e00b      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005360:	40023800 	.word	0x40023800
 8005364:	40007000 	.word	0x40007000
 8005368:	0ffffcff 	.word	0x0ffffcff
 800536c:	4bb1      	ldr	r3, [pc, #708]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4ab0      	ldr	r2, [pc, #704]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005372:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005376:	6093      	str	r3, [r2, #8]
 8005378:	4bae      	ldr	r3, [pc, #696]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800537a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005384:	49ab      	ldr	r1, [pc, #684]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005386:	4313      	orrs	r3, r2
 8005388:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b00      	cmp	r3, #0
 8005394:	d010      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005396:	4ba7      	ldr	r3, [pc, #668]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539c:	4aa5      	ldr	r2, [pc, #660]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800539e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053a6:	4ba3      	ldr	r3, [pc, #652]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	49a0      	ldr	r1, [pc, #640]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053c4:	4b9b      	ldr	r3, [pc, #620]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d2:	4998      	ldr	r1, [pc, #608]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053e6:	4b93      	ldr	r3, [pc, #588]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053f4:	498f      	ldr	r1, [pc, #572]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005408:	4b8a      	ldr	r3, [pc, #552]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005416:	4987      	ldr	r1, [pc, #540]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005418:	4313      	orrs	r3, r2
 800541a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800542a:	4b82      	ldr	r3, [pc, #520]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005430:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	497e      	ldr	r1, [pc, #504]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800544c:	4b79      	ldr	r3, [pc, #484]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	f023 0203 	bic.w	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	4976      	ldr	r1, [pc, #472]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800545c:	4313      	orrs	r3, r2
 800545e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800546e:	4b71      	ldr	r3, [pc, #452]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f023 020c 	bic.w	r2, r3, #12
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547c:	496d      	ldr	r1, [pc, #436]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005490:	4b68      	ldr	r3, [pc, #416]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005496:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800549e:	4965      	ldr	r1, [pc, #404]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054b2:	4b60      	ldr	r3, [pc, #384]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c0:	495c      	ldr	r1, [pc, #368]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054d4:	4b57      	ldr	r3, [pc, #348]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	4954      	ldr	r1, [pc, #336]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054f6:	4b4f      	ldr	r3, [pc, #316]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005504:	494b      	ldr	r1, [pc, #300]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005518:	4b46      	ldr	r3, [pc, #280]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005526:	4943      	ldr	r1, [pc, #268]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005528:	4313      	orrs	r3, r2
 800552a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800553a:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800553c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005548:	493a      	ldr	r1, [pc, #232]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800555c:	4b35      	ldr	r3, [pc, #212]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800556a:	4932      	ldr	r1, [pc, #200]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d011      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800557e:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005584:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558c:	4929      	ldr	r1, [pc, #164]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559c:	d101      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800559e:	2301      	movs	r3, #1
 80055a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055be:	4b1d      	ldr	r3, [pc, #116]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055cc:	4919      	ldr	r1, [pc, #100]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055e0:	4b14      	ldr	r3, [pc, #80]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f0:	4910      	ldr	r1, [pc, #64]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d006      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80d9 	beq.w	80057be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800560c:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a08      	ldr	r2, [pc, #32]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005612:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005618:	f7fd fa4a 	bl	8002ab0 <HAL_GetTick>
 800561c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800561e:	e00b      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005620:	f7fd fa46 	bl	8002ab0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d904      	bls.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e197      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005632:	bf00      	nop
 8005634:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005638:	4b6c      	ldr	r3, [pc, #432]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1ed      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d021      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11d      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005658:	4b64      	ldr	r3, [pc, #400]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800565a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565e:	0c1b      	lsrs	r3, r3, #16
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005666:	4b61      	ldr	r3, [pc, #388]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800566c:	0e1b      	lsrs	r3, r3, #24
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	019a      	lsls	r2, r3, #6
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	061b      	lsls	r3, r3, #24
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	071b      	lsls	r3, r3, #28
 800568c:	4957      	ldr	r1, [pc, #348]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056a8:	d00a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d02e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056be:	d129      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056c0:	4b4a      	ldr	r3, [pc, #296]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056ce:	4b47      	ldr	r3, [pc, #284]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d4:	0f1b      	lsrs	r3, r3, #28
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	019a      	lsls	r2, r3, #6
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	041b      	lsls	r3, r3, #16
 80056e6:	431a      	orrs	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	061b      	lsls	r3, r3, #24
 80056ee:	431a      	orrs	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	071b      	lsls	r3, r3, #28
 80056f4:	493d      	ldr	r1, [pc, #244]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80056fc:	4b3b      	ldr	r3, [pc, #236]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005702:	f023 021f 	bic.w	r2, r3, #31
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	3b01      	subs	r3, #1
 800570c:	4937      	ldr	r1, [pc, #220]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01d      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005720:	4b32      	ldr	r3, [pc, #200]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005726:	0e1b      	lsrs	r3, r3, #24
 8005728:	f003 030f 	and.w	r3, r3, #15
 800572c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800572e:	4b2f      	ldr	r3, [pc, #188]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005734:	0f1b      	lsrs	r3, r3, #28
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	019a      	lsls	r2, r3, #6
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	431a      	orrs	r2, r3
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	431a      	orrs	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	071b      	lsls	r3, r3, #28
 8005754:	4925      	ldr	r1, [pc, #148]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	019a      	lsls	r2, r3, #6
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	431a      	orrs	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	061b      	lsls	r3, r3, #24
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	071b      	lsls	r3, r3, #28
 8005784:	4919      	ldr	r1, [pc, #100]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800578c:	4b17      	ldr	r3, [pc, #92]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a16      	ldr	r2, [pc, #88]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005798:	f7fd f98a 	bl	8002ab0 <HAL_GetTick>
 800579c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057a0:	f7fd f986 	bl	8002ab0 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b64      	cmp	r3, #100	; 0x64
 80057ac:	d901      	bls.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e0d7      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057b2:	4b0e      	ldr	r3, [pc, #56]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	f040 80cd 	bne.w	8005960 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057c6:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a08      	ldr	r2, [pc, #32]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057d2:	f7fd f96d 	bl	8002ab0 <HAL_GetTick>
 80057d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057d8:	e00a      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057da:	f7fd f969 	bl	8002ab0 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b64      	cmp	r3, #100	; 0x64
 80057e6:	d903      	bls.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e0ba      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80057ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057f0:	4b5e      	ldr	r3, [pc, #376]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fc:	d0ed      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800581a:	2b00      	cmp	r3, #0
 800581c:	d02e      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d12a      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005826:	4b51      	ldr	r3, [pc, #324]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005834:	4b4d      	ldr	r3, [pc, #308]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583a:	0f1b      	lsrs	r3, r3, #28
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	019a      	lsls	r2, r3, #6
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	431a      	orrs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	431a      	orrs	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	4944      	ldr	r1, [pc, #272]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005862:	4b42      	ldr	r3, [pc, #264]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005868:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	3b01      	subs	r3, #1
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	493d      	ldr	r1, [pc, #244]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d022      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005890:	d11d      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005892:	4b36      	ldr	r3, [pc, #216]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	0e1b      	lsrs	r3, r3, #24
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058a0:	4b32      	ldr	r3, [pc, #200]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	0f1b      	lsrs	r3, r3, #28
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	019a      	lsls	r2, r3, #6
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	431a      	orrs	r2, r3
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	071b      	lsls	r3, r3, #28
 80058c6:	4929      	ldr	r1, [pc, #164]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d028      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058da:	4b24      	ldr	r3, [pc, #144]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	0e1b      	lsrs	r3, r3, #24
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80058e8:	4b20      	ldr	r3, [pc, #128]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 0303 	and.w	r3, r3, #3
 80058f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	019a      	lsls	r2, r3, #6
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	431a      	orrs	r2, r3
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	071b      	lsls	r3, r3, #28
 800590e:	4917      	ldr	r1, [pc, #92]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4911      	ldr	r1, [pc, #68]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800592c:	4b0f      	ldr	r3, [pc, #60]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0e      	ldr	r2, [pc, #56]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005938:	f7fd f8ba 	bl	8002ab0 <HAL_GetTick>
 800593c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005940:	f7fd f8b6 	bl	8002ab0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b64      	cmp	r3, #100	; 0x64
 800594c:	d901      	bls.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e007      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005952:	4b06      	ldr	r3, [pc, #24]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800595e:	d1ef      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3720      	adds	r7, #32
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800

08005970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e049      	b.n	8005a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc fe4a 	bl	8002630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f000 fdc0 	bl	8006534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d001      	beq.n	8005a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e04c      	b.n	8005ad2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a26      	ldr	r2, [pc, #152]	; (8005ae0 <HAL_TIM_Base_Start+0xc0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d022      	beq.n	8005a90 <HAL_TIM_Base_Start+0x70>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a52:	d01d      	beq.n	8005a90 <HAL_TIM_Base_Start+0x70>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <HAL_TIM_Base_Start+0xc4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d018      	beq.n	8005a90 <HAL_TIM_Base_Start+0x70>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a21      	ldr	r2, [pc, #132]	; (8005ae8 <HAL_TIM_Base_Start+0xc8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d013      	beq.n	8005a90 <HAL_TIM_Base_Start+0x70>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_TIM_Base_Start+0xcc>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00e      	beq.n	8005a90 <HAL_TIM_Base_Start+0x70>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_TIM_Base_Start+0xd0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d009      	beq.n	8005a90 <HAL_TIM_Base_Start+0x70>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_TIM_Base_Start+0xd4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d004      	beq.n	8005a90 <HAL_TIM_Base_Start+0x70>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_TIM_Base_Start+0xd8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d115      	bne.n	8005abc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	4b19      	ldr	r3, [pc, #100]	; (8005afc <HAL_TIM_Base_Start+0xdc>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d015      	beq.n	8005ace <HAL_TIM_Base_Start+0xae>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa8:	d011      	beq.n	8005ace <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aba:	e008      	b.n	8005ace <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e000      	b.n	8005ad0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40001800 	.word	0x40001800
 8005afc:	00010007 	.word	0x00010007

08005b00 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6a1a      	ldr	r2, [r3, #32]
 8005b0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005b12:	4013      	ands	r3, r2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10f      	bne.n	8005b38 <HAL_TIM_Base_Stop+0x38>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6a1a      	ldr	r2, [r3, #32]
 8005b1e:	f240 4344 	movw	r3, #1092	; 0x444
 8005b22:	4013      	ands	r3, r2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_Base_Stop+0x38>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d001      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e054      	b.n	8005c12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d022      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d01d      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a22      	ldr	r2, [pc, #136]	; (8005c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <HAL_TIM_Base_Start_IT+0xe0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <HAL_TIM_Base_Start_IT+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <HAL_TIM_Base_Start_IT+0xe8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d115      	bne.n	8005bfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	4b19      	ldr	r3, [pc, #100]	; (8005c3c <HAL_TIM_Base_Start_IT+0xec>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d015      	beq.n	8005c0e <HAL_TIM_Base_Start_IT+0xbe>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be8:	d011      	beq.n	8005c0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0201 	orr.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfa:	e008      	b.n	8005c0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e000      	b.n	8005c10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40000c00 	.word	0x40000c00
 8005c30:	40010400 	.word	0x40010400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40001800 	.word	0x40001800
 8005c3c:	00010007 	.word	0x00010007

08005c40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e049      	b.n	8005ce6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f841 	bl	8005cee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f000 fc58 	bl	8006534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <HAL_TIM_PWM_Start+0x24>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	bf14      	ite	ne
 8005d20:	2301      	movne	r3, #1
 8005d22:	2300      	moveq	r3, #0
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	e03c      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d109      	bne.n	8005d42 <HAL_TIM_PWM_Start+0x3e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	bf14      	ite	ne
 8005d3a:	2301      	movne	r3, #1
 8005d3c:	2300      	moveq	r3, #0
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e02f      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d109      	bne.n	8005d5c <HAL_TIM_PWM_Start+0x58>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	bf14      	ite	ne
 8005d54:	2301      	movne	r3, #1
 8005d56:	2300      	moveq	r3, #0
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	e022      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b0c      	cmp	r3, #12
 8005d60:	d109      	bne.n	8005d76 <HAL_TIM_PWM_Start+0x72>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	e015      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b10      	cmp	r3, #16
 8005d7a:	d109      	bne.n	8005d90 <HAL_TIM_PWM_Start+0x8c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	bf14      	ite	ne
 8005d88:	2301      	movne	r3, #1
 8005d8a:	2300      	moveq	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	e008      	b.n	8005da2 <HAL_TIM_PWM_Start+0x9e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	bf14      	ite	ne
 8005d9c:	2301      	movne	r3, #1
 8005d9e:	2300      	moveq	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e092      	b.n	8005ed0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <HAL_TIM_PWM_Start+0xb6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db8:	e023      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d104      	bne.n	8005dca <HAL_TIM_PWM_Start+0xc6>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc8:	e01b      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d104      	bne.n	8005dda <HAL_TIM_PWM_Start+0xd6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd8:	e013      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b0c      	cmp	r3, #12
 8005dde:	d104      	bne.n	8005dea <HAL_TIM_PWM_Start+0xe6>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005de8:	e00b      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d104      	bne.n	8005dfa <HAL_TIM_PWM_Start+0xf6>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df8:	e003      	b.n	8005e02 <HAL_TIM_PWM_Start+0xfe>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2201      	movs	r2, #1
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 ff2a 	bl	8006c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_TIM_PWM_Start+0x1d4>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_TIM_PWM_Start+0x120>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <HAL_TIM_PWM_Start+0x1d8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d101      	bne.n	8005e28 <HAL_TIM_PWM_Start+0x124>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <HAL_TIM_PWM_Start+0x126>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a25      	ldr	r2, [pc, #148]	; (8005ed8 <HAL_TIM_PWM_Start+0x1d4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d022      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x18a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e50:	d01d      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x18a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a22      	ldr	r2, [pc, #136]	; (8005ee0 <HAL_TIM_PWM_Start+0x1dc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d018      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x18a>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a20      	ldr	r2, [pc, #128]	; (8005ee4 <HAL_TIM_PWM_Start+0x1e0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x18a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <HAL_TIM_PWM_Start+0x1e4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00e      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x18a>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a19      	ldr	r2, [pc, #100]	; (8005edc <HAL_TIM_PWM_Start+0x1d8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d009      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x18a>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_TIM_PWM_Start+0x1e8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d004      	beq.n	8005e8e <HAL_TIM_PWM_Start+0x18a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <HAL_TIM_PWM_Start+0x1ec>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d115      	bne.n	8005eba <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <HAL_TIM_PWM_Start+0x1f0>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b06      	cmp	r3, #6
 8005e9e:	d015      	beq.n	8005ecc <HAL_TIM_PWM_Start+0x1c8>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea6:	d011      	beq.n	8005ecc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb8:	e008      	b.n	8005ecc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e000      	b.n	8005ece <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ecc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40010400 	.word	0x40010400
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40001800 	.word	0x40001800
 8005ef4:	00010007 	.word	0x00010007

08005ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d122      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d11b      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0202 	mvn.w	r2, #2
 8005f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fadc 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 8005f40:	e005      	b.n	8005f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 face 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fadf 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d122      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f06f 0204 	mvn.w	r2, #4
 8005f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fab2 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 8005f94:	e005      	b.n	8005fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 faa4 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fab5 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d122      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d11b      	bne.n	8005ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0208 	mvn.w	r2, #8
 8005fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2204      	movs	r2, #4
 8005fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa88 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 8005fe8:	e005      	b.n	8005ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fa7a 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa8b 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b10      	cmp	r3, #16
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b10      	cmp	r3, #16
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0210 	mvn.w	r2, #16
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2208      	movs	r2, #8
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa5e 	bl	80064f8 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa50 	bl	80064e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa61 	bl	800650c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10e      	bne.n	800607c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	2b01      	cmp	r3, #1
 800606a:	d107      	bne.n	800607c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0201 	mvn.w	r2, #1
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fb fe18 	bl	8001cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006086:	2b80      	cmp	r3, #128	; 0x80
 8006088:	d10e      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	2b80      	cmp	r3, #128	; 0x80
 8006096:	d107      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fe9c 	bl	8006de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b6:	d10e      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d107      	bne.n	80060d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fe8f 	bl	8006df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	d10e      	bne.n	8006102 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b40      	cmp	r3, #64	; 0x40
 80060f0:	d107      	bne.n	8006102 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fa0f 	bl	8006520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b20      	cmp	r3, #32
 800610e:	d10e      	bne.n	800612e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b20      	cmp	r3, #32
 800611c:	d107      	bne.n	800612e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f06f 0220 	mvn.w	r2, #32
 8006126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 fe4f 	bl	8006dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
	...

08006138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800614e:	2302      	movs	r3, #2
 8006150:	e0fd      	b.n	800634e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b14      	cmp	r3, #20
 800615e:	f200 80f0 	bhi.w	8006342 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006162:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006343 	.word	0x08006343
 8006170:	08006343 	.word	0x08006343
 8006174:	08006343 	.word	0x08006343
 8006178:	080061fd 	.word	0x080061fd
 800617c:	08006343 	.word	0x08006343
 8006180:	08006343 	.word	0x08006343
 8006184:	08006343 	.word	0x08006343
 8006188:	0800623f 	.word	0x0800623f
 800618c:	08006343 	.word	0x08006343
 8006190:	08006343 	.word	0x08006343
 8006194:	08006343 	.word	0x08006343
 8006198:	0800627f 	.word	0x0800627f
 800619c:	08006343 	.word	0x08006343
 80061a0:	08006343 	.word	0x08006343
 80061a4:	08006343 	.word	0x08006343
 80061a8:	080062c1 	.word	0x080062c1
 80061ac:	08006343 	.word	0x08006343
 80061b0:	08006343 	.word	0x08006343
 80061b4:	08006343 	.word	0x08006343
 80061b8:	08006301 	.word	0x08006301
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fa56 	bl	8006674 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0208 	orr.w	r2, r2, #8
 80061d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6999      	ldr	r1, [r3, #24]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691a      	ldr	r2, [r3, #16]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]
      break;
 80061fa:	e0a3      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 faa8 	bl	8006758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	619a      	str	r2, [r3, #24]
      break;
 800623c:	e082      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68b9      	ldr	r1, [r7, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f000 faff 	bl	8006848 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0208 	orr.w	r2, r2, #8
 8006258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0204 	bic.w	r2, r2, #4
 8006268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69d9      	ldr	r1, [r3, #28]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	61da      	str	r2, [r3, #28]
      break;
 800627c:	e062      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	4618      	mov	r0, r3
 8006286:	f000 fb55 	bl	8006934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69d9      	ldr	r1, [r3, #28]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	021a      	lsls	r2, r3, #8
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	61da      	str	r2, [r3, #28]
      break;
 80062be:	e041      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fb8c 	bl	80069e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0208 	orr.w	r2, r2, #8
 80062da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0204 	bic.w	r2, r2, #4
 80062ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062fe:	e021      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fbbe 	bl	8006a88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	021a      	lsls	r2, r3, #8
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006340:	e000      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006342:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop

08006358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_TIM_ConfigClockSource+0x18>
 800636c:	2302      	movs	r3, #2
 800636e:	e0b3      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x180>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	4b55      	ldr	r3, [pc, #340]	; (80064e0 <HAL_TIM_ConfigClockSource+0x188>)
 800638c:	4013      	ands	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006396:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a8:	d03e      	beq.n	8006428 <HAL_TIM_ConfigClockSource+0xd0>
 80063aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ae:	f200 8087 	bhi.w	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	f000 8085 	beq.w	80064c4 <HAL_TIM_ConfigClockSource+0x16c>
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063be:	d87f      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063c0:	2b70      	cmp	r3, #112	; 0x70
 80063c2:	d01a      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0xa2>
 80063c4:	2b70      	cmp	r3, #112	; 0x70
 80063c6:	d87b      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063c8:	2b60      	cmp	r3, #96	; 0x60
 80063ca:	d050      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x116>
 80063cc:	2b60      	cmp	r3, #96	; 0x60
 80063ce:	d877      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063d0:	2b50      	cmp	r3, #80	; 0x50
 80063d2:	d03c      	beq.n	800644e <HAL_TIM_ConfigClockSource+0xf6>
 80063d4:	2b50      	cmp	r3, #80	; 0x50
 80063d6:	d873      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d058      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x136>
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d86f      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063e0:	2b30      	cmp	r3, #48	; 0x30
 80063e2:	d064      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
 80063e4:	2b30      	cmp	r3, #48	; 0x30
 80063e6:	d86b      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d060      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d867      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d05c      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d05a      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063f8:	e062      	b.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6899      	ldr	r1, [r3, #8]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f000 fc0b 	bl	8006c24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800641c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	609a      	str	r2, [r3, #8]
      break;
 8006426:	e04e      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	6899      	ldr	r1, [r3, #8]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f000 fbf4 	bl	8006c24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800644a:	609a      	str	r2, [r3, #8]
      break;
 800644c:	e03b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fb68 	bl	8006b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2150      	movs	r1, #80	; 0x50
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fbc1 	bl	8006bee <TIM_ITRx_SetConfig>
      break;
 800646c:	e02b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 fb87 	bl	8006b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2160      	movs	r1, #96	; 0x60
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fbb1 	bl	8006bee <TIM_ITRx_SetConfig>
      break;
 800648c:	e01b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6859      	ldr	r1, [r3, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	461a      	mov	r2, r3
 800649c:	f000 fb48 	bl	8006b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2140      	movs	r1, #64	; 0x40
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fba1 	bl	8006bee <TIM_ITRx_SetConfig>
      break;
 80064ac:	e00b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f000 fb98 	bl	8006bee <TIM_ITRx_SetConfig>
        break;
 80064be:	e002      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064c0:	bf00      	nop
 80064c2:	e000      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	fffeff88 	.word	0xfffeff88

080064e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a40      	ldr	r2, [pc, #256]	; (8006648 <TIM_Base_SetConfig+0x114>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006552:	d00f      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a3d      	ldr	r2, [pc, #244]	; (800664c <TIM_Base_SetConfig+0x118>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d00b      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a3c      	ldr	r2, [pc, #240]	; (8006650 <TIM_Base_SetConfig+0x11c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d007      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a3b      	ldr	r2, [pc, #236]	; (8006654 <TIM_Base_SetConfig+0x120>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_Base_SetConfig+0x40>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a3a      	ldr	r2, [pc, #232]	; (8006658 <TIM_Base_SetConfig+0x124>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d108      	bne.n	8006586 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <TIM_Base_SetConfig+0x114>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d02b      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006594:	d027      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2c      	ldr	r2, [pc, #176]	; (800664c <TIM_Base_SetConfig+0x118>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d023      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2b      	ldr	r2, [pc, #172]	; (8006650 <TIM_Base_SetConfig+0x11c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d01f      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2a      	ldr	r2, [pc, #168]	; (8006654 <TIM_Base_SetConfig+0x120>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d01b      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a29      	ldr	r2, [pc, #164]	; (8006658 <TIM_Base_SetConfig+0x124>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d017      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a28      	ldr	r2, [pc, #160]	; (800665c <TIM_Base_SetConfig+0x128>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d013      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a27      	ldr	r2, [pc, #156]	; (8006660 <TIM_Base_SetConfig+0x12c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00f      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a26      	ldr	r2, [pc, #152]	; (8006664 <TIM_Base_SetConfig+0x130>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00b      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a25      	ldr	r2, [pc, #148]	; (8006668 <TIM_Base_SetConfig+0x134>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d007      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a24      	ldr	r2, [pc, #144]	; (800666c <TIM_Base_SetConfig+0x138>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_Base_SetConfig+0xb2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a23      	ldr	r2, [pc, #140]	; (8006670 <TIM_Base_SetConfig+0x13c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d108      	bne.n	80065f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a0a      	ldr	r2, [pc, #40]	; (8006648 <TIM_Base_SetConfig+0x114>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_Base_SetConfig+0xf8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <TIM_Base_SetConfig+0x124>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d103      	bne.n	8006634 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	615a      	str	r2, [r3, #20]
}
 800663a:	bf00      	nop
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40010000 	.word	0x40010000
 800664c:	40000400 	.word	0x40000400
 8006650:	40000800 	.word	0x40000800
 8006654:	40000c00 	.word	0x40000c00
 8006658:	40010400 	.word	0x40010400
 800665c:	40014000 	.word	0x40014000
 8006660:	40014400 	.word	0x40014400
 8006664:	40014800 	.word	0x40014800
 8006668:	40001800 	.word	0x40001800
 800666c:	40001c00 	.word	0x40001c00
 8006670:	40002000 	.word	0x40002000

08006674 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4b2b      	ldr	r3, [pc, #172]	; (800674c <TIM_OC1_SetConfig+0xd8>)
 80066a0:	4013      	ands	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0303 	bic.w	r3, r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f023 0302 	bic.w	r3, r3, #2
 80066bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a21      	ldr	r2, [pc, #132]	; (8006750 <TIM_OC1_SetConfig+0xdc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_OC1_SetConfig+0x64>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a20      	ldr	r2, [pc, #128]	; (8006754 <TIM_OC1_SetConfig+0xe0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d10c      	bne.n	80066f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0308 	bic.w	r3, r3, #8
 80066de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f023 0304 	bic.w	r3, r3, #4
 80066f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a16      	ldr	r2, [pc, #88]	; (8006750 <TIM_OC1_SetConfig+0xdc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_OC1_SetConfig+0x8e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <TIM_OC1_SetConfig+0xe0>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d111      	bne.n	8006726 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	621a      	str	r2, [r3, #32]
}
 8006740:	bf00      	nop
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	fffeff8f 	.word	0xfffeff8f
 8006750:	40010000 	.word	0x40010000
 8006754:	40010400 	.word	0x40010400

08006758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f023 0210 	bic.w	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4b2e      	ldr	r3, [pc, #184]	; (800683c <TIM_OC2_SetConfig+0xe4>)
 8006784:	4013      	ands	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800678e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0320 	bic.w	r3, r3, #32
 80067a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	011b      	lsls	r3, r3, #4
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a23      	ldr	r2, [pc, #140]	; (8006840 <TIM_OC2_SetConfig+0xe8>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_OC2_SetConfig+0x68>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a22      	ldr	r2, [pc, #136]	; (8006844 <TIM_OC2_SetConfig+0xec>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d10d      	bne.n	80067dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a18      	ldr	r2, [pc, #96]	; (8006840 <TIM_OC2_SetConfig+0xe8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_OC2_SetConfig+0x94>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a17      	ldr	r2, [pc, #92]	; (8006844 <TIM_OC2_SetConfig+0xec>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d113      	bne.n	8006814 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	feff8fff 	.word	0xfeff8fff
 8006840:	40010000 	.word	0x40010000
 8006844:	40010400 	.word	0x40010400

08006848 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4b2d      	ldr	r3, [pc, #180]	; (8006928 <TIM_OC3_SetConfig+0xe0>)
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a22      	ldr	r2, [pc, #136]	; (800692c <TIM_OC3_SetConfig+0xe4>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_OC3_SetConfig+0x66>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a21      	ldr	r2, [pc, #132]	; (8006930 <TIM_OC3_SetConfig+0xe8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10d      	bne.n	80068ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a17      	ldr	r2, [pc, #92]	; (800692c <TIM_OC3_SetConfig+0xe4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d003      	beq.n	80068da <TIM_OC3_SetConfig+0x92>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a16      	ldr	r2, [pc, #88]	; (8006930 <TIM_OC3_SetConfig+0xe8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d113      	bne.n	8006902 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	011b      	lsls	r3, r3, #4
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	4313      	orrs	r3, r2
 8006900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	621a      	str	r2, [r3, #32]
}
 800691c:	bf00      	nop
 800691e:	371c      	adds	r7, #28
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	fffeff8f 	.word	0xfffeff8f
 800692c:	40010000 	.word	0x40010000
 8006930:	40010400 	.word	0x40010400

08006934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <TIM_OC4_SetConfig+0xa4>)
 8006960:	4013      	ands	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800697e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a13      	ldr	r2, [pc, #76]	; (80069dc <TIM_OC4_SetConfig+0xa8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC4_SetConfig+0x68>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <TIM_OC4_SetConfig+0xac>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d109      	bne.n	80069b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	019b      	lsls	r3, r3, #6
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	feff8fff 	.word	0xfeff8fff
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40010400 	.word	0x40010400

080069e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <TIM_OC5_SetConfig+0x98>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a12      	ldr	r2, [pc, #72]	; (8006a80 <TIM_OC5_SetConfig+0x9c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d003      	beq.n	8006a42 <TIM_OC5_SetConfig+0x5e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <TIM_OC5_SetConfig+0xa0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d109      	bne.n	8006a56 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	621a      	str	r2, [r3, #32]
}
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	fffeff8f 	.word	0xfffeff8f
 8006a80:	40010000 	.word	0x40010000
 8006a84:	40010400 	.word	0x40010400

08006a88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4b1c      	ldr	r3, [pc, #112]	; (8006b24 <TIM_OC6_SetConfig+0x9c>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	051b      	lsls	r3, r3, #20
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a13      	ldr	r2, [pc, #76]	; (8006b28 <TIM_OC6_SetConfig+0xa0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC6_SetConfig+0x60>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a12      	ldr	r2, [pc, #72]	; (8006b2c <TIM_OC6_SetConfig+0xa4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d109      	bne.n	8006afc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	029b      	lsls	r3, r3, #10
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	feff8fff 	.word	0xfeff8fff
 8006b28:	40010000 	.word	0x40010000
 8006b2c:	40010400 	.word	0x40010400

08006b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f023 0201 	bic.w	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f023 030a 	bic.w	r3, r3, #10
 8006b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b087      	sub	sp, #28
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	60f8      	str	r0, [r7, #12]
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	f023 0210 	bic.w	r2, r3, #16
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a1b      	ldr	r3, [r3, #32]
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	031b      	lsls	r3, r3, #12
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	621a      	str	r2, [r3, #32]
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	f043 0307 	orr.w	r3, r3, #7
 8006c10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	609a      	str	r2, [r3, #8]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	607a      	str	r2, [r7, #4]
 8006c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	021a      	lsls	r2, r3, #8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	609a      	str	r2, [r3, #8]
}
 8006c58:	bf00      	nop
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	2201      	movs	r2, #1
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6a1a      	ldr	r2, [r3, #32]
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	43db      	mvns	r3, r3
 8006c86:	401a      	ands	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a1a      	ldr	r2, [r3, #32]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f003 031f 	and.w	r3, r3, #31
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	621a      	str	r2, [r3, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	371c      	adds	r7, #28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e06d      	b.n	8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a30      	ldr	r2, [pc, #192]	; (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a2f      	ldr	r2, [pc, #188]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d108      	bne.n	8006d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a20      	ldr	r2, [pc, #128]	; (8006db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d022      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d3a:	d01d      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1d      	ldr	r2, [pc, #116]	; (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d018      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1c      	ldr	r2, [pc, #112]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d013      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1a      	ldr	r2, [pc, #104]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00e      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d009      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d10c      	bne.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	40010000 	.word	0x40010000
 8006db4:	40010400 	.word	0x40010400
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40014000 	.word	0x40014000
 8006dc8:	40001800 	.word	0x40001800

08006dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e040      	b.n	8006e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fb fcf0 	bl	8002810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2224      	movs	r2, #36	; 0x24
 8006e34:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fb08 	bl	800745c <UART_SetConfig>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e022      	b.n	8006e9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fd5e 	bl	8007920 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fde5 	bl	8007a64 <UART_CheckIdleState>
 8006e9a:	4603      	mov	r3, r0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	f040 8081 	bne.w	8006fc0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d002      	beq.n	8006eca <HAL_UART_Transmit+0x26>
 8006ec4:	88fb      	ldrh	r3, [r7, #6]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e079      	b.n	8006fc2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Transmit+0x38>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	e072      	b.n	8006fc2 <HAL_UART_Transmit+0x11e>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2221      	movs	r2, #33	; 0x21
 8006ef0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ef2:	f7fb fddd 	bl	8002ab0 <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f10:	d108      	bne.n	8006f24 <HAL_UART_Transmit+0x80>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d104      	bne.n	8006f24 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	e003      	b.n	8006f2c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006f34:	e02c      	b.n	8006f90 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2180      	movs	r1, #128	; 0x80
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 fdc2 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e038      	b.n	8006fc2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10b      	bne.n	8006f6e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	3302      	adds	r3, #2
 8006f6a:	61bb      	str	r3, [r7, #24]
 8006f6c:	e007      	b.n	8006f7e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	781a      	ldrb	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	b29a      	uxth	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1cc      	bne.n	8006f36 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fd8f 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e005      	b.n	8006fc2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e000      	b.n	8006fc2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d12c      	bne.n	800703a <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_UART_Receive_IT+0x22>
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e025      	b.n	800703c <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_UART_Receive_IT+0x34>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e01e      	b.n	800703c <HAL_UART_Receive_IT+0x72>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d007      	beq.n	800702a <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007028:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	461a      	mov	r2, r3
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fdc7 	bl	8007bc4 <UART_Start_Receive_IT>
 8007036:	4603      	mov	r3, r0
 8007038:	e000      	b.n	800703c <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800703a:	2302      	movs	r3, #2
  }
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	f640 030f 	movw	r3, #2063	; 0x80f
 800706a:	4013      	ands	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d113      	bne.n	800709c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00e      	beq.n	800709c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d009      	beq.n	800709c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 81b9 	beq.w	8007404 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
      }
      return;
 800709a:	e1b3      	b.n	8007404 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80e3 	beq.w	800726a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d105      	bne.n	80070ba <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4ba5      	ldr	r3, [pc, #660]	; (8007348 <HAL_UART_IRQHandler+0x304>)
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 80d8 	beq.w	800726a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HAL_UART_IRQHandler+0xa2>
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00b      	beq.n	80070e6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2201      	movs	r2, #1
 80070d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070dc:	f043 0201 	orr.w	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d010      	beq.n	8007112 <HAL_UART_IRQHandler+0xce>
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2202      	movs	r2, #2
 8007100:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007108:	f043 0204 	orr.w	r2, r3, #4
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d010      	beq.n	800713e <HAL_UART_IRQHandler+0xfa>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00b      	beq.n	800713e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2204      	movs	r2, #4
 800712c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007134:	f043 0202 	orr.w	r2, r3, #2
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b00      	cmp	r3, #0
 8007146:	d015      	beq.n	8007174 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d104      	bne.n	800715c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2208      	movs	r2, #8
 8007162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800716a:	f043 0208 	orr.w	r2, r3, #8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800717a:	2b00      	cmp	r3, #0
 800717c:	d011      	beq.n	80071a2 <HAL_UART_IRQHandler+0x15e>
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00c      	beq.n	80071a2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007198:	f043 0220 	orr.w	r2, r3, #32
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 812d 	beq.w	8007408 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00c      	beq.n	80071d2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f003 0320 	and.w	r3, r3, #32
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071d8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e4:	2b40      	cmp	r3, #64	; 0x40
 80071e6:	d004      	beq.n	80071f2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d031      	beq.n	8007256 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fd6e 	bl	8007cd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	2b40      	cmp	r3, #64	; 0x40
 8007204:	d123      	bne.n	800724e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007214:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721a:	2b00      	cmp	r3, #0
 800721c:	d013      	beq.n	8007246 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	4a4a      	ldr	r2, [pc, #296]	; (800734c <HAL_UART_IRQHandler+0x308>)
 8007224:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	4618      	mov	r0, r3
 800722c:	f7fc fabd 	bl	80037aa <HAL_DMA_Abort_IT>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d017      	beq.n	8007266 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007244:	e00f      	b.n	8007266 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8f2 	bl	8007430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e00b      	b.n	8007266 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f8ee 	bl	8007430 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	e007      	b.n	8007266 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f8ea 	bl	8007430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007264:	e0d0      	b.n	8007408 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007266:	bf00      	nop
    return;
 8007268:	e0ce      	b.n	8007408 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800726e:	2b01      	cmp	r3, #1
 8007270:	f040 80a7 	bne.w	80073c2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 80a1 	beq.w	80073c2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 809b 	beq.w	80073c2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2210      	movs	r2, #16
 8007292:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d156      	bne.n	8007350 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80072ac:	893b      	ldrh	r3, [r7, #8]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	f000 80ac 	beq.w	800740c <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80072ba:	893a      	ldrh	r2, [r7, #8]
 80072bc:	429a      	cmp	r2, r3
 80072be:	f080 80a5 	bcs.w	800740c <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	893a      	ldrh	r2, [r7, #8]
 80072c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d4:	d02a      	beq.n	800732c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0201 	bic.w	r2, r2, #1
 80072f4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007304:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0210 	bic.w	r2, r2, #16
 8007320:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	4618      	mov	r0, r3
 8007328:	f7fc f9cf 	bl	80036ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007338:	b29b      	uxth	r3, r3
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	b29b      	uxth	r3, r3
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f87f 	bl	8007444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007346:	e061      	b.n	800740c <HAL_UART_IRQHandler+0x3c8>
 8007348:	04000120 	.word	0x04000120
 800734c:	08007d33 	.word	0x08007d33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800735c:	b29b      	uxth	r3, r3
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d050      	beq.n	8007410 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800736e:	897b      	ldrh	r3, [r7, #10]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d04d      	beq.n	8007410 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007382:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0201 	bic.w	r2, r2, #1
 8007392:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2220      	movs	r2, #32
 8007398:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0210 	bic.w	r2, r2, #16
 80073b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073b6:	897b      	ldrh	r3, [r7, #10]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f842 	bl	8007444 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073c0:	e026      	b.n	8007410 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00d      	beq.n	80073e8 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d008      	beq.n	80073e8 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01a      	beq.n	8007414 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
    }
    return;
 80073e6:	e015      	b.n	8007414 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d011      	beq.n	8007416 <HAL_UART_IRQHandler+0x3d2>
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00c      	beq.n	8007416 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fcae 	bl	8007d5e <UART_EndTransmit_IT>
    return;
 8007402:	e008      	b.n	8007416 <HAL_UART_IRQHandler+0x3d2>
      return;
 8007404:	bf00      	nop
 8007406:	e006      	b.n	8007416 <HAL_UART_IRQHandler+0x3d2>
    return;
 8007408:	bf00      	nop
 800740a:	e004      	b.n	8007416 <HAL_UART_IRQHandler+0x3d2>
      return;
 800740c:	bf00      	nop
 800740e:	e002      	b.n	8007416 <HAL_UART_IRQHandler+0x3d2>
      return;
 8007410:	bf00      	nop
 8007412:	e000      	b.n	8007416 <HAL_UART_IRQHandler+0x3d2>
    return;
 8007414:	bf00      	nop
  }

}
 8007416:	3720      	adds	r7, #32
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4ba7      	ldr	r3, [pc, #668]	; (8007724 <UART_SetConfig+0x2c8>)
 8007488:	4013      	ands	r3, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6812      	ldr	r2, [r2, #0]
 800748e:	6979      	ldr	r1, [r7, #20]
 8007490:	430b      	orrs	r3, r1
 8007492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a95      	ldr	r2, [pc, #596]	; (8007728 <UART_SetConfig+0x2cc>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d120      	bne.n	800751a <UART_SetConfig+0xbe>
 80074d8:	4b94      	ldr	r3, [pc, #592]	; (800772c <UART_SetConfig+0x2d0>)
 80074da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	d816      	bhi.n	8007514 <UART_SetConfig+0xb8>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <UART_SetConfig+0x90>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	080074fd 	.word	0x080074fd
 80074f0:	08007509 	.word	0x08007509
 80074f4:	08007503 	.word	0x08007503
 80074f8:	0800750f 	.word	0x0800750f
 80074fc:	2301      	movs	r3, #1
 80074fe:	77fb      	strb	r3, [r7, #31]
 8007500:	e14f      	b.n	80077a2 <UART_SetConfig+0x346>
 8007502:	2302      	movs	r3, #2
 8007504:	77fb      	strb	r3, [r7, #31]
 8007506:	e14c      	b.n	80077a2 <UART_SetConfig+0x346>
 8007508:	2304      	movs	r3, #4
 800750a:	77fb      	strb	r3, [r7, #31]
 800750c:	e149      	b.n	80077a2 <UART_SetConfig+0x346>
 800750e:	2308      	movs	r3, #8
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e146      	b.n	80077a2 <UART_SetConfig+0x346>
 8007514:	2310      	movs	r3, #16
 8007516:	77fb      	strb	r3, [r7, #31]
 8007518:	e143      	b.n	80077a2 <UART_SetConfig+0x346>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a84      	ldr	r2, [pc, #528]	; (8007730 <UART_SetConfig+0x2d4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d132      	bne.n	800758a <UART_SetConfig+0x12e>
 8007524:	4b81      	ldr	r3, [pc, #516]	; (800772c <UART_SetConfig+0x2d0>)
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	f003 030c 	and.w	r3, r3, #12
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d828      	bhi.n	8007584 <UART_SetConfig+0x128>
 8007532:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <UART_SetConfig+0xdc>)
 8007534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007538:	0800756d 	.word	0x0800756d
 800753c:	08007585 	.word	0x08007585
 8007540:	08007585 	.word	0x08007585
 8007544:	08007585 	.word	0x08007585
 8007548:	08007579 	.word	0x08007579
 800754c:	08007585 	.word	0x08007585
 8007550:	08007585 	.word	0x08007585
 8007554:	08007585 	.word	0x08007585
 8007558:	08007573 	.word	0x08007573
 800755c:	08007585 	.word	0x08007585
 8007560:	08007585 	.word	0x08007585
 8007564:	08007585 	.word	0x08007585
 8007568:	0800757f 	.word	0x0800757f
 800756c:	2300      	movs	r3, #0
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e117      	b.n	80077a2 <UART_SetConfig+0x346>
 8007572:	2302      	movs	r3, #2
 8007574:	77fb      	strb	r3, [r7, #31]
 8007576:	e114      	b.n	80077a2 <UART_SetConfig+0x346>
 8007578:	2304      	movs	r3, #4
 800757a:	77fb      	strb	r3, [r7, #31]
 800757c:	e111      	b.n	80077a2 <UART_SetConfig+0x346>
 800757e:	2308      	movs	r3, #8
 8007580:	77fb      	strb	r3, [r7, #31]
 8007582:	e10e      	b.n	80077a2 <UART_SetConfig+0x346>
 8007584:	2310      	movs	r3, #16
 8007586:	77fb      	strb	r3, [r7, #31]
 8007588:	e10b      	b.n	80077a2 <UART_SetConfig+0x346>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a69      	ldr	r2, [pc, #420]	; (8007734 <UART_SetConfig+0x2d8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d120      	bne.n	80075d6 <UART_SetConfig+0x17a>
 8007594:	4b65      	ldr	r3, [pc, #404]	; (800772c <UART_SetConfig+0x2d0>)
 8007596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800759e:	2b30      	cmp	r3, #48	; 0x30
 80075a0:	d013      	beq.n	80075ca <UART_SetConfig+0x16e>
 80075a2:	2b30      	cmp	r3, #48	; 0x30
 80075a4:	d814      	bhi.n	80075d0 <UART_SetConfig+0x174>
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d009      	beq.n	80075be <UART_SetConfig+0x162>
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d810      	bhi.n	80075d0 <UART_SetConfig+0x174>
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <UART_SetConfig+0x15c>
 80075b2:	2b10      	cmp	r3, #16
 80075b4:	d006      	beq.n	80075c4 <UART_SetConfig+0x168>
 80075b6:	e00b      	b.n	80075d0 <UART_SetConfig+0x174>
 80075b8:	2300      	movs	r3, #0
 80075ba:	77fb      	strb	r3, [r7, #31]
 80075bc:	e0f1      	b.n	80077a2 <UART_SetConfig+0x346>
 80075be:	2302      	movs	r3, #2
 80075c0:	77fb      	strb	r3, [r7, #31]
 80075c2:	e0ee      	b.n	80077a2 <UART_SetConfig+0x346>
 80075c4:	2304      	movs	r3, #4
 80075c6:	77fb      	strb	r3, [r7, #31]
 80075c8:	e0eb      	b.n	80077a2 <UART_SetConfig+0x346>
 80075ca:	2308      	movs	r3, #8
 80075cc:	77fb      	strb	r3, [r7, #31]
 80075ce:	e0e8      	b.n	80077a2 <UART_SetConfig+0x346>
 80075d0:	2310      	movs	r3, #16
 80075d2:	77fb      	strb	r3, [r7, #31]
 80075d4:	e0e5      	b.n	80077a2 <UART_SetConfig+0x346>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a57      	ldr	r2, [pc, #348]	; (8007738 <UART_SetConfig+0x2dc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d120      	bne.n	8007622 <UART_SetConfig+0x1c6>
 80075e0:	4b52      	ldr	r3, [pc, #328]	; (800772c <UART_SetConfig+0x2d0>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075ea:	2bc0      	cmp	r3, #192	; 0xc0
 80075ec:	d013      	beq.n	8007616 <UART_SetConfig+0x1ba>
 80075ee:	2bc0      	cmp	r3, #192	; 0xc0
 80075f0:	d814      	bhi.n	800761c <UART_SetConfig+0x1c0>
 80075f2:	2b80      	cmp	r3, #128	; 0x80
 80075f4:	d009      	beq.n	800760a <UART_SetConfig+0x1ae>
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d810      	bhi.n	800761c <UART_SetConfig+0x1c0>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <UART_SetConfig+0x1a8>
 80075fe:	2b40      	cmp	r3, #64	; 0x40
 8007600:	d006      	beq.n	8007610 <UART_SetConfig+0x1b4>
 8007602:	e00b      	b.n	800761c <UART_SetConfig+0x1c0>
 8007604:	2300      	movs	r3, #0
 8007606:	77fb      	strb	r3, [r7, #31]
 8007608:	e0cb      	b.n	80077a2 <UART_SetConfig+0x346>
 800760a:	2302      	movs	r3, #2
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	e0c8      	b.n	80077a2 <UART_SetConfig+0x346>
 8007610:	2304      	movs	r3, #4
 8007612:	77fb      	strb	r3, [r7, #31]
 8007614:	e0c5      	b.n	80077a2 <UART_SetConfig+0x346>
 8007616:	2308      	movs	r3, #8
 8007618:	77fb      	strb	r3, [r7, #31]
 800761a:	e0c2      	b.n	80077a2 <UART_SetConfig+0x346>
 800761c:	2310      	movs	r3, #16
 800761e:	77fb      	strb	r3, [r7, #31]
 8007620:	e0bf      	b.n	80077a2 <UART_SetConfig+0x346>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a45      	ldr	r2, [pc, #276]	; (800773c <UART_SetConfig+0x2e0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d125      	bne.n	8007678 <UART_SetConfig+0x21c>
 800762c:	4b3f      	ldr	r3, [pc, #252]	; (800772c <UART_SetConfig+0x2d0>)
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800763a:	d017      	beq.n	800766c <UART_SetConfig+0x210>
 800763c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007640:	d817      	bhi.n	8007672 <UART_SetConfig+0x216>
 8007642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007646:	d00b      	beq.n	8007660 <UART_SetConfig+0x204>
 8007648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764c:	d811      	bhi.n	8007672 <UART_SetConfig+0x216>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <UART_SetConfig+0x1fe>
 8007652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007656:	d006      	beq.n	8007666 <UART_SetConfig+0x20a>
 8007658:	e00b      	b.n	8007672 <UART_SetConfig+0x216>
 800765a:	2300      	movs	r3, #0
 800765c:	77fb      	strb	r3, [r7, #31]
 800765e:	e0a0      	b.n	80077a2 <UART_SetConfig+0x346>
 8007660:	2302      	movs	r3, #2
 8007662:	77fb      	strb	r3, [r7, #31]
 8007664:	e09d      	b.n	80077a2 <UART_SetConfig+0x346>
 8007666:	2304      	movs	r3, #4
 8007668:	77fb      	strb	r3, [r7, #31]
 800766a:	e09a      	b.n	80077a2 <UART_SetConfig+0x346>
 800766c:	2308      	movs	r3, #8
 800766e:	77fb      	strb	r3, [r7, #31]
 8007670:	e097      	b.n	80077a2 <UART_SetConfig+0x346>
 8007672:	2310      	movs	r3, #16
 8007674:	77fb      	strb	r3, [r7, #31]
 8007676:	e094      	b.n	80077a2 <UART_SetConfig+0x346>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a30      	ldr	r2, [pc, #192]	; (8007740 <UART_SetConfig+0x2e4>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d125      	bne.n	80076ce <UART_SetConfig+0x272>
 8007682:	4b2a      	ldr	r3, [pc, #168]	; (800772c <UART_SetConfig+0x2d0>)
 8007684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800768c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007690:	d017      	beq.n	80076c2 <UART_SetConfig+0x266>
 8007692:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007696:	d817      	bhi.n	80076c8 <UART_SetConfig+0x26c>
 8007698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800769c:	d00b      	beq.n	80076b6 <UART_SetConfig+0x25a>
 800769e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a2:	d811      	bhi.n	80076c8 <UART_SetConfig+0x26c>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <UART_SetConfig+0x254>
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ac:	d006      	beq.n	80076bc <UART_SetConfig+0x260>
 80076ae:	e00b      	b.n	80076c8 <UART_SetConfig+0x26c>
 80076b0:	2301      	movs	r3, #1
 80076b2:	77fb      	strb	r3, [r7, #31]
 80076b4:	e075      	b.n	80077a2 <UART_SetConfig+0x346>
 80076b6:	2302      	movs	r3, #2
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e072      	b.n	80077a2 <UART_SetConfig+0x346>
 80076bc:	2304      	movs	r3, #4
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e06f      	b.n	80077a2 <UART_SetConfig+0x346>
 80076c2:	2308      	movs	r3, #8
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e06c      	b.n	80077a2 <UART_SetConfig+0x346>
 80076c8:	2310      	movs	r3, #16
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e069      	b.n	80077a2 <UART_SetConfig+0x346>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <UART_SetConfig+0x2e8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d137      	bne.n	8007748 <UART_SetConfig+0x2ec>
 80076d8:	4b14      	ldr	r3, [pc, #80]	; (800772c <UART_SetConfig+0x2d0>)
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80076e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076e6:	d017      	beq.n	8007718 <UART_SetConfig+0x2bc>
 80076e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076ec:	d817      	bhi.n	800771e <UART_SetConfig+0x2c2>
 80076ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f2:	d00b      	beq.n	800770c <UART_SetConfig+0x2b0>
 80076f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076f8:	d811      	bhi.n	800771e <UART_SetConfig+0x2c2>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <UART_SetConfig+0x2aa>
 80076fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007702:	d006      	beq.n	8007712 <UART_SetConfig+0x2b6>
 8007704:	e00b      	b.n	800771e <UART_SetConfig+0x2c2>
 8007706:	2300      	movs	r3, #0
 8007708:	77fb      	strb	r3, [r7, #31]
 800770a:	e04a      	b.n	80077a2 <UART_SetConfig+0x346>
 800770c:	2302      	movs	r3, #2
 800770e:	77fb      	strb	r3, [r7, #31]
 8007710:	e047      	b.n	80077a2 <UART_SetConfig+0x346>
 8007712:	2304      	movs	r3, #4
 8007714:	77fb      	strb	r3, [r7, #31]
 8007716:	e044      	b.n	80077a2 <UART_SetConfig+0x346>
 8007718:	2308      	movs	r3, #8
 800771a:	77fb      	strb	r3, [r7, #31]
 800771c:	e041      	b.n	80077a2 <UART_SetConfig+0x346>
 800771e:	2310      	movs	r3, #16
 8007720:	77fb      	strb	r3, [r7, #31]
 8007722:	e03e      	b.n	80077a2 <UART_SetConfig+0x346>
 8007724:	efff69f3 	.word	0xefff69f3
 8007728:	40011000 	.word	0x40011000
 800772c:	40023800 	.word	0x40023800
 8007730:	40004400 	.word	0x40004400
 8007734:	40004800 	.word	0x40004800
 8007738:	40004c00 	.word	0x40004c00
 800773c:	40005000 	.word	0x40005000
 8007740:	40011400 	.word	0x40011400
 8007744:	40007800 	.word	0x40007800
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a71      	ldr	r2, [pc, #452]	; (8007914 <UART_SetConfig+0x4b8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d125      	bne.n	800779e <UART_SetConfig+0x342>
 8007752:	4b71      	ldr	r3, [pc, #452]	; (8007918 <UART_SetConfig+0x4bc>)
 8007754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800775c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007760:	d017      	beq.n	8007792 <UART_SetConfig+0x336>
 8007762:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007766:	d817      	bhi.n	8007798 <UART_SetConfig+0x33c>
 8007768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776c:	d00b      	beq.n	8007786 <UART_SetConfig+0x32a>
 800776e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007772:	d811      	bhi.n	8007798 <UART_SetConfig+0x33c>
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <UART_SetConfig+0x324>
 8007778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777c:	d006      	beq.n	800778c <UART_SetConfig+0x330>
 800777e:	e00b      	b.n	8007798 <UART_SetConfig+0x33c>
 8007780:	2300      	movs	r3, #0
 8007782:	77fb      	strb	r3, [r7, #31]
 8007784:	e00d      	b.n	80077a2 <UART_SetConfig+0x346>
 8007786:	2302      	movs	r3, #2
 8007788:	77fb      	strb	r3, [r7, #31]
 800778a:	e00a      	b.n	80077a2 <UART_SetConfig+0x346>
 800778c:	2304      	movs	r3, #4
 800778e:	77fb      	strb	r3, [r7, #31]
 8007790:	e007      	b.n	80077a2 <UART_SetConfig+0x346>
 8007792:	2308      	movs	r3, #8
 8007794:	77fb      	strb	r3, [r7, #31]
 8007796:	e004      	b.n	80077a2 <UART_SetConfig+0x346>
 8007798:	2310      	movs	r3, #16
 800779a:	77fb      	strb	r3, [r7, #31]
 800779c:	e001      	b.n	80077a2 <UART_SetConfig+0x346>
 800779e:	2310      	movs	r3, #16
 80077a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077aa:	d15b      	bne.n	8007864 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80077ac:	7ffb      	ldrb	r3, [r7, #31]
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d827      	bhi.n	8007802 <UART_SetConfig+0x3a6>
 80077b2:	a201      	add	r2, pc, #4	; (adr r2, 80077b8 <UART_SetConfig+0x35c>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077e5 	.word	0x080077e5
 80077c0:	080077ed 	.word	0x080077ed
 80077c4:	08007803 	.word	0x08007803
 80077c8:	080077f3 	.word	0x080077f3
 80077cc:	08007803 	.word	0x08007803
 80077d0:	08007803 	.word	0x08007803
 80077d4:	08007803 	.word	0x08007803
 80077d8:	080077fb 	.word	0x080077fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077dc:	f7fd fcb0 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 80077e0:	61b8      	str	r0, [r7, #24]
        break;
 80077e2:	e013      	b.n	800780c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077e4:	f7fd fcc0 	bl	8005168 <HAL_RCC_GetPCLK2Freq>
 80077e8:	61b8      	str	r0, [r7, #24]
        break;
 80077ea:	e00f      	b.n	800780c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ec:	4b4b      	ldr	r3, [pc, #300]	; (800791c <UART_SetConfig+0x4c0>)
 80077ee:	61bb      	str	r3, [r7, #24]
        break;
 80077f0:	e00c      	b.n	800780c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fd fbb7 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 80077f6:	61b8      	str	r0, [r7, #24]
        break;
 80077f8:	e008      	b.n	800780c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fe:	61bb      	str	r3, [r7, #24]
        break;
 8007800:	e004      	b.n	800780c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	77bb      	strb	r3, [r7, #30]
        break;
 800780a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d074      	beq.n	80078fc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	005a      	lsls	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	fbb2 f3f3 	udiv	r3, r2, r3
 8007826:	b29b      	uxth	r3, r3
 8007828:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	2b0f      	cmp	r3, #15
 800782e:	d916      	bls.n	800785e <UART_SetConfig+0x402>
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007836:	d212      	bcs.n	800785e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	b29b      	uxth	r3, r3
 800783c:	f023 030f 	bic.w	r3, r3, #15
 8007840:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	085b      	lsrs	r3, r3, #1
 8007846:	b29b      	uxth	r3, r3
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	b29a      	uxth	r2, r3
 800784e:	89fb      	ldrh	r3, [r7, #14]
 8007850:	4313      	orrs	r3, r2
 8007852:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	89fa      	ldrh	r2, [r7, #14]
 800785a:	60da      	str	r2, [r3, #12]
 800785c:	e04e      	b.n	80078fc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	77bb      	strb	r3, [r7, #30]
 8007862:	e04b      	b.n	80078fc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007864:	7ffb      	ldrb	r3, [r7, #31]
 8007866:	2b08      	cmp	r3, #8
 8007868:	d827      	bhi.n	80078ba <UART_SetConfig+0x45e>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <UART_SetConfig+0x414>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	080078bb 	.word	0x080078bb
 8007880:	080078ab 	.word	0x080078ab
 8007884:	080078bb 	.word	0x080078bb
 8007888:	080078bb 	.word	0x080078bb
 800788c:	080078bb 	.word	0x080078bb
 8007890:	080078b3 	.word	0x080078b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007894:	f7fd fc54 	bl	8005140 <HAL_RCC_GetPCLK1Freq>
 8007898:	61b8      	str	r0, [r7, #24]
        break;
 800789a:	e013      	b.n	80078c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800789c:	f7fd fc64 	bl	8005168 <HAL_RCC_GetPCLK2Freq>
 80078a0:	61b8      	str	r0, [r7, #24]
        break;
 80078a2:	e00f      	b.n	80078c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a4:	4b1d      	ldr	r3, [pc, #116]	; (800791c <UART_SetConfig+0x4c0>)
 80078a6:	61bb      	str	r3, [r7, #24]
        break;
 80078a8:	e00c      	b.n	80078c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078aa:	f7fd fb5b 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 80078ae:	61b8      	str	r0, [r7, #24]
        break;
 80078b0:	e008      	b.n	80078c4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b6:	61bb      	str	r3, [r7, #24]
        break;
 80078b8:	e004      	b.n	80078c4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	77bb      	strb	r3, [r7, #30]
        break;
 80078c2:	bf00      	nop
    }

    if (pclk != 0U)
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d018      	beq.n	80078fc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	085a      	lsrs	r2, r3, #1
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	441a      	add	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078dc:	b29b      	uxth	r3, r3
 80078de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	2b0f      	cmp	r3, #15
 80078e4:	d908      	bls.n	80078f8 <UART_SetConfig+0x49c>
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ec:	d204      	bcs.n	80078f8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	e001      	b.n	80078fc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007908:	7fbb      	ldrb	r3, [r7, #30]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3720      	adds	r7, #32
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	40007c00 	.word	0x40007c00
 8007918:	40023800 	.word	0x40023800
 800791c:	00f42400 	.word	0x00f42400

08007920 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	f003 0301 	and.w	r3, r3, #1
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00a      	beq.n	800798e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00a      	beq.n	80079b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01a      	beq.n	8007a36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a1e:	d10a      	bne.n	8007a36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00a      	beq.n	8007a58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a74:	f7fb f81c 	bl	8002ab0 <HAL_GetTick>
 8007a78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b08      	cmp	r3, #8
 8007a86:	d10e      	bne.n	8007aa6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f817 	bl	8007aca <UART_WaitOnFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e00d      	b.n	8007ac2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	603b      	str	r3, [r7, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ada:	e05e      	b.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae2:	d05a      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ae4:	f7fa ffe4 	bl	8002ab0 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d302      	bcc.n	8007afa <UART_WaitOnFlagUntilTimeout+0x30>
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d11b      	bne.n	8007b32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0201 	bic.w	r2, r2, #1
 8007b18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2220      	movs	r2, #32
 8007b24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e043      	b.n	8007bba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0304 	and.w	r3, r3, #4
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d02c      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b4e:	d124      	bne.n	8007b9a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0201 	bic.w	r2, r2, #1
 8007b78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2220      	movs	r2, #32
 8007b84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e00f      	b.n	8007bba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	79fb      	ldrb	r3, [r7, #7]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d091      	beq.n	8007adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	88fa      	ldrh	r2, [r7, #6]
 8007bdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	88fa      	ldrh	r2, [r7, #6]
 8007be4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf6:	d10e      	bne.n	8007c16 <UART_Start_Receive_IT+0x52>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d105      	bne.n	8007c0c <UART_Start_Receive_IT+0x48>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007c06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c0a:	e02d      	b.n	8007c68 <UART_Start_Receive_IT+0xa4>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	22ff      	movs	r2, #255	; 0xff
 8007c10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c14:	e028      	b.n	8007c68 <UART_Start_Receive_IT+0xa4>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10d      	bne.n	8007c3a <UART_Start_Receive_IT+0x76>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <UART_Start_Receive_IT+0x6c>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	22ff      	movs	r2, #255	; 0xff
 8007c2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c2e:	e01b      	b.n	8007c68 <UART_Start_Receive_IT+0xa4>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	227f      	movs	r2, #127	; 0x7f
 8007c34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c38:	e016      	b.n	8007c68 <UART_Start_Receive_IT+0xa4>
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c42:	d10d      	bne.n	8007c60 <UART_Start_Receive_IT+0x9c>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <UART_Start_Receive_IT+0x92>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	227f      	movs	r2, #127	; 0x7f
 8007c50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c54:	e008      	b.n	8007c68 <UART_Start_Receive_IT+0xa4>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	223f      	movs	r2, #63	; 0x3f
 8007c5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007c5e:	e003      	b.n	8007c68 <UART_Start_Receive_IT+0xa4>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2222      	movs	r2, #34	; 0x22
 8007c74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0201 	orr.w	r2, r2, #1
 8007c84:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c8e:	d107      	bne.n	8007ca0 <UART_Start_Receive_IT+0xdc>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4a0c      	ldr	r2, [pc, #48]	; (8007ccc <UART_Start_Receive_IT+0x108>)
 8007c9c:	665a      	str	r2, [r3, #100]	; 0x64
 8007c9e:	e002      	b.n	8007ca6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a0b      	ldr	r2, [pc, #44]	; (8007cd0 <UART_Start_Receive_IT+0x10c>)
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007cbc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	08007e65 	.word	0x08007e65
 8007cd0:	08007d91 	.word	0x08007d91

08007cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007cea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689a      	ldr	r2, [r3, #8]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d107      	bne.n	8007d14 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0210 	bic.w	r2, r2, #16
 8007d12:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f7ff fb6d 	bl	8007430 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d74:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7ff fb4a 	bl	800741c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d9e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da4:	2b22      	cmp	r3, #34	; 0x22
 8007da6:	d151      	bne.n	8007e4c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007db0:	89bb      	ldrh	r3, [r7, #12]
 8007db2:	b2d9      	uxtb	r1, r3
 8007db4:	89fb      	ldrh	r3, [r7, #14]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbc:	400a      	ands	r2, r1
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc6:	1c5a      	adds	r2, r3, #1
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d138      	bne.n	8007e5c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007df8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0201 	bic.w	r2, r2, #1
 8007e08:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2220      	movs	r2, #32
 8007e0e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d10f      	bne.n	8007e3e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0210 	bic.w	r2, r2, #16
 8007e2c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e34:	4619      	mov	r1, r3
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fb04 	bl	8007444 <HAL_UARTEx_RxEventCallback>
 8007e3c:	e002      	b.n	8007e44 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fa f816 	bl	8001e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e4a:	e007      	b.n	8007e5c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0208 	orr.w	r2, r2, #8
 8007e5a:	619a      	str	r2, [r3, #24]
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e72:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e78:	2b22      	cmp	r3, #34	; 0x22
 8007e7a:	d151      	bne.n	8007f20 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e8a:	89ba      	ldrh	r2, [r7, #12]
 8007e8c:	89fb      	ldrh	r3, [r7, #14]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9a:	1c9a      	adds	r2, r3, #2
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d138      	bne.n	8007f30 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ecc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f022 0201 	bic.w	r2, r2, #1
 8007edc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d10f      	bne.n	8007f12 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0210 	bic.w	r2, r2, #16
 8007f00:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007f08:	4619      	mov	r1, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fa9a 	bl	8007444 <HAL_UARTEx_RxEventCallback>
 8007f10:	e002      	b.n	8007f18 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7f9 ffac 	bl	8001e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f1e:	e007      	b.n	8007f30 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699a      	ldr	r2, [r3, #24]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0208 	orr.w	r2, r2, #8
 8007f2e:	619a      	str	r2, [r3, #24]
}
 8007f30:	bf00      	nop
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f38:	b084      	sub	sp, #16
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	f107 001c 	add.w	r0, r7, #28
 8007f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d120      	bne.n	8007f92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	4b20      	ldr	r3, [pc, #128]	; (8007fe4 <USB_CoreInit+0xac>)
 8007f62:	4013      	ands	r3, r2
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d105      	bne.n	8007f86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa5a 	bl	8008440 <USB_CoreReset>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
 8007f90:	e010      	b.n	8007fb4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fa4e 	bl	8008440 <USB_CoreReset>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d10b      	bne.n	8007fd2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f043 0206 	orr.w	r2, r3, #6
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f043 0220 	orr.w	r2, r3, #32
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fde:	b004      	add	sp, #16
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	ffbdffbf 	.word	0xffbdffbf

08007fe8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f023 0201 	bic.w	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	460b      	mov	r3, r1
 8008014:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d106      	bne.n	8008036 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60da      	str	r2, [r3, #12]
 8008034:	e00b      	b.n	800804e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d106      	bne.n	800804a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	60da      	str	r2, [r3, #12]
 8008048:	e001      	b.n	800804e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e003      	b.n	8008056 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800804e:	2032      	movs	r0, #50	; 0x32
 8008050:	f7fa fd3a 	bl	8002ac8 <HAL_Delay>

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008060:	b084      	sub	sp, #16
 8008062:	b580      	push	{r7, lr}
 8008064:	b086      	sub	sp, #24
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800806e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800807a:	2300      	movs	r3, #0
 800807c:	613b      	str	r3, [r7, #16]
 800807e:	e009      	b.n	8008094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3340      	adds	r3, #64	; 0x40
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	2200      	movs	r2, #0
 800808c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	3301      	adds	r3, #1
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b0e      	cmp	r3, #14
 8008098:	d9f2      	bls.n	8008080 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800809a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800809c:	2b00      	cmp	r3, #0
 800809e:	d11c      	bne.n	80080da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ae:	f043 0302 	orr.w	r3, r3, #2
 80080b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	e005      	b.n	80080e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080ec:	461a      	mov	r2, r3
 80080ee:	2300      	movs	r3, #0
 80080f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f8:	4619      	mov	r1, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008100:	461a      	mov	r2, r3
 8008102:	680b      	ldr	r3, [r1, #0]
 8008104:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	2b01      	cmp	r3, #1
 800810a:	d10c      	bne.n	8008126 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800810c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008112:	2100      	movs	r1, #0
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f959 	bl	80083cc <USB_SetDevSpeed>
 800811a:	e018      	b.n	800814e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800811c:	2101      	movs	r1, #1
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f954 	bl	80083cc <USB_SetDevSpeed>
 8008124:	e013      	b.n	800814e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	2b03      	cmp	r3, #3
 800812a:	d10c      	bne.n	8008146 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800812c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d104      	bne.n	800813c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008132:	2100      	movs	r1, #0
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f949 	bl	80083cc <USB_SetDevSpeed>
 800813a:	e008      	b.n	800814e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800813c:	2101      	movs	r1, #1
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f944 	bl	80083cc <USB_SetDevSpeed>
 8008144:	e003      	b.n	800814e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008146:	2103      	movs	r1, #3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f93f 	bl	80083cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800814e:	2110      	movs	r1, #16
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f8f3 	bl	800833c <USB_FlushTxFifo>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d001      	beq.n	8008160 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f911 	bl	8008388 <USB_FlushRxFifo>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	461a      	mov	r2, r3
 8008178:	2300      	movs	r3, #0
 800817a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	461a      	mov	r2, r3
 8008184:	2300      	movs	r3, #0
 8008186:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	461a      	mov	r2, r3
 8008190:	2300      	movs	r3, #0
 8008192:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]
 8008198:	e043      	b.n	8008222 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081b0:	d118      	bne.n	80081e4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10a      	bne.n	80081ce <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c4:	461a      	mov	r2, r3
 80081c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	e013      	b.n	80081f6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081da:	461a      	mov	r2, r3
 80081dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	e008      	b.n	80081f6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f0:	461a      	mov	r2, r3
 80081f2:	2300      	movs	r3, #0
 80081f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008202:	461a      	mov	r2, r3
 8008204:	2300      	movs	r3, #0
 8008206:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	461a      	mov	r2, r3
 8008216:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800821a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3301      	adds	r3, #1
 8008220:	613b      	str	r3, [r7, #16]
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	429a      	cmp	r2, r3
 8008228:	d3b7      	bcc.n	800819a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800822a:	2300      	movs	r3, #0
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	e043      	b.n	80082b8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008246:	d118      	bne.n	800827a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10a      	bne.n	8008264 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825a:	461a      	mov	r2, r3
 800825c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008260:	6013      	str	r3, [r2, #0]
 8008262:	e013      	b.n	800828c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	015a      	lsls	r2, r3, #5
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	4413      	add	r3, r2
 800826c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008270:	461a      	mov	r2, r3
 8008272:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008276:	6013      	str	r3, [r2, #0]
 8008278:	e008      	b.n	800828c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	461a      	mov	r2, r3
 8008288:	2300      	movs	r3, #0
 800828a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008298:	461a      	mov	r2, r3
 800829a:	2300      	movs	r3, #0
 800829c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082aa:	461a      	mov	r2, r3
 80082ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3301      	adds	r3, #1
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d3b7      	bcc.n	8008230 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d105      	bne.n	80082f4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	f043 0210 	orr.w	r2, r3, #16
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	4b0e      	ldr	r3, [pc, #56]	; (8008334 <USB_DevInit+0x2d4>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	699b      	ldr	r3, [r3, #24]
 800830a:	f043 0208 	orr.w	r2, r3, #8
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008314:	2b01      	cmp	r3, #1
 8008316:	d105      	bne.n	8008324 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699a      	ldr	r2, [r3, #24]
 800831c:	4b06      	ldr	r3, [pc, #24]	; (8008338 <USB_DevInit+0x2d8>)
 800831e:	4313      	orrs	r3, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008330:	b004      	add	sp, #16
 8008332:	4770      	bx	lr
 8008334:	803c3800 	.word	0x803c3800
 8008338:	40000004 	.word	0x40000004

0800833c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	019b      	lsls	r3, r3, #6
 800834e:	f043 0220 	orr.w	r2, r3, #32
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3301      	adds	r3, #1
 800835a:	60fb      	str	r3, [r7, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a09      	ldr	r2, [pc, #36]	; (8008384 <USB_FlushTxFifo+0x48>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d901      	bls.n	8008368 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e006      	b.n	8008376 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	f003 0320 	and.w	r3, r3, #32
 8008370:	2b20      	cmp	r3, #32
 8008372:	d0f0      	beq.n	8008356 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3714      	adds	r7, #20
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	00030d40 	.word	0x00030d40

08008388 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2210      	movs	r2, #16
 8008398:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <USB_FlushRxFifo+0x40>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d901      	bls.n	80083ac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e006      	b.n	80083ba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d0f0      	beq.n	800839a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	00030d40 	.word	0x00030d40

080083cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	68f9      	ldr	r1, [r7, #12]
 80083e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083ec:	4313      	orrs	r3, r2
 80083ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008418:	f023 0303 	bic.w	r3, r3, #3
 800841c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800842c:	f043 0302 	orr.w	r3, r3, #2
 8008430:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3301      	adds	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	4a13      	ldr	r2, [pc, #76]	; (80084a4 <USB_CoreReset+0x64>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d901      	bls.n	800845e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e01b      	b.n	8008496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	daf2      	bge.n	800844c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4a09      	ldr	r2, [pc, #36]	; (80084a4 <USB_CoreReset+0x64>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d901      	bls.n	8008488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e006      	b.n	8008496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	d0f0      	beq.n	8008476 <USB_CoreReset+0x36>

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	00030d40 	.word	0x00030d40

080084a8 <__errno>:
 80084a8:	4b01      	ldr	r3, [pc, #4]	; (80084b0 <__errno+0x8>)
 80084aa:	6818      	ldr	r0, [r3, #0]
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	2000006c 	.word	0x2000006c

080084b4 <__libc_init_array>:
 80084b4:	b570      	push	{r4, r5, r6, lr}
 80084b6:	4d0d      	ldr	r5, [pc, #52]	; (80084ec <__libc_init_array+0x38>)
 80084b8:	4c0d      	ldr	r4, [pc, #52]	; (80084f0 <__libc_init_array+0x3c>)
 80084ba:	1b64      	subs	r4, r4, r5
 80084bc:	10a4      	asrs	r4, r4, #2
 80084be:	2600      	movs	r6, #0
 80084c0:	42a6      	cmp	r6, r4
 80084c2:	d109      	bne.n	80084d8 <__libc_init_array+0x24>
 80084c4:	4d0b      	ldr	r5, [pc, #44]	; (80084f4 <__libc_init_array+0x40>)
 80084c6:	4c0c      	ldr	r4, [pc, #48]	; (80084f8 <__libc_init_array+0x44>)
 80084c8:	f005 f8b8 	bl	800d63c <_init>
 80084cc:	1b64      	subs	r4, r4, r5
 80084ce:	10a4      	asrs	r4, r4, #2
 80084d0:	2600      	movs	r6, #0
 80084d2:	42a6      	cmp	r6, r4
 80084d4:	d105      	bne.n	80084e2 <__libc_init_array+0x2e>
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084dc:	4798      	blx	r3
 80084de:	3601      	adds	r6, #1
 80084e0:	e7ee      	b.n	80084c0 <__libc_init_array+0xc>
 80084e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e6:	4798      	blx	r3
 80084e8:	3601      	adds	r6, #1
 80084ea:	e7f2      	b.n	80084d2 <__libc_init_array+0x1e>
 80084ec:	0800db8c 	.word	0x0800db8c
 80084f0:	0800db8c 	.word	0x0800db8c
 80084f4:	0800db8c 	.word	0x0800db8c
 80084f8:	0800db90 	.word	0x0800db90

080084fc <memset>:
 80084fc:	4402      	add	r2, r0
 80084fe:	4603      	mov	r3, r0
 8008500:	4293      	cmp	r3, r2
 8008502:	d100      	bne.n	8008506 <memset+0xa>
 8008504:	4770      	bx	lr
 8008506:	f803 1b01 	strb.w	r1, [r3], #1
 800850a:	e7f9      	b.n	8008500 <memset+0x4>

0800850c <__cvt>:
 800850c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	ec55 4b10 	vmov	r4, r5, d0
 8008514:	2d00      	cmp	r5, #0
 8008516:	460e      	mov	r6, r1
 8008518:	4619      	mov	r1, r3
 800851a:	462b      	mov	r3, r5
 800851c:	bfbb      	ittet	lt
 800851e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008522:	461d      	movlt	r5, r3
 8008524:	2300      	movge	r3, #0
 8008526:	232d      	movlt	r3, #45	; 0x2d
 8008528:	700b      	strb	r3, [r1, #0]
 800852a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008530:	4691      	mov	r9, r2
 8008532:	f023 0820 	bic.w	r8, r3, #32
 8008536:	bfbc      	itt	lt
 8008538:	4622      	movlt	r2, r4
 800853a:	4614      	movlt	r4, r2
 800853c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008540:	d005      	beq.n	800854e <__cvt+0x42>
 8008542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008546:	d100      	bne.n	800854a <__cvt+0x3e>
 8008548:	3601      	adds	r6, #1
 800854a:	2102      	movs	r1, #2
 800854c:	e000      	b.n	8008550 <__cvt+0x44>
 800854e:	2103      	movs	r1, #3
 8008550:	ab03      	add	r3, sp, #12
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	ab02      	add	r3, sp, #8
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	ec45 4b10 	vmov	d0, r4, r5
 800855c:	4653      	mov	r3, sl
 800855e:	4632      	mov	r2, r6
 8008560:	f001 fe7e 	bl	800a260 <_dtoa_r>
 8008564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008568:	4607      	mov	r7, r0
 800856a:	d102      	bne.n	8008572 <__cvt+0x66>
 800856c:	f019 0f01 	tst.w	r9, #1
 8008570:	d022      	beq.n	80085b8 <__cvt+0xac>
 8008572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008576:	eb07 0906 	add.w	r9, r7, r6
 800857a:	d110      	bne.n	800859e <__cvt+0x92>
 800857c:	783b      	ldrb	r3, [r7, #0]
 800857e:	2b30      	cmp	r3, #48	; 0x30
 8008580:	d10a      	bne.n	8008598 <__cvt+0x8c>
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 fabd 	bl	8000b08 <__aeabi_dcmpeq>
 800858e:	b918      	cbnz	r0, 8008598 <__cvt+0x8c>
 8008590:	f1c6 0601 	rsb	r6, r6, #1
 8008594:	f8ca 6000 	str.w	r6, [sl]
 8008598:	f8da 3000 	ldr.w	r3, [sl]
 800859c:	4499      	add	r9, r3
 800859e:	2200      	movs	r2, #0
 80085a0:	2300      	movs	r3, #0
 80085a2:	4620      	mov	r0, r4
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7f8 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 80085aa:	b108      	cbz	r0, 80085b0 <__cvt+0xa4>
 80085ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80085b0:	2230      	movs	r2, #48	; 0x30
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	454b      	cmp	r3, r9
 80085b6:	d307      	bcc.n	80085c8 <__cvt+0xbc>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085bc:	1bdb      	subs	r3, r3, r7
 80085be:	4638      	mov	r0, r7
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	b004      	add	sp, #16
 80085c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c8:	1c59      	adds	r1, r3, #1
 80085ca:	9103      	str	r1, [sp, #12]
 80085cc:	701a      	strb	r2, [r3, #0]
 80085ce:	e7f0      	b.n	80085b2 <__cvt+0xa6>

080085d0 <__exponent>:
 80085d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d2:	4603      	mov	r3, r0
 80085d4:	2900      	cmp	r1, #0
 80085d6:	bfb8      	it	lt
 80085d8:	4249      	neglt	r1, r1
 80085da:	f803 2b02 	strb.w	r2, [r3], #2
 80085de:	bfb4      	ite	lt
 80085e0:	222d      	movlt	r2, #45	; 0x2d
 80085e2:	222b      	movge	r2, #43	; 0x2b
 80085e4:	2909      	cmp	r1, #9
 80085e6:	7042      	strb	r2, [r0, #1]
 80085e8:	dd2a      	ble.n	8008640 <__exponent+0x70>
 80085ea:	f10d 0407 	add.w	r4, sp, #7
 80085ee:	46a4      	mov	ip, r4
 80085f0:	270a      	movs	r7, #10
 80085f2:	46a6      	mov	lr, r4
 80085f4:	460a      	mov	r2, r1
 80085f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80085fa:	fb07 1516 	mls	r5, r7, r6, r1
 80085fe:	3530      	adds	r5, #48	; 0x30
 8008600:	2a63      	cmp	r2, #99	; 0x63
 8008602:	f104 34ff 	add.w	r4, r4, #4294967295
 8008606:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800860a:	4631      	mov	r1, r6
 800860c:	dcf1      	bgt.n	80085f2 <__exponent+0x22>
 800860e:	3130      	adds	r1, #48	; 0x30
 8008610:	f1ae 0502 	sub.w	r5, lr, #2
 8008614:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008618:	1c44      	adds	r4, r0, #1
 800861a:	4629      	mov	r1, r5
 800861c:	4561      	cmp	r1, ip
 800861e:	d30a      	bcc.n	8008636 <__exponent+0x66>
 8008620:	f10d 0209 	add.w	r2, sp, #9
 8008624:	eba2 020e 	sub.w	r2, r2, lr
 8008628:	4565      	cmp	r5, ip
 800862a:	bf88      	it	hi
 800862c:	2200      	movhi	r2, #0
 800862e:	4413      	add	r3, r2
 8008630:	1a18      	subs	r0, r3, r0
 8008632:	b003      	add	sp, #12
 8008634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800863a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800863e:	e7ed      	b.n	800861c <__exponent+0x4c>
 8008640:	2330      	movs	r3, #48	; 0x30
 8008642:	3130      	adds	r1, #48	; 0x30
 8008644:	7083      	strb	r3, [r0, #2]
 8008646:	70c1      	strb	r1, [r0, #3]
 8008648:	1d03      	adds	r3, r0, #4
 800864a:	e7f1      	b.n	8008630 <__exponent+0x60>

0800864c <_printf_float>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	ed2d 8b02 	vpush	{d8}
 8008654:	b08d      	sub	sp, #52	; 0x34
 8008656:	460c      	mov	r4, r1
 8008658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800865c:	4616      	mov	r6, r2
 800865e:	461f      	mov	r7, r3
 8008660:	4605      	mov	r5, r0
 8008662:	f003 f84d 	bl	800b700 <_localeconv_r>
 8008666:	f8d0 a000 	ldr.w	sl, [r0]
 800866a:	4650      	mov	r0, sl
 800866c:	f7f7 fdd0 	bl	8000210 <strlen>
 8008670:	2300      	movs	r3, #0
 8008672:	930a      	str	r3, [sp, #40]	; 0x28
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	9305      	str	r3, [sp, #20]
 8008678:	f8d8 3000 	ldr.w	r3, [r8]
 800867c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008680:	3307      	adds	r3, #7
 8008682:	f023 0307 	bic.w	r3, r3, #7
 8008686:	f103 0208 	add.w	r2, r3, #8
 800868a:	f8c8 2000 	str.w	r2, [r8]
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008696:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800869a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800869e:	9307      	str	r3, [sp, #28]
 80086a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80086a4:	ee08 0a10 	vmov	s16, r0
 80086a8:	4b9f      	ldr	r3, [pc, #636]	; (8008928 <_printf_float+0x2dc>)
 80086aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	f7f8 fa5b 	bl	8000b6c <__aeabi_dcmpun>
 80086b6:	bb88      	cbnz	r0, 800871c <_printf_float+0xd0>
 80086b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086bc:	4b9a      	ldr	r3, [pc, #616]	; (8008928 <_printf_float+0x2dc>)
 80086be:	f04f 32ff 	mov.w	r2, #4294967295
 80086c2:	f7f8 fa35 	bl	8000b30 <__aeabi_dcmple>
 80086c6:	bb48      	cbnz	r0, 800871c <_printf_float+0xd0>
 80086c8:	2200      	movs	r2, #0
 80086ca:	2300      	movs	r3, #0
 80086cc:	4640      	mov	r0, r8
 80086ce:	4649      	mov	r1, r9
 80086d0:	f7f8 fa24 	bl	8000b1c <__aeabi_dcmplt>
 80086d4:	b110      	cbz	r0, 80086dc <_printf_float+0x90>
 80086d6:	232d      	movs	r3, #45	; 0x2d
 80086d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086dc:	4b93      	ldr	r3, [pc, #588]	; (800892c <_printf_float+0x2e0>)
 80086de:	4894      	ldr	r0, [pc, #592]	; (8008930 <_printf_float+0x2e4>)
 80086e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086e4:	bf94      	ite	ls
 80086e6:	4698      	movls	r8, r3
 80086e8:	4680      	movhi	r8, r0
 80086ea:	2303      	movs	r3, #3
 80086ec:	6123      	str	r3, [r4, #16]
 80086ee:	9b05      	ldr	r3, [sp, #20]
 80086f0:	f023 0204 	bic.w	r2, r3, #4
 80086f4:	6022      	str	r2, [r4, #0]
 80086f6:	f04f 0900 	mov.w	r9, #0
 80086fa:	9700      	str	r7, [sp, #0]
 80086fc:	4633      	mov	r3, r6
 80086fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008700:	4621      	mov	r1, r4
 8008702:	4628      	mov	r0, r5
 8008704:	f000 f9d8 	bl	8008ab8 <_printf_common>
 8008708:	3001      	adds	r0, #1
 800870a:	f040 8090 	bne.w	800882e <_printf_float+0x1e2>
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	b00d      	add	sp, #52	; 0x34
 8008714:	ecbd 8b02 	vpop	{d8}
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	4642      	mov	r2, r8
 800871e:	464b      	mov	r3, r9
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	f7f8 fa22 	bl	8000b6c <__aeabi_dcmpun>
 8008728:	b140      	cbz	r0, 800873c <_printf_float+0xf0>
 800872a:	464b      	mov	r3, r9
 800872c:	2b00      	cmp	r3, #0
 800872e:	bfbc      	itt	lt
 8008730:	232d      	movlt	r3, #45	; 0x2d
 8008732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008736:	487f      	ldr	r0, [pc, #508]	; (8008934 <_printf_float+0x2e8>)
 8008738:	4b7f      	ldr	r3, [pc, #508]	; (8008938 <_printf_float+0x2ec>)
 800873a:	e7d1      	b.n	80086e0 <_printf_float+0x94>
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008742:	9206      	str	r2, [sp, #24]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	d13f      	bne.n	80087c8 <_printf_float+0x17c>
 8008748:	2306      	movs	r3, #6
 800874a:	6063      	str	r3, [r4, #4]
 800874c:	9b05      	ldr	r3, [sp, #20]
 800874e:	6861      	ldr	r1, [r4, #4]
 8008750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008754:	2300      	movs	r3, #0
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	ab0a      	add	r3, sp, #40	; 0x28
 800875a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800875e:	ab09      	add	r3, sp, #36	; 0x24
 8008760:	ec49 8b10 	vmov	d0, r8, r9
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	6022      	str	r2, [r4, #0]
 8008768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800876c:	4628      	mov	r0, r5
 800876e:	f7ff fecd 	bl	800850c <__cvt>
 8008772:	9b06      	ldr	r3, [sp, #24]
 8008774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008776:	2b47      	cmp	r3, #71	; 0x47
 8008778:	4680      	mov	r8, r0
 800877a:	d108      	bne.n	800878e <_printf_float+0x142>
 800877c:	1cc8      	adds	r0, r1, #3
 800877e:	db02      	blt.n	8008786 <_printf_float+0x13a>
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	4299      	cmp	r1, r3
 8008784:	dd41      	ble.n	800880a <_printf_float+0x1be>
 8008786:	f1ab 0b02 	sub.w	fp, fp, #2
 800878a:	fa5f fb8b 	uxtb.w	fp, fp
 800878e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008792:	d820      	bhi.n	80087d6 <_printf_float+0x18a>
 8008794:	3901      	subs	r1, #1
 8008796:	465a      	mov	r2, fp
 8008798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800879c:	9109      	str	r1, [sp, #36]	; 0x24
 800879e:	f7ff ff17 	bl	80085d0 <__exponent>
 80087a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a4:	1813      	adds	r3, r2, r0
 80087a6:	2a01      	cmp	r2, #1
 80087a8:	4681      	mov	r9, r0
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	dc02      	bgt.n	80087b4 <_printf_float+0x168>
 80087ae:	6822      	ldr	r2, [r4, #0]
 80087b0:	07d2      	lsls	r2, r2, #31
 80087b2:	d501      	bpl.n	80087b8 <_printf_float+0x16c>
 80087b4:	3301      	adds	r3, #1
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d09c      	beq.n	80086fa <_printf_float+0xae>
 80087c0:	232d      	movs	r3, #45	; 0x2d
 80087c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c6:	e798      	b.n	80086fa <_printf_float+0xae>
 80087c8:	9a06      	ldr	r2, [sp, #24]
 80087ca:	2a47      	cmp	r2, #71	; 0x47
 80087cc:	d1be      	bne.n	800874c <_printf_float+0x100>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1bc      	bne.n	800874c <_printf_float+0x100>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e7b9      	b.n	800874a <_printf_float+0xfe>
 80087d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087da:	d118      	bne.n	800880e <_printf_float+0x1c2>
 80087dc:	2900      	cmp	r1, #0
 80087de:	6863      	ldr	r3, [r4, #4]
 80087e0:	dd0b      	ble.n	80087fa <_printf_float+0x1ae>
 80087e2:	6121      	str	r1, [r4, #16]
 80087e4:	b913      	cbnz	r3, 80087ec <_printf_float+0x1a0>
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	07d0      	lsls	r0, r2, #31
 80087ea:	d502      	bpl.n	80087f2 <_printf_float+0x1a6>
 80087ec:	3301      	adds	r3, #1
 80087ee:	440b      	add	r3, r1
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80087f4:	f04f 0900 	mov.w	r9, #0
 80087f8:	e7de      	b.n	80087b8 <_printf_float+0x16c>
 80087fa:	b913      	cbnz	r3, 8008802 <_printf_float+0x1b6>
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	07d2      	lsls	r2, r2, #31
 8008800:	d501      	bpl.n	8008806 <_printf_float+0x1ba>
 8008802:	3302      	adds	r3, #2
 8008804:	e7f4      	b.n	80087f0 <_printf_float+0x1a4>
 8008806:	2301      	movs	r3, #1
 8008808:	e7f2      	b.n	80087f0 <_printf_float+0x1a4>
 800880a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800880e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008810:	4299      	cmp	r1, r3
 8008812:	db05      	blt.n	8008820 <_printf_float+0x1d4>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	6121      	str	r1, [r4, #16]
 8008818:	07d8      	lsls	r0, r3, #31
 800881a:	d5ea      	bpl.n	80087f2 <_printf_float+0x1a6>
 800881c:	1c4b      	adds	r3, r1, #1
 800881e:	e7e7      	b.n	80087f0 <_printf_float+0x1a4>
 8008820:	2900      	cmp	r1, #0
 8008822:	bfd4      	ite	le
 8008824:	f1c1 0202 	rsble	r2, r1, #2
 8008828:	2201      	movgt	r2, #1
 800882a:	4413      	add	r3, r2
 800882c:	e7e0      	b.n	80087f0 <_printf_float+0x1a4>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	055a      	lsls	r2, r3, #21
 8008832:	d407      	bmi.n	8008844 <_printf_float+0x1f8>
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	4642      	mov	r2, r8
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	d12c      	bne.n	800889c <_printf_float+0x250>
 8008842:	e764      	b.n	800870e <_printf_float+0xc2>
 8008844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008848:	f240 80e0 	bls.w	8008a0c <_printf_float+0x3c0>
 800884c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008850:	2200      	movs	r2, #0
 8008852:	2300      	movs	r3, #0
 8008854:	f7f8 f958 	bl	8000b08 <__aeabi_dcmpeq>
 8008858:	2800      	cmp	r0, #0
 800885a:	d034      	beq.n	80088c6 <_printf_float+0x27a>
 800885c:	4a37      	ldr	r2, [pc, #220]	; (800893c <_printf_float+0x2f0>)
 800885e:	2301      	movs	r3, #1
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f af51 	beq.w	800870e <_printf_float+0xc2>
 800886c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008870:	429a      	cmp	r2, r3
 8008872:	db02      	blt.n	800887a <_printf_float+0x22e>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	07d8      	lsls	r0, r3, #31
 8008878:	d510      	bpl.n	800889c <_printf_float+0x250>
 800887a:	ee18 3a10 	vmov	r3, s16
 800887e:	4652      	mov	r2, sl
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f af41 	beq.w	800870e <_printf_float+0xc2>
 800888c:	f04f 0800 	mov.w	r8, #0
 8008890:	f104 091a 	add.w	r9, r4, #26
 8008894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008896:	3b01      	subs	r3, #1
 8008898:	4543      	cmp	r3, r8
 800889a:	dc09      	bgt.n	80088b0 <_printf_float+0x264>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	079b      	lsls	r3, r3, #30
 80088a0:	f100 8105 	bmi.w	8008aae <_printf_float+0x462>
 80088a4:	68e0      	ldr	r0, [r4, #12]
 80088a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a8:	4298      	cmp	r0, r3
 80088aa:	bfb8      	it	lt
 80088ac:	4618      	movlt	r0, r3
 80088ae:	e730      	b.n	8008712 <_printf_float+0xc6>
 80088b0:	2301      	movs	r3, #1
 80088b2:	464a      	mov	r2, r9
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f af27 	beq.w	800870e <_printf_float+0xc2>
 80088c0:	f108 0801 	add.w	r8, r8, #1
 80088c4:	e7e6      	b.n	8008894 <_printf_float+0x248>
 80088c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dc39      	bgt.n	8008940 <_printf_float+0x2f4>
 80088cc:	4a1b      	ldr	r2, [pc, #108]	; (800893c <_printf_float+0x2f0>)
 80088ce:	2301      	movs	r3, #1
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b8      	blx	r7
 80088d6:	3001      	adds	r0, #1
 80088d8:	f43f af19 	beq.w	800870e <_printf_float+0xc2>
 80088dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e0:	4313      	orrs	r3, r2
 80088e2:	d102      	bne.n	80088ea <_printf_float+0x29e>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	07d9      	lsls	r1, r3, #31
 80088e8:	d5d8      	bpl.n	800889c <_printf_float+0x250>
 80088ea:	ee18 3a10 	vmov	r3, s16
 80088ee:	4652      	mov	r2, sl
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f43f af09 	beq.w	800870e <_printf_float+0xc2>
 80088fc:	f04f 0900 	mov.w	r9, #0
 8008900:	f104 0a1a 	add.w	sl, r4, #26
 8008904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008906:	425b      	negs	r3, r3
 8008908:	454b      	cmp	r3, r9
 800890a:	dc01      	bgt.n	8008910 <_printf_float+0x2c4>
 800890c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890e:	e792      	b.n	8008836 <_printf_float+0x1ea>
 8008910:	2301      	movs	r3, #1
 8008912:	4652      	mov	r2, sl
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	f43f aef7 	beq.w	800870e <_printf_float+0xc2>
 8008920:	f109 0901 	add.w	r9, r9, #1
 8008924:	e7ee      	b.n	8008904 <_printf_float+0x2b8>
 8008926:	bf00      	nop
 8008928:	7fefffff 	.word	0x7fefffff
 800892c:	0800d6bc 	.word	0x0800d6bc
 8008930:	0800d6c0 	.word	0x0800d6c0
 8008934:	0800d6c8 	.word	0x0800d6c8
 8008938:	0800d6c4 	.word	0x0800d6c4
 800893c:	0800db31 	.word	0x0800db31
 8008940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008944:	429a      	cmp	r2, r3
 8008946:	bfa8      	it	ge
 8008948:	461a      	movge	r2, r3
 800894a:	2a00      	cmp	r2, #0
 800894c:	4691      	mov	r9, r2
 800894e:	dc37      	bgt.n	80089c0 <_printf_float+0x374>
 8008950:	f04f 0b00 	mov.w	fp, #0
 8008954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008958:	f104 021a 	add.w	r2, r4, #26
 800895c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800895e:	9305      	str	r3, [sp, #20]
 8008960:	eba3 0309 	sub.w	r3, r3, r9
 8008964:	455b      	cmp	r3, fp
 8008966:	dc33      	bgt.n	80089d0 <_printf_float+0x384>
 8008968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800896c:	429a      	cmp	r2, r3
 800896e:	db3b      	blt.n	80089e8 <_printf_float+0x39c>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	07da      	lsls	r2, r3, #31
 8008974:	d438      	bmi.n	80089e8 <_printf_float+0x39c>
 8008976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008978:	9b05      	ldr	r3, [sp, #20]
 800897a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	eba2 0901 	sub.w	r9, r2, r1
 8008982:	4599      	cmp	r9, r3
 8008984:	bfa8      	it	ge
 8008986:	4699      	movge	r9, r3
 8008988:	f1b9 0f00 	cmp.w	r9, #0
 800898c:	dc35      	bgt.n	80089fa <_printf_float+0x3ae>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008996:	f104 0a1a 	add.w	sl, r4, #26
 800899a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	eba3 0309 	sub.w	r3, r3, r9
 80089a4:	4543      	cmp	r3, r8
 80089a6:	f77f af79 	ble.w	800889c <_printf_float+0x250>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4652      	mov	r2, sl
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f aeaa 	beq.w	800870e <_printf_float+0xc2>
 80089ba:	f108 0801 	add.w	r8, r8, #1
 80089be:	e7ec      	b.n	800899a <_printf_float+0x34e>
 80089c0:	4613      	mov	r3, r2
 80089c2:	4631      	mov	r1, r6
 80089c4:	4642      	mov	r2, r8
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	d1c0      	bne.n	8008950 <_printf_float+0x304>
 80089ce:	e69e      	b.n	800870e <_printf_float+0xc2>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4631      	mov	r1, r6
 80089d4:	4628      	mov	r0, r5
 80089d6:	9205      	str	r2, [sp, #20]
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	f43f ae97 	beq.w	800870e <_printf_float+0xc2>
 80089e0:	9a05      	ldr	r2, [sp, #20]
 80089e2:	f10b 0b01 	add.w	fp, fp, #1
 80089e6:	e7b9      	b.n	800895c <_printf_float+0x310>
 80089e8:	ee18 3a10 	vmov	r3, s16
 80089ec:	4652      	mov	r2, sl
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	d1be      	bne.n	8008976 <_printf_float+0x32a>
 80089f8:	e689      	b.n	800870e <_printf_float+0xc2>
 80089fa:	9a05      	ldr	r2, [sp, #20]
 80089fc:	464b      	mov	r3, r9
 80089fe:	4442      	add	r2, r8
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	d1c1      	bne.n	800898e <_printf_float+0x342>
 8008a0a:	e680      	b.n	800870e <_printf_float+0xc2>
 8008a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a0e:	2a01      	cmp	r2, #1
 8008a10:	dc01      	bgt.n	8008a16 <_printf_float+0x3ca>
 8008a12:	07db      	lsls	r3, r3, #31
 8008a14:	d538      	bpl.n	8008a88 <_printf_float+0x43c>
 8008a16:	2301      	movs	r3, #1
 8008a18:	4642      	mov	r2, r8
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b8      	blx	r7
 8008a20:	3001      	adds	r0, #1
 8008a22:	f43f ae74 	beq.w	800870e <_printf_float+0xc2>
 8008a26:	ee18 3a10 	vmov	r3, s16
 8008a2a:	4652      	mov	r2, sl
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f ae6b 	beq.w	800870e <_printf_float+0xc2>
 8008a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f7f8 f862 	bl	8000b08 <__aeabi_dcmpeq>
 8008a44:	b9d8      	cbnz	r0, 8008a7e <_printf_float+0x432>
 8008a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a48:	f108 0201 	add.w	r2, r8, #1
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4628      	mov	r0, r5
 8008a52:	47b8      	blx	r7
 8008a54:	3001      	adds	r0, #1
 8008a56:	d10e      	bne.n	8008a76 <_printf_float+0x42a>
 8008a58:	e659      	b.n	800870e <_printf_float+0xc2>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4652      	mov	r2, sl
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae52 	beq.w	800870e <_printf_float+0xc2>
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	3b01      	subs	r3, #1
 8008a72:	4543      	cmp	r3, r8
 8008a74:	dcf1      	bgt.n	8008a5a <_printf_float+0x40e>
 8008a76:	464b      	mov	r3, r9
 8008a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a7c:	e6dc      	b.n	8008838 <_printf_float+0x1ec>
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	f104 0a1a 	add.w	sl, r4, #26
 8008a86:	e7f2      	b.n	8008a6e <_printf_float+0x422>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	e7df      	b.n	8008a4e <_printf_float+0x402>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	464a      	mov	r2, r9
 8008a92:	4631      	mov	r1, r6
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b8      	blx	r7
 8008a98:	3001      	adds	r0, #1
 8008a9a:	f43f ae38 	beq.w	800870e <_printf_float+0xc2>
 8008a9e:	f108 0801 	add.w	r8, r8, #1
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aa6:	1a5b      	subs	r3, r3, r1
 8008aa8:	4543      	cmp	r3, r8
 8008aaa:	dcf0      	bgt.n	8008a8e <_printf_float+0x442>
 8008aac:	e6fa      	b.n	80088a4 <_printf_float+0x258>
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	f104 0919 	add.w	r9, r4, #25
 8008ab6:	e7f4      	b.n	8008aa2 <_printf_float+0x456>

08008ab8 <_printf_common>:
 8008ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	4616      	mov	r6, r2
 8008abe:	4699      	mov	r9, r3
 8008ac0:	688a      	ldr	r2, [r1, #8]
 8008ac2:	690b      	ldr	r3, [r1, #16]
 8008ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	bfb8      	it	lt
 8008acc:	4613      	movlt	r3, r2
 8008ace:	6033      	str	r3, [r6, #0]
 8008ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	b10a      	cbz	r2, 8008ade <_printf_common+0x26>
 8008ada:	3301      	adds	r3, #1
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	0699      	lsls	r1, r3, #26
 8008ae2:	bf42      	ittt	mi
 8008ae4:	6833      	ldrmi	r3, [r6, #0]
 8008ae6:	3302      	addmi	r3, #2
 8008ae8:	6033      	strmi	r3, [r6, #0]
 8008aea:	6825      	ldr	r5, [r4, #0]
 8008aec:	f015 0506 	ands.w	r5, r5, #6
 8008af0:	d106      	bne.n	8008b00 <_printf_common+0x48>
 8008af2:	f104 0a19 	add.w	sl, r4, #25
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	6832      	ldr	r2, [r6, #0]
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	dc26      	bgt.n	8008b4e <_printf_common+0x96>
 8008b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b04:	1e13      	subs	r3, r2, #0
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	2301      	movne	r3, #1
 8008b0c:	0692      	lsls	r2, r2, #26
 8008b0e:	d42b      	bmi.n	8008b68 <_printf_common+0xb0>
 8008b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b14:	4649      	mov	r1, r9
 8008b16:	4638      	mov	r0, r7
 8008b18:	47c0      	blx	r8
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d01e      	beq.n	8008b5c <_printf_common+0xa4>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	68e5      	ldr	r5, [r4, #12]
 8008b22:	6832      	ldr	r2, [r6, #0]
 8008b24:	f003 0306 	and.w	r3, r3, #6
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	bf08      	it	eq
 8008b2c:	1aad      	subeq	r5, r5, r2
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	6922      	ldr	r2, [r4, #16]
 8008b32:	bf0c      	ite	eq
 8008b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b38:	2500      	movne	r5, #0
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bfc4      	itt	gt
 8008b3e:	1a9b      	subgt	r3, r3, r2
 8008b40:	18ed      	addgt	r5, r5, r3
 8008b42:	2600      	movs	r6, #0
 8008b44:	341a      	adds	r4, #26
 8008b46:	42b5      	cmp	r5, r6
 8008b48:	d11a      	bne.n	8008b80 <_printf_common+0xc8>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e008      	b.n	8008b60 <_printf_common+0xa8>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4652      	mov	r2, sl
 8008b52:	4649      	mov	r1, r9
 8008b54:	4638      	mov	r0, r7
 8008b56:	47c0      	blx	r8
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d103      	bne.n	8008b64 <_printf_common+0xac>
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b64:	3501      	adds	r5, #1
 8008b66:	e7c6      	b.n	8008af6 <_printf_common+0x3e>
 8008b68:	18e1      	adds	r1, r4, r3
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	2030      	movs	r0, #48	; 0x30
 8008b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b72:	4422      	add	r2, r4
 8008b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	e7c7      	b.n	8008b10 <_printf_common+0x58>
 8008b80:	2301      	movs	r3, #1
 8008b82:	4622      	mov	r2, r4
 8008b84:	4649      	mov	r1, r9
 8008b86:	4638      	mov	r0, r7
 8008b88:	47c0      	blx	r8
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d0e6      	beq.n	8008b5c <_printf_common+0xa4>
 8008b8e:	3601      	adds	r6, #1
 8008b90:	e7d9      	b.n	8008b46 <_printf_common+0x8e>
	...

08008b94 <_printf_i>:
 8008b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	460c      	mov	r4, r1
 8008b9a:	4691      	mov	r9, r2
 8008b9c:	7e27      	ldrb	r7, [r4, #24]
 8008b9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ba0:	2f78      	cmp	r7, #120	; 0x78
 8008ba2:	4680      	mov	r8, r0
 8008ba4:	469a      	mov	sl, r3
 8008ba6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008baa:	d807      	bhi.n	8008bbc <_printf_i+0x28>
 8008bac:	2f62      	cmp	r7, #98	; 0x62
 8008bae:	d80a      	bhi.n	8008bc6 <_printf_i+0x32>
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	f000 80d8 	beq.w	8008d66 <_printf_i+0x1d2>
 8008bb6:	2f58      	cmp	r7, #88	; 0x58
 8008bb8:	f000 80a3 	beq.w	8008d02 <_printf_i+0x16e>
 8008bbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bc4:	e03a      	b.n	8008c3c <_printf_i+0xa8>
 8008bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bca:	2b15      	cmp	r3, #21
 8008bcc:	d8f6      	bhi.n	8008bbc <_printf_i+0x28>
 8008bce:	a001      	add	r0, pc, #4	; (adr r0, 8008bd4 <_printf_i+0x40>)
 8008bd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008bd4:	08008c2d 	.word	0x08008c2d
 8008bd8:	08008c41 	.word	0x08008c41
 8008bdc:	08008bbd 	.word	0x08008bbd
 8008be0:	08008bbd 	.word	0x08008bbd
 8008be4:	08008bbd 	.word	0x08008bbd
 8008be8:	08008bbd 	.word	0x08008bbd
 8008bec:	08008c41 	.word	0x08008c41
 8008bf0:	08008bbd 	.word	0x08008bbd
 8008bf4:	08008bbd 	.word	0x08008bbd
 8008bf8:	08008bbd 	.word	0x08008bbd
 8008bfc:	08008bbd 	.word	0x08008bbd
 8008c00:	08008d4d 	.word	0x08008d4d
 8008c04:	08008c71 	.word	0x08008c71
 8008c08:	08008d2f 	.word	0x08008d2f
 8008c0c:	08008bbd 	.word	0x08008bbd
 8008c10:	08008bbd 	.word	0x08008bbd
 8008c14:	08008d6f 	.word	0x08008d6f
 8008c18:	08008bbd 	.word	0x08008bbd
 8008c1c:	08008c71 	.word	0x08008c71
 8008c20:	08008bbd 	.word	0x08008bbd
 8008c24:	08008bbd 	.word	0x08008bbd
 8008c28:	08008d37 	.word	0x08008d37
 8008c2c:	680b      	ldr	r3, [r1, #0]
 8008c2e:	1d1a      	adds	r2, r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	600a      	str	r2, [r1, #0]
 8008c34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0a3      	b.n	8008d88 <_printf_i+0x1f4>
 8008c40:	6825      	ldr	r5, [r4, #0]
 8008c42:	6808      	ldr	r0, [r1, #0]
 8008c44:	062e      	lsls	r6, r5, #24
 8008c46:	f100 0304 	add.w	r3, r0, #4
 8008c4a:	d50a      	bpl.n	8008c62 <_printf_i+0xce>
 8008c4c:	6805      	ldr	r5, [r0, #0]
 8008c4e:	600b      	str	r3, [r1, #0]
 8008c50:	2d00      	cmp	r5, #0
 8008c52:	da03      	bge.n	8008c5c <_printf_i+0xc8>
 8008c54:	232d      	movs	r3, #45	; 0x2d
 8008c56:	426d      	negs	r5, r5
 8008c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5c:	485e      	ldr	r0, [pc, #376]	; (8008dd8 <_printf_i+0x244>)
 8008c5e:	230a      	movs	r3, #10
 8008c60:	e019      	b.n	8008c96 <_printf_i+0x102>
 8008c62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008c66:	6805      	ldr	r5, [r0, #0]
 8008c68:	600b      	str	r3, [r1, #0]
 8008c6a:	bf18      	it	ne
 8008c6c:	b22d      	sxthne	r5, r5
 8008c6e:	e7ef      	b.n	8008c50 <_printf_i+0xbc>
 8008c70:	680b      	ldr	r3, [r1, #0]
 8008c72:	6825      	ldr	r5, [r4, #0]
 8008c74:	1d18      	adds	r0, r3, #4
 8008c76:	6008      	str	r0, [r1, #0]
 8008c78:	0628      	lsls	r0, r5, #24
 8008c7a:	d501      	bpl.n	8008c80 <_printf_i+0xec>
 8008c7c:	681d      	ldr	r5, [r3, #0]
 8008c7e:	e002      	b.n	8008c86 <_printf_i+0xf2>
 8008c80:	0669      	lsls	r1, r5, #25
 8008c82:	d5fb      	bpl.n	8008c7c <_printf_i+0xe8>
 8008c84:	881d      	ldrh	r5, [r3, #0]
 8008c86:	4854      	ldr	r0, [pc, #336]	; (8008dd8 <_printf_i+0x244>)
 8008c88:	2f6f      	cmp	r7, #111	; 0x6f
 8008c8a:	bf0c      	ite	eq
 8008c8c:	2308      	moveq	r3, #8
 8008c8e:	230a      	movne	r3, #10
 8008c90:	2100      	movs	r1, #0
 8008c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c96:	6866      	ldr	r6, [r4, #4]
 8008c98:	60a6      	str	r6, [r4, #8]
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	bfa2      	ittt	ge
 8008c9e:	6821      	ldrge	r1, [r4, #0]
 8008ca0:	f021 0104 	bicge.w	r1, r1, #4
 8008ca4:	6021      	strge	r1, [r4, #0]
 8008ca6:	b90d      	cbnz	r5, 8008cac <_printf_i+0x118>
 8008ca8:	2e00      	cmp	r6, #0
 8008caa:	d04d      	beq.n	8008d48 <_printf_i+0x1b4>
 8008cac:	4616      	mov	r6, r2
 8008cae:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cb2:	fb03 5711 	mls	r7, r3, r1, r5
 8008cb6:	5dc7      	ldrb	r7, [r0, r7]
 8008cb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cbc:	462f      	mov	r7, r5
 8008cbe:	42bb      	cmp	r3, r7
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	d9f4      	bls.n	8008cae <_printf_i+0x11a>
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d10b      	bne.n	8008ce0 <_printf_i+0x14c>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	07df      	lsls	r7, r3, #31
 8008ccc:	d508      	bpl.n	8008ce0 <_printf_i+0x14c>
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	6861      	ldr	r1, [r4, #4]
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	bfde      	ittt	le
 8008cd6:	2330      	movle	r3, #48	; 0x30
 8008cd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ce0:	1b92      	subs	r2, r2, r6
 8008ce2:	6122      	str	r2, [r4, #16]
 8008ce4:	f8cd a000 	str.w	sl, [sp]
 8008ce8:	464b      	mov	r3, r9
 8008cea:	aa03      	add	r2, sp, #12
 8008cec:	4621      	mov	r1, r4
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f7ff fee2 	bl	8008ab8 <_printf_common>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d14c      	bne.n	8008d92 <_printf_i+0x1fe>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	b004      	add	sp, #16
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	4835      	ldr	r0, [pc, #212]	; (8008dd8 <_printf_i+0x244>)
 8008d04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	680e      	ldr	r6, [r1, #0]
 8008d0c:	061f      	lsls	r7, r3, #24
 8008d0e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d12:	600e      	str	r6, [r1, #0]
 8008d14:	d514      	bpl.n	8008d40 <_printf_i+0x1ac>
 8008d16:	07d9      	lsls	r1, r3, #31
 8008d18:	bf44      	itt	mi
 8008d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d1e:	6023      	strmi	r3, [r4, #0]
 8008d20:	b91d      	cbnz	r5, 8008d2a <_printf_i+0x196>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f023 0320 	bic.w	r3, r3, #32
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	2310      	movs	r3, #16
 8008d2c:	e7b0      	b.n	8008c90 <_printf_i+0xfc>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f043 0320 	orr.w	r3, r3, #32
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	2378      	movs	r3, #120	; 0x78
 8008d38:	4828      	ldr	r0, [pc, #160]	; (8008ddc <_printf_i+0x248>)
 8008d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d3e:	e7e3      	b.n	8008d08 <_printf_i+0x174>
 8008d40:	065e      	lsls	r6, r3, #25
 8008d42:	bf48      	it	mi
 8008d44:	b2ad      	uxthmi	r5, r5
 8008d46:	e7e6      	b.n	8008d16 <_printf_i+0x182>
 8008d48:	4616      	mov	r6, r2
 8008d4a:	e7bb      	b.n	8008cc4 <_printf_i+0x130>
 8008d4c:	680b      	ldr	r3, [r1, #0]
 8008d4e:	6826      	ldr	r6, [r4, #0]
 8008d50:	6960      	ldr	r0, [r4, #20]
 8008d52:	1d1d      	adds	r5, r3, #4
 8008d54:	600d      	str	r5, [r1, #0]
 8008d56:	0635      	lsls	r5, r6, #24
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0x1cc>
 8008d5c:	6018      	str	r0, [r3, #0]
 8008d5e:	e002      	b.n	8008d66 <_printf_i+0x1d2>
 8008d60:	0671      	lsls	r1, r6, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0x1c8>
 8008d64:	8018      	strh	r0, [r3, #0]
 8008d66:	2300      	movs	r3, #0
 8008d68:	6123      	str	r3, [r4, #16]
 8008d6a:	4616      	mov	r6, r2
 8008d6c:	e7ba      	b.n	8008ce4 <_printf_i+0x150>
 8008d6e:	680b      	ldr	r3, [r1, #0]
 8008d70:	1d1a      	adds	r2, r3, #4
 8008d72:	600a      	str	r2, [r1, #0]
 8008d74:	681e      	ldr	r6, [r3, #0]
 8008d76:	6862      	ldr	r2, [r4, #4]
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7f7 fa50 	bl	8000220 <memchr>
 8008d80:	b108      	cbz	r0, 8008d86 <_printf_i+0x1f2>
 8008d82:	1b80      	subs	r0, r0, r6
 8008d84:	6060      	str	r0, [r4, #4]
 8008d86:	6863      	ldr	r3, [r4, #4]
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d90:	e7a8      	b.n	8008ce4 <_printf_i+0x150>
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	4632      	mov	r2, r6
 8008d96:	4649      	mov	r1, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	47d0      	blx	sl
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d0ab      	beq.n	8008cf8 <_printf_i+0x164>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	079b      	lsls	r3, r3, #30
 8008da4:	d413      	bmi.n	8008dce <_printf_i+0x23a>
 8008da6:	68e0      	ldr	r0, [r4, #12]
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	4298      	cmp	r0, r3
 8008dac:	bfb8      	it	lt
 8008dae:	4618      	movlt	r0, r3
 8008db0:	e7a4      	b.n	8008cfc <_printf_i+0x168>
 8008db2:	2301      	movs	r3, #1
 8008db4:	4632      	mov	r2, r6
 8008db6:	4649      	mov	r1, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	47d0      	blx	sl
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d09b      	beq.n	8008cf8 <_printf_i+0x164>
 8008dc0:	3501      	adds	r5, #1
 8008dc2:	68e3      	ldr	r3, [r4, #12]
 8008dc4:	9903      	ldr	r1, [sp, #12]
 8008dc6:	1a5b      	subs	r3, r3, r1
 8008dc8:	42ab      	cmp	r3, r5
 8008dca:	dcf2      	bgt.n	8008db2 <_printf_i+0x21e>
 8008dcc:	e7eb      	b.n	8008da6 <_printf_i+0x212>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	f104 0619 	add.w	r6, r4, #25
 8008dd4:	e7f5      	b.n	8008dc2 <_printf_i+0x22e>
 8008dd6:	bf00      	nop
 8008dd8:	0800d6cc 	.word	0x0800d6cc
 8008ddc:	0800d6dd 	.word	0x0800d6dd

08008de0 <_scanf_float>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	b087      	sub	sp, #28
 8008de6:	4617      	mov	r7, r2
 8008de8:	9303      	str	r3, [sp, #12]
 8008dea:	688b      	ldr	r3, [r1, #8]
 8008dec:	1e5a      	subs	r2, r3, #1
 8008dee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008df2:	bf83      	ittte	hi
 8008df4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008df8:	195b      	addhi	r3, r3, r5
 8008dfa:	9302      	strhi	r3, [sp, #8]
 8008dfc:	2300      	movls	r3, #0
 8008dfe:	bf86      	itte	hi
 8008e00:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e04:	608b      	strhi	r3, [r1, #8]
 8008e06:	9302      	strls	r3, [sp, #8]
 8008e08:	680b      	ldr	r3, [r1, #0]
 8008e0a:	468b      	mov	fp, r1
 8008e0c:	2500      	movs	r5, #0
 8008e0e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e12:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	465e      	mov	r6, fp
 8008e20:	46aa      	mov	sl, r5
 8008e22:	46a9      	mov	r9, r5
 8008e24:	9501      	str	r5, [sp, #4]
 8008e26:	68a2      	ldr	r2, [r4, #8]
 8008e28:	b152      	cbz	r2, 8008e40 <_scanf_float+0x60>
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b4e      	cmp	r3, #78	; 0x4e
 8008e30:	d864      	bhi.n	8008efc <_scanf_float+0x11c>
 8008e32:	2b40      	cmp	r3, #64	; 0x40
 8008e34:	d83c      	bhi.n	8008eb0 <_scanf_float+0xd0>
 8008e36:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e3a:	b2c8      	uxtb	r0, r1
 8008e3c:	280e      	cmp	r0, #14
 8008e3e:	d93a      	bls.n	8008eb6 <_scanf_float+0xd6>
 8008e40:	f1b9 0f00 	cmp.w	r9, #0
 8008e44:	d003      	beq.n	8008e4e <_scanf_float+0x6e>
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e4c:	6023      	str	r3, [r4, #0]
 8008e4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e52:	f1ba 0f01 	cmp.w	sl, #1
 8008e56:	f200 8113 	bhi.w	8009080 <_scanf_float+0x2a0>
 8008e5a:	455e      	cmp	r6, fp
 8008e5c:	f200 8105 	bhi.w	800906a <_scanf_float+0x28a>
 8008e60:	2501      	movs	r5, #1
 8008e62:	4628      	mov	r0, r5
 8008e64:	b007      	add	sp, #28
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e6e:	2a0d      	cmp	r2, #13
 8008e70:	d8e6      	bhi.n	8008e40 <_scanf_float+0x60>
 8008e72:	a101      	add	r1, pc, #4	; (adr r1, 8008e78 <_scanf_float+0x98>)
 8008e74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e78:	08008fb7 	.word	0x08008fb7
 8008e7c:	08008e41 	.word	0x08008e41
 8008e80:	08008e41 	.word	0x08008e41
 8008e84:	08008e41 	.word	0x08008e41
 8008e88:	08009017 	.word	0x08009017
 8008e8c:	08008fef 	.word	0x08008fef
 8008e90:	08008e41 	.word	0x08008e41
 8008e94:	08008e41 	.word	0x08008e41
 8008e98:	08008fc5 	.word	0x08008fc5
 8008e9c:	08008e41 	.word	0x08008e41
 8008ea0:	08008e41 	.word	0x08008e41
 8008ea4:	08008e41 	.word	0x08008e41
 8008ea8:	08008e41 	.word	0x08008e41
 8008eac:	08008f7d 	.word	0x08008f7d
 8008eb0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008eb4:	e7db      	b.n	8008e6e <_scanf_float+0x8e>
 8008eb6:	290e      	cmp	r1, #14
 8008eb8:	d8c2      	bhi.n	8008e40 <_scanf_float+0x60>
 8008eba:	a001      	add	r0, pc, #4	; (adr r0, 8008ec0 <_scanf_float+0xe0>)
 8008ebc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ec0:	08008f6f 	.word	0x08008f6f
 8008ec4:	08008e41 	.word	0x08008e41
 8008ec8:	08008f6f 	.word	0x08008f6f
 8008ecc:	08009003 	.word	0x08009003
 8008ed0:	08008e41 	.word	0x08008e41
 8008ed4:	08008f1d 	.word	0x08008f1d
 8008ed8:	08008f59 	.word	0x08008f59
 8008edc:	08008f59 	.word	0x08008f59
 8008ee0:	08008f59 	.word	0x08008f59
 8008ee4:	08008f59 	.word	0x08008f59
 8008ee8:	08008f59 	.word	0x08008f59
 8008eec:	08008f59 	.word	0x08008f59
 8008ef0:	08008f59 	.word	0x08008f59
 8008ef4:	08008f59 	.word	0x08008f59
 8008ef8:	08008f59 	.word	0x08008f59
 8008efc:	2b6e      	cmp	r3, #110	; 0x6e
 8008efe:	d809      	bhi.n	8008f14 <_scanf_float+0x134>
 8008f00:	2b60      	cmp	r3, #96	; 0x60
 8008f02:	d8b2      	bhi.n	8008e6a <_scanf_float+0x8a>
 8008f04:	2b54      	cmp	r3, #84	; 0x54
 8008f06:	d077      	beq.n	8008ff8 <_scanf_float+0x218>
 8008f08:	2b59      	cmp	r3, #89	; 0x59
 8008f0a:	d199      	bne.n	8008e40 <_scanf_float+0x60>
 8008f0c:	2d07      	cmp	r5, #7
 8008f0e:	d197      	bne.n	8008e40 <_scanf_float+0x60>
 8008f10:	2508      	movs	r5, #8
 8008f12:	e029      	b.n	8008f68 <_scanf_float+0x188>
 8008f14:	2b74      	cmp	r3, #116	; 0x74
 8008f16:	d06f      	beq.n	8008ff8 <_scanf_float+0x218>
 8008f18:	2b79      	cmp	r3, #121	; 0x79
 8008f1a:	e7f6      	b.n	8008f0a <_scanf_float+0x12a>
 8008f1c:	6821      	ldr	r1, [r4, #0]
 8008f1e:	05c8      	lsls	r0, r1, #23
 8008f20:	d51a      	bpl.n	8008f58 <_scanf_float+0x178>
 8008f22:	9b02      	ldr	r3, [sp, #8]
 8008f24:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f28:	6021      	str	r1, [r4, #0]
 8008f2a:	f109 0901 	add.w	r9, r9, #1
 8008f2e:	b11b      	cbz	r3, 8008f38 <_scanf_float+0x158>
 8008f30:	3b01      	subs	r3, #1
 8008f32:	3201      	adds	r2, #1
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	60a2      	str	r2, [r4, #8]
 8008f38:	68a3      	ldr	r3, [r4, #8]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	60a3      	str	r3, [r4, #8]
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	3301      	adds	r3, #1
 8008f42:	6123      	str	r3, [r4, #16]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	f340 8084 	ble.w	8009058 <_scanf_float+0x278>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	603b      	str	r3, [r7, #0]
 8008f56:	e766      	b.n	8008e26 <_scanf_float+0x46>
 8008f58:	eb1a 0f05 	cmn.w	sl, r5
 8008f5c:	f47f af70 	bne.w	8008e40 <_scanf_float+0x60>
 8008f60:	6822      	ldr	r2, [r4, #0]
 8008f62:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f66:	6022      	str	r2, [r4, #0]
 8008f68:	f806 3b01 	strb.w	r3, [r6], #1
 8008f6c:	e7e4      	b.n	8008f38 <_scanf_float+0x158>
 8008f6e:	6822      	ldr	r2, [r4, #0]
 8008f70:	0610      	lsls	r0, r2, #24
 8008f72:	f57f af65 	bpl.w	8008e40 <_scanf_float+0x60>
 8008f76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f7a:	e7f4      	b.n	8008f66 <_scanf_float+0x186>
 8008f7c:	f1ba 0f00 	cmp.w	sl, #0
 8008f80:	d10e      	bne.n	8008fa0 <_scanf_float+0x1c0>
 8008f82:	f1b9 0f00 	cmp.w	r9, #0
 8008f86:	d10e      	bne.n	8008fa6 <_scanf_float+0x1c6>
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f8e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f92:	d108      	bne.n	8008fa6 <_scanf_float+0x1c6>
 8008f94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	f04f 0a01 	mov.w	sl, #1
 8008f9e:	e7e3      	b.n	8008f68 <_scanf_float+0x188>
 8008fa0:	f1ba 0f02 	cmp.w	sl, #2
 8008fa4:	d055      	beq.n	8009052 <_scanf_float+0x272>
 8008fa6:	2d01      	cmp	r5, #1
 8008fa8:	d002      	beq.n	8008fb0 <_scanf_float+0x1d0>
 8008faa:	2d04      	cmp	r5, #4
 8008fac:	f47f af48 	bne.w	8008e40 <_scanf_float+0x60>
 8008fb0:	3501      	adds	r5, #1
 8008fb2:	b2ed      	uxtb	r5, r5
 8008fb4:	e7d8      	b.n	8008f68 <_scanf_float+0x188>
 8008fb6:	f1ba 0f01 	cmp.w	sl, #1
 8008fba:	f47f af41 	bne.w	8008e40 <_scanf_float+0x60>
 8008fbe:	f04f 0a02 	mov.w	sl, #2
 8008fc2:	e7d1      	b.n	8008f68 <_scanf_float+0x188>
 8008fc4:	b97d      	cbnz	r5, 8008fe6 <_scanf_float+0x206>
 8008fc6:	f1b9 0f00 	cmp.w	r9, #0
 8008fca:	f47f af3c 	bne.w	8008e46 <_scanf_float+0x66>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fd4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fd8:	f47f af39 	bne.w	8008e4e <_scanf_float+0x6e>
 8008fdc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fe0:	6022      	str	r2, [r4, #0]
 8008fe2:	2501      	movs	r5, #1
 8008fe4:	e7c0      	b.n	8008f68 <_scanf_float+0x188>
 8008fe6:	2d03      	cmp	r5, #3
 8008fe8:	d0e2      	beq.n	8008fb0 <_scanf_float+0x1d0>
 8008fea:	2d05      	cmp	r5, #5
 8008fec:	e7de      	b.n	8008fac <_scanf_float+0x1cc>
 8008fee:	2d02      	cmp	r5, #2
 8008ff0:	f47f af26 	bne.w	8008e40 <_scanf_float+0x60>
 8008ff4:	2503      	movs	r5, #3
 8008ff6:	e7b7      	b.n	8008f68 <_scanf_float+0x188>
 8008ff8:	2d06      	cmp	r5, #6
 8008ffa:	f47f af21 	bne.w	8008e40 <_scanf_float+0x60>
 8008ffe:	2507      	movs	r5, #7
 8009000:	e7b2      	b.n	8008f68 <_scanf_float+0x188>
 8009002:	6822      	ldr	r2, [r4, #0]
 8009004:	0591      	lsls	r1, r2, #22
 8009006:	f57f af1b 	bpl.w	8008e40 <_scanf_float+0x60>
 800900a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800900e:	6022      	str	r2, [r4, #0]
 8009010:	f8cd 9004 	str.w	r9, [sp, #4]
 8009014:	e7a8      	b.n	8008f68 <_scanf_float+0x188>
 8009016:	6822      	ldr	r2, [r4, #0]
 8009018:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800901c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009020:	d006      	beq.n	8009030 <_scanf_float+0x250>
 8009022:	0550      	lsls	r0, r2, #21
 8009024:	f57f af0c 	bpl.w	8008e40 <_scanf_float+0x60>
 8009028:	f1b9 0f00 	cmp.w	r9, #0
 800902c:	f43f af0f 	beq.w	8008e4e <_scanf_float+0x6e>
 8009030:	0591      	lsls	r1, r2, #22
 8009032:	bf58      	it	pl
 8009034:	9901      	ldrpl	r1, [sp, #4]
 8009036:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800903a:	bf58      	it	pl
 800903c:	eba9 0101 	subpl.w	r1, r9, r1
 8009040:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009044:	bf58      	it	pl
 8009046:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800904a:	6022      	str	r2, [r4, #0]
 800904c:	f04f 0900 	mov.w	r9, #0
 8009050:	e78a      	b.n	8008f68 <_scanf_float+0x188>
 8009052:	f04f 0a03 	mov.w	sl, #3
 8009056:	e787      	b.n	8008f68 <_scanf_float+0x188>
 8009058:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800905c:	4639      	mov	r1, r7
 800905e:	4640      	mov	r0, r8
 8009060:	4798      	blx	r3
 8009062:	2800      	cmp	r0, #0
 8009064:	f43f aedf 	beq.w	8008e26 <_scanf_float+0x46>
 8009068:	e6ea      	b.n	8008e40 <_scanf_float+0x60>
 800906a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800906e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009072:	463a      	mov	r2, r7
 8009074:	4640      	mov	r0, r8
 8009076:	4798      	blx	r3
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	3b01      	subs	r3, #1
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	e6ec      	b.n	8008e5a <_scanf_float+0x7a>
 8009080:	1e6b      	subs	r3, r5, #1
 8009082:	2b06      	cmp	r3, #6
 8009084:	d825      	bhi.n	80090d2 <_scanf_float+0x2f2>
 8009086:	2d02      	cmp	r5, #2
 8009088:	d836      	bhi.n	80090f8 <_scanf_float+0x318>
 800908a:	455e      	cmp	r6, fp
 800908c:	f67f aee8 	bls.w	8008e60 <_scanf_float+0x80>
 8009090:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009094:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009098:	463a      	mov	r2, r7
 800909a:	4640      	mov	r0, r8
 800909c:	4798      	blx	r3
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	3b01      	subs	r3, #1
 80090a2:	6123      	str	r3, [r4, #16]
 80090a4:	e7f1      	b.n	800908a <_scanf_float+0x2aa>
 80090a6:	9802      	ldr	r0, [sp, #8]
 80090a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090ac:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090b0:	9002      	str	r0, [sp, #8]
 80090b2:	463a      	mov	r2, r7
 80090b4:	4640      	mov	r0, r8
 80090b6:	4798      	blx	r3
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	3b01      	subs	r3, #1
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090c2:	fa5f fa8a 	uxtb.w	sl, sl
 80090c6:	f1ba 0f02 	cmp.w	sl, #2
 80090ca:	d1ec      	bne.n	80090a6 <_scanf_float+0x2c6>
 80090cc:	3d03      	subs	r5, #3
 80090ce:	b2ed      	uxtb	r5, r5
 80090d0:	1b76      	subs	r6, r6, r5
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	05da      	lsls	r2, r3, #23
 80090d6:	d52f      	bpl.n	8009138 <_scanf_float+0x358>
 80090d8:	055b      	lsls	r3, r3, #21
 80090da:	d510      	bpl.n	80090fe <_scanf_float+0x31e>
 80090dc:	455e      	cmp	r6, fp
 80090de:	f67f aebf 	bls.w	8008e60 <_scanf_float+0x80>
 80090e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ea:	463a      	mov	r2, r7
 80090ec:	4640      	mov	r0, r8
 80090ee:	4798      	blx	r3
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	e7f1      	b.n	80090dc <_scanf_float+0x2fc>
 80090f8:	46aa      	mov	sl, r5
 80090fa:	9602      	str	r6, [sp, #8]
 80090fc:	e7df      	b.n	80090be <_scanf_float+0x2de>
 80090fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	2965      	cmp	r1, #101	; 0x65
 8009106:	f103 33ff 	add.w	r3, r3, #4294967295
 800910a:	f106 35ff 	add.w	r5, r6, #4294967295
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	d00c      	beq.n	800912c <_scanf_float+0x34c>
 8009112:	2945      	cmp	r1, #69	; 0x45
 8009114:	d00a      	beq.n	800912c <_scanf_float+0x34c>
 8009116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800911a:	463a      	mov	r2, r7
 800911c:	4640      	mov	r0, r8
 800911e:	4798      	blx	r3
 8009120:	6923      	ldr	r3, [r4, #16]
 8009122:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009126:	3b01      	subs	r3, #1
 8009128:	1eb5      	subs	r5, r6, #2
 800912a:	6123      	str	r3, [r4, #16]
 800912c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009130:	463a      	mov	r2, r7
 8009132:	4640      	mov	r0, r8
 8009134:	4798      	blx	r3
 8009136:	462e      	mov	r6, r5
 8009138:	6825      	ldr	r5, [r4, #0]
 800913a:	f015 0510 	ands.w	r5, r5, #16
 800913e:	d158      	bne.n	80091f2 <_scanf_float+0x412>
 8009140:	7035      	strb	r5, [r6, #0]
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800914c:	d11c      	bne.n	8009188 <_scanf_float+0x3a8>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	454b      	cmp	r3, r9
 8009152:	eba3 0209 	sub.w	r2, r3, r9
 8009156:	d124      	bne.n	80091a2 <_scanf_float+0x3c2>
 8009158:	2200      	movs	r2, #0
 800915a:	4659      	mov	r1, fp
 800915c:	4640      	mov	r0, r8
 800915e:	f000 ff25 	bl	8009fac <_strtod_r>
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	6821      	ldr	r1, [r4, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f011 0f02 	tst.w	r1, #2
 800916c:	ec57 6b10 	vmov	r6, r7, d0
 8009170:	f103 0204 	add.w	r2, r3, #4
 8009174:	d020      	beq.n	80091b8 <_scanf_float+0x3d8>
 8009176:	9903      	ldr	r1, [sp, #12]
 8009178:	600a      	str	r2, [r1, #0]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	e9c3 6700 	strd	r6, r7, [r3]
 8009180:	68e3      	ldr	r3, [r4, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60e3      	str	r3, [r4, #12]
 8009186:	e66c      	b.n	8008e62 <_scanf_float+0x82>
 8009188:	9b04      	ldr	r3, [sp, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0e4      	beq.n	8009158 <_scanf_float+0x378>
 800918e:	9905      	ldr	r1, [sp, #20]
 8009190:	230a      	movs	r3, #10
 8009192:	462a      	mov	r2, r5
 8009194:	3101      	adds	r1, #1
 8009196:	4640      	mov	r0, r8
 8009198:	f000 ff92 	bl	800a0c0 <_strtol_r>
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	9e05      	ldr	r6, [sp, #20]
 80091a0:	1ac2      	subs	r2, r0, r3
 80091a2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091a6:	429e      	cmp	r6, r3
 80091a8:	bf28      	it	cs
 80091aa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091ae:	4912      	ldr	r1, [pc, #72]	; (80091f8 <_scanf_float+0x418>)
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 f843 	bl	800923c <siprintf>
 80091b6:	e7cf      	b.n	8009158 <_scanf_float+0x378>
 80091b8:	f011 0f04 	tst.w	r1, #4
 80091bc:	9903      	ldr	r1, [sp, #12]
 80091be:	600a      	str	r2, [r1, #0]
 80091c0:	d1db      	bne.n	800917a <_scanf_float+0x39a>
 80091c2:	f8d3 8000 	ldr.w	r8, [r3]
 80091c6:	ee10 2a10 	vmov	r2, s0
 80091ca:	ee10 0a10 	vmov	r0, s0
 80091ce:	463b      	mov	r3, r7
 80091d0:	4639      	mov	r1, r7
 80091d2:	f7f7 fccb 	bl	8000b6c <__aeabi_dcmpun>
 80091d6:	b128      	cbz	r0, 80091e4 <_scanf_float+0x404>
 80091d8:	4808      	ldr	r0, [pc, #32]	; (80091fc <_scanf_float+0x41c>)
 80091da:	f000 f829 	bl	8009230 <nanf>
 80091de:	ed88 0a00 	vstr	s0, [r8]
 80091e2:	e7cd      	b.n	8009180 <_scanf_float+0x3a0>
 80091e4:	4630      	mov	r0, r6
 80091e6:	4639      	mov	r1, r7
 80091e8:	f7f7 fd1e 	bl	8000c28 <__aeabi_d2f>
 80091ec:	f8c8 0000 	str.w	r0, [r8]
 80091f0:	e7c6      	b.n	8009180 <_scanf_float+0x3a0>
 80091f2:	2500      	movs	r5, #0
 80091f4:	e635      	b.n	8008e62 <_scanf_float+0x82>
 80091f6:	bf00      	nop
 80091f8:	0800d6ee 	.word	0x0800d6ee
 80091fc:	0800db83 	.word	0x0800db83

08009200 <iprintf>:
 8009200:	b40f      	push	{r0, r1, r2, r3}
 8009202:	4b0a      	ldr	r3, [pc, #40]	; (800922c <iprintf+0x2c>)
 8009204:	b513      	push	{r0, r1, r4, lr}
 8009206:	681c      	ldr	r4, [r3, #0]
 8009208:	b124      	cbz	r4, 8009214 <iprintf+0x14>
 800920a:	69a3      	ldr	r3, [r4, #24]
 800920c:	b913      	cbnz	r3, 8009214 <iprintf+0x14>
 800920e:	4620      	mov	r0, r4
 8009210:	f001 fe6a 	bl	800aee8 <__sinit>
 8009214:	ab05      	add	r3, sp, #20
 8009216:	9a04      	ldr	r2, [sp, #16]
 8009218:	68a1      	ldr	r1, [r4, #8]
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	4620      	mov	r0, r4
 800921e:	f003 fb7d 	bl	800c91c <_vfiprintf_r>
 8009222:	b002      	add	sp, #8
 8009224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009228:	b004      	add	sp, #16
 800922a:	4770      	bx	lr
 800922c:	2000006c 	.word	0x2000006c

08009230 <nanf>:
 8009230:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009238 <nanf+0x8>
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	7fc00000 	.word	0x7fc00000

0800923c <siprintf>:
 800923c:	b40e      	push	{r1, r2, r3}
 800923e:	b500      	push	{lr}
 8009240:	b09c      	sub	sp, #112	; 0x70
 8009242:	ab1d      	add	r3, sp, #116	; 0x74
 8009244:	9002      	str	r0, [sp, #8]
 8009246:	9006      	str	r0, [sp, #24]
 8009248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800924c:	4809      	ldr	r0, [pc, #36]	; (8009274 <siprintf+0x38>)
 800924e:	9107      	str	r1, [sp, #28]
 8009250:	9104      	str	r1, [sp, #16]
 8009252:	4909      	ldr	r1, [pc, #36]	; (8009278 <siprintf+0x3c>)
 8009254:	f853 2b04 	ldr.w	r2, [r3], #4
 8009258:	9105      	str	r1, [sp, #20]
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	a902      	add	r1, sp, #8
 8009260:	f003 f860 	bl	800c324 <_svfiprintf_r>
 8009264:	9b02      	ldr	r3, [sp, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
 800926a:	b01c      	add	sp, #112	; 0x70
 800926c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009270:	b003      	add	sp, #12
 8009272:	4770      	bx	lr
 8009274:	2000006c 	.word	0x2000006c
 8009278:	ffff0208 	.word	0xffff0208

0800927c <siscanf>:
 800927c:	b40e      	push	{r1, r2, r3}
 800927e:	b510      	push	{r4, lr}
 8009280:	b09f      	sub	sp, #124	; 0x7c
 8009282:	ac21      	add	r4, sp, #132	; 0x84
 8009284:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009288:	f854 2b04 	ldr.w	r2, [r4], #4
 800928c:	9201      	str	r2, [sp, #4]
 800928e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009292:	9004      	str	r0, [sp, #16]
 8009294:	9008      	str	r0, [sp, #32]
 8009296:	f7f6 ffbb 	bl	8000210 <strlen>
 800929a:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <siscanf+0x50>)
 800929c:	9005      	str	r0, [sp, #20]
 800929e:	9009      	str	r0, [sp, #36]	; 0x24
 80092a0:	930d      	str	r3, [sp, #52]	; 0x34
 80092a2:	480b      	ldr	r0, [pc, #44]	; (80092d0 <siscanf+0x54>)
 80092a4:	9a01      	ldr	r2, [sp, #4]
 80092a6:	6800      	ldr	r0, [r0, #0]
 80092a8:	9403      	str	r4, [sp, #12]
 80092aa:	2300      	movs	r3, #0
 80092ac:	9311      	str	r3, [sp, #68]	; 0x44
 80092ae:	9316      	str	r3, [sp, #88]	; 0x58
 80092b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80092b8:	a904      	add	r1, sp, #16
 80092ba:	4623      	mov	r3, r4
 80092bc:	f003 f98c 	bl	800c5d8 <__ssvfiscanf_r>
 80092c0:	b01f      	add	sp, #124	; 0x7c
 80092c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c6:	b003      	add	sp, #12
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	080092f7 	.word	0x080092f7
 80092d0:	2000006c 	.word	0x2000006c

080092d4 <__sread>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	460c      	mov	r4, r1
 80092d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092dc:	f003 fd9a 	bl	800ce14 <_read_r>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	bfab      	itete	ge
 80092e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092e6:	89a3      	ldrhlt	r3, [r4, #12]
 80092e8:	181b      	addge	r3, r3, r0
 80092ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092ee:	bfac      	ite	ge
 80092f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80092f2:	81a3      	strhlt	r3, [r4, #12]
 80092f4:	bd10      	pop	{r4, pc}

080092f6 <__seofread>:
 80092f6:	2000      	movs	r0, #0
 80092f8:	4770      	bx	lr

080092fa <__swrite>:
 80092fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fe:	461f      	mov	r7, r3
 8009300:	898b      	ldrh	r3, [r1, #12]
 8009302:	05db      	lsls	r3, r3, #23
 8009304:	4605      	mov	r5, r0
 8009306:	460c      	mov	r4, r1
 8009308:	4616      	mov	r6, r2
 800930a:	d505      	bpl.n	8009318 <__swrite+0x1e>
 800930c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009310:	2302      	movs	r3, #2
 8009312:	2200      	movs	r2, #0
 8009314:	f002 f9fc 	bl	800b710 <_lseek_r>
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800931e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009322:	81a3      	strh	r3, [r4, #12]
 8009324:	4632      	mov	r2, r6
 8009326:	463b      	mov	r3, r7
 8009328:	4628      	mov	r0, r5
 800932a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800932e:	f000 bee9 	b.w	800a104 <_write_r>

08009332 <__sseek>:
 8009332:	b510      	push	{r4, lr}
 8009334:	460c      	mov	r4, r1
 8009336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933a:	f002 f9e9 	bl	800b710 <_lseek_r>
 800933e:	1c43      	adds	r3, r0, #1
 8009340:	89a3      	ldrh	r3, [r4, #12]
 8009342:	bf15      	itete	ne
 8009344:	6560      	strne	r0, [r4, #84]	; 0x54
 8009346:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800934a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800934e:	81a3      	strheq	r3, [r4, #12]
 8009350:	bf18      	it	ne
 8009352:	81a3      	strhne	r3, [r4, #12]
 8009354:	bd10      	pop	{r4, pc}

08009356 <__sclose>:
 8009356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935a:	f000 bee5 	b.w	800a128 <_close_r>

0800935e <sulp>:
 800935e:	b570      	push	{r4, r5, r6, lr}
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	ec45 4b10 	vmov	d0, r4, r5
 8009368:	4616      	mov	r6, r2
 800936a:	f002 fd77 	bl	800be5c <__ulp>
 800936e:	ec51 0b10 	vmov	r0, r1, d0
 8009372:	b17e      	cbz	r6, 8009394 <sulp+0x36>
 8009374:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009378:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800937c:	2b00      	cmp	r3, #0
 800937e:	dd09      	ble.n	8009394 <sulp+0x36>
 8009380:	051b      	lsls	r3, r3, #20
 8009382:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009386:	2400      	movs	r4, #0
 8009388:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800938c:	4622      	mov	r2, r4
 800938e:	462b      	mov	r3, r5
 8009390:	f7f7 f952 	bl	8000638 <__aeabi_dmul>
 8009394:	bd70      	pop	{r4, r5, r6, pc}
	...

08009398 <_strtod_l>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	b0a3      	sub	sp, #140	; 0x8c
 800939e:	461f      	mov	r7, r3
 80093a0:	2300      	movs	r3, #0
 80093a2:	931e      	str	r3, [sp, #120]	; 0x78
 80093a4:	4ba4      	ldr	r3, [pc, #656]	; (8009638 <_strtod_l+0x2a0>)
 80093a6:	9219      	str	r2, [sp, #100]	; 0x64
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	9307      	str	r3, [sp, #28]
 80093ac:	4604      	mov	r4, r0
 80093ae:	4618      	mov	r0, r3
 80093b0:	4688      	mov	r8, r1
 80093b2:	f7f6 ff2d 	bl	8000210 <strlen>
 80093b6:	f04f 0a00 	mov.w	sl, #0
 80093ba:	4605      	mov	r5, r0
 80093bc:	f04f 0b00 	mov.w	fp, #0
 80093c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80093c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093c6:	781a      	ldrb	r2, [r3, #0]
 80093c8:	2a2b      	cmp	r2, #43	; 0x2b
 80093ca:	d04c      	beq.n	8009466 <_strtod_l+0xce>
 80093cc:	d839      	bhi.n	8009442 <_strtod_l+0xaa>
 80093ce:	2a0d      	cmp	r2, #13
 80093d0:	d832      	bhi.n	8009438 <_strtod_l+0xa0>
 80093d2:	2a08      	cmp	r2, #8
 80093d4:	d832      	bhi.n	800943c <_strtod_l+0xa4>
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	d03c      	beq.n	8009454 <_strtod_l+0xbc>
 80093da:	2300      	movs	r3, #0
 80093dc:	930e      	str	r3, [sp, #56]	; 0x38
 80093de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80093e0:	7833      	ldrb	r3, [r6, #0]
 80093e2:	2b30      	cmp	r3, #48	; 0x30
 80093e4:	f040 80b4 	bne.w	8009550 <_strtod_l+0x1b8>
 80093e8:	7873      	ldrb	r3, [r6, #1]
 80093ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093ee:	2b58      	cmp	r3, #88	; 0x58
 80093f0:	d16c      	bne.n	80094cc <_strtod_l+0x134>
 80093f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	ab1e      	add	r3, sp, #120	; 0x78
 80093f8:	9702      	str	r7, [sp, #8]
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	4a8f      	ldr	r2, [pc, #572]	; (800963c <_strtod_l+0x2a4>)
 80093fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8009400:	a91d      	add	r1, sp, #116	; 0x74
 8009402:	4620      	mov	r0, r4
 8009404:	f001 fe74 	bl	800b0f0 <__gethex>
 8009408:	f010 0707 	ands.w	r7, r0, #7
 800940c:	4605      	mov	r5, r0
 800940e:	d005      	beq.n	800941c <_strtod_l+0x84>
 8009410:	2f06      	cmp	r7, #6
 8009412:	d12a      	bne.n	800946a <_strtod_l+0xd2>
 8009414:	3601      	adds	r6, #1
 8009416:	2300      	movs	r3, #0
 8009418:	961d      	str	r6, [sp, #116]	; 0x74
 800941a:	930e      	str	r3, [sp, #56]	; 0x38
 800941c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800941e:	2b00      	cmp	r3, #0
 8009420:	f040 8596 	bne.w	8009f50 <_strtod_l+0xbb8>
 8009424:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009426:	b1db      	cbz	r3, 8009460 <_strtod_l+0xc8>
 8009428:	4652      	mov	r2, sl
 800942a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800942e:	ec43 2b10 	vmov	d0, r2, r3
 8009432:	b023      	add	sp, #140	; 0x8c
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	2a20      	cmp	r2, #32
 800943a:	d1ce      	bne.n	80093da <_strtod_l+0x42>
 800943c:	3301      	adds	r3, #1
 800943e:	931d      	str	r3, [sp, #116]	; 0x74
 8009440:	e7c0      	b.n	80093c4 <_strtod_l+0x2c>
 8009442:	2a2d      	cmp	r2, #45	; 0x2d
 8009444:	d1c9      	bne.n	80093da <_strtod_l+0x42>
 8009446:	2201      	movs	r2, #1
 8009448:	920e      	str	r2, [sp, #56]	; 0x38
 800944a:	1c5a      	adds	r2, r3, #1
 800944c:	921d      	str	r2, [sp, #116]	; 0x74
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1c4      	bne.n	80093de <_strtod_l+0x46>
 8009454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009456:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 8576 	bne.w	8009f4c <_strtod_l+0xbb4>
 8009460:	4652      	mov	r2, sl
 8009462:	465b      	mov	r3, fp
 8009464:	e7e3      	b.n	800942e <_strtod_l+0x96>
 8009466:	2200      	movs	r2, #0
 8009468:	e7ee      	b.n	8009448 <_strtod_l+0xb0>
 800946a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800946c:	b13a      	cbz	r2, 800947e <_strtod_l+0xe6>
 800946e:	2135      	movs	r1, #53	; 0x35
 8009470:	a820      	add	r0, sp, #128	; 0x80
 8009472:	f002 fdfe 	bl	800c072 <__copybits>
 8009476:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009478:	4620      	mov	r0, r4
 800947a:	f002 f9c3 	bl	800b804 <_Bfree>
 800947e:	3f01      	subs	r7, #1
 8009480:	2f05      	cmp	r7, #5
 8009482:	d807      	bhi.n	8009494 <_strtod_l+0xfc>
 8009484:	e8df f007 	tbb	[pc, r7]
 8009488:	1d180b0e 	.word	0x1d180b0e
 800948c:	030e      	.short	0x030e
 800948e:	f04f 0b00 	mov.w	fp, #0
 8009492:	46da      	mov	sl, fp
 8009494:	0728      	lsls	r0, r5, #28
 8009496:	d5c1      	bpl.n	800941c <_strtod_l+0x84>
 8009498:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800949c:	e7be      	b.n	800941c <_strtod_l+0x84>
 800949e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80094a2:	e7f7      	b.n	8009494 <_strtod_l+0xfc>
 80094a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80094a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80094aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80094ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80094b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094b6:	e7ed      	b.n	8009494 <_strtod_l+0xfc>
 80094b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009640 <_strtod_l+0x2a8>
 80094bc:	f04f 0a00 	mov.w	sl, #0
 80094c0:	e7e8      	b.n	8009494 <_strtod_l+0xfc>
 80094c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80094c6:	f04f 3aff 	mov.w	sl, #4294967295
 80094ca:	e7e3      	b.n	8009494 <_strtod_l+0xfc>
 80094cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	921d      	str	r2, [sp, #116]	; 0x74
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	2b30      	cmp	r3, #48	; 0x30
 80094d6:	d0f9      	beq.n	80094cc <_strtod_l+0x134>
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d09f      	beq.n	800941c <_strtod_l+0x84>
 80094dc:	2301      	movs	r3, #1
 80094de:	f04f 0900 	mov.w	r9, #0
 80094e2:	9304      	str	r3, [sp, #16]
 80094e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094e6:	930a      	str	r3, [sp, #40]	; 0x28
 80094e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80094ec:	464f      	mov	r7, r9
 80094ee:	220a      	movs	r2, #10
 80094f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80094f2:	7806      	ldrb	r6, [r0, #0]
 80094f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80094f8:	b2d9      	uxtb	r1, r3
 80094fa:	2909      	cmp	r1, #9
 80094fc:	d92a      	bls.n	8009554 <_strtod_l+0x1bc>
 80094fe:	9907      	ldr	r1, [sp, #28]
 8009500:	462a      	mov	r2, r5
 8009502:	f003 fceb 	bl	800cedc <strncmp>
 8009506:	b398      	cbz	r0, 8009570 <_strtod_l+0x1d8>
 8009508:	2000      	movs	r0, #0
 800950a:	4633      	mov	r3, r6
 800950c:	463d      	mov	r5, r7
 800950e:	9007      	str	r0, [sp, #28]
 8009510:	4602      	mov	r2, r0
 8009512:	2b65      	cmp	r3, #101	; 0x65
 8009514:	d001      	beq.n	800951a <_strtod_l+0x182>
 8009516:	2b45      	cmp	r3, #69	; 0x45
 8009518:	d118      	bne.n	800954c <_strtod_l+0x1b4>
 800951a:	b91d      	cbnz	r5, 8009524 <_strtod_l+0x18c>
 800951c:	9b04      	ldr	r3, [sp, #16]
 800951e:	4303      	orrs	r3, r0
 8009520:	d098      	beq.n	8009454 <_strtod_l+0xbc>
 8009522:	2500      	movs	r5, #0
 8009524:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009528:	f108 0301 	add.w	r3, r8, #1
 800952c:	931d      	str	r3, [sp, #116]	; 0x74
 800952e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009532:	2b2b      	cmp	r3, #43	; 0x2b
 8009534:	d075      	beq.n	8009622 <_strtod_l+0x28a>
 8009536:	2b2d      	cmp	r3, #45	; 0x2d
 8009538:	d07b      	beq.n	8009632 <_strtod_l+0x29a>
 800953a:	f04f 0c00 	mov.w	ip, #0
 800953e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009542:	2909      	cmp	r1, #9
 8009544:	f240 8082 	bls.w	800964c <_strtod_l+0x2b4>
 8009548:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800954c:	2600      	movs	r6, #0
 800954e:	e09d      	b.n	800968c <_strtod_l+0x2f4>
 8009550:	2300      	movs	r3, #0
 8009552:	e7c4      	b.n	80094de <_strtod_l+0x146>
 8009554:	2f08      	cmp	r7, #8
 8009556:	bfd8      	it	le
 8009558:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800955a:	f100 0001 	add.w	r0, r0, #1
 800955e:	bfda      	itte	le
 8009560:	fb02 3301 	mlale	r3, r2, r1, r3
 8009564:	9309      	strle	r3, [sp, #36]	; 0x24
 8009566:	fb02 3909 	mlagt	r9, r2, r9, r3
 800956a:	3701      	adds	r7, #1
 800956c:	901d      	str	r0, [sp, #116]	; 0x74
 800956e:	e7bf      	b.n	80094f0 <_strtod_l+0x158>
 8009570:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009572:	195a      	adds	r2, r3, r5
 8009574:	921d      	str	r2, [sp, #116]	; 0x74
 8009576:	5d5b      	ldrb	r3, [r3, r5]
 8009578:	2f00      	cmp	r7, #0
 800957a:	d037      	beq.n	80095ec <_strtod_l+0x254>
 800957c:	9007      	str	r0, [sp, #28]
 800957e:	463d      	mov	r5, r7
 8009580:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009584:	2a09      	cmp	r2, #9
 8009586:	d912      	bls.n	80095ae <_strtod_l+0x216>
 8009588:	2201      	movs	r2, #1
 800958a:	e7c2      	b.n	8009512 <_strtod_l+0x17a>
 800958c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	921d      	str	r2, [sp, #116]	; 0x74
 8009592:	785b      	ldrb	r3, [r3, #1]
 8009594:	3001      	adds	r0, #1
 8009596:	2b30      	cmp	r3, #48	; 0x30
 8009598:	d0f8      	beq.n	800958c <_strtod_l+0x1f4>
 800959a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800959e:	2a08      	cmp	r2, #8
 80095a0:	f200 84db 	bhi.w	8009f5a <_strtod_l+0xbc2>
 80095a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80095a6:	9007      	str	r0, [sp, #28]
 80095a8:	2000      	movs	r0, #0
 80095aa:	920a      	str	r2, [sp, #40]	; 0x28
 80095ac:	4605      	mov	r5, r0
 80095ae:	3b30      	subs	r3, #48	; 0x30
 80095b0:	f100 0201 	add.w	r2, r0, #1
 80095b4:	d014      	beq.n	80095e0 <_strtod_l+0x248>
 80095b6:	9907      	ldr	r1, [sp, #28]
 80095b8:	4411      	add	r1, r2
 80095ba:	9107      	str	r1, [sp, #28]
 80095bc:	462a      	mov	r2, r5
 80095be:	eb00 0e05 	add.w	lr, r0, r5
 80095c2:	210a      	movs	r1, #10
 80095c4:	4572      	cmp	r2, lr
 80095c6:	d113      	bne.n	80095f0 <_strtod_l+0x258>
 80095c8:	182a      	adds	r2, r5, r0
 80095ca:	2a08      	cmp	r2, #8
 80095cc:	f105 0501 	add.w	r5, r5, #1
 80095d0:	4405      	add	r5, r0
 80095d2:	dc1c      	bgt.n	800960e <_strtod_l+0x276>
 80095d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095d6:	220a      	movs	r2, #10
 80095d8:	fb02 3301 	mla	r3, r2, r1, r3
 80095dc:	9309      	str	r3, [sp, #36]	; 0x24
 80095de:	2200      	movs	r2, #0
 80095e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095e2:	1c59      	adds	r1, r3, #1
 80095e4:	911d      	str	r1, [sp, #116]	; 0x74
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	4610      	mov	r0, r2
 80095ea:	e7c9      	b.n	8009580 <_strtod_l+0x1e8>
 80095ec:	4638      	mov	r0, r7
 80095ee:	e7d2      	b.n	8009596 <_strtod_l+0x1fe>
 80095f0:	2a08      	cmp	r2, #8
 80095f2:	dc04      	bgt.n	80095fe <_strtod_l+0x266>
 80095f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80095f6:	434e      	muls	r6, r1
 80095f8:	9609      	str	r6, [sp, #36]	; 0x24
 80095fa:	3201      	adds	r2, #1
 80095fc:	e7e2      	b.n	80095c4 <_strtod_l+0x22c>
 80095fe:	f102 0c01 	add.w	ip, r2, #1
 8009602:	f1bc 0f10 	cmp.w	ip, #16
 8009606:	bfd8      	it	le
 8009608:	fb01 f909 	mulle.w	r9, r1, r9
 800960c:	e7f5      	b.n	80095fa <_strtod_l+0x262>
 800960e:	2d10      	cmp	r5, #16
 8009610:	bfdc      	itt	le
 8009612:	220a      	movle	r2, #10
 8009614:	fb02 3909 	mlale	r9, r2, r9, r3
 8009618:	e7e1      	b.n	80095de <_strtod_l+0x246>
 800961a:	2300      	movs	r3, #0
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	2201      	movs	r2, #1
 8009620:	e77c      	b.n	800951c <_strtod_l+0x184>
 8009622:	f04f 0c00 	mov.w	ip, #0
 8009626:	f108 0302 	add.w	r3, r8, #2
 800962a:	931d      	str	r3, [sp, #116]	; 0x74
 800962c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009630:	e785      	b.n	800953e <_strtod_l+0x1a6>
 8009632:	f04f 0c01 	mov.w	ip, #1
 8009636:	e7f6      	b.n	8009626 <_strtod_l+0x28e>
 8009638:	0800d9ac 	.word	0x0800d9ac
 800963c:	0800d6f4 	.word	0x0800d6f4
 8009640:	7ff00000 	.word	0x7ff00000
 8009644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009646:	1c59      	adds	r1, r3, #1
 8009648:	911d      	str	r1, [sp, #116]	; 0x74
 800964a:	785b      	ldrb	r3, [r3, #1]
 800964c:	2b30      	cmp	r3, #48	; 0x30
 800964e:	d0f9      	beq.n	8009644 <_strtod_l+0x2ac>
 8009650:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009654:	2908      	cmp	r1, #8
 8009656:	f63f af79 	bhi.w	800954c <_strtod_l+0x1b4>
 800965a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800965e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009660:	9308      	str	r3, [sp, #32]
 8009662:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009664:	1c59      	adds	r1, r3, #1
 8009666:	911d      	str	r1, [sp, #116]	; 0x74
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800966e:	2e09      	cmp	r6, #9
 8009670:	d937      	bls.n	80096e2 <_strtod_l+0x34a>
 8009672:	9e08      	ldr	r6, [sp, #32]
 8009674:	1b89      	subs	r1, r1, r6
 8009676:	2908      	cmp	r1, #8
 8009678:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800967c:	dc02      	bgt.n	8009684 <_strtod_l+0x2ec>
 800967e:	4576      	cmp	r6, lr
 8009680:	bfa8      	it	ge
 8009682:	4676      	movge	r6, lr
 8009684:	f1bc 0f00 	cmp.w	ip, #0
 8009688:	d000      	beq.n	800968c <_strtod_l+0x2f4>
 800968a:	4276      	negs	r6, r6
 800968c:	2d00      	cmp	r5, #0
 800968e:	d14f      	bne.n	8009730 <_strtod_l+0x398>
 8009690:	9904      	ldr	r1, [sp, #16]
 8009692:	4301      	orrs	r1, r0
 8009694:	f47f aec2 	bne.w	800941c <_strtod_l+0x84>
 8009698:	2a00      	cmp	r2, #0
 800969a:	f47f aedb 	bne.w	8009454 <_strtod_l+0xbc>
 800969e:	2b69      	cmp	r3, #105	; 0x69
 80096a0:	d027      	beq.n	80096f2 <_strtod_l+0x35a>
 80096a2:	dc24      	bgt.n	80096ee <_strtod_l+0x356>
 80096a4:	2b49      	cmp	r3, #73	; 0x49
 80096a6:	d024      	beq.n	80096f2 <_strtod_l+0x35a>
 80096a8:	2b4e      	cmp	r3, #78	; 0x4e
 80096aa:	f47f aed3 	bne.w	8009454 <_strtod_l+0xbc>
 80096ae:	499e      	ldr	r1, [pc, #632]	; (8009928 <_strtod_l+0x590>)
 80096b0:	a81d      	add	r0, sp, #116	; 0x74
 80096b2:	f001 ff75 	bl	800b5a0 <__match>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f aecc 	beq.w	8009454 <_strtod_l+0xbc>
 80096bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b28      	cmp	r3, #40	; 0x28
 80096c2:	d12d      	bne.n	8009720 <_strtod_l+0x388>
 80096c4:	4999      	ldr	r1, [pc, #612]	; (800992c <_strtod_l+0x594>)
 80096c6:	aa20      	add	r2, sp, #128	; 0x80
 80096c8:	a81d      	add	r0, sp, #116	; 0x74
 80096ca:	f001 ff7d 	bl	800b5c8 <__hexnan>
 80096ce:	2805      	cmp	r0, #5
 80096d0:	d126      	bne.n	8009720 <_strtod_l+0x388>
 80096d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80096d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80096dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80096e0:	e69c      	b.n	800941c <_strtod_l+0x84>
 80096e2:	210a      	movs	r1, #10
 80096e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80096e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80096ec:	e7b9      	b.n	8009662 <_strtod_l+0x2ca>
 80096ee:	2b6e      	cmp	r3, #110	; 0x6e
 80096f0:	e7db      	b.n	80096aa <_strtod_l+0x312>
 80096f2:	498f      	ldr	r1, [pc, #572]	; (8009930 <_strtod_l+0x598>)
 80096f4:	a81d      	add	r0, sp, #116	; 0x74
 80096f6:	f001 ff53 	bl	800b5a0 <__match>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	f43f aeaa 	beq.w	8009454 <_strtod_l+0xbc>
 8009700:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009702:	498c      	ldr	r1, [pc, #560]	; (8009934 <_strtod_l+0x59c>)
 8009704:	3b01      	subs	r3, #1
 8009706:	a81d      	add	r0, sp, #116	; 0x74
 8009708:	931d      	str	r3, [sp, #116]	; 0x74
 800970a:	f001 ff49 	bl	800b5a0 <__match>
 800970e:	b910      	cbnz	r0, 8009716 <_strtod_l+0x37e>
 8009710:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009712:	3301      	adds	r3, #1
 8009714:	931d      	str	r3, [sp, #116]	; 0x74
 8009716:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009944 <_strtod_l+0x5ac>
 800971a:	f04f 0a00 	mov.w	sl, #0
 800971e:	e67d      	b.n	800941c <_strtod_l+0x84>
 8009720:	4885      	ldr	r0, [pc, #532]	; (8009938 <_strtod_l+0x5a0>)
 8009722:	f003 fb89 	bl	800ce38 <nan>
 8009726:	ed8d 0b04 	vstr	d0, [sp, #16]
 800972a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800972e:	e675      	b.n	800941c <_strtod_l+0x84>
 8009730:	9b07      	ldr	r3, [sp, #28]
 8009732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009734:	1af3      	subs	r3, r6, r3
 8009736:	2f00      	cmp	r7, #0
 8009738:	bf08      	it	eq
 800973a:	462f      	moveq	r7, r5
 800973c:	2d10      	cmp	r5, #16
 800973e:	9308      	str	r3, [sp, #32]
 8009740:	46a8      	mov	r8, r5
 8009742:	bfa8      	it	ge
 8009744:	f04f 0810 	movge.w	r8, #16
 8009748:	f7f6 fefc 	bl	8000544 <__aeabi_ui2d>
 800974c:	2d09      	cmp	r5, #9
 800974e:	4682      	mov	sl, r0
 8009750:	468b      	mov	fp, r1
 8009752:	dd13      	ble.n	800977c <_strtod_l+0x3e4>
 8009754:	4b79      	ldr	r3, [pc, #484]	; (800993c <_strtod_l+0x5a4>)
 8009756:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800975a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800975e:	f7f6 ff6b 	bl	8000638 <__aeabi_dmul>
 8009762:	4682      	mov	sl, r0
 8009764:	4648      	mov	r0, r9
 8009766:	468b      	mov	fp, r1
 8009768:	f7f6 feec 	bl	8000544 <__aeabi_ui2d>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4650      	mov	r0, sl
 8009772:	4659      	mov	r1, fp
 8009774:	f7f6 fdaa 	bl	80002cc <__adddf3>
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	2d0f      	cmp	r5, #15
 800977e:	dc38      	bgt.n	80097f2 <_strtod_l+0x45a>
 8009780:	9b08      	ldr	r3, [sp, #32]
 8009782:	2b00      	cmp	r3, #0
 8009784:	f43f ae4a 	beq.w	800941c <_strtod_l+0x84>
 8009788:	dd24      	ble.n	80097d4 <_strtod_l+0x43c>
 800978a:	2b16      	cmp	r3, #22
 800978c:	dc0b      	bgt.n	80097a6 <_strtod_l+0x40e>
 800978e:	4d6b      	ldr	r5, [pc, #428]	; (800993c <_strtod_l+0x5a4>)
 8009790:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009794:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009798:	4652      	mov	r2, sl
 800979a:	465b      	mov	r3, fp
 800979c:	f7f6 ff4c 	bl	8000638 <__aeabi_dmul>
 80097a0:	4682      	mov	sl, r0
 80097a2:	468b      	mov	fp, r1
 80097a4:	e63a      	b.n	800941c <_strtod_l+0x84>
 80097a6:	9a08      	ldr	r2, [sp, #32]
 80097a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80097ac:	4293      	cmp	r3, r2
 80097ae:	db20      	blt.n	80097f2 <_strtod_l+0x45a>
 80097b0:	4c62      	ldr	r4, [pc, #392]	; (800993c <_strtod_l+0x5a4>)
 80097b2:	f1c5 050f 	rsb	r5, r5, #15
 80097b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80097ba:	4652      	mov	r2, sl
 80097bc:	465b      	mov	r3, fp
 80097be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c2:	f7f6 ff39 	bl	8000638 <__aeabi_dmul>
 80097c6:	9b08      	ldr	r3, [sp, #32]
 80097c8:	1b5d      	subs	r5, r3, r5
 80097ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80097ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80097d2:	e7e3      	b.n	800979c <_strtod_l+0x404>
 80097d4:	9b08      	ldr	r3, [sp, #32]
 80097d6:	3316      	adds	r3, #22
 80097d8:	db0b      	blt.n	80097f2 <_strtod_l+0x45a>
 80097da:	9b07      	ldr	r3, [sp, #28]
 80097dc:	4a57      	ldr	r2, [pc, #348]	; (800993c <_strtod_l+0x5a4>)
 80097de:	1b9e      	subs	r6, r3, r6
 80097e0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80097e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097e8:	4650      	mov	r0, sl
 80097ea:	4659      	mov	r1, fp
 80097ec:	f7f7 f84e 	bl	800088c <__aeabi_ddiv>
 80097f0:	e7d6      	b.n	80097a0 <_strtod_l+0x408>
 80097f2:	9b08      	ldr	r3, [sp, #32]
 80097f4:	eba5 0808 	sub.w	r8, r5, r8
 80097f8:	4498      	add	r8, r3
 80097fa:	f1b8 0f00 	cmp.w	r8, #0
 80097fe:	dd71      	ble.n	80098e4 <_strtod_l+0x54c>
 8009800:	f018 030f 	ands.w	r3, r8, #15
 8009804:	d00a      	beq.n	800981c <_strtod_l+0x484>
 8009806:	494d      	ldr	r1, [pc, #308]	; (800993c <_strtod_l+0x5a4>)
 8009808:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800980c:	4652      	mov	r2, sl
 800980e:	465b      	mov	r3, fp
 8009810:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009814:	f7f6 ff10 	bl	8000638 <__aeabi_dmul>
 8009818:	4682      	mov	sl, r0
 800981a:	468b      	mov	fp, r1
 800981c:	f038 080f 	bics.w	r8, r8, #15
 8009820:	d04d      	beq.n	80098be <_strtod_l+0x526>
 8009822:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009826:	dd22      	ble.n	800986e <_strtod_l+0x4d6>
 8009828:	2500      	movs	r5, #0
 800982a:	462e      	mov	r6, r5
 800982c:	9509      	str	r5, [sp, #36]	; 0x24
 800982e:	9507      	str	r5, [sp, #28]
 8009830:	2322      	movs	r3, #34	; 0x22
 8009832:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009944 <_strtod_l+0x5ac>
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	f04f 0a00 	mov.w	sl, #0
 800983c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983e:	2b00      	cmp	r3, #0
 8009840:	f43f adec 	beq.w	800941c <_strtod_l+0x84>
 8009844:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009846:	4620      	mov	r0, r4
 8009848:	f001 ffdc 	bl	800b804 <_Bfree>
 800984c:	9907      	ldr	r1, [sp, #28]
 800984e:	4620      	mov	r0, r4
 8009850:	f001 ffd8 	bl	800b804 <_Bfree>
 8009854:	4631      	mov	r1, r6
 8009856:	4620      	mov	r0, r4
 8009858:	f001 ffd4 	bl	800b804 <_Bfree>
 800985c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800985e:	4620      	mov	r0, r4
 8009860:	f001 ffd0 	bl	800b804 <_Bfree>
 8009864:	4629      	mov	r1, r5
 8009866:	4620      	mov	r0, r4
 8009868:	f001 ffcc 	bl	800b804 <_Bfree>
 800986c:	e5d6      	b.n	800941c <_strtod_l+0x84>
 800986e:	2300      	movs	r3, #0
 8009870:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009874:	4650      	mov	r0, sl
 8009876:	4659      	mov	r1, fp
 8009878:	4699      	mov	r9, r3
 800987a:	f1b8 0f01 	cmp.w	r8, #1
 800987e:	dc21      	bgt.n	80098c4 <_strtod_l+0x52c>
 8009880:	b10b      	cbz	r3, 8009886 <_strtod_l+0x4ee>
 8009882:	4682      	mov	sl, r0
 8009884:	468b      	mov	fp, r1
 8009886:	4b2e      	ldr	r3, [pc, #184]	; (8009940 <_strtod_l+0x5a8>)
 8009888:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800988c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009890:	4652      	mov	r2, sl
 8009892:	465b      	mov	r3, fp
 8009894:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009898:	f7f6 fece 	bl	8000638 <__aeabi_dmul>
 800989c:	4b29      	ldr	r3, [pc, #164]	; (8009944 <_strtod_l+0x5ac>)
 800989e:	460a      	mov	r2, r1
 80098a0:	400b      	ands	r3, r1
 80098a2:	4929      	ldr	r1, [pc, #164]	; (8009948 <_strtod_l+0x5b0>)
 80098a4:	428b      	cmp	r3, r1
 80098a6:	4682      	mov	sl, r0
 80098a8:	d8be      	bhi.n	8009828 <_strtod_l+0x490>
 80098aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80098ae:	428b      	cmp	r3, r1
 80098b0:	bf86      	itte	hi
 80098b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800994c <_strtod_l+0x5b4>
 80098b6:	f04f 3aff 	movhi.w	sl, #4294967295
 80098ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80098be:	2300      	movs	r3, #0
 80098c0:	9304      	str	r3, [sp, #16]
 80098c2:	e081      	b.n	80099c8 <_strtod_l+0x630>
 80098c4:	f018 0f01 	tst.w	r8, #1
 80098c8:	d007      	beq.n	80098da <_strtod_l+0x542>
 80098ca:	4b1d      	ldr	r3, [pc, #116]	; (8009940 <_strtod_l+0x5a8>)
 80098cc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f7f6 feb0 	bl	8000638 <__aeabi_dmul>
 80098d8:	2301      	movs	r3, #1
 80098da:	f109 0901 	add.w	r9, r9, #1
 80098de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098e2:	e7ca      	b.n	800987a <_strtod_l+0x4e2>
 80098e4:	d0eb      	beq.n	80098be <_strtod_l+0x526>
 80098e6:	f1c8 0800 	rsb	r8, r8, #0
 80098ea:	f018 020f 	ands.w	r2, r8, #15
 80098ee:	d00a      	beq.n	8009906 <_strtod_l+0x56e>
 80098f0:	4b12      	ldr	r3, [pc, #72]	; (800993c <_strtod_l+0x5a4>)
 80098f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098f6:	4650      	mov	r0, sl
 80098f8:	4659      	mov	r1, fp
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f7f6 ffc5 	bl	800088c <__aeabi_ddiv>
 8009902:	4682      	mov	sl, r0
 8009904:	468b      	mov	fp, r1
 8009906:	ea5f 1828 	movs.w	r8, r8, asr #4
 800990a:	d0d8      	beq.n	80098be <_strtod_l+0x526>
 800990c:	f1b8 0f1f 	cmp.w	r8, #31
 8009910:	dd1e      	ble.n	8009950 <_strtod_l+0x5b8>
 8009912:	2500      	movs	r5, #0
 8009914:	462e      	mov	r6, r5
 8009916:	9509      	str	r5, [sp, #36]	; 0x24
 8009918:	9507      	str	r5, [sp, #28]
 800991a:	2322      	movs	r3, #34	; 0x22
 800991c:	f04f 0a00 	mov.w	sl, #0
 8009920:	f04f 0b00 	mov.w	fp, #0
 8009924:	6023      	str	r3, [r4, #0]
 8009926:	e789      	b.n	800983c <_strtod_l+0x4a4>
 8009928:	0800d6c9 	.word	0x0800d6c9
 800992c:	0800d708 	.word	0x0800d708
 8009930:	0800d6c1 	.word	0x0800d6c1
 8009934:	0800d84c 	.word	0x0800d84c
 8009938:	0800db83 	.word	0x0800db83
 800993c:	0800da48 	.word	0x0800da48
 8009940:	0800da20 	.word	0x0800da20
 8009944:	7ff00000 	.word	0x7ff00000
 8009948:	7ca00000 	.word	0x7ca00000
 800994c:	7fefffff 	.word	0x7fefffff
 8009950:	f018 0310 	ands.w	r3, r8, #16
 8009954:	bf18      	it	ne
 8009956:	236a      	movne	r3, #106	; 0x6a
 8009958:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009d10 <_strtod_l+0x978>
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	4650      	mov	r0, sl
 8009960:	4659      	mov	r1, fp
 8009962:	2300      	movs	r3, #0
 8009964:	f018 0f01 	tst.w	r8, #1
 8009968:	d004      	beq.n	8009974 <_strtod_l+0x5dc>
 800996a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800996e:	f7f6 fe63 	bl	8000638 <__aeabi_dmul>
 8009972:	2301      	movs	r3, #1
 8009974:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009978:	f109 0908 	add.w	r9, r9, #8
 800997c:	d1f2      	bne.n	8009964 <_strtod_l+0x5cc>
 800997e:	b10b      	cbz	r3, 8009984 <_strtod_l+0x5ec>
 8009980:	4682      	mov	sl, r0
 8009982:	468b      	mov	fp, r1
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	b1bb      	cbz	r3, 80099b8 <_strtod_l+0x620>
 8009988:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800998c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009990:	2b00      	cmp	r3, #0
 8009992:	4659      	mov	r1, fp
 8009994:	dd10      	ble.n	80099b8 <_strtod_l+0x620>
 8009996:	2b1f      	cmp	r3, #31
 8009998:	f340 8128 	ble.w	8009bec <_strtod_l+0x854>
 800999c:	2b34      	cmp	r3, #52	; 0x34
 800999e:	bfde      	ittt	le
 80099a0:	3b20      	suble	r3, #32
 80099a2:	f04f 32ff 	movle.w	r2, #4294967295
 80099a6:	fa02 f303 	lslle.w	r3, r2, r3
 80099aa:	f04f 0a00 	mov.w	sl, #0
 80099ae:	bfcc      	ite	gt
 80099b0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80099b4:	ea03 0b01 	andle.w	fp, r3, r1
 80099b8:	2200      	movs	r2, #0
 80099ba:	2300      	movs	r3, #0
 80099bc:	4650      	mov	r0, sl
 80099be:	4659      	mov	r1, fp
 80099c0:	f7f7 f8a2 	bl	8000b08 <__aeabi_dcmpeq>
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1a4      	bne.n	8009912 <_strtod_l+0x57a>
 80099c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099ce:	462b      	mov	r3, r5
 80099d0:	463a      	mov	r2, r7
 80099d2:	4620      	mov	r0, r4
 80099d4:	f001 ff82 	bl	800b8dc <__s2b>
 80099d8:	9009      	str	r0, [sp, #36]	; 0x24
 80099da:	2800      	cmp	r0, #0
 80099dc:	f43f af24 	beq.w	8009828 <_strtod_l+0x490>
 80099e0:	9b07      	ldr	r3, [sp, #28]
 80099e2:	1b9e      	subs	r6, r3, r6
 80099e4:	9b08      	ldr	r3, [sp, #32]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	bfb4      	ite	lt
 80099ea:	4633      	movlt	r3, r6
 80099ec:	2300      	movge	r3, #0
 80099ee:	9310      	str	r3, [sp, #64]	; 0x40
 80099f0:	9b08      	ldr	r3, [sp, #32]
 80099f2:	2500      	movs	r5, #0
 80099f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099f8:	9318      	str	r3, [sp, #96]	; 0x60
 80099fa:	462e      	mov	r6, r5
 80099fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099fe:	4620      	mov	r0, r4
 8009a00:	6859      	ldr	r1, [r3, #4]
 8009a02:	f001 febf 	bl	800b784 <_Balloc>
 8009a06:	9007      	str	r0, [sp, #28]
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	f43f af11 	beq.w	8009830 <_strtod_l+0x498>
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	691a      	ldr	r2, [r3, #16]
 8009a12:	3202      	adds	r2, #2
 8009a14:	f103 010c 	add.w	r1, r3, #12
 8009a18:	0092      	lsls	r2, r2, #2
 8009a1a:	300c      	adds	r0, #12
 8009a1c:	f001 fea4 	bl	800b768 <memcpy>
 8009a20:	ec4b ab10 	vmov	d0, sl, fp
 8009a24:	aa20      	add	r2, sp, #128	; 0x80
 8009a26:	a91f      	add	r1, sp, #124	; 0x7c
 8009a28:	4620      	mov	r0, r4
 8009a2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009a2e:	f002 fa91 	bl	800bf54 <__d2b>
 8009a32:	901e      	str	r0, [sp, #120]	; 0x78
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f43f aefb 	beq.w	8009830 <_strtod_l+0x498>
 8009a3a:	2101      	movs	r1, #1
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f001 ffe7 	bl	800ba10 <__i2b>
 8009a42:	4606      	mov	r6, r0
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f43f aef3 	beq.w	8009830 <_strtod_l+0x498>
 8009a4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a4c:	9904      	ldr	r1, [sp, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	bfab      	itete	ge
 8009a52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009a54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009a56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009a58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009a5c:	bfac      	ite	ge
 8009a5e:	eb03 0902 	addge.w	r9, r3, r2
 8009a62:	1ad7      	sublt	r7, r2, r3
 8009a64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a66:	eba3 0801 	sub.w	r8, r3, r1
 8009a6a:	4490      	add	r8, r2
 8009a6c:	4ba3      	ldr	r3, [pc, #652]	; (8009cfc <_strtod_l+0x964>)
 8009a6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a72:	4598      	cmp	r8, r3
 8009a74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009a78:	f280 80cc 	bge.w	8009c14 <_strtod_l+0x87c>
 8009a7c:	eba3 0308 	sub.w	r3, r3, r8
 8009a80:	2b1f      	cmp	r3, #31
 8009a82:	eba2 0203 	sub.w	r2, r2, r3
 8009a86:	f04f 0101 	mov.w	r1, #1
 8009a8a:	f300 80b6 	bgt.w	8009bfa <_strtod_l+0x862>
 8009a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a92:	9311      	str	r3, [sp, #68]	; 0x44
 8009a94:	2300      	movs	r3, #0
 8009a96:	930c      	str	r3, [sp, #48]	; 0x30
 8009a98:	eb09 0802 	add.w	r8, r9, r2
 8009a9c:	9b04      	ldr	r3, [sp, #16]
 8009a9e:	45c1      	cmp	r9, r8
 8009aa0:	4417      	add	r7, r2
 8009aa2:	441f      	add	r7, r3
 8009aa4:	464b      	mov	r3, r9
 8009aa6:	bfa8      	it	ge
 8009aa8:	4643      	movge	r3, r8
 8009aaa:	42bb      	cmp	r3, r7
 8009aac:	bfa8      	it	ge
 8009aae:	463b      	movge	r3, r7
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	bfc2      	ittt	gt
 8009ab4:	eba8 0803 	subgt.w	r8, r8, r3
 8009ab8:	1aff      	subgt	r7, r7, r3
 8009aba:	eba9 0903 	subgt.w	r9, r9, r3
 8009abe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	dd17      	ble.n	8009af4 <_strtod_l+0x75c>
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f002 f85d 	bl	800bb88 <__pow5mult>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	f43f aead 	beq.w	8009830 <_strtod_l+0x498>
 8009ad6:	4601      	mov	r1, r0
 8009ad8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009ada:	4620      	mov	r0, r4
 8009adc:	f001 ffae 	bl	800ba3c <__multiply>
 8009ae0:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ae2:	2800      	cmp	r0, #0
 8009ae4:	f43f aea4 	beq.w	8009830 <_strtod_l+0x498>
 8009ae8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009aea:	4620      	mov	r0, r4
 8009aec:	f001 fe8a 	bl	800b804 <_Bfree>
 8009af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009af2:	931e      	str	r3, [sp, #120]	; 0x78
 8009af4:	f1b8 0f00 	cmp.w	r8, #0
 8009af8:	f300 8091 	bgt.w	8009c1e <_strtod_l+0x886>
 8009afc:	9b08      	ldr	r3, [sp, #32]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	dd08      	ble.n	8009b14 <_strtod_l+0x77c>
 8009b02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b04:	9907      	ldr	r1, [sp, #28]
 8009b06:	4620      	mov	r0, r4
 8009b08:	f002 f83e 	bl	800bb88 <__pow5mult>
 8009b0c:	9007      	str	r0, [sp, #28]
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f43f ae8e 	beq.w	8009830 <_strtod_l+0x498>
 8009b14:	2f00      	cmp	r7, #0
 8009b16:	dd08      	ble.n	8009b2a <_strtod_l+0x792>
 8009b18:	9907      	ldr	r1, [sp, #28]
 8009b1a:	463a      	mov	r2, r7
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f002 f88d 	bl	800bc3c <__lshift>
 8009b22:	9007      	str	r0, [sp, #28]
 8009b24:	2800      	cmp	r0, #0
 8009b26:	f43f ae83 	beq.w	8009830 <_strtod_l+0x498>
 8009b2a:	f1b9 0f00 	cmp.w	r9, #0
 8009b2e:	dd08      	ble.n	8009b42 <_strtod_l+0x7aa>
 8009b30:	4631      	mov	r1, r6
 8009b32:	464a      	mov	r2, r9
 8009b34:	4620      	mov	r0, r4
 8009b36:	f002 f881 	bl	800bc3c <__lshift>
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	f43f ae77 	beq.w	8009830 <_strtod_l+0x498>
 8009b42:	9a07      	ldr	r2, [sp, #28]
 8009b44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b46:	4620      	mov	r0, r4
 8009b48:	f002 f900 	bl	800bd4c <__mdiff>
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	f43f ae6e 	beq.w	8009830 <_strtod_l+0x498>
 8009b54:	68c3      	ldr	r3, [r0, #12]
 8009b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b58:	2300      	movs	r3, #0
 8009b5a:	60c3      	str	r3, [r0, #12]
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	f002 f8d9 	bl	800bd14 <__mcmp>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	da65      	bge.n	8009c32 <_strtod_l+0x89a>
 8009b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b68:	ea53 030a 	orrs.w	r3, r3, sl
 8009b6c:	f040 8087 	bne.w	8009c7e <_strtod_l+0x8e6>
 8009b70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f040 8082 	bne.w	8009c7e <_strtod_l+0x8e6>
 8009b7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b7e:	0d1b      	lsrs	r3, r3, #20
 8009b80:	051b      	lsls	r3, r3, #20
 8009b82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009b86:	d97a      	bls.n	8009c7e <_strtod_l+0x8e6>
 8009b88:	696b      	ldr	r3, [r5, #20]
 8009b8a:	b913      	cbnz	r3, 8009b92 <_strtod_l+0x7fa>
 8009b8c:	692b      	ldr	r3, [r5, #16]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	dd75      	ble.n	8009c7e <_strtod_l+0x8e6>
 8009b92:	4629      	mov	r1, r5
 8009b94:	2201      	movs	r2, #1
 8009b96:	4620      	mov	r0, r4
 8009b98:	f002 f850 	bl	800bc3c <__lshift>
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	f002 f8b8 	bl	800bd14 <__mcmp>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	dd6a      	ble.n	8009c7e <_strtod_l+0x8e6>
 8009ba8:	9904      	ldr	r1, [sp, #16]
 8009baa:	4a55      	ldr	r2, [pc, #340]	; (8009d00 <_strtod_l+0x968>)
 8009bac:	465b      	mov	r3, fp
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	f000 8085 	beq.w	8009cbe <_strtod_l+0x926>
 8009bb4:	ea02 010b 	and.w	r1, r2, fp
 8009bb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009bbc:	dc7f      	bgt.n	8009cbe <_strtod_l+0x926>
 8009bbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009bc2:	f77f aeaa 	ble.w	800991a <_strtod_l+0x582>
 8009bc6:	4a4f      	ldr	r2, [pc, #316]	; (8009d04 <_strtod_l+0x96c>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009bce:	4650      	mov	r0, sl
 8009bd0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	f7f6 fd2f 	bl	8000638 <__aeabi_dmul>
 8009bda:	460b      	mov	r3, r1
 8009bdc:	4303      	orrs	r3, r0
 8009bde:	bf08      	it	eq
 8009be0:	2322      	moveq	r3, #34	; 0x22
 8009be2:	4682      	mov	sl, r0
 8009be4:	468b      	mov	fp, r1
 8009be6:	bf08      	it	eq
 8009be8:	6023      	streq	r3, [r4, #0]
 8009bea:	e62b      	b.n	8009844 <_strtod_l+0x4ac>
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf4:	ea03 0a0a 	and.w	sl, r3, sl
 8009bf8:	e6de      	b.n	80099b8 <_strtod_l+0x620>
 8009bfa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009bfe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009c02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009c06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009c0a:	fa01 f308 	lsl.w	r3, r1, r8
 8009c0e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c10:	9111      	str	r1, [sp, #68]	; 0x44
 8009c12:	e741      	b.n	8009a98 <_strtod_l+0x700>
 8009c14:	2300      	movs	r3, #0
 8009c16:	930c      	str	r3, [sp, #48]	; 0x30
 8009c18:	2301      	movs	r3, #1
 8009c1a:	9311      	str	r3, [sp, #68]	; 0x44
 8009c1c:	e73c      	b.n	8009a98 <_strtod_l+0x700>
 8009c1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009c20:	4642      	mov	r2, r8
 8009c22:	4620      	mov	r0, r4
 8009c24:	f002 f80a 	bl	800bc3c <__lshift>
 8009c28:	901e      	str	r0, [sp, #120]	; 0x78
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f47f af66 	bne.w	8009afc <_strtod_l+0x764>
 8009c30:	e5fe      	b.n	8009830 <_strtod_l+0x498>
 8009c32:	465f      	mov	r7, fp
 8009c34:	d16e      	bne.n	8009d14 <_strtod_l+0x97c>
 8009c36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c3c:	b342      	cbz	r2, 8009c90 <_strtod_l+0x8f8>
 8009c3e:	4a32      	ldr	r2, [pc, #200]	; (8009d08 <_strtod_l+0x970>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d128      	bne.n	8009c96 <_strtod_l+0x8fe>
 8009c44:	9b04      	ldr	r3, [sp, #16]
 8009c46:	4650      	mov	r0, sl
 8009c48:	b1eb      	cbz	r3, 8009c86 <_strtod_l+0x8ee>
 8009c4a:	4a2d      	ldr	r2, [pc, #180]	; (8009d00 <_strtod_l+0x968>)
 8009c4c:	403a      	ands	r2, r7
 8009c4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009c52:	f04f 31ff 	mov.w	r1, #4294967295
 8009c56:	d819      	bhi.n	8009c8c <_strtod_l+0x8f4>
 8009c58:	0d12      	lsrs	r2, r2, #20
 8009c5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c62:	4298      	cmp	r0, r3
 8009c64:	d117      	bne.n	8009c96 <_strtod_l+0x8fe>
 8009c66:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <_strtod_l+0x974>)
 8009c68:	429f      	cmp	r7, r3
 8009c6a:	d102      	bne.n	8009c72 <_strtod_l+0x8da>
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f43f addf 	beq.w	8009830 <_strtod_l+0x498>
 8009c72:	4b23      	ldr	r3, [pc, #140]	; (8009d00 <_strtod_l+0x968>)
 8009c74:	403b      	ands	r3, r7
 8009c76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c7a:	f04f 0a00 	mov.w	sl, #0
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1a0      	bne.n	8009bc6 <_strtod_l+0x82e>
 8009c84:	e5de      	b.n	8009844 <_strtod_l+0x4ac>
 8009c86:	f04f 33ff 	mov.w	r3, #4294967295
 8009c8a:	e7ea      	b.n	8009c62 <_strtod_l+0x8ca>
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	e7e8      	b.n	8009c62 <_strtod_l+0x8ca>
 8009c90:	ea53 030a 	orrs.w	r3, r3, sl
 8009c94:	d088      	beq.n	8009ba8 <_strtod_l+0x810>
 8009c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c98:	b1db      	cbz	r3, 8009cd2 <_strtod_l+0x93a>
 8009c9a:	423b      	tst	r3, r7
 8009c9c:	d0ef      	beq.n	8009c7e <_strtod_l+0x8e6>
 8009c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ca0:	9a04      	ldr	r2, [sp, #16]
 8009ca2:	4650      	mov	r0, sl
 8009ca4:	4659      	mov	r1, fp
 8009ca6:	b1c3      	cbz	r3, 8009cda <_strtod_l+0x942>
 8009ca8:	f7ff fb59 	bl	800935e <sulp>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009cb4:	f7f6 fb0a 	bl	80002cc <__adddf3>
 8009cb8:	4682      	mov	sl, r0
 8009cba:	468b      	mov	fp, r1
 8009cbc:	e7df      	b.n	8009c7e <_strtod_l+0x8e6>
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009cc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ccc:	f04f 3aff 	mov.w	sl, #4294967295
 8009cd0:	e7d5      	b.n	8009c7e <_strtod_l+0x8e6>
 8009cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cd4:	ea13 0f0a 	tst.w	r3, sl
 8009cd8:	e7e0      	b.n	8009c9c <_strtod_l+0x904>
 8009cda:	f7ff fb40 	bl	800935e <sulp>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ce6:	f7f6 faef 	bl	80002c8 <__aeabi_dsub>
 8009cea:	2200      	movs	r2, #0
 8009cec:	2300      	movs	r3, #0
 8009cee:	4682      	mov	sl, r0
 8009cf0:	468b      	mov	fp, r1
 8009cf2:	f7f6 ff09 	bl	8000b08 <__aeabi_dcmpeq>
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d0c1      	beq.n	8009c7e <_strtod_l+0x8e6>
 8009cfa:	e60e      	b.n	800991a <_strtod_l+0x582>
 8009cfc:	fffffc02 	.word	0xfffffc02
 8009d00:	7ff00000 	.word	0x7ff00000
 8009d04:	39500000 	.word	0x39500000
 8009d08:	000fffff 	.word	0x000fffff
 8009d0c:	7fefffff 	.word	0x7fefffff
 8009d10:	0800d720 	.word	0x0800d720
 8009d14:	4631      	mov	r1, r6
 8009d16:	4628      	mov	r0, r5
 8009d18:	f002 f978 	bl	800c00c <__ratio>
 8009d1c:	ec59 8b10 	vmov	r8, r9, d0
 8009d20:	ee10 0a10 	vmov	r0, s0
 8009d24:	2200      	movs	r2, #0
 8009d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	f7f6 ff00 	bl	8000b30 <__aeabi_dcmple>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d07c      	beq.n	8009e2e <_strtod_l+0xa96>
 8009d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d04c      	beq.n	8009dd4 <_strtod_l+0xa3c>
 8009d3a:	4b95      	ldr	r3, [pc, #596]	; (8009f90 <_strtod_l+0xbf8>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009f90 <_strtod_l+0xbf8>
 8009d46:	f04f 0800 	mov.w	r8, #0
 8009d4a:	4b92      	ldr	r3, [pc, #584]	; (8009f94 <_strtod_l+0xbfc>)
 8009d4c:	403b      	ands	r3, r7
 8009d4e:	9311      	str	r3, [sp, #68]	; 0x44
 8009d50:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d52:	4b91      	ldr	r3, [pc, #580]	; (8009f98 <_strtod_l+0xc00>)
 8009d54:	429a      	cmp	r2, r3
 8009d56:	f040 80b2 	bne.w	8009ebe <_strtod_l+0xb26>
 8009d5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d62:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009d66:	ec4b ab10 	vmov	d0, sl, fp
 8009d6a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009d6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d72:	f002 f873 	bl	800be5c <__ulp>
 8009d76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d7a:	ec53 2b10 	vmov	r2, r3, d0
 8009d7e:	f7f6 fc5b 	bl	8000638 <__aeabi_dmul>
 8009d82:	4652      	mov	r2, sl
 8009d84:	465b      	mov	r3, fp
 8009d86:	f7f6 faa1 	bl	80002cc <__adddf3>
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4981      	ldr	r1, [pc, #516]	; (8009f94 <_strtod_l+0xbfc>)
 8009d8e:	4a83      	ldr	r2, [pc, #524]	; (8009f9c <_strtod_l+0xc04>)
 8009d90:	4019      	ands	r1, r3
 8009d92:	4291      	cmp	r1, r2
 8009d94:	4682      	mov	sl, r0
 8009d96:	d95e      	bls.n	8009e56 <_strtod_l+0xabe>
 8009d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d9a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d103      	bne.n	8009daa <_strtod_l+0xa12>
 8009da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009da4:	3301      	adds	r3, #1
 8009da6:	f43f ad43 	beq.w	8009830 <_strtod_l+0x498>
 8009daa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009fa8 <_strtod_l+0xc10>
 8009dae:	f04f 3aff 	mov.w	sl, #4294967295
 8009db2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009db4:	4620      	mov	r0, r4
 8009db6:	f001 fd25 	bl	800b804 <_Bfree>
 8009dba:	9907      	ldr	r1, [sp, #28]
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f001 fd21 	bl	800b804 <_Bfree>
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f001 fd1d 	bl	800b804 <_Bfree>
 8009dca:	4629      	mov	r1, r5
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f001 fd19 	bl	800b804 <_Bfree>
 8009dd2:	e613      	b.n	80099fc <_strtod_l+0x664>
 8009dd4:	f1ba 0f00 	cmp.w	sl, #0
 8009dd8:	d11b      	bne.n	8009e12 <_strtod_l+0xa7a>
 8009dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dde:	b9f3      	cbnz	r3, 8009e1e <_strtod_l+0xa86>
 8009de0:	4b6b      	ldr	r3, [pc, #428]	; (8009f90 <_strtod_l+0xbf8>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	4640      	mov	r0, r8
 8009de6:	4649      	mov	r1, r9
 8009de8:	f7f6 fe98 	bl	8000b1c <__aeabi_dcmplt>
 8009dec:	b9d0      	cbnz	r0, 8009e24 <_strtod_l+0xa8c>
 8009dee:	4640      	mov	r0, r8
 8009df0:	4649      	mov	r1, r9
 8009df2:	4b6b      	ldr	r3, [pc, #428]	; (8009fa0 <_strtod_l+0xc08>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	f7f6 fc1f 	bl	8000638 <__aeabi_dmul>
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4689      	mov	r9, r1
 8009dfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e02:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009e06:	931b      	str	r3, [sp, #108]	; 0x6c
 8009e08:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009e0c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009e10:	e79b      	b.n	8009d4a <_strtod_l+0x9b2>
 8009e12:	f1ba 0f01 	cmp.w	sl, #1
 8009e16:	d102      	bne.n	8009e1e <_strtod_l+0xa86>
 8009e18:	2f00      	cmp	r7, #0
 8009e1a:	f43f ad7e 	beq.w	800991a <_strtod_l+0x582>
 8009e1e:	4b61      	ldr	r3, [pc, #388]	; (8009fa4 <_strtod_l+0xc0c>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	e78c      	b.n	8009d3e <_strtod_l+0x9a6>
 8009e24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009fa0 <_strtod_l+0xc08>
 8009e28:	f04f 0800 	mov.w	r8, #0
 8009e2c:	e7e7      	b.n	8009dfe <_strtod_l+0xa66>
 8009e2e:	4b5c      	ldr	r3, [pc, #368]	; (8009fa0 <_strtod_l+0xc08>)
 8009e30:	4640      	mov	r0, r8
 8009e32:	4649      	mov	r1, r9
 8009e34:	2200      	movs	r2, #0
 8009e36:	f7f6 fbff 	bl	8000638 <__aeabi_dmul>
 8009e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e3c:	4680      	mov	r8, r0
 8009e3e:	4689      	mov	r9, r1
 8009e40:	b933      	cbnz	r3, 8009e50 <_strtod_l+0xab8>
 8009e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e46:	9012      	str	r0, [sp, #72]	; 0x48
 8009e48:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009e4e:	e7dd      	b.n	8009e0c <_strtod_l+0xa74>
 8009e50:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009e54:	e7f9      	b.n	8009e4a <_strtod_l+0xab2>
 8009e56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1a8      	bne.n	8009db2 <_strtod_l+0xa1a>
 8009e60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e66:	0d1b      	lsrs	r3, r3, #20
 8009e68:	051b      	lsls	r3, r3, #20
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d1a1      	bne.n	8009db2 <_strtod_l+0xa1a>
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 ff41 	bl	8000cf8 <__aeabi_d2lz>
 8009e76:	f7f6 fbb1 	bl	80005dc <__aeabi_l2d>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4640      	mov	r0, r8
 8009e80:	4649      	mov	r1, r9
 8009e82:	f7f6 fa21 	bl	80002c8 <__aeabi_dsub>
 8009e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e8c:	ea43 030a 	orr.w	r3, r3, sl
 8009e90:	4313      	orrs	r3, r2
 8009e92:	4680      	mov	r8, r0
 8009e94:	4689      	mov	r9, r1
 8009e96:	d053      	beq.n	8009f40 <_strtod_l+0xba8>
 8009e98:	a335      	add	r3, pc, #212	; (adr r3, 8009f70 <_strtod_l+0xbd8>)
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f7f6 fe3d 	bl	8000b1c <__aeabi_dcmplt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f47f acce 	bne.w	8009844 <_strtod_l+0x4ac>
 8009ea8:	a333      	add	r3, pc, #204	; (adr r3, 8009f78 <_strtod_l+0xbe0>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	4640      	mov	r0, r8
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	f7f6 fe51 	bl	8000b58 <__aeabi_dcmpgt>
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f af7b 	beq.w	8009db2 <_strtod_l+0xa1a>
 8009ebc:	e4c2      	b.n	8009844 <_strtod_l+0x4ac>
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	b333      	cbz	r3, 8009f10 <_strtod_l+0xb78>
 8009ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ec4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ec8:	d822      	bhi.n	8009f10 <_strtod_l+0xb78>
 8009eca:	a32d      	add	r3, pc, #180	; (adr r3, 8009f80 <_strtod_l+0xbe8>)
 8009ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed0:	4640      	mov	r0, r8
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	f7f6 fe2c 	bl	8000b30 <__aeabi_dcmple>
 8009ed8:	b1a0      	cbz	r0, 8009f04 <_strtod_l+0xb6c>
 8009eda:	4649      	mov	r1, r9
 8009edc:	4640      	mov	r0, r8
 8009ede:	f7f6 fe83 	bl	8000be8 <__aeabi_d2uiz>
 8009ee2:	2801      	cmp	r0, #1
 8009ee4:	bf38      	it	cc
 8009ee6:	2001      	movcc	r0, #1
 8009ee8:	f7f6 fb2c 	bl	8000544 <__aeabi_ui2d>
 8009eec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009eee:	4680      	mov	r8, r0
 8009ef0:	4689      	mov	r9, r1
 8009ef2:	bb13      	cbnz	r3, 8009f3a <_strtod_l+0xba2>
 8009ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ef8:	9014      	str	r0, [sp, #80]	; 0x50
 8009efa:	9315      	str	r3, [sp, #84]	; 0x54
 8009efc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009f00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f06:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009f08:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f0c:	1a9b      	subs	r3, r3, r2
 8009f0e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f14:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009f18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009f1c:	f001 ff9e 	bl	800be5c <__ulp>
 8009f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009f24:	ec53 2b10 	vmov	r2, r3, d0
 8009f28:	f7f6 fb86 	bl	8000638 <__aeabi_dmul>
 8009f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009f30:	f7f6 f9cc 	bl	80002cc <__adddf3>
 8009f34:	4682      	mov	sl, r0
 8009f36:	468b      	mov	fp, r1
 8009f38:	e78f      	b.n	8009e5a <_strtod_l+0xac2>
 8009f3a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009f3e:	e7dd      	b.n	8009efc <_strtod_l+0xb64>
 8009f40:	a311      	add	r3, pc, #68	; (adr r3, 8009f88 <_strtod_l+0xbf0>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7f6 fde9 	bl	8000b1c <__aeabi_dcmplt>
 8009f4a:	e7b4      	b.n	8009eb6 <_strtod_l+0xb1e>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	930e      	str	r3, [sp, #56]	; 0x38
 8009f50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	f7ff ba65 	b.w	8009424 <_strtod_l+0x8c>
 8009f5a:	2b65      	cmp	r3, #101	; 0x65
 8009f5c:	f43f ab5d 	beq.w	800961a <_strtod_l+0x282>
 8009f60:	2b45      	cmp	r3, #69	; 0x45
 8009f62:	f43f ab5a 	beq.w	800961a <_strtod_l+0x282>
 8009f66:	2201      	movs	r2, #1
 8009f68:	f7ff bb92 	b.w	8009690 <_strtod_l+0x2f8>
 8009f6c:	f3af 8000 	nop.w
 8009f70:	94a03595 	.word	0x94a03595
 8009f74:	3fdfffff 	.word	0x3fdfffff
 8009f78:	35afe535 	.word	0x35afe535
 8009f7c:	3fe00000 	.word	0x3fe00000
 8009f80:	ffc00000 	.word	0xffc00000
 8009f84:	41dfffff 	.word	0x41dfffff
 8009f88:	94a03595 	.word	0x94a03595
 8009f8c:	3fcfffff 	.word	0x3fcfffff
 8009f90:	3ff00000 	.word	0x3ff00000
 8009f94:	7ff00000 	.word	0x7ff00000
 8009f98:	7fe00000 	.word	0x7fe00000
 8009f9c:	7c9fffff 	.word	0x7c9fffff
 8009fa0:	3fe00000 	.word	0x3fe00000
 8009fa4:	bff00000 	.word	0xbff00000
 8009fa8:	7fefffff 	.word	0x7fefffff

08009fac <_strtod_r>:
 8009fac:	4b01      	ldr	r3, [pc, #4]	; (8009fb4 <_strtod_r+0x8>)
 8009fae:	f7ff b9f3 	b.w	8009398 <_strtod_l>
 8009fb2:	bf00      	nop
 8009fb4:	200000d4 	.word	0x200000d4

08009fb8 <_strtol_l.isra.0>:
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fbe:	d001      	beq.n	8009fc4 <_strtol_l.isra.0+0xc>
 8009fc0:	2b24      	cmp	r3, #36	; 0x24
 8009fc2:	d906      	bls.n	8009fd2 <_strtol_l.isra.0+0x1a>
 8009fc4:	f7fe fa70 	bl	80084a8 <__errno>
 8009fc8:	2316      	movs	r3, #22
 8009fca:	6003      	str	r3, [r0, #0]
 8009fcc:	2000      	movs	r0, #0
 8009fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fd2:	4f3a      	ldr	r7, [pc, #232]	; (800a0bc <_strtol_l.isra.0+0x104>)
 8009fd4:	468e      	mov	lr, r1
 8009fd6:	4676      	mov	r6, lr
 8009fd8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009fdc:	5de5      	ldrb	r5, [r4, r7]
 8009fde:	f015 0508 	ands.w	r5, r5, #8
 8009fe2:	d1f8      	bne.n	8009fd6 <_strtol_l.isra.0+0x1e>
 8009fe4:	2c2d      	cmp	r4, #45	; 0x2d
 8009fe6:	d134      	bne.n	800a052 <_strtol_l.isra.0+0x9a>
 8009fe8:	f89e 4000 	ldrb.w	r4, [lr]
 8009fec:	f04f 0801 	mov.w	r8, #1
 8009ff0:	f106 0e02 	add.w	lr, r6, #2
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05c      	beq.n	800a0b2 <_strtol_l.isra.0+0xfa>
 8009ff8:	2b10      	cmp	r3, #16
 8009ffa:	d10c      	bne.n	800a016 <_strtol_l.isra.0+0x5e>
 8009ffc:	2c30      	cmp	r4, #48	; 0x30
 8009ffe:	d10a      	bne.n	800a016 <_strtol_l.isra.0+0x5e>
 800a000:	f89e 4000 	ldrb.w	r4, [lr]
 800a004:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a008:	2c58      	cmp	r4, #88	; 0x58
 800a00a:	d14d      	bne.n	800a0a8 <_strtol_l.isra.0+0xf0>
 800a00c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a010:	2310      	movs	r3, #16
 800a012:	f10e 0e02 	add.w	lr, lr, #2
 800a016:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a01a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a01e:	2600      	movs	r6, #0
 800a020:	fbbc f9f3 	udiv	r9, ip, r3
 800a024:	4635      	mov	r5, r6
 800a026:	fb03 ca19 	mls	sl, r3, r9, ip
 800a02a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a02e:	2f09      	cmp	r7, #9
 800a030:	d818      	bhi.n	800a064 <_strtol_l.isra.0+0xac>
 800a032:	463c      	mov	r4, r7
 800a034:	42a3      	cmp	r3, r4
 800a036:	dd24      	ble.n	800a082 <_strtol_l.isra.0+0xca>
 800a038:	2e00      	cmp	r6, #0
 800a03a:	db1f      	blt.n	800a07c <_strtol_l.isra.0+0xc4>
 800a03c:	45a9      	cmp	r9, r5
 800a03e:	d31d      	bcc.n	800a07c <_strtol_l.isra.0+0xc4>
 800a040:	d101      	bne.n	800a046 <_strtol_l.isra.0+0x8e>
 800a042:	45a2      	cmp	sl, r4
 800a044:	db1a      	blt.n	800a07c <_strtol_l.isra.0+0xc4>
 800a046:	fb05 4503 	mla	r5, r5, r3, r4
 800a04a:	2601      	movs	r6, #1
 800a04c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a050:	e7eb      	b.n	800a02a <_strtol_l.isra.0+0x72>
 800a052:	2c2b      	cmp	r4, #43	; 0x2b
 800a054:	bf08      	it	eq
 800a056:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a05a:	46a8      	mov	r8, r5
 800a05c:	bf08      	it	eq
 800a05e:	f106 0e02 	addeq.w	lr, r6, #2
 800a062:	e7c7      	b.n	8009ff4 <_strtol_l.isra.0+0x3c>
 800a064:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a068:	2f19      	cmp	r7, #25
 800a06a:	d801      	bhi.n	800a070 <_strtol_l.isra.0+0xb8>
 800a06c:	3c37      	subs	r4, #55	; 0x37
 800a06e:	e7e1      	b.n	800a034 <_strtol_l.isra.0+0x7c>
 800a070:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a074:	2f19      	cmp	r7, #25
 800a076:	d804      	bhi.n	800a082 <_strtol_l.isra.0+0xca>
 800a078:	3c57      	subs	r4, #87	; 0x57
 800a07a:	e7db      	b.n	800a034 <_strtol_l.isra.0+0x7c>
 800a07c:	f04f 36ff 	mov.w	r6, #4294967295
 800a080:	e7e4      	b.n	800a04c <_strtol_l.isra.0+0x94>
 800a082:	2e00      	cmp	r6, #0
 800a084:	da05      	bge.n	800a092 <_strtol_l.isra.0+0xda>
 800a086:	2322      	movs	r3, #34	; 0x22
 800a088:	6003      	str	r3, [r0, #0]
 800a08a:	4665      	mov	r5, ip
 800a08c:	b942      	cbnz	r2, 800a0a0 <_strtol_l.isra.0+0xe8>
 800a08e:	4628      	mov	r0, r5
 800a090:	e79d      	b.n	8009fce <_strtol_l.isra.0+0x16>
 800a092:	f1b8 0f00 	cmp.w	r8, #0
 800a096:	d000      	beq.n	800a09a <_strtol_l.isra.0+0xe2>
 800a098:	426d      	negs	r5, r5
 800a09a:	2a00      	cmp	r2, #0
 800a09c:	d0f7      	beq.n	800a08e <_strtol_l.isra.0+0xd6>
 800a09e:	b10e      	cbz	r6, 800a0a4 <_strtol_l.isra.0+0xec>
 800a0a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	e7f2      	b.n	800a08e <_strtol_l.isra.0+0xd6>
 800a0a8:	2430      	movs	r4, #48	; 0x30
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1b3      	bne.n	800a016 <_strtol_l.isra.0+0x5e>
 800a0ae:	2308      	movs	r3, #8
 800a0b0:	e7b1      	b.n	800a016 <_strtol_l.isra.0+0x5e>
 800a0b2:	2c30      	cmp	r4, #48	; 0x30
 800a0b4:	d0a4      	beq.n	800a000 <_strtol_l.isra.0+0x48>
 800a0b6:	230a      	movs	r3, #10
 800a0b8:	e7ad      	b.n	800a016 <_strtol_l.isra.0+0x5e>
 800a0ba:	bf00      	nop
 800a0bc:	0800d749 	.word	0x0800d749

0800a0c0 <_strtol_r>:
 800a0c0:	f7ff bf7a 	b.w	8009fb8 <_strtol_l.isra.0>

0800a0c4 <_vsiprintf_r>:
 800a0c4:	b500      	push	{lr}
 800a0c6:	b09b      	sub	sp, #108	; 0x6c
 800a0c8:	9100      	str	r1, [sp, #0]
 800a0ca:	9104      	str	r1, [sp, #16]
 800a0cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0d0:	9105      	str	r1, [sp, #20]
 800a0d2:	9102      	str	r1, [sp, #8]
 800a0d4:	4905      	ldr	r1, [pc, #20]	; (800a0ec <_vsiprintf_r+0x28>)
 800a0d6:	9103      	str	r1, [sp, #12]
 800a0d8:	4669      	mov	r1, sp
 800a0da:	f002 f923 	bl	800c324 <_svfiprintf_r>
 800a0de:	9b00      	ldr	r3, [sp, #0]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	701a      	strb	r2, [r3, #0]
 800a0e4:	b01b      	add	sp, #108	; 0x6c
 800a0e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0ea:	bf00      	nop
 800a0ec:	ffff0208 	.word	0xffff0208

0800a0f0 <vsiprintf>:
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	460a      	mov	r2, r1
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	4802      	ldr	r0, [pc, #8]	; (800a100 <vsiprintf+0x10>)
 800a0f8:	6800      	ldr	r0, [r0, #0]
 800a0fa:	f7ff bfe3 	b.w	800a0c4 <_vsiprintf_r>
 800a0fe:	bf00      	nop
 800a100:	2000006c 	.word	0x2000006c

0800a104 <_write_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d07      	ldr	r5, [pc, #28]	; (800a124 <_write_r+0x20>)
 800a108:	4604      	mov	r4, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	2200      	movs	r2, #0
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	f7f8 f8df 	bl	80022d6 <_write>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_write_r+0x1e>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_write_r+0x1e>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20000950 	.word	0x20000950

0800a128 <_close_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4d06      	ldr	r5, [pc, #24]	; (800a144 <_close_r+0x1c>)
 800a12c:	2300      	movs	r3, #0
 800a12e:	4604      	mov	r4, r0
 800a130:	4608      	mov	r0, r1
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	f7f8 f8eb 	bl	800230e <_close>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_close_r+0x1a>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_close_r+0x1a>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	20000950 	.word	0x20000950

0800a148 <quorem>:
 800a148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	6903      	ldr	r3, [r0, #16]
 800a14e:	690c      	ldr	r4, [r1, #16]
 800a150:	42a3      	cmp	r3, r4
 800a152:	4607      	mov	r7, r0
 800a154:	f2c0 8081 	blt.w	800a25a <quorem+0x112>
 800a158:	3c01      	subs	r4, #1
 800a15a:	f101 0814 	add.w	r8, r1, #20
 800a15e:	f100 0514 	add.w	r5, r0, #20
 800a162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a170:	3301      	adds	r3, #1
 800a172:	429a      	cmp	r2, r3
 800a174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a17c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a180:	d331      	bcc.n	800a1e6 <quorem+0x9e>
 800a182:	f04f 0e00 	mov.w	lr, #0
 800a186:	4640      	mov	r0, r8
 800a188:	46ac      	mov	ip, r5
 800a18a:	46f2      	mov	sl, lr
 800a18c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a190:	b293      	uxth	r3, r2
 800a192:	fb06 e303 	mla	r3, r6, r3, lr
 800a196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	ebaa 0303 	sub.w	r3, sl, r3
 800a1a0:	0c12      	lsrs	r2, r2, #16
 800a1a2:	f8dc a000 	ldr.w	sl, [ip]
 800a1a6:	fb06 e202 	mla	r2, r6, r2, lr
 800a1aa:	fa13 f38a 	uxtah	r3, r3, sl
 800a1ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1b2:	fa1f fa82 	uxth.w	sl, r2
 800a1b6:	f8dc 2000 	ldr.w	r2, [ip]
 800a1ba:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1c8:	4581      	cmp	r9, r0
 800a1ca:	f84c 3b04 	str.w	r3, [ip], #4
 800a1ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1d2:	d2db      	bcs.n	800a18c <quorem+0x44>
 800a1d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1d8:	b92b      	cbnz	r3, 800a1e6 <quorem+0x9e>
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	3b04      	subs	r3, #4
 800a1de:	429d      	cmp	r5, r3
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	d32e      	bcc.n	800a242 <quorem+0xfa>
 800a1e4:	613c      	str	r4, [r7, #16]
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	f001 fd94 	bl	800bd14 <__mcmp>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	db24      	blt.n	800a23a <quorem+0xf2>
 800a1f0:	3601      	adds	r6, #1
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f04f 0c00 	mov.w	ip, #0
 800a1f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1fc:	f8d0 e000 	ldr.w	lr, [r0]
 800a200:	b293      	uxth	r3, r2
 800a202:	ebac 0303 	sub.w	r3, ip, r3
 800a206:	0c12      	lsrs	r2, r2, #16
 800a208:	fa13 f38e 	uxtah	r3, r3, lr
 800a20c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a214:	b29b      	uxth	r3, r3
 800a216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a21a:	45c1      	cmp	r9, r8
 800a21c:	f840 3b04 	str.w	r3, [r0], #4
 800a220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a224:	d2e8      	bcs.n	800a1f8 <quorem+0xb0>
 800a226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a22e:	b922      	cbnz	r2, 800a23a <quorem+0xf2>
 800a230:	3b04      	subs	r3, #4
 800a232:	429d      	cmp	r5, r3
 800a234:	461a      	mov	r2, r3
 800a236:	d30a      	bcc.n	800a24e <quorem+0x106>
 800a238:	613c      	str	r4, [r7, #16]
 800a23a:	4630      	mov	r0, r6
 800a23c:	b003      	add	sp, #12
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	6812      	ldr	r2, [r2, #0]
 800a244:	3b04      	subs	r3, #4
 800a246:	2a00      	cmp	r2, #0
 800a248:	d1cc      	bne.n	800a1e4 <quorem+0x9c>
 800a24a:	3c01      	subs	r4, #1
 800a24c:	e7c7      	b.n	800a1de <quorem+0x96>
 800a24e:	6812      	ldr	r2, [r2, #0]
 800a250:	3b04      	subs	r3, #4
 800a252:	2a00      	cmp	r2, #0
 800a254:	d1f0      	bne.n	800a238 <quorem+0xf0>
 800a256:	3c01      	subs	r4, #1
 800a258:	e7eb      	b.n	800a232 <quorem+0xea>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e7ee      	b.n	800a23c <quorem+0xf4>
	...

0800a260 <_dtoa_r>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	ed2d 8b02 	vpush	{d8}
 800a268:	ec57 6b10 	vmov	r6, r7, d0
 800a26c:	b095      	sub	sp, #84	; 0x54
 800a26e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a274:	9105      	str	r1, [sp, #20]
 800a276:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a27a:	4604      	mov	r4, r0
 800a27c:	9209      	str	r2, [sp, #36]	; 0x24
 800a27e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a280:	b975      	cbnz	r5, 800a2a0 <_dtoa_r+0x40>
 800a282:	2010      	movs	r0, #16
 800a284:	f001 fa56 	bl	800b734 <malloc>
 800a288:	4602      	mov	r2, r0
 800a28a:	6260      	str	r0, [r4, #36]	; 0x24
 800a28c:	b920      	cbnz	r0, 800a298 <_dtoa_r+0x38>
 800a28e:	4bb2      	ldr	r3, [pc, #712]	; (800a558 <_dtoa_r+0x2f8>)
 800a290:	21ea      	movs	r1, #234	; 0xea
 800a292:	48b2      	ldr	r0, [pc, #712]	; (800a55c <_dtoa_r+0x2fc>)
 800a294:	f002 ffba 	bl	800d20c <__assert_func>
 800a298:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a29c:	6005      	str	r5, [r0, #0]
 800a29e:	60c5      	str	r5, [r0, #12]
 800a2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2a2:	6819      	ldr	r1, [r3, #0]
 800a2a4:	b151      	cbz	r1, 800a2bc <_dtoa_r+0x5c>
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	604a      	str	r2, [r1, #4]
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4093      	lsls	r3, r2
 800a2ae:	608b      	str	r3, [r1, #8]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f001 faa7 	bl	800b804 <_Bfree>
 800a2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
 800a2bc:	1e3b      	subs	r3, r7, #0
 800a2be:	bfb9      	ittee	lt
 800a2c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2c4:	9303      	strlt	r3, [sp, #12]
 800a2c6:	2300      	movge	r3, #0
 800a2c8:	f8c8 3000 	strge.w	r3, [r8]
 800a2cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a2d0:	4ba3      	ldr	r3, [pc, #652]	; (800a560 <_dtoa_r+0x300>)
 800a2d2:	bfbc      	itt	lt
 800a2d4:	2201      	movlt	r2, #1
 800a2d6:	f8c8 2000 	strlt.w	r2, [r8]
 800a2da:	ea33 0309 	bics.w	r3, r3, r9
 800a2de:	d11b      	bne.n	800a318 <_dtoa_r+0xb8>
 800a2e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2e6:	6013      	str	r3, [r2, #0]
 800a2e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2ec:	4333      	orrs	r3, r6
 800a2ee:	f000 857a 	beq.w	800ade6 <_dtoa_r+0xb86>
 800a2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f4:	b963      	cbnz	r3, 800a310 <_dtoa_r+0xb0>
 800a2f6:	4b9b      	ldr	r3, [pc, #620]	; (800a564 <_dtoa_r+0x304>)
 800a2f8:	e024      	b.n	800a344 <_dtoa_r+0xe4>
 800a2fa:	4b9b      	ldr	r3, [pc, #620]	; (800a568 <_dtoa_r+0x308>)
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	3308      	adds	r3, #8
 800a300:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	9800      	ldr	r0, [sp, #0]
 800a306:	b015      	add	sp, #84	; 0x54
 800a308:	ecbd 8b02 	vpop	{d8}
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	4b94      	ldr	r3, [pc, #592]	; (800a564 <_dtoa_r+0x304>)
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	3303      	adds	r3, #3
 800a316:	e7f3      	b.n	800a300 <_dtoa_r+0xa0>
 800a318:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a31c:	2200      	movs	r2, #0
 800a31e:	ec51 0b17 	vmov	r0, r1, d7
 800a322:	2300      	movs	r3, #0
 800a324:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a328:	f7f6 fbee 	bl	8000b08 <__aeabi_dcmpeq>
 800a32c:	4680      	mov	r8, r0
 800a32e:	b158      	cbz	r0, 800a348 <_dtoa_r+0xe8>
 800a330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a332:	2301      	movs	r3, #1
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 8551 	beq.w	800ade0 <_dtoa_r+0xb80>
 800a33e:	488b      	ldr	r0, [pc, #556]	; (800a56c <_dtoa_r+0x30c>)
 800a340:	6018      	str	r0, [r3, #0]
 800a342:	1e43      	subs	r3, r0, #1
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	e7dd      	b.n	800a304 <_dtoa_r+0xa4>
 800a348:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a34c:	aa12      	add	r2, sp, #72	; 0x48
 800a34e:	a913      	add	r1, sp, #76	; 0x4c
 800a350:	4620      	mov	r0, r4
 800a352:	f001 fdff 	bl	800bf54 <__d2b>
 800a356:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a35a:	4683      	mov	fp, r0
 800a35c:	2d00      	cmp	r5, #0
 800a35e:	d07c      	beq.n	800a45a <_dtoa_r+0x1fa>
 800a360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a362:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a36a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a36e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a372:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a376:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a37a:	4b7d      	ldr	r3, [pc, #500]	; (800a570 <_dtoa_r+0x310>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	4630      	mov	r0, r6
 800a380:	4639      	mov	r1, r7
 800a382:	f7f5 ffa1 	bl	80002c8 <__aeabi_dsub>
 800a386:	a36e      	add	r3, pc, #440	; (adr r3, 800a540 <_dtoa_r+0x2e0>)
 800a388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38c:	f7f6 f954 	bl	8000638 <__aeabi_dmul>
 800a390:	a36d      	add	r3, pc, #436	; (adr r3, 800a548 <_dtoa_r+0x2e8>)
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f7f5 ff99 	bl	80002cc <__adddf3>
 800a39a:	4606      	mov	r6, r0
 800a39c:	4628      	mov	r0, r5
 800a39e:	460f      	mov	r7, r1
 800a3a0:	f7f6 f8e0 	bl	8000564 <__aeabi_i2d>
 800a3a4:	a36a      	add	r3, pc, #424	; (adr r3, 800a550 <_dtoa_r+0x2f0>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f6 f945 	bl	8000638 <__aeabi_dmul>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f5 ff89 	bl	80002cc <__adddf3>
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460f      	mov	r7, r1
 800a3be:	f7f6 fbeb 	bl	8000b98 <__aeabi_d2iz>
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	4639      	mov	r1, r7
 800a3cc:	f7f6 fba6 	bl	8000b1c <__aeabi_dcmplt>
 800a3d0:	b148      	cbz	r0, 800a3e6 <_dtoa_r+0x186>
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	f7f6 f8c6 	bl	8000564 <__aeabi_i2d>
 800a3d8:	4632      	mov	r2, r6
 800a3da:	463b      	mov	r3, r7
 800a3dc:	f7f6 fb94 	bl	8000b08 <__aeabi_dcmpeq>
 800a3e0:	b908      	cbnz	r0, 800a3e6 <_dtoa_r+0x186>
 800a3e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3e6:	f1ba 0f16 	cmp.w	sl, #22
 800a3ea:	d854      	bhi.n	800a496 <_dtoa_r+0x236>
 800a3ec:	4b61      	ldr	r3, [pc, #388]	; (800a574 <_dtoa_r+0x314>)
 800a3ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3fa:	f7f6 fb8f 	bl	8000b1c <__aeabi_dcmplt>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d04b      	beq.n	800a49a <_dtoa_r+0x23a>
 800a402:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a406:	2300      	movs	r3, #0
 800a408:	930e      	str	r3, [sp, #56]	; 0x38
 800a40a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a40c:	1b5d      	subs	r5, r3, r5
 800a40e:	1e6b      	subs	r3, r5, #1
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	bf43      	ittte	mi
 800a414:	2300      	movmi	r3, #0
 800a416:	f1c5 0801 	rsbmi	r8, r5, #1
 800a41a:	9304      	strmi	r3, [sp, #16]
 800a41c:	f04f 0800 	movpl.w	r8, #0
 800a420:	f1ba 0f00 	cmp.w	sl, #0
 800a424:	db3b      	blt.n	800a49e <_dtoa_r+0x23e>
 800a426:	9b04      	ldr	r3, [sp, #16]
 800a428:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a42c:	4453      	add	r3, sl
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	2300      	movs	r3, #0
 800a432:	9306      	str	r3, [sp, #24]
 800a434:	9b05      	ldr	r3, [sp, #20]
 800a436:	2b09      	cmp	r3, #9
 800a438:	d869      	bhi.n	800a50e <_dtoa_r+0x2ae>
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	bfc4      	itt	gt
 800a43e:	3b04      	subgt	r3, #4
 800a440:	9305      	strgt	r3, [sp, #20]
 800a442:	9b05      	ldr	r3, [sp, #20]
 800a444:	f1a3 0302 	sub.w	r3, r3, #2
 800a448:	bfcc      	ite	gt
 800a44a:	2500      	movgt	r5, #0
 800a44c:	2501      	movle	r5, #1
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d869      	bhi.n	800a526 <_dtoa_r+0x2c6>
 800a452:	e8df f003 	tbb	[pc, r3]
 800a456:	4e2c      	.short	0x4e2c
 800a458:	5a4c      	.short	0x5a4c
 800a45a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a45e:	441d      	add	r5, r3
 800a460:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a464:	2b20      	cmp	r3, #32
 800a466:	bfc1      	itttt	gt
 800a468:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a46c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a470:	fa09 f303 	lslgt.w	r3, r9, r3
 800a474:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a478:	bfda      	itte	le
 800a47a:	f1c3 0320 	rsble	r3, r3, #32
 800a47e:	fa06 f003 	lslle.w	r0, r6, r3
 800a482:	4318      	orrgt	r0, r3
 800a484:	f7f6 f85e 	bl	8000544 <__aeabi_ui2d>
 800a488:	2301      	movs	r3, #1
 800a48a:	4606      	mov	r6, r0
 800a48c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a490:	3d01      	subs	r5, #1
 800a492:	9310      	str	r3, [sp, #64]	; 0x40
 800a494:	e771      	b.n	800a37a <_dtoa_r+0x11a>
 800a496:	2301      	movs	r3, #1
 800a498:	e7b6      	b.n	800a408 <_dtoa_r+0x1a8>
 800a49a:	900e      	str	r0, [sp, #56]	; 0x38
 800a49c:	e7b5      	b.n	800a40a <_dtoa_r+0x1aa>
 800a49e:	f1ca 0300 	rsb	r3, sl, #0
 800a4a2:	9306      	str	r3, [sp, #24]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	eba8 080a 	sub.w	r8, r8, sl
 800a4aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ac:	e7c2      	b.n	800a434 <_dtoa_r+0x1d4>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dc39      	bgt.n	800a52c <_dtoa_r+0x2cc>
 800a4b8:	f04f 0901 	mov.w	r9, #1
 800a4bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4c0:	464b      	mov	r3, r9
 800a4c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a4c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	6042      	str	r2, [r0, #4]
 800a4cc:	2204      	movs	r2, #4
 800a4ce:	f102 0614 	add.w	r6, r2, #20
 800a4d2:	429e      	cmp	r6, r3
 800a4d4:	6841      	ldr	r1, [r0, #4]
 800a4d6:	d92f      	bls.n	800a538 <_dtoa_r+0x2d8>
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f001 f953 	bl	800b784 <_Balloc>
 800a4de:	9000      	str	r0, [sp, #0]
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d14b      	bne.n	800a57c <_dtoa_r+0x31c>
 800a4e4:	4b24      	ldr	r3, [pc, #144]	; (800a578 <_dtoa_r+0x318>)
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4ec:	e6d1      	b.n	800a292 <_dtoa_r+0x32>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e7de      	b.n	800a4b0 <_dtoa_r+0x250>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	9308      	str	r3, [sp, #32]
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	eb0a 0903 	add.w	r9, sl, r3
 800a4fc:	f109 0301 	add.w	r3, r9, #1
 800a500:	2b01      	cmp	r3, #1
 800a502:	9301      	str	r3, [sp, #4]
 800a504:	bfb8      	it	lt
 800a506:	2301      	movlt	r3, #1
 800a508:	e7dd      	b.n	800a4c6 <_dtoa_r+0x266>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7f2      	b.n	800a4f4 <_dtoa_r+0x294>
 800a50e:	2501      	movs	r5, #1
 800a510:	2300      	movs	r3, #0
 800a512:	9305      	str	r3, [sp, #20]
 800a514:	9508      	str	r5, [sp, #32]
 800a516:	f04f 39ff 	mov.w	r9, #4294967295
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a520:	2312      	movs	r3, #18
 800a522:	9209      	str	r2, [sp, #36]	; 0x24
 800a524:	e7cf      	b.n	800a4c6 <_dtoa_r+0x266>
 800a526:	2301      	movs	r3, #1
 800a528:	9308      	str	r3, [sp, #32]
 800a52a:	e7f4      	b.n	800a516 <_dtoa_r+0x2b6>
 800a52c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a530:	f8cd 9004 	str.w	r9, [sp, #4]
 800a534:	464b      	mov	r3, r9
 800a536:	e7c6      	b.n	800a4c6 <_dtoa_r+0x266>
 800a538:	3101      	adds	r1, #1
 800a53a:	6041      	str	r1, [r0, #4]
 800a53c:	0052      	lsls	r2, r2, #1
 800a53e:	e7c6      	b.n	800a4ce <_dtoa_r+0x26e>
 800a540:	636f4361 	.word	0x636f4361
 800a544:	3fd287a7 	.word	0x3fd287a7
 800a548:	8b60c8b3 	.word	0x8b60c8b3
 800a54c:	3fc68a28 	.word	0x3fc68a28
 800a550:	509f79fb 	.word	0x509f79fb
 800a554:	3fd34413 	.word	0x3fd34413
 800a558:	0800d856 	.word	0x0800d856
 800a55c:	0800d86d 	.word	0x0800d86d
 800a560:	7ff00000 	.word	0x7ff00000
 800a564:	0800d852 	.word	0x0800d852
 800a568:	0800d849 	.word	0x0800d849
 800a56c:	0800db32 	.word	0x0800db32
 800a570:	3ff80000 	.word	0x3ff80000
 800a574:	0800da48 	.word	0x0800da48
 800a578:	0800d8cc 	.word	0x0800d8cc
 800a57c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a57e:	9a00      	ldr	r2, [sp, #0]
 800a580:	601a      	str	r2, [r3, #0]
 800a582:	9b01      	ldr	r3, [sp, #4]
 800a584:	2b0e      	cmp	r3, #14
 800a586:	f200 80ad 	bhi.w	800a6e4 <_dtoa_r+0x484>
 800a58a:	2d00      	cmp	r5, #0
 800a58c:	f000 80aa 	beq.w	800a6e4 <_dtoa_r+0x484>
 800a590:	f1ba 0f00 	cmp.w	sl, #0
 800a594:	dd36      	ble.n	800a604 <_dtoa_r+0x3a4>
 800a596:	4ac3      	ldr	r2, [pc, #780]	; (800a8a4 <_dtoa_r+0x644>)
 800a598:	f00a 030f 	and.w	r3, sl, #15
 800a59c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5a0:	ed93 7b00 	vldr	d7, [r3]
 800a5a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a5a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a5ac:	eeb0 8a47 	vmov.f32	s16, s14
 800a5b0:	eef0 8a67 	vmov.f32	s17, s15
 800a5b4:	d016      	beq.n	800a5e4 <_dtoa_r+0x384>
 800a5b6:	4bbc      	ldr	r3, [pc, #752]	; (800a8a8 <_dtoa_r+0x648>)
 800a5b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5c0:	f7f6 f964 	bl	800088c <__aeabi_ddiv>
 800a5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5c8:	f007 070f 	and.w	r7, r7, #15
 800a5cc:	2503      	movs	r5, #3
 800a5ce:	4eb6      	ldr	r6, [pc, #728]	; (800a8a8 <_dtoa_r+0x648>)
 800a5d0:	b957      	cbnz	r7, 800a5e8 <_dtoa_r+0x388>
 800a5d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5d6:	ec53 2b18 	vmov	r2, r3, d8
 800a5da:	f7f6 f957 	bl	800088c <__aeabi_ddiv>
 800a5de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e2:	e029      	b.n	800a638 <_dtoa_r+0x3d8>
 800a5e4:	2502      	movs	r5, #2
 800a5e6:	e7f2      	b.n	800a5ce <_dtoa_r+0x36e>
 800a5e8:	07f9      	lsls	r1, r7, #31
 800a5ea:	d508      	bpl.n	800a5fe <_dtoa_r+0x39e>
 800a5ec:	ec51 0b18 	vmov	r0, r1, d8
 800a5f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5f4:	f7f6 f820 	bl	8000638 <__aeabi_dmul>
 800a5f8:	ec41 0b18 	vmov	d8, r0, r1
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	107f      	asrs	r7, r7, #1
 800a600:	3608      	adds	r6, #8
 800a602:	e7e5      	b.n	800a5d0 <_dtoa_r+0x370>
 800a604:	f000 80a6 	beq.w	800a754 <_dtoa_r+0x4f4>
 800a608:	f1ca 0600 	rsb	r6, sl, #0
 800a60c:	4ba5      	ldr	r3, [pc, #660]	; (800a8a4 <_dtoa_r+0x644>)
 800a60e:	4fa6      	ldr	r7, [pc, #664]	; (800a8a8 <_dtoa_r+0x648>)
 800a610:	f006 020f 	and.w	r2, r6, #15
 800a614:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a620:	f7f6 f80a 	bl	8000638 <__aeabi_dmul>
 800a624:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a628:	1136      	asrs	r6, r6, #4
 800a62a:	2300      	movs	r3, #0
 800a62c:	2502      	movs	r5, #2
 800a62e:	2e00      	cmp	r6, #0
 800a630:	f040 8085 	bne.w	800a73e <_dtoa_r+0x4de>
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1d2      	bne.n	800a5de <_dtoa_r+0x37e>
 800a638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f000 808c 	beq.w	800a758 <_dtoa_r+0x4f8>
 800a640:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a644:	4b99      	ldr	r3, [pc, #612]	; (800a8ac <_dtoa_r+0x64c>)
 800a646:	2200      	movs	r2, #0
 800a648:	4630      	mov	r0, r6
 800a64a:	4639      	mov	r1, r7
 800a64c:	f7f6 fa66 	bl	8000b1c <__aeabi_dcmplt>
 800a650:	2800      	cmp	r0, #0
 800a652:	f000 8081 	beq.w	800a758 <_dtoa_r+0x4f8>
 800a656:	9b01      	ldr	r3, [sp, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d07d      	beq.n	800a758 <_dtoa_r+0x4f8>
 800a65c:	f1b9 0f00 	cmp.w	r9, #0
 800a660:	dd3c      	ble.n	800a6dc <_dtoa_r+0x47c>
 800a662:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a666:	9307      	str	r3, [sp, #28]
 800a668:	2200      	movs	r2, #0
 800a66a:	4b91      	ldr	r3, [pc, #580]	; (800a8b0 <_dtoa_r+0x650>)
 800a66c:	4630      	mov	r0, r6
 800a66e:	4639      	mov	r1, r7
 800a670:	f7f5 ffe2 	bl	8000638 <__aeabi_dmul>
 800a674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a678:	3501      	adds	r5, #1
 800a67a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a67e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a682:	4628      	mov	r0, r5
 800a684:	f7f5 ff6e 	bl	8000564 <__aeabi_i2d>
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	f7f5 ffd4 	bl	8000638 <__aeabi_dmul>
 800a690:	4b88      	ldr	r3, [pc, #544]	; (800a8b4 <_dtoa_r+0x654>)
 800a692:	2200      	movs	r2, #0
 800a694:	f7f5 fe1a 	bl	80002cc <__adddf3>
 800a698:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6a0:	9303      	str	r3, [sp, #12]
 800a6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d15c      	bne.n	800a762 <_dtoa_r+0x502>
 800a6a8:	4b83      	ldr	r3, [pc, #524]	; (800a8b8 <_dtoa_r+0x658>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 fe0a 	bl	80002c8 <__aeabi_dsub>
 800a6b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	460f      	mov	r7, r1
 800a6bc:	f7f6 fa4c 	bl	8000b58 <__aeabi_dcmpgt>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f040 8296 	bne.w	800abf2 <_dtoa_r+0x992>
 800a6c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6d0:	4639      	mov	r1, r7
 800a6d2:	f7f6 fa23 	bl	8000b1c <__aeabi_dcmplt>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	f040 8288 	bne.w	800abec <_dtoa_r+0x98c>
 800a6dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f2c0 8158 	blt.w	800a99c <_dtoa_r+0x73c>
 800a6ec:	f1ba 0f0e 	cmp.w	sl, #14
 800a6f0:	f300 8154 	bgt.w	800a99c <_dtoa_r+0x73c>
 800a6f4:	4b6b      	ldr	r3, [pc, #428]	; (800a8a4 <_dtoa_r+0x644>)
 800a6f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a6fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a700:	2b00      	cmp	r3, #0
 800a702:	f280 80e3 	bge.w	800a8cc <_dtoa_r+0x66c>
 800a706:	9b01      	ldr	r3, [sp, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f300 80df 	bgt.w	800a8cc <_dtoa_r+0x66c>
 800a70e:	f040 826d 	bne.w	800abec <_dtoa_r+0x98c>
 800a712:	4b69      	ldr	r3, [pc, #420]	; (800a8b8 <_dtoa_r+0x658>)
 800a714:	2200      	movs	r2, #0
 800a716:	4640      	mov	r0, r8
 800a718:	4649      	mov	r1, r9
 800a71a:	f7f5 ff8d 	bl	8000638 <__aeabi_dmul>
 800a71e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a722:	f7f6 fa0f 	bl	8000b44 <__aeabi_dcmpge>
 800a726:	9e01      	ldr	r6, [sp, #4]
 800a728:	4637      	mov	r7, r6
 800a72a:	2800      	cmp	r0, #0
 800a72c:	f040 8243 	bne.w	800abb6 <_dtoa_r+0x956>
 800a730:	9d00      	ldr	r5, [sp, #0]
 800a732:	2331      	movs	r3, #49	; 0x31
 800a734:	f805 3b01 	strb.w	r3, [r5], #1
 800a738:	f10a 0a01 	add.w	sl, sl, #1
 800a73c:	e23f      	b.n	800abbe <_dtoa_r+0x95e>
 800a73e:	07f2      	lsls	r2, r6, #31
 800a740:	d505      	bpl.n	800a74e <_dtoa_r+0x4ee>
 800a742:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a746:	f7f5 ff77 	bl	8000638 <__aeabi_dmul>
 800a74a:	3501      	adds	r5, #1
 800a74c:	2301      	movs	r3, #1
 800a74e:	1076      	asrs	r6, r6, #1
 800a750:	3708      	adds	r7, #8
 800a752:	e76c      	b.n	800a62e <_dtoa_r+0x3ce>
 800a754:	2502      	movs	r5, #2
 800a756:	e76f      	b.n	800a638 <_dtoa_r+0x3d8>
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a75e:	930c      	str	r3, [sp, #48]	; 0x30
 800a760:	e78d      	b.n	800a67e <_dtoa_r+0x41e>
 800a762:	9900      	ldr	r1, [sp, #0]
 800a764:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a766:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a768:	4b4e      	ldr	r3, [pc, #312]	; (800a8a4 <_dtoa_r+0x644>)
 800a76a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a76e:	4401      	add	r1, r0
 800a770:	9102      	str	r1, [sp, #8]
 800a772:	9908      	ldr	r1, [sp, #32]
 800a774:	eeb0 8a47 	vmov.f32	s16, s14
 800a778:	eef0 8a67 	vmov.f32	s17, s15
 800a77c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a780:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a784:	2900      	cmp	r1, #0
 800a786:	d045      	beq.n	800a814 <_dtoa_r+0x5b4>
 800a788:	494c      	ldr	r1, [pc, #304]	; (800a8bc <_dtoa_r+0x65c>)
 800a78a:	2000      	movs	r0, #0
 800a78c:	f7f6 f87e 	bl	800088c <__aeabi_ddiv>
 800a790:	ec53 2b18 	vmov	r2, r3, d8
 800a794:	f7f5 fd98 	bl	80002c8 <__aeabi_dsub>
 800a798:	9d00      	ldr	r5, [sp, #0]
 800a79a:	ec41 0b18 	vmov	d8, r0, r1
 800a79e:	4639      	mov	r1, r7
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7f6 f9f9 	bl	8000b98 <__aeabi_d2iz>
 800a7a6:	900c      	str	r0, [sp, #48]	; 0x30
 800a7a8:	f7f5 fedc 	bl	8000564 <__aeabi_i2d>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	4639      	mov	r1, r7
 800a7b4:	f7f5 fd88 	bl	80002c8 <__aeabi_dsub>
 800a7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ba:	3330      	adds	r3, #48	; 0x30
 800a7bc:	f805 3b01 	strb.w	r3, [r5], #1
 800a7c0:	ec53 2b18 	vmov	r2, r3, d8
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460f      	mov	r7, r1
 800a7c8:	f7f6 f9a8 	bl	8000b1c <__aeabi_dcmplt>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d165      	bne.n	800a89c <_dtoa_r+0x63c>
 800a7d0:	4632      	mov	r2, r6
 800a7d2:	463b      	mov	r3, r7
 800a7d4:	4935      	ldr	r1, [pc, #212]	; (800a8ac <_dtoa_r+0x64c>)
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f7f5 fd76 	bl	80002c8 <__aeabi_dsub>
 800a7dc:	ec53 2b18 	vmov	r2, r3, d8
 800a7e0:	f7f6 f99c 	bl	8000b1c <__aeabi_dcmplt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f040 80b9 	bne.w	800a95c <_dtoa_r+0x6fc>
 800a7ea:	9b02      	ldr	r3, [sp, #8]
 800a7ec:	429d      	cmp	r5, r3
 800a7ee:	f43f af75 	beq.w	800a6dc <_dtoa_r+0x47c>
 800a7f2:	4b2f      	ldr	r3, [pc, #188]	; (800a8b0 <_dtoa_r+0x650>)
 800a7f4:	ec51 0b18 	vmov	r0, r1, d8
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7f5 ff1d 	bl	8000638 <__aeabi_dmul>
 800a7fe:	4b2c      	ldr	r3, [pc, #176]	; (800a8b0 <_dtoa_r+0x650>)
 800a800:	ec41 0b18 	vmov	d8, r0, r1
 800a804:	2200      	movs	r2, #0
 800a806:	4630      	mov	r0, r6
 800a808:	4639      	mov	r1, r7
 800a80a:	f7f5 ff15 	bl	8000638 <__aeabi_dmul>
 800a80e:	4606      	mov	r6, r0
 800a810:	460f      	mov	r7, r1
 800a812:	e7c4      	b.n	800a79e <_dtoa_r+0x53e>
 800a814:	ec51 0b17 	vmov	r0, r1, d7
 800a818:	f7f5 ff0e 	bl	8000638 <__aeabi_dmul>
 800a81c:	9b02      	ldr	r3, [sp, #8]
 800a81e:	9d00      	ldr	r5, [sp, #0]
 800a820:	930c      	str	r3, [sp, #48]	; 0x30
 800a822:	ec41 0b18 	vmov	d8, r0, r1
 800a826:	4639      	mov	r1, r7
 800a828:	4630      	mov	r0, r6
 800a82a:	f7f6 f9b5 	bl	8000b98 <__aeabi_d2iz>
 800a82e:	9011      	str	r0, [sp, #68]	; 0x44
 800a830:	f7f5 fe98 	bl	8000564 <__aeabi_i2d>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f5 fd44 	bl	80002c8 <__aeabi_dsub>
 800a840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a842:	3330      	adds	r3, #48	; 0x30
 800a844:	f805 3b01 	strb.w	r3, [r5], #1
 800a848:	9b02      	ldr	r3, [sp, #8]
 800a84a:	429d      	cmp	r5, r3
 800a84c:	4606      	mov	r6, r0
 800a84e:	460f      	mov	r7, r1
 800a850:	f04f 0200 	mov.w	r2, #0
 800a854:	d134      	bne.n	800a8c0 <_dtoa_r+0x660>
 800a856:	4b19      	ldr	r3, [pc, #100]	; (800a8bc <_dtoa_r+0x65c>)
 800a858:	ec51 0b18 	vmov	r0, r1, d8
 800a85c:	f7f5 fd36 	bl	80002cc <__adddf3>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f7f6 f976 	bl	8000b58 <__aeabi_dcmpgt>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d175      	bne.n	800a95c <_dtoa_r+0x6fc>
 800a870:	ec53 2b18 	vmov	r2, r3, d8
 800a874:	4911      	ldr	r1, [pc, #68]	; (800a8bc <_dtoa_r+0x65c>)
 800a876:	2000      	movs	r0, #0
 800a878:	f7f5 fd26 	bl	80002c8 <__aeabi_dsub>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4630      	mov	r0, r6
 800a882:	4639      	mov	r1, r7
 800a884:	f7f6 f94a 	bl	8000b1c <__aeabi_dcmplt>
 800a888:	2800      	cmp	r0, #0
 800a88a:	f43f af27 	beq.w	800a6dc <_dtoa_r+0x47c>
 800a88e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a890:	1e6b      	subs	r3, r5, #1
 800a892:	930c      	str	r3, [sp, #48]	; 0x30
 800a894:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a898:	2b30      	cmp	r3, #48	; 0x30
 800a89a:	d0f8      	beq.n	800a88e <_dtoa_r+0x62e>
 800a89c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8a0:	e04a      	b.n	800a938 <_dtoa_r+0x6d8>
 800a8a2:	bf00      	nop
 800a8a4:	0800da48 	.word	0x0800da48
 800a8a8:	0800da20 	.word	0x0800da20
 800a8ac:	3ff00000 	.word	0x3ff00000
 800a8b0:	40240000 	.word	0x40240000
 800a8b4:	401c0000 	.word	0x401c0000
 800a8b8:	40140000 	.word	0x40140000
 800a8bc:	3fe00000 	.word	0x3fe00000
 800a8c0:	4baf      	ldr	r3, [pc, #700]	; (800ab80 <_dtoa_r+0x920>)
 800a8c2:	f7f5 feb9 	bl	8000638 <__aeabi_dmul>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460f      	mov	r7, r1
 800a8ca:	e7ac      	b.n	800a826 <_dtoa_r+0x5c6>
 800a8cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8d0:	9d00      	ldr	r5, [sp, #0]
 800a8d2:	4642      	mov	r2, r8
 800a8d4:	464b      	mov	r3, r9
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f5 ffd7 	bl	800088c <__aeabi_ddiv>
 800a8de:	f7f6 f95b 	bl	8000b98 <__aeabi_d2iz>
 800a8e2:	9002      	str	r0, [sp, #8]
 800a8e4:	f7f5 fe3e 	bl	8000564 <__aeabi_i2d>
 800a8e8:	4642      	mov	r2, r8
 800a8ea:	464b      	mov	r3, r9
 800a8ec:	f7f5 fea4 	bl	8000638 <__aeabi_dmul>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	f7f5 fce6 	bl	80002c8 <__aeabi_dsub>
 800a8fc:	9e02      	ldr	r6, [sp, #8]
 800a8fe:	9f01      	ldr	r7, [sp, #4]
 800a900:	3630      	adds	r6, #48	; 0x30
 800a902:	f805 6b01 	strb.w	r6, [r5], #1
 800a906:	9e00      	ldr	r6, [sp, #0]
 800a908:	1bae      	subs	r6, r5, r6
 800a90a:	42b7      	cmp	r7, r6
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	d137      	bne.n	800a982 <_dtoa_r+0x722>
 800a912:	f7f5 fcdb 	bl	80002cc <__adddf3>
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	4606      	mov	r6, r0
 800a91c:	460f      	mov	r7, r1
 800a91e:	f7f6 f91b 	bl	8000b58 <__aeabi_dcmpgt>
 800a922:	b9c8      	cbnz	r0, 800a958 <_dtoa_r+0x6f8>
 800a924:	4642      	mov	r2, r8
 800a926:	464b      	mov	r3, r9
 800a928:	4630      	mov	r0, r6
 800a92a:	4639      	mov	r1, r7
 800a92c:	f7f6 f8ec 	bl	8000b08 <__aeabi_dcmpeq>
 800a930:	b110      	cbz	r0, 800a938 <_dtoa_r+0x6d8>
 800a932:	9b02      	ldr	r3, [sp, #8]
 800a934:	07d9      	lsls	r1, r3, #31
 800a936:	d40f      	bmi.n	800a958 <_dtoa_r+0x6f8>
 800a938:	4620      	mov	r0, r4
 800a93a:	4659      	mov	r1, fp
 800a93c:	f000 ff62 	bl	800b804 <_Bfree>
 800a940:	2300      	movs	r3, #0
 800a942:	702b      	strb	r3, [r5, #0]
 800a944:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a946:	f10a 0001 	add.w	r0, sl, #1
 800a94a:	6018      	str	r0, [r3, #0]
 800a94c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f43f acd8 	beq.w	800a304 <_dtoa_r+0xa4>
 800a954:	601d      	str	r5, [r3, #0]
 800a956:	e4d5      	b.n	800a304 <_dtoa_r+0xa4>
 800a958:	f8cd a01c 	str.w	sl, [sp, #28]
 800a95c:	462b      	mov	r3, r5
 800a95e:	461d      	mov	r5, r3
 800a960:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a964:	2a39      	cmp	r2, #57	; 0x39
 800a966:	d108      	bne.n	800a97a <_dtoa_r+0x71a>
 800a968:	9a00      	ldr	r2, [sp, #0]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d1f7      	bne.n	800a95e <_dtoa_r+0x6fe>
 800a96e:	9a07      	ldr	r2, [sp, #28]
 800a970:	9900      	ldr	r1, [sp, #0]
 800a972:	3201      	adds	r2, #1
 800a974:	9207      	str	r2, [sp, #28]
 800a976:	2230      	movs	r2, #48	; 0x30
 800a978:	700a      	strb	r2, [r1, #0]
 800a97a:	781a      	ldrb	r2, [r3, #0]
 800a97c:	3201      	adds	r2, #1
 800a97e:	701a      	strb	r2, [r3, #0]
 800a980:	e78c      	b.n	800a89c <_dtoa_r+0x63c>
 800a982:	4b7f      	ldr	r3, [pc, #508]	; (800ab80 <_dtoa_r+0x920>)
 800a984:	2200      	movs	r2, #0
 800a986:	f7f5 fe57 	bl	8000638 <__aeabi_dmul>
 800a98a:	2200      	movs	r2, #0
 800a98c:	2300      	movs	r3, #0
 800a98e:	4606      	mov	r6, r0
 800a990:	460f      	mov	r7, r1
 800a992:	f7f6 f8b9 	bl	8000b08 <__aeabi_dcmpeq>
 800a996:	2800      	cmp	r0, #0
 800a998:	d09b      	beq.n	800a8d2 <_dtoa_r+0x672>
 800a99a:	e7cd      	b.n	800a938 <_dtoa_r+0x6d8>
 800a99c:	9a08      	ldr	r2, [sp, #32]
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	f000 80c4 	beq.w	800ab2c <_dtoa_r+0x8cc>
 800a9a4:	9a05      	ldr	r2, [sp, #20]
 800a9a6:	2a01      	cmp	r2, #1
 800a9a8:	f300 80a8 	bgt.w	800aafc <_dtoa_r+0x89c>
 800a9ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9ae:	2a00      	cmp	r2, #0
 800a9b0:	f000 80a0 	beq.w	800aaf4 <_dtoa_r+0x894>
 800a9b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9b8:	9e06      	ldr	r6, [sp, #24]
 800a9ba:	4645      	mov	r5, r8
 800a9bc:	9a04      	ldr	r2, [sp, #16]
 800a9be:	2101      	movs	r1, #1
 800a9c0:	441a      	add	r2, r3
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4498      	add	r8, r3
 800a9c6:	9204      	str	r2, [sp, #16]
 800a9c8:	f001 f822 	bl	800ba10 <__i2b>
 800a9cc:	4607      	mov	r7, r0
 800a9ce:	2d00      	cmp	r5, #0
 800a9d0:	dd0b      	ble.n	800a9ea <_dtoa_r+0x78a>
 800a9d2:	9b04      	ldr	r3, [sp, #16]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dd08      	ble.n	800a9ea <_dtoa_r+0x78a>
 800a9d8:	42ab      	cmp	r3, r5
 800a9da:	9a04      	ldr	r2, [sp, #16]
 800a9dc:	bfa8      	it	ge
 800a9de:	462b      	movge	r3, r5
 800a9e0:	eba8 0803 	sub.w	r8, r8, r3
 800a9e4:	1aed      	subs	r5, r5, r3
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	9b06      	ldr	r3, [sp, #24]
 800a9ec:	b1fb      	cbz	r3, 800aa2e <_dtoa_r+0x7ce>
 800a9ee:	9b08      	ldr	r3, [sp, #32]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 809f 	beq.w	800ab34 <_dtoa_r+0x8d4>
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	dd11      	ble.n	800aa1e <_dtoa_r+0x7be>
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	4620      	mov	r0, r4
 800aa00:	f001 f8c2 	bl	800bb88 <__pow5mult>
 800aa04:	465a      	mov	r2, fp
 800aa06:	4601      	mov	r1, r0
 800aa08:	4607      	mov	r7, r0
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f001 f816 	bl	800ba3c <__multiply>
 800aa10:	4659      	mov	r1, fp
 800aa12:	9007      	str	r0, [sp, #28]
 800aa14:	4620      	mov	r0, r4
 800aa16:	f000 fef5 	bl	800b804 <_Bfree>
 800aa1a:	9b07      	ldr	r3, [sp, #28]
 800aa1c:	469b      	mov	fp, r3
 800aa1e:	9b06      	ldr	r3, [sp, #24]
 800aa20:	1b9a      	subs	r2, r3, r6
 800aa22:	d004      	beq.n	800aa2e <_dtoa_r+0x7ce>
 800aa24:	4659      	mov	r1, fp
 800aa26:	4620      	mov	r0, r4
 800aa28:	f001 f8ae 	bl	800bb88 <__pow5mult>
 800aa2c:	4683      	mov	fp, r0
 800aa2e:	2101      	movs	r1, #1
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 ffed 	bl	800ba10 <__i2b>
 800aa36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	dd7c      	ble.n	800ab38 <_dtoa_r+0x8d8>
 800aa3e:	461a      	mov	r2, r3
 800aa40:	4601      	mov	r1, r0
 800aa42:	4620      	mov	r0, r4
 800aa44:	f001 f8a0 	bl	800bb88 <__pow5mult>
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	dd76      	ble.n	800ab3e <_dtoa_r+0x8de>
 800aa50:	2300      	movs	r3, #0
 800aa52:	9306      	str	r3, [sp, #24]
 800aa54:	6933      	ldr	r3, [r6, #16]
 800aa56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa5a:	6918      	ldr	r0, [r3, #16]
 800aa5c:	f000 ff88 	bl	800b970 <__hi0bits>
 800aa60:	f1c0 0020 	rsb	r0, r0, #32
 800aa64:	9b04      	ldr	r3, [sp, #16]
 800aa66:	4418      	add	r0, r3
 800aa68:	f010 001f 	ands.w	r0, r0, #31
 800aa6c:	f000 8086 	beq.w	800ab7c <_dtoa_r+0x91c>
 800aa70:	f1c0 0320 	rsb	r3, r0, #32
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	dd7f      	ble.n	800ab78 <_dtoa_r+0x918>
 800aa78:	f1c0 001c 	rsb	r0, r0, #28
 800aa7c:	9b04      	ldr	r3, [sp, #16]
 800aa7e:	4403      	add	r3, r0
 800aa80:	4480      	add	r8, r0
 800aa82:	4405      	add	r5, r0
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	f1b8 0f00 	cmp.w	r8, #0
 800aa8a:	dd05      	ble.n	800aa98 <_dtoa_r+0x838>
 800aa8c:	4659      	mov	r1, fp
 800aa8e:	4642      	mov	r2, r8
 800aa90:	4620      	mov	r0, r4
 800aa92:	f001 f8d3 	bl	800bc3c <__lshift>
 800aa96:	4683      	mov	fp, r0
 800aa98:	9b04      	ldr	r3, [sp, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	dd05      	ble.n	800aaaa <_dtoa_r+0x84a>
 800aa9e:	4631      	mov	r1, r6
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f001 f8ca 	bl	800bc3c <__lshift>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d069      	beq.n	800ab84 <_dtoa_r+0x924>
 800aab0:	4631      	mov	r1, r6
 800aab2:	4658      	mov	r0, fp
 800aab4:	f001 f92e 	bl	800bd14 <__mcmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	da63      	bge.n	800ab84 <_dtoa_r+0x924>
 800aabc:	2300      	movs	r3, #0
 800aabe:	4659      	mov	r1, fp
 800aac0:	220a      	movs	r2, #10
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 fec0 	bl	800b848 <__multadd>
 800aac8:	9b08      	ldr	r3, [sp, #32]
 800aaca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aace:	4683      	mov	fp, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 818f 	beq.w	800adf4 <_dtoa_r+0xb94>
 800aad6:	4639      	mov	r1, r7
 800aad8:	2300      	movs	r3, #0
 800aada:	220a      	movs	r2, #10
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 feb3 	bl	800b848 <__multadd>
 800aae2:	f1b9 0f00 	cmp.w	r9, #0
 800aae6:	4607      	mov	r7, r0
 800aae8:	f300 808e 	bgt.w	800ac08 <_dtoa_r+0x9a8>
 800aaec:	9b05      	ldr	r3, [sp, #20]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	dc50      	bgt.n	800ab94 <_dtoa_r+0x934>
 800aaf2:	e089      	b.n	800ac08 <_dtoa_r+0x9a8>
 800aaf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aaf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aafa:	e75d      	b.n	800a9b8 <_dtoa_r+0x758>
 800aafc:	9b01      	ldr	r3, [sp, #4]
 800aafe:	1e5e      	subs	r6, r3, #1
 800ab00:	9b06      	ldr	r3, [sp, #24]
 800ab02:	42b3      	cmp	r3, r6
 800ab04:	bfbf      	itttt	lt
 800ab06:	9b06      	ldrlt	r3, [sp, #24]
 800ab08:	9606      	strlt	r6, [sp, #24]
 800ab0a:	1af2      	sublt	r2, r6, r3
 800ab0c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab0e:	bfb6      	itet	lt
 800ab10:	189b      	addlt	r3, r3, r2
 800ab12:	1b9e      	subge	r6, r3, r6
 800ab14:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab16:	9b01      	ldr	r3, [sp, #4]
 800ab18:	bfb8      	it	lt
 800ab1a:	2600      	movlt	r6, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bfb5      	itete	lt
 800ab20:	eba8 0503 	sublt.w	r5, r8, r3
 800ab24:	9b01      	ldrge	r3, [sp, #4]
 800ab26:	2300      	movlt	r3, #0
 800ab28:	4645      	movge	r5, r8
 800ab2a:	e747      	b.n	800a9bc <_dtoa_r+0x75c>
 800ab2c:	9e06      	ldr	r6, [sp, #24]
 800ab2e:	9f08      	ldr	r7, [sp, #32]
 800ab30:	4645      	mov	r5, r8
 800ab32:	e74c      	b.n	800a9ce <_dtoa_r+0x76e>
 800ab34:	9a06      	ldr	r2, [sp, #24]
 800ab36:	e775      	b.n	800aa24 <_dtoa_r+0x7c4>
 800ab38:	9b05      	ldr	r3, [sp, #20]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	dc18      	bgt.n	800ab70 <_dtoa_r+0x910>
 800ab3e:	9b02      	ldr	r3, [sp, #8]
 800ab40:	b9b3      	cbnz	r3, 800ab70 <_dtoa_r+0x910>
 800ab42:	9b03      	ldr	r3, [sp, #12]
 800ab44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab48:	b9a3      	cbnz	r3, 800ab74 <_dtoa_r+0x914>
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab50:	0d1b      	lsrs	r3, r3, #20
 800ab52:	051b      	lsls	r3, r3, #20
 800ab54:	b12b      	cbz	r3, 800ab62 <_dtoa_r+0x902>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	f108 0801 	add.w	r8, r8, #1
 800ab60:	2301      	movs	r3, #1
 800ab62:	9306      	str	r3, [sp, #24]
 800ab64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f47f af74 	bne.w	800aa54 <_dtoa_r+0x7f4>
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	e779      	b.n	800aa64 <_dtoa_r+0x804>
 800ab70:	2300      	movs	r3, #0
 800ab72:	e7f6      	b.n	800ab62 <_dtoa_r+0x902>
 800ab74:	9b02      	ldr	r3, [sp, #8]
 800ab76:	e7f4      	b.n	800ab62 <_dtoa_r+0x902>
 800ab78:	d085      	beq.n	800aa86 <_dtoa_r+0x826>
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	301c      	adds	r0, #28
 800ab7e:	e77d      	b.n	800aa7c <_dtoa_r+0x81c>
 800ab80:	40240000 	.word	0x40240000
 800ab84:	9b01      	ldr	r3, [sp, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	dc38      	bgt.n	800abfc <_dtoa_r+0x99c>
 800ab8a:	9b05      	ldr	r3, [sp, #20]
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	dd35      	ble.n	800abfc <_dtoa_r+0x99c>
 800ab90:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab94:	f1b9 0f00 	cmp.w	r9, #0
 800ab98:	d10d      	bne.n	800abb6 <_dtoa_r+0x956>
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	2205      	movs	r2, #5
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 fe51 	bl	800b848 <__multadd>
 800aba6:	4601      	mov	r1, r0
 800aba8:	4606      	mov	r6, r0
 800abaa:	4658      	mov	r0, fp
 800abac:	f001 f8b2 	bl	800bd14 <__mcmp>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f73f adbd 	bgt.w	800a730 <_dtoa_r+0x4d0>
 800abb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb8:	9d00      	ldr	r5, [sp, #0]
 800abba:	ea6f 0a03 	mvn.w	sl, r3
 800abbe:	f04f 0800 	mov.w	r8, #0
 800abc2:	4631      	mov	r1, r6
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fe1d 	bl	800b804 <_Bfree>
 800abca:	2f00      	cmp	r7, #0
 800abcc:	f43f aeb4 	beq.w	800a938 <_dtoa_r+0x6d8>
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	d005      	beq.n	800abe2 <_dtoa_r+0x982>
 800abd6:	45b8      	cmp	r8, r7
 800abd8:	d003      	beq.n	800abe2 <_dtoa_r+0x982>
 800abda:	4641      	mov	r1, r8
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 fe11 	bl	800b804 <_Bfree>
 800abe2:	4639      	mov	r1, r7
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 fe0d 	bl	800b804 <_Bfree>
 800abea:	e6a5      	b.n	800a938 <_dtoa_r+0x6d8>
 800abec:	2600      	movs	r6, #0
 800abee:	4637      	mov	r7, r6
 800abf0:	e7e1      	b.n	800abb6 <_dtoa_r+0x956>
 800abf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800abf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800abf8:	4637      	mov	r7, r6
 800abfa:	e599      	b.n	800a730 <_dtoa_r+0x4d0>
 800abfc:	9b08      	ldr	r3, [sp, #32]
 800abfe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 80fd 	beq.w	800ae02 <_dtoa_r+0xba2>
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	dd05      	ble.n	800ac18 <_dtoa_r+0x9b8>
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	462a      	mov	r2, r5
 800ac10:	4620      	mov	r0, r4
 800ac12:	f001 f813 	bl	800bc3c <__lshift>
 800ac16:	4607      	mov	r7, r0
 800ac18:	9b06      	ldr	r3, [sp, #24]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d05c      	beq.n	800acd8 <_dtoa_r+0xa78>
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 fdaf 	bl	800b784 <_Balloc>
 800ac26:	4605      	mov	r5, r0
 800ac28:	b928      	cbnz	r0, 800ac36 <_dtoa_r+0x9d6>
 800ac2a:	4b80      	ldr	r3, [pc, #512]	; (800ae2c <_dtoa_r+0xbcc>)
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac32:	f7ff bb2e 	b.w	800a292 <_dtoa_r+0x32>
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	3202      	adds	r2, #2
 800ac3a:	0092      	lsls	r2, r2, #2
 800ac3c:	f107 010c 	add.w	r1, r7, #12
 800ac40:	300c      	adds	r0, #12
 800ac42:	f000 fd91 	bl	800b768 <memcpy>
 800ac46:	2201      	movs	r2, #1
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fff6 	bl	800bc3c <__lshift>
 800ac50:	9b00      	ldr	r3, [sp, #0]
 800ac52:	3301      	adds	r3, #1
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	9b00      	ldr	r3, [sp, #0]
 800ac58:	444b      	add	r3, r9
 800ac5a:	9307      	str	r3, [sp, #28]
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	46b8      	mov	r8, r7
 800ac64:	9306      	str	r3, [sp, #24]
 800ac66:	4607      	mov	r7, r0
 800ac68:	9b01      	ldr	r3, [sp, #4]
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	4658      	mov	r0, fp
 800ac70:	9302      	str	r3, [sp, #8]
 800ac72:	f7ff fa69 	bl	800a148 <quorem>
 800ac76:	4603      	mov	r3, r0
 800ac78:	3330      	adds	r3, #48	; 0x30
 800ac7a:	9004      	str	r0, [sp, #16]
 800ac7c:	4641      	mov	r1, r8
 800ac7e:	4658      	mov	r0, fp
 800ac80:	9308      	str	r3, [sp, #32]
 800ac82:	f001 f847 	bl	800bd14 <__mcmp>
 800ac86:	463a      	mov	r2, r7
 800ac88:	4681      	mov	r9, r0
 800ac8a:	4631      	mov	r1, r6
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f001 f85d 	bl	800bd4c <__mdiff>
 800ac92:	68c2      	ldr	r2, [r0, #12]
 800ac94:	9b08      	ldr	r3, [sp, #32]
 800ac96:	4605      	mov	r5, r0
 800ac98:	bb02      	cbnz	r2, 800acdc <_dtoa_r+0xa7c>
 800ac9a:	4601      	mov	r1, r0
 800ac9c:	4658      	mov	r0, fp
 800ac9e:	f001 f839 	bl	800bd14 <__mcmp>
 800aca2:	9b08      	ldr	r3, [sp, #32]
 800aca4:	4602      	mov	r2, r0
 800aca6:	4629      	mov	r1, r5
 800aca8:	4620      	mov	r0, r4
 800acaa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800acae:	f000 fda9 	bl	800b804 <_Bfree>
 800acb2:	9b05      	ldr	r3, [sp, #20]
 800acb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acb6:	9d01      	ldr	r5, [sp, #4]
 800acb8:	ea43 0102 	orr.w	r1, r3, r2
 800acbc:	9b06      	ldr	r3, [sp, #24]
 800acbe:	430b      	orrs	r3, r1
 800acc0:	9b08      	ldr	r3, [sp, #32]
 800acc2:	d10d      	bne.n	800ace0 <_dtoa_r+0xa80>
 800acc4:	2b39      	cmp	r3, #57	; 0x39
 800acc6:	d029      	beq.n	800ad1c <_dtoa_r+0xabc>
 800acc8:	f1b9 0f00 	cmp.w	r9, #0
 800accc:	dd01      	ble.n	800acd2 <_dtoa_r+0xa72>
 800acce:	9b04      	ldr	r3, [sp, #16]
 800acd0:	3331      	adds	r3, #49	; 0x31
 800acd2:	9a02      	ldr	r2, [sp, #8]
 800acd4:	7013      	strb	r3, [r2, #0]
 800acd6:	e774      	b.n	800abc2 <_dtoa_r+0x962>
 800acd8:	4638      	mov	r0, r7
 800acda:	e7b9      	b.n	800ac50 <_dtoa_r+0x9f0>
 800acdc:	2201      	movs	r2, #1
 800acde:	e7e2      	b.n	800aca6 <_dtoa_r+0xa46>
 800ace0:	f1b9 0f00 	cmp.w	r9, #0
 800ace4:	db06      	blt.n	800acf4 <_dtoa_r+0xa94>
 800ace6:	9905      	ldr	r1, [sp, #20]
 800ace8:	ea41 0909 	orr.w	r9, r1, r9
 800acec:	9906      	ldr	r1, [sp, #24]
 800acee:	ea59 0101 	orrs.w	r1, r9, r1
 800acf2:	d120      	bne.n	800ad36 <_dtoa_r+0xad6>
 800acf4:	2a00      	cmp	r2, #0
 800acf6:	ddec      	ble.n	800acd2 <_dtoa_r+0xa72>
 800acf8:	4659      	mov	r1, fp
 800acfa:	2201      	movs	r2, #1
 800acfc:	4620      	mov	r0, r4
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	f000 ff9c 	bl	800bc3c <__lshift>
 800ad04:	4631      	mov	r1, r6
 800ad06:	4683      	mov	fp, r0
 800ad08:	f001 f804 	bl	800bd14 <__mcmp>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	9b01      	ldr	r3, [sp, #4]
 800ad10:	dc02      	bgt.n	800ad18 <_dtoa_r+0xab8>
 800ad12:	d1de      	bne.n	800acd2 <_dtoa_r+0xa72>
 800ad14:	07da      	lsls	r2, r3, #31
 800ad16:	d5dc      	bpl.n	800acd2 <_dtoa_r+0xa72>
 800ad18:	2b39      	cmp	r3, #57	; 0x39
 800ad1a:	d1d8      	bne.n	800acce <_dtoa_r+0xa6e>
 800ad1c:	9a02      	ldr	r2, [sp, #8]
 800ad1e:	2339      	movs	r3, #57	; 0x39
 800ad20:	7013      	strb	r3, [r2, #0]
 800ad22:	462b      	mov	r3, r5
 800ad24:	461d      	mov	r5, r3
 800ad26:	3b01      	subs	r3, #1
 800ad28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad2c:	2a39      	cmp	r2, #57	; 0x39
 800ad2e:	d050      	beq.n	800add2 <_dtoa_r+0xb72>
 800ad30:	3201      	adds	r2, #1
 800ad32:	701a      	strb	r2, [r3, #0]
 800ad34:	e745      	b.n	800abc2 <_dtoa_r+0x962>
 800ad36:	2a00      	cmp	r2, #0
 800ad38:	dd03      	ble.n	800ad42 <_dtoa_r+0xae2>
 800ad3a:	2b39      	cmp	r3, #57	; 0x39
 800ad3c:	d0ee      	beq.n	800ad1c <_dtoa_r+0xabc>
 800ad3e:	3301      	adds	r3, #1
 800ad40:	e7c7      	b.n	800acd2 <_dtoa_r+0xa72>
 800ad42:	9a01      	ldr	r2, [sp, #4]
 800ad44:	9907      	ldr	r1, [sp, #28]
 800ad46:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad4a:	428a      	cmp	r2, r1
 800ad4c:	d02a      	beq.n	800ada4 <_dtoa_r+0xb44>
 800ad4e:	4659      	mov	r1, fp
 800ad50:	2300      	movs	r3, #0
 800ad52:	220a      	movs	r2, #10
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 fd77 	bl	800b848 <__multadd>
 800ad5a:	45b8      	cmp	r8, r7
 800ad5c:	4683      	mov	fp, r0
 800ad5e:	f04f 0300 	mov.w	r3, #0
 800ad62:	f04f 020a 	mov.w	r2, #10
 800ad66:	4641      	mov	r1, r8
 800ad68:	4620      	mov	r0, r4
 800ad6a:	d107      	bne.n	800ad7c <_dtoa_r+0xb1c>
 800ad6c:	f000 fd6c 	bl	800b848 <__multadd>
 800ad70:	4680      	mov	r8, r0
 800ad72:	4607      	mov	r7, r0
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	3301      	adds	r3, #1
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	e775      	b.n	800ac68 <_dtoa_r+0xa08>
 800ad7c:	f000 fd64 	bl	800b848 <__multadd>
 800ad80:	4639      	mov	r1, r7
 800ad82:	4680      	mov	r8, r0
 800ad84:	2300      	movs	r3, #0
 800ad86:	220a      	movs	r2, #10
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fd5d 	bl	800b848 <__multadd>
 800ad8e:	4607      	mov	r7, r0
 800ad90:	e7f0      	b.n	800ad74 <_dtoa_r+0xb14>
 800ad92:	f1b9 0f00 	cmp.w	r9, #0
 800ad96:	9a00      	ldr	r2, [sp, #0]
 800ad98:	bfcc      	ite	gt
 800ad9a:	464d      	movgt	r5, r9
 800ad9c:	2501      	movle	r5, #1
 800ad9e:	4415      	add	r5, r2
 800ada0:	f04f 0800 	mov.w	r8, #0
 800ada4:	4659      	mov	r1, fp
 800ada6:	2201      	movs	r2, #1
 800ada8:	4620      	mov	r0, r4
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	f000 ff46 	bl	800bc3c <__lshift>
 800adb0:	4631      	mov	r1, r6
 800adb2:	4683      	mov	fp, r0
 800adb4:	f000 ffae 	bl	800bd14 <__mcmp>
 800adb8:	2800      	cmp	r0, #0
 800adba:	dcb2      	bgt.n	800ad22 <_dtoa_r+0xac2>
 800adbc:	d102      	bne.n	800adc4 <_dtoa_r+0xb64>
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	07db      	lsls	r3, r3, #31
 800adc2:	d4ae      	bmi.n	800ad22 <_dtoa_r+0xac2>
 800adc4:	462b      	mov	r3, r5
 800adc6:	461d      	mov	r5, r3
 800adc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adcc:	2a30      	cmp	r2, #48	; 0x30
 800adce:	d0fa      	beq.n	800adc6 <_dtoa_r+0xb66>
 800add0:	e6f7      	b.n	800abc2 <_dtoa_r+0x962>
 800add2:	9a00      	ldr	r2, [sp, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d1a5      	bne.n	800ad24 <_dtoa_r+0xac4>
 800add8:	f10a 0a01 	add.w	sl, sl, #1
 800addc:	2331      	movs	r3, #49	; 0x31
 800adde:	e779      	b.n	800acd4 <_dtoa_r+0xa74>
 800ade0:	4b13      	ldr	r3, [pc, #76]	; (800ae30 <_dtoa_r+0xbd0>)
 800ade2:	f7ff baaf 	b.w	800a344 <_dtoa_r+0xe4>
 800ade6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f47f aa86 	bne.w	800a2fa <_dtoa_r+0x9a>
 800adee:	4b11      	ldr	r3, [pc, #68]	; (800ae34 <_dtoa_r+0xbd4>)
 800adf0:	f7ff baa8 	b.w	800a344 <_dtoa_r+0xe4>
 800adf4:	f1b9 0f00 	cmp.w	r9, #0
 800adf8:	dc03      	bgt.n	800ae02 <_dtoa_r+0xba2>
 800adfa:	9b05      	ldr	r3, [sp, #20]
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	f73f aec9 	bgt.w	800ab94 <_dtoa_r+0x934>
 800ae02:	9d00      	ldr	r5, [sp, #0]
 800ae04:	4631      	mov	r1, r6
 800ae06:	4658      	mov	r0, fp
 800ae08:	f7ff f99e 	bl	800a148 <quorem>
 800ae0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae10:	f805 3b01 	strb.w	r3, [r5], #1
 800ae14:	9a00      	ldr	r2, [sp, #0]
 800ae16:	1aaa      	subs	r2, r5, r2
 800ae18:	4591      	cmp	r9, r2
 800ae1a:	ddba      	ble.n	800ad92 <_dtoa_r+0xb32>
 800ae1c:	4659      	mov	r1, fp
 800ae1e:	2300      	movs	r3, #0
 800ae20:	220a      	movs	r2, #10
 800ae22:	4620      	mov	r0, r4
 800ae24:	f000 fd10 	bl	800b848 <__multadd>
 800ae28:	4683      	mov	fp, r0
 800ae2a:	e7eb      	b.n	800ae04 <_dtoa_r+0xba4>
 800ae2c:	0800d8cc 	.word	0x0800d8cc
 800ae30:	0800db31 	.word	0x0800db31
 800ae34:	0800d849 	.word	0x0800d849

0800ae38 <std>:
 800ae38:	2300      	movs	r3, #0
 800ae3a:	b510      	push	{r4, lr}
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	e9c0 3300 	strd	r3, r3, [r0]
 800ae42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae46:	6083      	str	r3, [r0, #8]
 800ae48:	8181      	strh	r1, [r0, #12]
 800ae4a:	6643      	str	r3, [r0, #100]	; 0x64
 800ae4c:	81c2      	strh	r2, [r0, #14]
 800ae4e:	6183      	str	r3, [r0, #24]
 800ae50:	4619      	mov	r1, r3
 800ae52:	2208      	movs	r2, #8
 800ae54:	305c      	adds	r0, #92	; 0x5c
 800ae56:	f7fd fb51 	bl	80084fc <memset>
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x38>)
 800ae5c:	6263      	str	r3, [r4, #36]	; 0x24
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x3c>)
 800ae60:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <std+0x40>)
 800ae64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <std+0x44>)
 800ae68:	6224      	str	r4, [r4, #32]
 800ae6a:	6323      	str	r3, [r4, #48]	; 0x30
 800ae6c:	bd10      	pop	{r4, pc}
 800ae6e:	bf00      	nop
 800ae70:	080092d5 	.word	0x080092d5
 800ae74:	080092fb 	.word	0x080092fb
 800ae78:	08009333 	.word	0x08009333
 800ae7c:	08009357 	.word	0x08009357

0800ae80 <_cleanup_r>:
 800ae80:	4901      	ldr	r1, [pc, #4]	; (800ae88 <_cleanup_r+0x8>)
 800ae82:	f000 b8af 	b.w	800afe4 <_fwalk_reent>
 800ae86:	bf00      	nop
 800ae88:	0800d355 	.word	0x0800d355

0800ae8c <__sfmoreglue>:
 800ae8c:	b570      	push	{r4, r5, r6, lr}
 800ae8e:	1e4a      	subs	r2, r1, #1
 800ae90:	2568      	movs	r5, #104	; 0x68
 800ae92:	4355      	muls	r5, r2
 800ae94:	460e      	mov	r6, r1
 800ae96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae9a:	f001 f98d 	bl	800c1b8 <_malloc_r>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	b140      	cbz	r0, 800aeb4 <__sfmoreglue+0x28>
 800aea2:	2100      	movs	r1, #0
 800aea4:	e9c0 1600 	strd	r1, r6, [r0]
 800aea8:	300c      	adds	r0, #12
 800aeaa:	60a0      	str	r0, [r4, #8]
 800aeac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeb0:	f7fd fb24 	bl	80084fc <memset>
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}

0800aeb8 <__sfp_lock_acquire>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__sfp_lock_acquire+0x8>)
 800aeba:	f000 bc26 	b.w	800b70a <__retarget_lock_acquire_recursive>
 800aebe:	bf00      	nop
 800aec0:	2000094c 	.word	0x2000094c

0800aec4 <__sfp_lock_release>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__sfp_lock_release+0x8>)
 800aec6:	f000 bc21 	b.w	800b70c <__retarget_lock_release_recursive>
 800aeca:	bf00      	nop
 800aecc:	2000094c 	.word	0x2000094c

0800aed0 <__sinit_lock_acquire>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__sinit_lock_acquire+0x8>)
 800aed2:	f000 bc1a 	b.w	800b70a <__retarget_lock_acquire_recursive>
 800aed6:	bf00      	nop
 800aed8:	20000947 	.word	0x20000947

0800aedc <__sinit_lock_release>:
 800aedc:	4801      	ldr	r0, [pc, #4]	; (800aee4 <__sinit_lock_release+0x8>)
 800aede:	f000 bc15 	b.w	800b70c <__retarget_lock_release_recursive>
 800aee2:	bf00      	nop
 800aee4:	20000947 	.word	0x20000947

0800aee8 <__sinit>:
 800aee8:	b510      	push	{r4, lr}
 800aeea:	4604      	mov	r4, r0
 800aeec:	f7ff fff0 	bl	800aed0 <__sinit_lock_acquire>
 800aef0:	69a3      	ldr	r3, [r4, #24]
 800aef2:	b11b      	cbz	r3, 800aefc <__sinit+0x14>
 800aef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef8:	f7ff bff0 	b.w	800aedc <__sinit_lock_release>
 800aefc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af00:	6523      	str	r3, [r4, #80]	; 0x50
 800af02:	4b13      	ldr	r3, [pc, #76]	; (800af50 <__sinit+0x68>)
 800af04:	4a13      	ldr	r2, [pc, #76]	; (800af54 <__sinit+0x6c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	62a2      	str	r2, [r4, #40]	; 0x28
 800af0a:	42a3      	cmp	r3, r4
 800af0c:	bf04      	itt	eq
 800af0e:	2301      	moveq	r3, #1
 800af10:	61a3      	streq	r3, [r4, #24]
 800af12:	4620      	mov	r0, r4
 800af14:	f000 f820 	bl	800af58 <__sfp>
 800af18:	6060      	str	r0, [r4, #4]
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 f81c 	bl	800af58 <__sfp>
 800af20:	60a0      	str	r0, [r4, #8]
 800af22:	4620      	mov	r0, r4
 800af24:	f000 f818 	bl	800af58 <__sfp>
 800af28:	2200      	movs	r2, #0
 800af2a:	60e0      	str	r0, [r4, #12]
 800af2c:	2104      	movs	r1, #4
 800af2e:	6860      	ldr	r0, [r4, #4]
 800af30:	f7ff ff82 	bl	800ae38 <std>
 800af34:	68a0      	ldr	r0, [r4, #8]
 800af36:	2201      	movs	r2, #1
 800af38:	2109      	movs	r1, #9
 800af3a:	f7ff ff7d 	bl	800ae38 <std>
 800af3e:	68e0      	ldr	r0, [r4, #12]
 800af40:	2202      	movs	r2, #2
 800af42:	2112      	movs	r1, #18
 800af44:	f7ff ff78 	bl	800ae38 <std>
 800af48:	2301      	movs	r3, #1
 800af4a:	61a3      	str	r3, [r4, #24]
 800af4c:	e7d2      	b.n	800aef4 <__sinit+0xc>
 800af4e:	bf00      	nop
 800af50:	0800d6b8 	.word	0x0800d6b8
 800af54:	0800ae81 	.word	0x0800ae81

0800af58 <__sfp>:
 800af58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5a:	4607      	mov	r7, r0
 800af5c:	f7ff ffac 	bl	800aeb8 <__sfp_lock_acquire>
 800af60:	4b1e      	ldr	r3, [pc, #120]	; (800afdc <__sfp+0x84>)
 800af62:	681e      	ldr	r6, [r3, #0]
 800af64:	69b3      	ldr	r3, [r6, #24]
 800af66:	b913      	cbnz	r3, 800af6e <__sfp+0x16>
 800af68:	4630      	mov	r0, r6
 800af6a:	f7ff ffbd 	bl	800aee8 <__sinit>
 800af6e:	3648      	adds	r6, #72	; 0x48
 800af70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af74:	3b01      	subs	r3, #1
 800af76:	d503      	bpl.n	800af80 <__sfp+0x28>
 800af78:	6833      	ldr	r3, [r6, #0]
 800af7a:	b30b      	cbz	r3, 800afc0 <__sfp+0x68>
 800af7c:	6836      	ldr	r6, [r6, #0]
 800af7e:	e7f7      	b.n	800af70 <__sfp+0x18>
 800af80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af84:	b9d5      	cbnz	r5, 800afbc <__sfp+0x64>
 800af86:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <__sfp+0x88>)
 800af88:	60e3      	str	r3, [r4, #12]
 800af8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af8e:	6665      	str	r5, [r4, #100]	; 0x64
 800af90:	f000 fbba 	bl	800b708 <__retarget_lock_init_recursive>
 800af94:	f7ff ff96 	bl	800aec4 <__sfp_lock_release>
 800af98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afa0:	6025      	str	r5, [r4, #0]
 800afa2:	61a5      	str	r5, [r4, #24]
 800afa4:	2208      	movs	r2, #8
 800afa6:	4629      	mov	r1, r5
 800afa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afac:	f7fd faa6 	bl	80084fc <memset>
 800afb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afb8:	4620      	mov	r0, r4
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbc:	3468      	adds	r4, #104	; 0x68
 800afbe:	e7d9      	b.n	800af74 <__sfp+0x1c>
 800afc0:	2104      	movs	r1, #4
 800afc2:	4638      	mov	r0, r7
 800afc4:	f7ff ff62 	bl	800ae8c <__sfmoreglue>
 800afc8:	4604      	mov	r4, r0
 800afca:	6030      	str	r0, [r6, #0]
 800afcc:	2800      	cmp	r0, #0
 800afce:	d1d5      	bne.n	800af7c <__sfp+0x24>
 800afd0:	f7ff ff78 	bl	800aec4 <__sfp_lock_release>
 800afd4:	230c      	movs	r3, #12
 800afd6:	603b      	str	r3, [r7, #0]
 800afd8:	e7ee      	b.n	800afb8 <__sfp+0x60>
 800afda:	bf00      	nop
 800afdc:	0800d6b8 	.word	0x0800d6b8
 800afe0:	ffff0001 	.word	0xffff0001

0800afe4 <_fwalk_reent>:
 800afe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe8:	4606      	mov	r6, r0
 800afea:	4688      	mov	r8, r1
 800afec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aff0:	2700      	movs	r7, #0
 800aff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aff6:	f1b9 0901 	subs.w	r9, r9, #1
 800affa:	d505      	bpl.n	800b008 <_fwalk_reent+0x24>
 800affc:	6824      	ldr	r4, [r4, #0]
 800affe:	2c00      	cmp	r4, #0
 800b000:	d1f7      	bne.n	800aff2 <_fwalk_reent+0xe>
 800b002:	4638      	mov	r0, r7
 800b004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b008:	89ab      	ldrh	r3, [r5, #12]
 800b00a:	2b01      	cmp	r3, #1
 800b00c:	d907      	bls.n	800b01e <_fwalk_reent+0x3a>
 800b00e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b012:	3301      	adds	r3, #1
 800b014:	d003      	beq.n	800b01e <_fwalk_reent+0x3a>
 800b016:	4629      	mov	r1, r5
 800b018:	4630      	mov	r0, r6
 800b01a:	47c0      	blx	r8
 800b01c:	4307      	orrs	r7, r0
 800b01e:	3568      	adds	r5, #104	; 0x68
 800b020:	e7e9      	b.n	800aff6 <_fwalk_reent+0x12>

0800b022 <rshift>:
 800b022:	6903      	ldr	r3, [r0, #16]
 800b024:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b02c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b030:	f100 0414 	add.w	r4, r0, #20
 800b034:	dd45      	ble.n	800b0c2 <rshift+0xa0>
 800b036:	f011 011f 	ands.w	r1, r1, #31
 800b03a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b03e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b042:	d10c      	bne.n	800b05e <rshift+0x3c>
 800b044:	f100 0710 	add.w	r7, r0, #16
 800b048:	4629      	mov	r1, r5
 800b04a:	42b1      	cmp	r1, r6
 800b04c:	d334      	bcc.n	800b0b8 <rshift+0x96>
 800b04e:	1a9b      	subs	r3, r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	1eea      	subs	r2, r5, #3
 800b054:	4296      	cmp	r6, r2
 800b056:	bf38      	it	cc
 800b058:	2300      	movcc	r3, #0
 800b05a:	4423      	add	r3, r4
 800b05c:	e015      	b.n	800b08a <rshift+0x68>
 800b05e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b062:	f1c1 0820 	rsb	r8, r1, #32
 800b066:	40cf      	lsrs	r7, r1
 800b068:	f105 0e04 	add.w	lr, r5, #4
 800b06c:	46a1      	mov	r9, r4
 800b06e:	4576      	cmp	r6, lr
 800b070:	46f4      	mov	ip, lr
 800b072:	d815      	bhi.n	800b0a0 <rshift+0x7e>
 800b074:	1a9b      	subs	r3, r3, r2
 800b076:	009a      	lsls	r2, r3, #2
 800b078:	3a04      	subs	r2, #4
 800b07a:	3501      	adds	r5, #1
 800b07c:	42ae      	cmp	r6, r5
 800b07e:	bf38      	it	cc
 800b080:	2200      	movcc	r2, #0
 800b082:	18a3      	adds	r3, r4, r2
 800b084:	50a7      	str	r7, [r4, r2]
 800b086:	b107      	cbz	r7, 800b08a <rshift+0x68>
 800b088:	3304      	adds	r3, #4
 800b08a:	1b1a      	subs	r2, r3, r4
 800b08c:	42a3      	cmp	r3, r4
 800b08e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b092:	bf08      	it	eq
 800b094:	2300      	moveq	r3, #0
 800b096:	6102      	str	r2, [r0, #16]
 800b098:	bf08      	it	eq
 800b09a:	6143      	streq	r3, [r0, #20]
 800b09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0a0:	f8dc c000 	ldr.w	ip, [ip]
 800b0a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0a8:	ea4c 0707 	orr.w	r7, ip, r7
 800b0ac:	f849 7b04 	str.w	r7, [r9], #4
 800b0b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0b4:	40cf      	lsrs	r7, r1
 800b0b6:	e7da      	b.n	800b06e <rshift+0x4c>
 800b0b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0c0:	e7c3      	b.n	800b04a <rshift+0x28>
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	e7e1      	b.n	800b08a <rshift+0x68>

0800b0c6 <__hexdig_fun>:
 800b0c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b0ca:	2b09      	cmp	r3, #9
 800b0cc:	d802      	bhi.n	800b0d4 <__hexdig_fun+0xe>
 800b0ce:	3820      	subs	r0, #32
 800b0d0:	b2c0      	uxtb	r0, r0
 800b0d2:	4770      	bx	lr
 800b0d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b0d8:	2b05      	cmp	r3, #5
 800b0da:	d801      	bhi.n	800b0e0 <__hexdig_fun+0x1a>
 800b0dc:	3847      	subs	r0, #71	; 0x47
 800b0de:	e7f7      	b.n	800b0d0 <__hexdig_fun+0xa>
 800b0e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b0e4:	2b05      	cmp	r3, #5
 800b0e6:	d801      	bhi.n	800b0ec <__hexdig_fun+0x26>
 800b0e8:	3827      	subs	r0, #39	; 0x27
 800b0ea:	e7f1      	b.n	800b0d0 <__hexdig_fun+0xa>
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	4770      	bx	lr

0800b0f0 <__gethex>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	ed2d 8b02 	vpush	{d8}
 800b0f8:	b089      	sub	sp, #36	; 0x24
 800b0fa:	ee08 0a10 	vmov	s16, r0
 800b0fe:	9304      	str	r3, [sp, #16]
 800b100:	4bbc      	ldr	r3, [pc, #752]	; (800b3f4 <__gethex+0x304>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	4618      	mov	r0, r3
 800b108:	468b      	mov	fp, r1
 800b10a:	4690      	mov	r8, r2
 800b10c:	f7f5 f880 	bl	8000210 <strlen>
 800b110:	9b01      	ldr	r3, [sp, #4]
 800b112:	f8db 2000 	ldr.w	r2, [fp]
 800b116:	4403      	add	r3, r0
 800b118:	4682      	mov	sl, r0
 800b11a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b11e:	9305      	str	r3, [sp, #20]
 800b120:	1c93      	adds	r3, r2, #2
 800b122:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b126:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b12a:	32fe      	adds	r2, #254	; 0xfe
 800b12c:	18d1      	adds	r1, r2, r3
 800b12e:	461f      	mov	r7, r3
 800b130:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b134:	9100      	str	r1, [sp, #0]
 800b136:	2830      	cmp	r0, #48	; 0x30
 800b138:	d0f8      	beq.n	800b12c <__gethex+0x3c>
 800b13a:	f7ff ffc4 	bl	800b0c6 <__hexdig_fun>
 800b13e:	4604      	mov	r4, r0
 800b140:	2800      	cmp	r0, #0
 800b142:	d13a      	bne.n	800b1ba <__gethex+0xca>
 800b144:	9901      	ldr	r1, [sp, #4]
 800b146:	4652      	mov	r2, sl
 800b148:	4638      	mov	r0, r7
 800b14a:	f001 fec7 	bl	800cedc <strncmp>
 800b14e:	4605      	mov	r5, r0
 800b150:	2800      	cmp	r0, #0
 800b152:	d168      	bne.n	800b226 <__gethex+0x136>
 800b154:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b158:	eb07 060a 	add.w	r6, r7, sl
 800b15c:	f7ff ffb3 	bl	800b0c6 <__hexdig_fun>
 800b160:	2800      	cmp	r0, #0
 800b162:	d062      	beq.n	800b22a <__gethex+0x13a>
 800b164:	4633      	mov	r3, r6
 800b166:	7818      	ldrb	r0, [r3, #0]
 800b168:	2830      	cmp	r0, #48	; 0x30
 800b16a:	461f      	mov	r7, r3
 800b16c:	f103 0301 	add.w	r3, r3, #1
 800b170:	d0f9      	beq.n	800b166 <__gethex+0x76>
 800b172:	f7ff ffa8 	bl	800b0c6 <__hexdig_fun>
 800b176:	2301      	movs	r3, #1
 800b178:	fab0 f480 	clz	r4, r0
 800b17c:	0964      	lsrs	r4, r4, #5
 800b17e:	4635      	mov	r5, r6
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	463a      	mov	r2, r7
 800b184:	4616      	mov	r6, r2
 800b186:	3201      	adds	r2, #1
 800b188:	7830      	ldrb	r0, [r6, #0]
 800b18a:	f7ff ff9c 	bl	800b0c6 <__hexdig_fun>
 800b18e:	2800      	cmp	r0, #0
 800b190:	d1f8      	bne.n	800b184 <__gethex+0x94>
 800b192:	9901      	ldr	r1, [sp, #4]
 800b194:	4652      	mov	r2, sl
 800b196:	4630      	mov	r0, r6
 800b198:	f001 fea0 	bl	800cedc <strncmp>
 800b19c:	b980      	cbnz	r0, 800b1c0 <__gethex+0xd0>
 800b19e:	b94d      	cbnz	r5, 800b1b4 <__gethex+0xc4>
 800b1a0:	eb06 050a 	add.w	r5, r6, sl
 800b1a4:	462a      	mov	r2, r5
 800b1a6:	4616      	mov	r6, r2
 800b1a8:	3201      	adds	r2, #1
 800b1aa:	7830      	ldrb	r0, [r6, #0]
 800b1ac:	f7ff ff8b 	bl	800b0c6 <__hexdig_fun>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d1f8      	bne.n	800b1a6 <__gethex+0xb6>
 800b1b4:	1bad      	subs	r5, r5, r6
 800b1b6:	00ad      	lsls	r5, r5, #2
 800b1b8:	e004      	b.n	800b1c4 <__gethex+0xd4>
 800b1ba:	2400      	movs	r4, #0
 800b1bc:	4625      	mov	r5, r4
 800b1be:	e7e0      	b.n	800b182 <__gethex+0x92>
 800b1c0:	2d00      	cmp	r5, #0
 800b1c2:	d1f7      	bne.n	800b1b4 <__gethex+0xc4>
 800b1c4:	7833      	ldrb	r3, [r6, #0]
 800b1c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1ca:	2b50      	cmp	r3, #80	; 0x50
 800b1cc:	d13b      	bne.n	800b246 <__gethex+0x156>
 800b1ce:	7873      	ldrb	r3, [r6, #1]
 800b1d0:	2b2b      	cmp	r3, #43	; 0x2b
 800b1d2:	d02c      	beq.n	800b22e <__gethex+0x13e>
 800b1d4:	2b2d      	cmp	r3, #45	; 0x2d
 800b1d6:	d02e      	beq.n	800b236 <__gethex+0x146>
 800b1d8:	1c71      	adds	r1, r6, #1
 800b1da:	f04f 0900 	mov.w	r9, #0
 800b1de:	7808      	ldrb	r0, [r1, #0]
 800b1e0:	f7ff ff71 	bl	800b0c6 <__hexdig_fun>
 800b1e4:	1e43      	subs	r3, r0, #1
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	2b18      	cmp	r3, #24
 800b1ea:	d82c      	bhi.n	800b246 <__gethex+0x156>
 800b1ec:	f1a0 0210 	sub.w	r2, r0, #16
 800b1f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1f4:	f7ff ff67 	bl	800b0c6 <__hexdig_fun>
 800b1f8:	1e43      	subs	r3, r0, #1
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	2b18      	cmp	r3, #24
 800b1fe:	d91d      	bls.n	800b23c <__gethex+0x14c>
 800b200:	f1b9 0f00 	cmp.w	r9, #0
 800b204:	d000      	beq.n	800b208 <__gethex+0x118>
 800b206:	4252      	negs	r2, r2
 800b208:	4415      	add	r5, r2
 800b20a:	f8cb 1000 	str.w	r1, [fp]
 800b20e:	b1e4      	cbz	r4, 800b24a <__gethex+0x15a>
 800b210:	9b00      	ldr	r3, [sp, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	bf14      	ite	ne
 800b216:	2700      	movne	r7, #0
 800b218:	2706      	moveq	r7, #6
 800b21a:	4638      	mov	r0, r7
 800b21c:	b009      	add	sp, #36	; 0x24
 800b21e:	ecbd 8b02 	vpop	{d8}
 800b222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b226:	463e      	mov	r6, r7
 800b228:	4625      	mov	r5, r4
 800b22a:	2401      	movs	r4, #1
 800b22c:	e7ca      	b.n	800b1c4 <__gethex+0xd4>
 800b22e:	f04f 0900 	mov.w	r9, #0
 800b232:	1cb1      	adds	r1, r6, #2
 800b234:	e7d3      	b.n	800b1de <__gethex+0xee>
 800b236:	f04f 0901 	mov.w	r9, #1
 800b23a:	e7fa      	b.n	800b232 <__gethex+0x142>
 800b23c:	230a      	movs	r3, #10
 800b23e:	fb03 0202 	mla	r2, r3, r2, r0
 800b242:	3a10      	subs	r2, #16
 800b244:	e7d4      	b.n	800b1f0 <__gethex+0x100>
 800b246:	4631      	mov	r1, r6
 800b248:	e7df      	b.n	800b20a <__gethex+0x11a>
 800b24a:	1bf3      	subs	r3, r6, r7
 800b24c:	3b01      	subs	r3, #1
 800b24e:	4621      	mov	r1, r4
 800b250:	2b07      	cmp	r3, #7
 800b252:	dc0b      	bgt.n	800b26c <__gethex+0x17c>
 800b254:	ee18 0a10 	vmov	r0, s16
 800b258:	f000 fa94 	bl	800b784 <_Balloc>
 800b25c:	4604      	mov	r4, r0
 800b25e:	b940      	cbnz	r0, 800b272 <__gethex+0x182>
 800b260:	4b65      	ldr	r3, [pc, #404]	; (800b3f8 <__gethex+0x308>)
 800b262:	4602      	mov	r2, r0
 800b264:	21de      	movs	r1, #222	; 0xde
 800b266:	4865      	ldr	r0, [pc, #404]	; (800b3fc <__gethex+0x30c>)
 800b268:	f001 ffd0 	bl	800d20c <__assert_func>
 800b26c:	3101      	adds	r1, #1
 800b26e:	105b      	asrs	r3, r3, #1
 800b270:	e7ee      	b.n	800b250 <__gethex+0x160>
 800b272:	f100 0914 	add.w	r9, r0, #20
 800b276:	f04f 0b00 	mov.w	fp, #0
 800b27a:	f1ca 0301 	rsb	r3, sl, #1
 800b27e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b282:	f8cd b000 	str.w	fp, [sp]
 800b286:	9306      	str	r3, [sp, #24]
 800b288:	42b7      	cmp	r7, r6
 800b28a:	d340      	bcc.n	800b30e <__gethex+0x21e>
 800b28c:	9802      	ldr	r0, [sp, #8]
 800b28e:	9b00      	ldr	r3, [sp, #0]
 800b290:	f840 3b04 	str.w	r3, [r0], #4
 800b294:	eba0 0009 	sub.w	r0, r0, r9
 800b298:	1080      	asrs	r0, r0, #2
 800b29a:	0146      	lsls	r6, r0, #5
 800b29c:	6120      	str	r0, [r4, #16]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fb66 	bl	800b970 <__hi0bits>
 800b2a4:	1a30      	subs	r0, r6, r0
 800b2a6:	f8d8 6000 	ldr.w	r6, [r8]
 800b2aa:	42b0      	cmp	r0, r6
 800b2ac:	dd63      	ble.n	800b376 <__gethex+0x286>
 800b2ae:	1b87      	subs	r7, r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 ff00 	bl	800c0b8 <__any_on>
 800b2b8:	4682      	mov	sl, r0
 800b2ba:	b1a8      	cbz	r0, 800b2e8 <__gethex+0x1f8>
 800b2bc:	1e7b      	subs	r3, r7, #1
 800b2be:	1159      	asrs	r1, r3, #5
 800b2c0:	f003 021f 	and.w	r2, r3, #31
 800b2c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b2c8:	f04f 0a01 	mov.w	sl, #1
 800b2cc:	fa0a f202 	lsl.w	r2, sl, r2
 800b2d0:	420a      	tst	r2, r1
 800b2d2:	d009      	beq.n	800b2e8 <__gethex+0x1f8>
 800b2d4:	4553      	cmp	r3, sl
 800b2d6:	dd05      	ble.n	800b2e4 <__gethex+0x1f4>
 800b2d8:	1eb9      	subs	r1, r7, #2
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 feec 	bl	800c0b8 <__any_on>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d145      	bne.n	800b370 <__gethex+0x280>
 800b2e4:	f04f 0a02 	mov.w	sl, #2
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f7ff fe99 	bl	800b022 <rshift>
 800b2f0:	443d      	add	r5, r7
 800b2f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2f6:	42ab      	cmp	r3, r5
 800b2f8:	da4c      	bge.n	800b394 <__gethex+0x2a4>
 800b2fa:	ee18 0a10 	vmov	r0, s16
 800b2fe:	4621      	mov	r1, r4
 800b300:	f000 fa80 	bl	800b804 <_Bfree>
 800b304:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b306:	2300      	movs	r3, #0
 800b308:	6013      	str	r3, [r2, #0]
 800b30a:	27a3      	movs	r7, #163	; 0xa3
 800b30c:	e785      	b.n	800b21a <__gethex+0x12a>
 800b30e:	1e73      	subs	r3, r6, #1
 800b310:	9a05      	ldr	r2, [sp, #20]
 800b312:	9303      	str	r3, [sp, #12]
 800b314:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b318:	4293      	cmp	r3, r2
 800b31a:	d019      	beq.n	800b350 <__gethex+0x260>
 800b31c:	f1bb 0f20 	cmp.w	fp, #32
 800b320:	d107      	bne.n	800b332 <__gethex+0x242>
 800b322:	9b02      	ldr	r3, [sp, #8]
 800b324:	9a00      	ldr	r2, [sp, #0]
 800b326:	f843 2b04 	str.w	r2, [r3], #4
 800b32a:	9302      	str	r3, [sp, #8]
 800b32c:	2300      	movs	r3, #0
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	469b      	mov	fp, r3
 800b332:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b336:	f7ff fec6 	bl	800b0c6 <__hexdig_fun>
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	f000 000f 	and.w	r0, r0, #15
 800b340:	fa00 f00b 	lsl.w	r0, r0, fp
 800b344:	4303      	orrs	r3, r0
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	f10b 0b04 	add.w	fp, fp, #4
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	e00d      	b.n	800b36c <__gethex+0x27c>
 800b350:	9b03      	ldr	r3, [sp, #12]
 800b352:	9a06      	ldr	r2, [sp, #24]
 800b354:	4413      	add	r3, r2
 800b356:	42bb      	cmp	r3, r7
 800b358:	d3e0      	bcc.n	800b31c <__gethex+0x22c>
 800b35a:	4618      	mov	r0, r3
 800b35c:	9901      	ldr	r1, [sp, #4]
 800b35e:	9307      	str	r3, [sp, #28]
 800b360:	4652      	mov	r2, sl
 800b362:	f001 fdbb 	bl	800cedc <strncmp>
 800b366:	9b07      	ldr	r3, [sp, #28]
 800b368:	2800      	cmp	r0, #0
 800b36a:	d1d7      	bne.n	800b31c <__gethex+0x22c>
 800b36c:	461e      	mov	r6, r3
 800b36e:	e78b      	b.n	800b288 <__gethex+0x198>
 800b370:	f04f 0a03 	mov.w	sl, #3
 800b374:	e7b8      	b.n	800b2e8 <__gethex+0x1f8>
 800b376:	da0a      	bge.n	800b38e <__gethex+0x29e>
 800b378:	1a37      	subs	r7, r6, r0
 800b37a:	4621      	mov	r1, r4
 800b37c:	ee18 0a10 	vmov	r0, s16
 800b380:	463a      	mov	r2, r7
 800b382:	f000 fc5b 	bl	800bc3c <__lshift>
 800b386:	1bed      	subs	r5, r5, r7
 800b388:	4604      	mov	r4, r0
 800b38a:	f100 0914 	add.w	r9, r0, #20
 800b38e:	f04f 0a00 	mov.w	sl, #0
 800b392:	e7ae      	b.n	800b2f2 <__gethex+0x202>
 800b394:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b398:	42a8      	cmp	r0, r5
 800b39a:	dd72      	ble.n	800b482 <__gethex+0x392>
 800b39c:	1b45      	subs	r5, r0, r5
 800b39e:	42ae      	cmp	r6, r5
 800b3a0:	dc36      	bgt.n	800b410 <__gethex+0x320>
 800b3a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d02a      	beq.n	800b400 <__gethex+0x310>
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d02c      	beq.n	800b408 <__gethex+0x318>
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d115      	bne.n	800b3de <__gethex+0x2ee>
 800b3b2:	42ae      	cmp	r6, r5
 800b3b4:	d113      	bne.n	800b3de <__gethex+0x2ee>
 800b3b6:	2e01      	cmp	r6, #1
 800b3b8:	d10b      	bne.n	800b3d2 <__gethex+0x2e2>
 800b3ba:	9a04      	ldr	r2, [sp, #16]
 800b3bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	6123      	str	r3, [r4, #16]
 800b3c6:	f8c9 3000 	str.w	r3, [r9]
 800b3ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b3cc:	2762      	movs	r7, #98	; 0x62
 800b3ce:	601c      	str	r4, [r3, #0]
 800b3d0:	e723      	b.n	800b21a <__gethex+0x12a>
 800b3d2:	1e71      	subs	r1, r6, #1
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fe6f 	bl	800c0b8 <__any_on>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d1ed      	bne.n	800b3ba <__gethex+0x2ca>
 800b3de:	ee18 0a10 	vmov	r0, s16
 800b3e2:	4621      	mov	r1, r4
 800b3e4:	f000 fa0e 	bl	800b804 <_Bfree>
 800b3e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	2750      	movs	r7, #80	; 0x50
 800b3f0:	e713      	b.n	800b21a <__gethex+0x12a>
 800b3f2:	bf00      	nop
 800b3f4:	0800d9ac 	.word	0x0800d9ac
 800b3f8:	0800d8cc 	.word	0x0800d8cc
 800b3fc:	0800d940 	.word	0x0800d940
 800b400:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1eb      	bne.n	800b3de <__gethex+0x2ee>
 800b406:	e7d8      	b.n	800b3ba <__gethex+0x2ca>
 800b408:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1d5      	bne.n	800b3ba <__gethex+0x2ca>
 800b40e:	e7e6      	b.n	800b3de <__gethex+0x2ee>
 800b410:	1e6f      	subs	r7, r5, #1
 800b412:	f1ba 0f00 	cmp.w	sl, #0
 800b416:	d131      	bne.n	800b47c <__gethex+0x38c>
 800b418:	b127      	cbz	r7, 800b424 <__gethex+0x334>
 800b41a:	4639      	mov	r1, r7
 800b41c:	4620      	mov	r0, r4
 800b41e:	f000 fe4b 	bl	800c0b8 <__any_on>
 800b422:	4682      	mov	sl, r0
 800b424:	117b      	asrs	r3, r7, #5
 800b426:	2101      	movs	r1, #1
 800b428:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b42c:	f007 071f 	and.w	r7, r7, #31
 800b430:	fa01 f707 	lsl.w	r7, r1, r7
 800b434:	421f      	tst	r7, r3
 800b436:	4629      	mov	r1, r5
 800b438:	4620      	mov	r0, r4
 800b43a:	bf18      	it	ne
 800b43c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b440:	1b76      	subs	r6, r6, r5
 800b442:	f7ff fdee 	bl	800b022 <rshift>
 800b446:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b44a:	2702      	movs	r7, #2
 800b44c:	f1ba 0f00 	cmp.w	sl, #0
 800b450:	d048      	beq.n	800b4e4 <__gethex+0x3f4>
 800b452:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d015      	beq.n	800b486 <__gethex+0x396>
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d017      	beq.n	800b48e <__gethex+0x39e>
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d109      	bne.n	800b476 <__gethex+0x386>
 800b462:	f01a 0f02 	tst.w	sl, #2
 800b466:	d006      	beq.n	800b476 <__gethex+0x386>
 800b468:	f8d9 0000 	ldr.w	r0, [r9]
 800b46c:	ea4a 0a00 	orr.w	sl, sl, r0
 800b470:	f01a 0f01 	tst.w	sl, #1
 800b474:	d10e      	bne.n	800b494 <__gethex+0x3a4>
 800b476:	f047 0710 	orr.w	r7, r7, #16
 800b47a:	e033      	b.n	800b4e4 <__gethex+0x3f4>
 800b47c:	f04f 0a01 	mov.w	sl, #1
 800b480:	e7d0      	b.n	800b424 <__gethex+0x334>
 800b482:	2701      	movs	r7, #1
 800b484:	e7e2      	b.n	800b44c <__gethex+0x35c>
 800b486:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b488:	f1c3 0301 	rsb	r3, r3, #1
 800b48c:	9315      	str	r3, [sp, #84]	; 0x54
 800b48e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0f0      	beq.n	800b476 <__gethex+0x386>
 800b494:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b498:	f104 0314 	add.w	r3, r4, #20
 800b49c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b4a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b4a4:	f04f 0c00 	mov.w	ip, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ae:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b4b2:	d01c      	beq.n	800b4ee <__gethex+0x3fe>
 800b4b4:	3201      	adds	r2, #1
 800b4b6:	6002      	str	r2, [r0, #0]
 800b4b8:	2f02      	cmp	r7, #2
 800b4ba:	f104 0314 	add.w	r3, r4, #20
 800b4be:	d13f      	bne.n	800b540 <__gethex+0x450>
 800b4c0:	f8d8 2000 	ldr.w	r2, [r8]
 800b4c4:	3a01      	subs	r2, #1
 800b4c6:	42b2      	cmp	r2, r6
 800b4c8:	d10a      	bne.n	800b4e0 <__gethex+0x3f0>
 800b4ca:	1171      	asrs	r1, r6, #5
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4d2:	f006 061f 	and.w	r6, r6, #31
 800b4d6:	fa02 f606 	lsl.w	r6, r2, r6
 800b4da:	421e      	tst	r6, r3
 800b4dc:	bf18      	it	ne
 800b4de:	4617      	movne	r7, r2
 800b4e0:	f047 0720 	orr.w	r7, r7, #32
 800b4e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4e6:	601c      	str	r4, [r3, #0]
 800b4e8:	9b04      	ldr	r3, [sp, #16]
 800b4ea:	601d      	str	r5, [r3, #0]
 800b4ec:	e695      	b.n	800b21a <__gethex+0x12a>
 800b4ee:	4299      	cmp	r1, r3
 800b4f0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4f4:	d8d8      	bhi.n	800b4a8 <__gethex+0x3b8>
 800b4f6:	68a3      	ldr	r3, [r4, #8]
 800b4f8:	459b      	cmp	fp, r3
 800b4fa:	db19      	blt.n	800b530 <__gethex+0x440>
 800b4fc:	6861      	ldr	r1, [r4, #4]
 800b4fe:	ee18 0a10 	vmov	r0, s16
 800b502:	3101      	adds	r1, #1
 800b504:	f000 f93e 	bl	800b784 <_Balloc>
 800b508:	4681      	mov	r9, r0
 800b50a:	b918      	cbnz	r0, 800b514 <__gethex+0x424>
 800b50c:	4b1a      	ldr	r3, [pc, #104]	; (800b578 <__gethex+0x488>)
 800b50e:	4602      	mov	r2, r0
 800b510:	2184      	movs	r1, #132	; 0x84
 800b512:	e6a8      	b.n	800b266 <__gethex+0x176>
 800b514:	6922      	ldr	r2, [r4, #16]
 800b516:	3202      	adds	r2, #2
 800b518:	f104 010c 	add.w	r1, r4, #12
 800b51c:	0092      	lsls	r2, r2, #2
 800b51e:	300c      	adds	r0, #12
 800b520:	f000 f922 	bl	800b768 <memcpy>
 800b524:	4621      	mov	r1, r4
 800b526:	ee18 0a10 	vmov	r0, s16
 800b52a:	f000 f96b 	bl	800b804 <_Bfree>
 800b52e:	464c      	mov	r4, r9
 800b530:	6923      	ldr	r3, [r4, #16]
 800b532:	1c5a      	adds	r2, r3, #1
 800b534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b538:	6122      	str	r2, [r4, #16]
 800b53a:	2201      	movs	r2, #1
 800b53c:	615a      	str	r2, [r3, #20]
 800b53e:	e7bb      	b.n	800b4b8 <__gethex+0x3c8>
 800b540:	6922      	ldr	r2, [r4, #16]
 800b542:	455a      	cmp	r2, fp
 800b544:	dd0b      	ble.n	800b55e <__gethex+0x46e>
 800b546:	2101      	movs	r1, #1
 800b548:	4620      	mov	r0, r4
 800b54a:	f7ff fd6a 	bl	800b022 <rshift>
 800b54e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b552:	3501      	adds	r5, #1
 800b554:	42ab      	cmp	r3, r5
 800b556:	f6ff aed0 	blt.w	800b2fa <__gethex+0x20a>
 800b55a:	2701      	movs	r7, #1
 800b55c:	e7c0      	b.n	800b4e0 <__gethex+0x3f0>
 800b55e:	f016 061f 	ands.w	r6, r6, #31
 800b562:	d0fa      	beq.n	800b55a <__gethex+0x46a>
 800b564:	449a      	add	sl, r3
 800b566:	f1c6 0620 	rsb	r6, r6, #32
 800b56a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b56e:	f000 f9ff 	bl	800b970 <__hi0bits>
 800b572:	42b0      	cmp	r0, r6
 800b574:	dbe7      	blt.n	800b546 <__gethex+0x456>
 800b576:	e7f0      	b.n	800b55a <__gethex+0x46a>
 800b578:	0800d8cc 	.word	0x0800d8cc

0800b57c <L_shift>:
 800b57c:	f1c2 0208 	rsb	r2, r2, #8
 800b580:	0092      	lsls	r2, r2, #2
 800b582:	b570      	push	{r4, r5, r6, lr}
 800b584:	f1c2 0620 	rsb	r6, r2, #32
 800b588:	6843      	ldr	r3, [r0, #4]
 800b58a:	6804      	ldr	r4, [r0, #0]
 800b58c:	fa03 f506 	lsl.w	r5, r3, r6
 800b590:	432c      	orrs	r4, r5
 800b592:	40d3      	lsrs	r3, r2
 800b594:	6004      	str	r4, [r0, #0]
 800b596:	f840 3f04 	str.w	r3, [r0, #4]!
 800b59a:	4288      	cmp	r0, r1
 800b59c:	d3f4      	bcc.n	800b588 <L_shift+0xc>
 800b59e:	bd70      	pop	{r4, r5, r6, pc}

0800b5a0 <__match>:
 800b5a0:	b530      	push	{r4, r5, lr}
 800b5a2:	6803      	ldr	r3, [r0, #0]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5aa:	b914      	cbnz	r4, 800b5b2 <__match+0x12>
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	bd30      	pop	{r4, r5, pc}
 800b5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b5ba:	2d19      	cmp	r5, #25
 800b5bc:	bf98      	it	ls
 800b5be:	3220      	addls	r2, #32
 800b5c0:	42a2      	cmp	r2, r4
 800b5c2:	d0f0      	beq.n	800b5a6 <__match+0x6>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	e7f3      	b.n	800b5b0 <__match+0x10>

0800b5c8 <__hexnan>:
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	680b      	ldr	r3, [r1, #0]
 800b5ce:	6801      	ldr	r1, [r0, #0]
 800b5d0:	115e      	asrs	r6, r3, #5
 800b5d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b5d6:	f013 031f 	ands.w	r3, r3, #31
 800b5da:	b087      	sub	sp, #28
 800b5dc:	bf18      	it	ne
 800b5de:	3604      	addne	r6, #4
 800b5e0:	2500      	movs	r5, #0
 800b5e2:	1f37      	subs	r7, r6, #4
 800b5e4:	4682      	mov	sl, r0
 800b5e6:	4690      	mov	r8, r2
 800b5e8:	9301      	str	r3, [sp, #4]
 800b5ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5ee:	46b9      	mov	r9, r7
 800b5f0:	463c      	mov	r4, r7
 800b5f2:	9502      	str	r5, [sp, #8]
 800b5f4:	46ab      	mov	fp, r5
 800b5f6:	784a      	ldrb	r2, [r1, #1]
 800b5f8:	1c4b      	adds	r3, r1, #1
 800b5fa:	9303      	str	r3, [sp, #12]
 800b5fc:	b342      	cbz	r2, 800b650 <__hexnan+0x88>
 800b5fe:	4610      	mov	r0, r2
 800b600:	9105      	str	r1, [sp, #20]
 800b602:	9204      	str	r2, [sp, #16]
 800b604:	f7ff fd5f 	bl	800b0c6 <__hexdig_fun>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d14f      	bne.n	800b6ac <__hexnan+0xe4>
 800b60c:	9a04      	ldr	r2, [sp, #16]
 800b60e:	9905      	ldr	r1, [sp, #20]
 800b610:	2a20      	cmp	r2, #32
 800b612:	d818      	bhi.n	800b646 <__hexnan+0x7e>
 800b614:	9b02      	ldr	r3, [sp, #8]
 800b616:	459b      	cmp	fp, r3
 800b618:	dd13      	ble.n	800b642 <__hexnan+0x7a>
 800b61a:	454c      	cmp	r4, r9
 800b61c:	d206      	bcs.n	800b62c <__hexnan+0x64>
 800b61e:	2d07      	cmp	r5, #7
 800b620:	dc04      	bgt.n	800b62c <__hexnan+0x64>
 800b622:	462a      	mov	r2, r5
 800b624:	4649      	mov	r1, r9
 800b626:	4620      	mov	r0, r4
 800b628:	f7ff ffa8 	bl	800b57c <L_shift>
 800b62c:	4544      	cmp	r4, r8
 800b62e:	d950      	bls.n	800b6d2 <__hexnan+0x10a>
 800b630:	2300      	movs	r3, #0
 800b632:	f1a4 0904 	sub.w	r9, r4, #4
 800b636:	f844 3c04 	str.w	r3, [r4, #-4]
 800b63a:	f8cd b008 	str.w	fp, [sp, #8]
 800b63e:	464c      	mov	r4, r9
 800b640:	461d      	mov	r5, r3
 800b642:	9903      	ldr	r1, [sp, #12]
 800b644:	e7d7      	b.n	800b5f6 <__hexnan+0x2e>
 800b646:	2a29      	cmp	r2, #41	; 0x29
 800b648:	d156      	bne.n	800b6f8 <__hexnan+0x130>
 800b64a:	3102      	adds	r1, #2
 800b64c:	f8ca 1000 	str.w	r1, [sl]
 800b650:	f1bb 0f00 	cmp.w	fp, #0
 800b654:	d050      	beq.n	800b6f8 <__hexnan+0x130>
 800b656:	454c      	cmp	r4, r9
 800b658:	d206      	bcs.n	800b668 <__hexnan+0xa0>
 800b65a:	2d07      	cmp	r5, #7
 800b65c:	dc04      	bgt.n	800b668 <__hexnan+0xa0>
 800b65e:	462a      	mov	r2, r5
 800b660:	4649      	mov	r1, r9
 800b662:	4620      	mov	r0, r4
 800b664:	f7ff ff8a 	bl	800b57c <L_shift>
 800b668:	4544      	cmp	r4, r8
 800b66a:	d934      	bls.n	800b6d6 <__hexnan+0x10e>
 800b66c:	f1a8 0204 	sub.w	r2, r8, #4
 800b670:	4623      	mov	r3, r4
 800b672:	f853 1b04 	ldr.w	r1, [r3], #4
 800b676:	f842 1f04 	str.w	r1, [r2, #4]!
 800b67a:	429f      	cmp	r7, r3
 800b67c:	d2f9      	bcs.n	800b672 <__hexnan+0xaa>
 800b67e:	1b3b      	subs	r3, r7, r4
 800b680:	f023 0303 	bic.w	r3, r3, #3
 800b684:	3304      	adds	r3, #4
 800b686:	3401      	adds	r4, #1
 800b688:	3e03      	subs	r6, #3
 800b68a:	42b4      	cmp	r4, r6
 800b68c:	bf88      	it	hi
 800b68e:	2304      	movhi	r3, #4
 800b690:	4443      	add	r3, r8
 800b692:	2200      	movs	r2, #0
 800b694:	f843 2b04 	str.w	r2, [r3], #4
 800b698:	429f      	cmp	r7, r3
 800b69a:	d2fb      	bcs.n	800b694 <__hexnan+0xcc>
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	b91b      	cbnz	r3, 800b6a8 <__hexnan+0xe0>
 800b6a0:	4547      	cmp	r7, r8
 800b6a2:	d127      	bne.n	800b6f4 <__hexnan+0x12c>
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	603b      	str	r3, [r7, #0]
 800b6a8:	2005      	movs	r0, #5
 800b6aa:	e026      	b.n	800b6fa <__hexnan+0x132>
 800b6ac:	3501      	adds	r5, #1
 800b6ae:	2d08      	cmp	r5, #8
 800b6b0:	f10b 0b01 	add.w	fp, fp, #1
 800b6b4:	dd06      	ble.n	800b6c4 <__hexnan+0xfc>
 800b6b6:	4544      	cmp	r4, r8
 800b6b8:	d9c3      	bls.n	800b642 <__hexnan+0x7a>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6c0:	2501      	movs	r5, #1
 800b6c2:	3c04      	subs	r4, #4
 800b6c4:	6822      	ldr	r2, [r4, #0]
 800b6c6:	f000 000f 	and.w	r0, r0, #15
 800b6ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b6ce:	6022      	str	r2, [r4, #0]
 800b6d0:	e7b7      	b.n	800b642 <__hexnan+0x7a>
 800b6d2:	2508      	movs	r5, #8
 800b6d4:	e7b5      	b.n	800b642 <__hexnan+0x7a>
 800b6d6:	9b01      	ldr	r3, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d0df      	beq.n	800b69c <__hexnan+0xd4>
 800b6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e0:	f1c3 0320 	rsb	r3, r3, #32
 800b6e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b6ec:	401a      	ands	r2, r3
 800b6ee:	f846 2c04 	str.w	r2, [r6, #-4]
 800b6f2:	e7d3      	b.n	800b69c <__hexnan+0xd4>
 800b6f4:	3f04      	subs	r7, #4
 800b6f6:	e7d1      	b.n	800b69c <__hexnan+0xd4>
 800b6f8:	2004      	movs	r0, #4
 800b6fa:	b007      	add	sp, #28
 800b6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b700 <_localeconv_r>:
 800b700:	4800      	ldr	r0, [pc, #0]	; (800b704 <_localeconv_r+0x4>)
 800b702:	4770      	bx	lr
 800b704:	200001c4 	.word	0x200001c4

0800b708 <__retarget_lock_init_recursive>:
 800b708:	4770      	bx	lr

0800b70a <__retarget_lock_acquire_recursive>:
 800b70a:	4770      	bx	lr

0800b70c <__retarget_lock_release_recursive>:
 800b70c:	4770      	bx	lr
	...

0800b710 <_lseek_r>:
 800b710:	b538      	push	{r3, r4, r5, lr}
 800b712:	4d07      	ldr	r5, [pc, #28]	; (800b730 <_lseek_r+0x20>)
 800b714:	4604      	mov	r4, r0
 800b716:	4608      	mov	r0, r1
 800b718:	4611      	mov	r1, r2
 800b71a:	2200      	movs	r2, #0
 800b71c:	602a      	str	r2, [r5, #0]
 800b71e:	461a      	mov	r2, r3
 800b720:	f7f6 fe1c 	bl	800235c <_lseek>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_lseek_r+0x1e>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_lseek_r+0x1e>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	20000950 	.word	0x20000950

0800b734 <malloc>:
 800b734:	4b02      	ldr	r3, [pc, #8]	; (800b740 <malloc+0xc>)
 800b736:	4601      	mov	r1, r0
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f000 bd3d 	b.w	800c1b8 <_malloc_r>
 800b73e:	bf00      	nop
 800b740:	2000006c 	.word	0x2000006c

0800b744 <__ascii_mbtowc>:
 800b744:	b082      	sub	sp, #8
 800b746:	b901      	cbnz	r1, 800b74a <__ascii_mbtowc+0x6>
 800b748:	a901      	add	r1, sp, #4
 800b74a:	b142      	cbz	r2, 800b75e <__ascii_mbtowc+0x1a>
 800b74c:	b14b      	cbz	r3, 800b762 <__ascii_mbtowc+0x1e>
 800b74e:	7813      	ldrb	r3, [r2, #0]
 800b750:	600b      	str	r3, [r1, #0]
 800b752:	7812      	ldrb	r2, [r2, #0]
 800b754:	1e10      	subs	r0, r2, #0
 800b756:	bf18      	it	ne
 800b758:	2001      	movne	r0, #1
 800b75a:	b002      	add	sp, #8
 800b75c:	4770      	bx	lr
 800b75e:	4610      	mov	r0, r2
 800b760:	e7fb      	b.n	800b75a <__ascii_mbtowc+0x16>
 800b762:	f06f 0001 	mvn.w	r0, #1
 800b766:	e7f8      	b.n	800b75a <__ascii_mbtowc+0x16>

0800b768 <memcpy>:
 800b768:	440a      	add	r2, r1
 800b76a:	4291      	cmp	r1, r2
 800b76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b770:	d100      	bne.n	800b774 <memcpy+0xc>
 800b772:	4770      	bx	lr
 800b774:	b510      	push	{r4, lr}
 800b776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b77e:	4291      	cmp	r1, r2
 800b780:	d1f9      	bne.n	800b776 <memcpy+0xe>
 800b782:	bd10      	pop	{r4, pc}

0800b784 <_Balloc>:
 800b784:	b570      	push	{r4, r5, r6, lr}
 800b786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b788:	4604      	mov	r4, r0
 800b78a:	460d      	mov	r5, r1
 800b78c:	b976      	cbnz	r6, 800b7ac <_Balloc+0x28>
 800b78e:	2010      	movs	r0, #16
 800b790:	f7ff ffd0 	bl	800b734 <malloc>
 800b794:	4602      	mov	r2, r0
 800b796:	6260      	str	r0, [r4, #36]	; 0x24
 800b798:	b920      	cbnz	r0, 800b7a4 <_Balloc+0x20>
 800b79a:	4b18      	ldr	r3, [pc, #96]	; (800b7fc <_Balloc+0x78>)
 800b79c:	4818      	ldr	r0, [pc, #96]	; (800b800 <_Balloc+0x7c>)
 800b79e:	2166      	movs	r1, #102	; 0x66
 800b7a0:	f001 fd34 	bl	800d20c <__assert_func>
 800b7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7a8:	6006      	str	r6, [r0, #0]
 800b7aa:	60c6      	str	r6, [r0, #12]
 800b7ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b7ae:	68f3      	ldr	r3, [r6, #12]
 800b7b0:	b183      	cbz	r3, 800b7d4 <_Balloc+0x50>
 800b7b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7ba:	b9b8      	cbnz	r0, 800b7ec <_Balloc+0x68>
 800b7bc:	2101      	movs	r1, #1
 800b7be:	fa01 f605 	lsl.w	r6, r1, r5
 800b7c2:	1d72      	adds	r2, r6, #5
 800b7c4:	0092      	lsls	r2, r2, #2
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fc97 	bl	800c0fa <_calloc_r>
 800b7cc:	b160      	cbz	r0, 800b7e8 <_Balloc+0x64>
 800b7ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7d2:	e00e      	b.n	800b7f2 <_Balloc+0x6e>
 800b7d4:	2221      	movs	r2, #33	; 0x21
 800b7d6:	2104      	movs	r1, #4
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 fc8e 	bl	800c0fa <_calloc_r>
 800b7de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7e0:	60f0      	str	r0, [r6, #12]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1e4      	bne.n	800b7b2 <_Balloc+0x2e>
 800b7e8:	2000      	movs	r0, #0
 800b7ea:	bd70      	pop	{r4, r5, r6, pc}
 800b7ec:	6802      	ldr	r2, [r0, #0]
 800b7ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7f8:	e7f7      	b.n	800b7ea <_Balloc+0x66>
 800b7fa:	bf00      	nop
 800b7fc:	0800d856 	.word	0x0800d856
 800b800:	0800d9c0 	.word	0x0800d9c0

0800b804 <_Bfree>:
 800b804:	b570      	push	{r4, r5, r6, lr}
 800b806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b808:	4605      	mov	r5, r0
 800b80a:	460c      	mov	r4, r1
 800b80c:	b976      	cbnz	r6, 800b82c <_Bfree+0x28>
 800b80e:	2010      	movs	r0, #16
 800b810:	f7ff ff90 	bl	800b734 <malloc>
 800b814:	4602      	mov	r2, r0
 800b816:	6268      	str	r0, [r5, #36]	; 0x24
 800b818:	b920      	cbnz	r0, 800b824 <_Bfree+0x20>
 800b81a:	4b09      	ldr	r3, [pc, #36]	; (800b840 <_Bfree+0x3c>)
 800b81c:	4809      	ldr	r0, [pc, #36]	; (800b844 <_Bfree+0x40>)
 800b81e:	218a      	movs	r1, #138	; 0x8a
 800b820:	f001 fcf4 	bl	800d20c <__assert_func>
 800b824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b828:	6006      	str	r6, [r0, #0]
 800b82a:	60c6      	str	r6, [r0, #12]
 800b82c:	b13c      	cbz	r4, 800b83e <_Bfree+0x3a>
 800b82e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b830:	6862      	ldr	r2, [r4, #4]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b838:	6021      	str	r1, [r4, #0]
 800b83a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b83e:	bd70      	pop	{r4, r5, r6, pc}
 800b840:	0800d856 	.word	0x0800d856
 800b844:	0800d9c0 	.word	0x0800d9c0

0800b848 <__multadd>:
 800b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84c:	690e      	ldr	r6, [r1, #16]
 800b84e:	4607      	mov	r7, r0
 800b850:	4698      	mov	r8, r3
 800b852:	460c      	mov	r4, r1
 800b854:	f101 0014 	add.w	r0, r1, #20
 800b858:	2300      	movs	r3, #0
 800b85a:	6805      	ldr	r5, [r0, #0]
 800b85c:	b2a9      	uxth	r1, r5
 800b85e:	fb02 8101 	mla	r1, r2, r1, r8
 800b862:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b866:	0c2d      	lsrs	r5, r5, #16
 800b868:	fb02 c505 	mla	r5, r2, r5, ip
 800b86c:	b289      	uxth	r1, r1
 800b86e:	3301      	adds	r3, #1
 800b870:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b874:	429e      	cmp	r6, r3
 800b876:	f840 1b04 	str.w	r1, [r0], #4
 800b87a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b87e:	dcec      	bgt.n	800b85a <__multadd+0x12>
 800b880:	f1b8 0f00 	cmp.w	r8, #0
 800b884:	d022      	beq.n	800b8cc <__multadd+0x84>
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	42b3      	cmp	r3, r6
 800b88a:	dc19      	bgt.n	800b8c0 <__multadd+0x78>
 800b88c:	6861      	ldr	r1, [r4, #4]
 800b88e:	4638      	mov	r0, r7
 800b890:	3101      	adds	r1, #1
 800b892:	f7ff ff77 	bl	800b784 <_Balloc>
 800b896:	4605      	mov	r5, r0
 800b898:	b928      	cbnz	r0, 800b8a6 <__multadd+0x5e>
 800b89a:	4602      	mov	r2, r0
 800b89c:	4b0d      	ldr	r3, [pc, #52]	; (800b8d4 <__multadd+0x8c>)
 800b89e:	480e      	ldr	r0, [pc, #56]	; (800b8d8 <__multadd+0x90>)
 800b8a0:	21b5      	movs	r1, #181	; 0xb5
 800b8a2:	f001 fcb3 	bl	800d20c <__assert_func>
 800b8a6:	6922      	ldr	r2, [r4, #16]
 800b8a8:	3202      	adds	r2, #2
 800b8aa:	f104 010c 	add.w	r1, r4, #12
 800b8ae:	0092      	lsls	r2, r2, #2
 800b8b0:	300c      	adds	r0, #12
 800b8b2:	f7ff ff59 	bl	800b768 <memcpy>
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff ffa3 	bl	800b804 <_Bfree>
 800b8be:	462c      	mov	r4, r5
 800b8c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b8c4:	3601      	adds	r6, #1
 800b8c6:	f8c3 8014 	str.w	r8, [r3, #20]
 800b8ca:	6126      	str	r6, [r4, #16]
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d2:	bf00      	nop
 800b8d4:	0800d8cc 	.word	0x0800d8cc
 800b8d8:	0800d9c0 	.word	0x0800d9c0

0800b8dc <__s2b>:
 800b8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	4615      	mov	r5, r2
 800b8e4:	461f      	mov	r7, r3
 800b8e6:	2209      	movs	r2, #9
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	db09      	blt.n	800b90c <__s2b+0x30>
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f7ff ff43 	bl	800b784 <_Balloc>
 800b8fe:	b940      	cbnz	r0, 800b912 <__s2b+0x36>
 800b900:	4602      	mov	r2, r0
 800b902:	4b19      	ldr	r3, [pc, #100]	; (800b968 <__s2b+0x8c>)
 800b904:	4819      	ldr	r0, [pc, #100]	; (800b96c <__s2b+0x90>)
 800b906:	21ce      	movs	r1, #206	; 0xce
 800b908:	f001 fc80 	bl	800d20c <__assert_func>
 800b90c:	0052      	lsls	r2, r2, #1
 800b90e:	3101      	adds	r1, #1
 800b910:	e7f0      	b.n	800b8f4 <__s2b+0x18>
 800b912:	9b08      	ldr	r3, [sp, #32]
 800b914:	6143      	str	r3, [r0, #20]
 800b916:	2d09      	cmp	r5, #9
 800b918:	f04f 0301 	mov.w	r3, #1
 800b91c:	6103      	str	r3, [r0, #16]
 800b91e:	dd16      	ble.n	800b94e <__s2b+0x72>
 800b920:	f104 0909 	add.w	r9, r4, #9
 800b924:	46c8      	mov	r8, r9
 800b926:	442c      	add	r4, r5
 800b928:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b92c:	4601      	mov	r1, r0
 800b92e:	3b30      	subs	r3, #48	; 0x30
 800b930:	220a      	movs	r2, #10
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ff88 	bl	800b848 <__multadd>
 800b938:	45a0      	cmp	r8, r4
 800b93a:	d1f5      	bne.n	800b928 <__s2b+0x4c>
 800b93c:	f1a5 0408 	sub.w	r4, r5, #8
 800b940:	444c      	add	r4, r9
 800b942:	1b2d      	subs	r5, r5, r4
 800b944:	1963      	adds	r3, r4, r5
 800b946:	42bb      	cmp	r3, r7
 800b948:	db04      	blt.n	800b954 <__s2b+0x78>
 800b94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b94e:	340a      	adds	r4, #10
 800b950:	2509      	movs	r5, #9
 800b952:	e7f6      	b.n	800b942 <__s2b+0x66>
 800b954:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b958:	4601      	mov	r1, r0
 800b95a:	3b30      	subs	r3, #48	; 0x30
 800b95c:	220a      	movs	r2, #10
 800b95e:	4630      	mov	r0, r6
 800b960:	f7ff ff72 	bl	800b848 <__multadd>
 800b964:	e7ee      	b.n	800b944 <__s2b+0x68>
 800b966:	bf00      	nop
 800b968:	0800d8cc 	.word	0x0800d8cc
 800b96c:	0800d9c0 	.word	0x0800d9c0

0800b970 <__hi0bits>:
 800b970:	0c03      	lsrs	r3, r0, #16
 800b972:	041b      	lsls	r3, r3, #16
 800b974:	b9d3      	cbnz	r3, 800b9ac <__hi0bits+0x3c>
 800b976:	0400      	lsls	r0, r0, #16
 800b978:	2310      	movs	r3, #16
 800b97a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b97e:	bf04      	itt	eq
 800b980:	0200      	lsleq	r0, r0, #8
 800b982:	3308      	addeq	r3, #8
 800b984:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b988:	bf04      	itt	eq
 800b98a:	0100      	lsleq	r0, r0, #4
 800b98c:	3304      	addeq	r3, #4
 800b98e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b992:	bf04      	itt	eq
 800b994:	0080      	lsleq	r0, r0, #2
 800b996:	3302      	addeq	r3, #2
 800b998:	2800      	cmp	r0, #0
 800b99a:	db05      	blt.n	800b9a8 <__hi0bits+0x38>
 800b99c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b9a0:	f103 0301 	add.w	r3, r3, #1
 800b9a4:	bf08      	it	eq
 800b9a6:	2320      	moveq	r3, #32
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	4770      	bx	lr
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	e7e4      	b.n	800b97a <__hi0bits+0xa>

0800b9b0 <__lo0bits>:
 800b9b0:	6803      	ldr	r3, [r0, #0]
 800b9b2:	f013 0207 	ands.w	r2, r3, #7
 800b9b6:	4601      	mov	r1, r0
 800b9b8:	d00b      	beq.n	800b9d2 <__lo0bits+0x22>
 800b9ba:	07da      	lsls	r2, r3, #31
 800b9bc:	d424      	bmi.n	800ba08 <__lo0bits+0x58>
 800b9be:	0798      	lsls	r0, r3, #30
 800b9c0:	bf49      	itett	mi
 800b9c2:	085b      	lsrmi	r3, r3, #1
 800b9c4:	089b      	lsrpl	r3, r3, #2
 800b9c6:	2001      	movmi	r0, #1
 800b9c8:	600b      	strmi	r3, [r1, #0]
 800b9ca:	bf5c      	itt	pl
 800b9cc:	600b      	strpl	r3, [r1, #0]
 800b9ce:	2002      	movpl	r0, #2
 800b9d0:	4770      	bx	lr
 800b9d2:	b298      	uxth	r0, r3
 800b9d4:	b9b0      	cbnz	r0, 800ba04 <__lo0bits+0x54>
 800b9d6:	0c1b      	lsrs	r3, r3, #16
 800b9d8:	2010      	movs	r0, #16
 800b9da:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b9de:	bf04      	itt	eq
 800b9e0:	0a1b      	lsreq	r3, r3, #8
 800b9e2:	3008      	addeq	r0, #8
 800b9e4:	071a      	lsls	r2, r3, #28
 800b9e6:	bf04      	itt	eq
 800b9e8:	091b      	lsreq	r3, r3, #4
 800b9ea:	3004      	addeq	r0, #4
 800b9ec:	079a      	lsls	r2, r3, #30
 800b9ee:	bf04      	itt	eq
 800b9f0:	089b      	lsreq	r3, r3, #2
 800b9f2:	3002      	addeq	r0, #2
 800b9f4:	07da      	lsls	r2, r3, #31
 800b9f6:	d403      	bmi.n	800ba00 <__lo0bits+0x50>
 800b9f8:	085b      	lsrs	r3, r3, #1
 800b9fa:	f100 0001 	add.w	r0, r0, #1
 800b9fe:	d005      	beq.n	800ba0c <__lo0bits+0x5c>
 800ba00:	600b      	str	r3, [r1, #0]
 800ba02:	4770      	bx	lr
 800ba04:	4610      	mov	r0, r2
 800ba06:	e7e8      	b.n	800b9da <__lo0bits+0x2a>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	4770      	bx	lr
 800ba0c:	2020      	movs	r0, #32
 800ba0e:	4770      	bx	lr

0800ba10 <__i2b>:
 800ba10:	b510      	push	{r4, lr}
 800ba12:	460c      	mov	r4, r1
 800ba14:	2101      	movs	r1, #1
 800ba16:	f7ff feb5 	bl	800b784 <_Balloc>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	b928      	cbnz	r0, 800ba2a <__i2b+0x1a>
 800ba1e:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <__i2b+0x24>)
 800ba20:	4805      	ldr	r0, [pc, #20]	; (800ba38 <__i2b+0x28>)
 800ba22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ba26:	f001 fbf1 	bl	800d20c <__assert_func>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	6144      	str	r4, [r0, #20]
 800ba2e:	6103      	str	r3, [r0, #16]
 800ba30:	bd10      	pop	{r4, pc}
 800ba32:	bf00      	nop
 800ba34:	0800d8cc 	.word	0x0800d8cc
 800ba38:	0800d9c0 	.word	0x0800d9c0

0800ba3c <__multiply>:
 800ba3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba40:	4614      	mov	r4, r2
 800ba42:	690a      	ldr	r2, [r1, #16]
 800ba44:	6923      	ldr	r3, [r4, #16]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	bfb8      	it	lt
 800ba4a:	460b      	movlt	r3, r1
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	bfbc      	itt	lt
 800ba50:	4625      	movlt	r5, r4
 800ba52:	461c      	movlt	r4, r3
 800ba54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ba58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ba5c:	68ab      	ldr	r3, [r5, #8]
 800ba5e:	6869      	ldr	r1, [r5, #4]
 800ba60:	eb0a 0709 	add.w	r7, sl, r9
 800ba64:	42bb      	cmp	r3, r7
 800ba66:	b085      	sub	sp, #20
 800ba68:	bfb8      	it	lt
 800ba6a:	3101      	addlt	r1, #1
 800ba6c:	f7ff fe8a 	bl	800b784 <_Balloc>
 800ba70:	b930      	cbnz	r0, 800ba80 <__multiply+0x44>
 800ba72:	4602      	mov	r2, r0
 800ba74:	4b42      	ldr	r3, [pc, #264]	; (800bb80 <__multiply+0x144>)
 800ba76:	4843      	ldr	r0, [pc, #268]	; (800bb84 <__multiply+0x148>)
 800ba78:	f240 115d 	movw	r1, #349	; 0x15d
 800ba7c:	f001 fbc6 	bl	800d20c <__assert_func>
 800ba80:	f100 0614 	add.w	r6, r0, #20
 800ba84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ba88:	4633      	mov	r3, r6
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4543      	cmp	r3, r8
 800ba8e:	d31e      	bcc.n	800bace <__multiply+0x92>
 800ba90:	f105 0c14 	add.w	ip, r5, #20
 800ba94:	f104 0314 	add.w	r3, r4, #20
 800ba98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ba9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800baa0:	9202      	str	r2, [sp, #8]
 800baa2:	ebac 0205 	sub.w	r2, ip, r5
 800baa6:	3a15      	subs	r2, #21
 800baa8:	f022 0203 	bic.w	r2, r2, #3
 800baac:	3204      	adds	r2, #4
 800baae:	f105 0115 	add.w	r1, r5, #21
 800bab2:	458c      	cmp	ip, r1
 800bab4:	bf38      	it	cc
 800bab6:	2204      	movcc	r2, #4
 800bab8:	9201      	str	r2, [sp, #4]
 800baba:	9a02      	ldr	r2, [sp, #8]
 800babc:	9303      	str	r3, [sp, #12]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d808      	bhi.n	800bad4 <__multiply+0x98>
 800bac2:	2f00      	cmp	r7, #0
 800bac4:	dc55      	bgt.n	800bb72 <__multiply+0x136>
 800bac6:	6107      	str	r7, [r0, #16]
 800bac8:	b005      	add	sp, #20
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bace:	f843 2b04 	str.w	r2, [r3], #4
 800bad2:	e7db      	b.n	800ba8c <__multiply+0x50>
 800bad4:	f8b3 a000 	ldrh.w	sl, [r3]
 800bad8:	f1ba 0f00 	cmp.w	sl, #0
 800badc:	d020      	beq.n	800bb20 <__multiply+0xe4>
 800bade:	f105 0e14 	add.w	lr, r5, #20
 800bae2:	46b1      	mov	r9, r6
 800bae4:	2200      	movs	r2, #0
 800bae6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800baea:	f8d9 b000 	ldr.w	fp, [r9]
 800baee:	b2a1      	uxth	r1, r4
 800baf0:	fa1f fb8b 	uxth.w	fp, fp
 800baf4:	fb0a b101 	mla	r1, sl, r1, fp
 800baf8:	4411      	add	r1, r2
 800bafa:	f8d9 2000 	ldr.w	r2, [r9]
 800bafe:	0c24      	lsrs	r4, r4, #16
 800bb00:	0c12      	lsrs	r2, r2, #16
 800bb02:	fb0a 2404 	mla	r4, sl, r4, r2
 800bb06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bb0a:	b289      	uxth	r1, r1
 800bb0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bb10:	45f4      	cmp	ip, lr
 800bb12:	f849 1b04 	str.w	r1, [r9], #4
 800bb16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bb1a:	d8e4      	bhi.n	800bae6 <__multiply+0xaa>
 800bb1c:	9901      	ldr	r1, [sp, #4]
 800bb1e:	5072      	str	r2, [r6, r1]
 800bb20:	9a03      	ldr	r2, [sp, #12]
 800bb22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bb26:	3304      	adds	r3, #4
 800bb28:	f1b9 0f00 	cmp.w	r9, #0
 800bb2c:	d01f      	beq.n	800bb6e <__multiply+0x132>
 800bb2e:	6834      	ldr	r4, [r6, #0]
 800bb30:	f105 0114 	add.w	r1, r5, #20
 800bb34:	46b6      	mov	lr, r6
 800bb36:	f04f 0a00 	mov.w	sl, #0
 800bb3a:	880a      	ldrh	r2, [r1, #0]
 800bb3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bb40:	fb09 b202 	mla	r2, r9, r2, fp
 800bb44:	4492      	add	sl, r2
 800bb46:	b2a4      	uxth	r4, r4
 800bb48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bb4c:	f84e 4b04 	str.w	r4, [lr], #4
 800bb50:	f851 4b04 	ldr.w	r4, [r1], #4
 800bb54:	f8be 2000 	ldrh.w	r2, [lr]
 800bb58:	0c24      	lsrs	r4, r4, #16
 800bb5a:	fb09 2404 	mla	r4, r9, r4, r2
 800bb5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bb62:	458c      	cmp	ip, r1
 800bb64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb68:	d8e7      	bhi.n	800bb3a <__multiply+0xfe>
 800bb6a:	9a01      	ldr	r2, [sp, #4]
 800bb6c:	50b4      	str	r4, [r6, r2]
 800bb6e:	3604      	adds	r6, #4
 800bb70:	e7a3      	b.n	800baba <__multiply+0x7e>
 800bb72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1a5      	bne.n	800bac6 <__multiply+0x8a>
 800bb7a:	3f01      	subs	r7, #1
 800bb7c:	e7a1      	b.n	800bac2 <__multiply+0x86>
 800bb7e:	bf00      	nop
 800bb80:	0800d8cc 	.word	0x0800d8cc
 800bb84:	0800d9c0 	.word	0x0800d9c0

0800bb88 <__pow5mult>:
 800bb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb8c:	4615      	mov	r5, r2
 800bb8e:	f012 0203 	ands.w	r2, r2, #3
 800bb92:	4606      	mov	r6, r0
 800bb94:	460f      	mov	r7, r1
 800bb96:	d007      	beq.n	800bba8 <__pow5mult+0x20>
 800bb98:	4c25      	ldr	r4, [pc, #148]	; (800bc30 <__pow5mult+0xa8>)
 800bb9a:	3a01      	subs	r2, #1
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bba2:	f7ff fe51 	bl	800b848 <__multadd>
 800bba6:	4607      	mov	r7, r0
 800bba8:	10ad      	asrs	r5, r5, #2
 800bbaa:	d03d      	beq.n	800bc28 <__pow5mult+0xa0>
 800bbac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbae:	b97c      	cbnz	r4, 800bbd0 <__pow5mult+0x48>
 800bbb0:	2010      	movs	r0, #16
 800bbb2:	f7ff fdbf 	bl	800b734 <malloc>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	6270      	str	r0, [r6, #36]	; 0x24
 800bbba:	b928      	cbnz	r0, 800bbc8 <__pow5mult+0x40>
 800bbbc:	4b1d      	ldr	r3, [pc, #116]	; (800bc34 <__pow5mult+0xac>)
 800bbbe:	481e      	ldr	r0, [pc, #120]	; (800bc38 <__pow5mult+0xb0>)
 800bbc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bbc4:	f001 fb22 	bl	800d20c <__assert_func>
 800bbc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbcc:	6004      	str	r4, [r0, #0]
 800bbce:	60c4      	str	r4, [r0, #12]
 800bbd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bbd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbd8:	b94c      	cbnz	r4, 800bbee <__pow5mult+0x66>
 800bbda:	f240 2171 	movw	r1, #625	; 0x271
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff ff16 	bl	800ba10 <__i2b>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbea:	4604      	mov	r4, r0
 800bbec:	6003      	str	r3, [r0, #0]
 800bbee:	f04f 0900 	mov.w	r9, #0
 800bbf2:	07eb      	lsls	r3, r5, #31
 800bbf4:	d50a      	bpl.n	800bc0c <__pow5mult+0x84>
 800bbf6:	4639      	mov	r1, r7
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f7ff ff1e 	bl	800ba3c <__multiply>
 800bc00:	4639      	mov	r1, r7
 800bc02:	4680      	mov	r8, r0
 800bc04:	4630      	mov	r0, r6
 800bc06:	f7ff fdfd 	bl	800b804 <_Bfree>
 800bc0a:	4647      	mov	r7, r8
 800bc0c:	106d      	asrs	r5, r5, #1
 800bc0e:	d00b      	beq.n	800bc28 <__pow5mult+0xa0>
 800bc10:	6820      	ldr	r0, [r4, #0]
 800bc12:	b938      	cbnz	r0, 800bc24 <__pow5mult+0x9c>
 800bc14:	4622      	mov	r2, r4
 800bc16:	4621      	mov	r1, r4
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7ff ff0f 	bl	800ba3c <__multiply>
 800bc1e:	6020      	str	r0, [r4, #0]
 800bc20:	f8c0 9000 	str.w	r9, [r0]
 800bc24:	4604      	mov	r4, r0
 800bc26:	e7e4      	b.n	800bbf2 <__pow5mult+0x6a>
 800bc28:	4638      	mov	r0, r7
 800bc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2e:	bf00      	nop
 800bc30:	0800db10 	.word	0x0800db10
 800bc34:	0800d856 	.word	0x0800d856
 800bc38:	0800d9c0 	.word	0x0800d9c0

0800bc3c <__lshift>:
 800bc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc40:	460c      	mov	r4, r1
 800bc42:	6849      	ldr	r1, [r1, #4]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	4691      	mov	r9, r2
 800bc50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc54:	f108 0601 	add.w	r6, r8, #1
 800bc58:	42b3      	cmp	r3, r6
 800bc5a:	db0b      	blt.n	800bc74 <__lshift+0x38>
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff fd91 	bl	800b784 <_Balloc>
 800bc62:	4605      	mov	r5, r0
 800bc64:	b948      	cbnz	r0, 800bc7a <__lshift+0x3e>
 800bc66:	4602      	mov	r2, r0
 800bc68:	4b28      	ldr	r3, [pc, #160]	; (800bd0c <__lshift+0xd0>)
 800bc6a:	4829      	ldr	r0, [pc, #164]	; (800bd10 <__lshift+0xd4>)
 800bc6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bc70:	f001 facc 	bl	800d20c <__assert_func>
 800bc74:	3101      	adds	r1, #1
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	e7ee      	b.n	800bc58 <__lshift+0x1c>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f100 0114 	add.w	r1, r0, #20
 800bc80:	f100 0210 	add.w	r2, r0, #16
 800bc84:	4618      	mov	r0, r3
 800bc86:	4553      	cmp	r3, sl
 800bc88:	db33      	blt.n	800bcf2 <__lshift+0xb6>
 800bc8a:	6920      	ldr	r0, [r4, #16]
 800bc8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc90:	f104 0314 	add.w	r3, r4, #20
 800bc94:	f019 091f 	ands.w	r9, r9, #31
 800bc98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bca0:	d02b      	beq.n	800bcfa <__lshift+0xbe>
 800bca2:	f1c9 0e20 	rsb	lr, r9, #32
 800bca6:	468a      	mov	sl, r1
 800bca8:	2200      	movs	r2, #0
 800bcaa:	6818      	ldr	r0, [r3, #0]
 800bcac:	fa00 f009 	lsl.w	r0, r0, r9
 800bcb0:	4302      	orrs	r2, r0
 800bcb2:	f84a 2b04 	str.w	r2, [sl], #4
 800bcb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcba:	459c      	cmp	ip, r3
 800bcbc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcc0:	d8f3      	bhi.n	800bcaa <__lshift+0x6e>
 800bcc2:	ebac 0304 	sub.w	r3, ip, r4
 800bcc6:	3b15      	subs	r3, #21
 800bcc8:	f023 0303 	bic.w	r3, r3, #3
 800bccc:	3304      	adds	r3, #4
 800bcce:	f104 0015 	add.w	r0, r4, #21
 800bcd2:	4584      	cmp	ip, r0
 800bcd4:	bf38      	it	cc
 800bcd6:	2304      	movcc	r3, #4
 800bcd8:	50ca      	str	r2, [r1, r3]
 800bcda:	b10a      	cbz	r2, 800bce0 <__lshift+0xa4>
 800bcdc:	f108 0602 	add.w	r6, r8, #2
 800bce0:	3e01      	subs	r6, #1
 800bce2:	4638      	mov	r0, r7
 800bce4:	612e      	str	r6, [r5, #16]
 800bce6:	4621      	mov	r1, r4
 800bce8:	f7ff fd8c 	bl	800b804 <_Bfree>
 800bcec:	4628      	mov	r0, r5
 800bcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	e7c5      	b.n	800bc86 <__lshift+0x4a>
 800bcfa:	3904      	subs	r1, #4
 800bcfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd00:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd04:	459c      	cmp	ip, r3
 800bd06:	d8f9      	bhi.n	800bcfc <__lshift+0xc0>
 800bd08:	e7ea      	b.n	800bce0 <__lshift+0xa4>
 800bd0a:	bf00      	nop
 800bd0c:	0800d8cc 	.word	0x0800d8cc
 800bd10:	0800d9c0 	.word	0x0800d9c0

0800bd14 <__mcmp>:
 800bd14:	b530      	push	{r4, r5, lr}
 800bd16:	6902      	ldr	r2, [r0, #16]
 800bd18:	690c      	ldr	r4, [r1, #16]
 800bd1a:	1b12      	subs	r2, r2, r4
 800bd1c:	d10e      	bne.n	800bd3c <__mcmp+0x28>
 800bd1e:	f100 0314 	add.w	r3, r0, #20
 800bd22:	3114      	adds	r1, #20
 800bd24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bd28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bd2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bd30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bd34:	42a5      	cmp	r5, r4
 800bd36:	d003      	beq.n	800bd40 <__mcmp+0x2c>
 800bd38:	d305      	bcc.n	800bd46 <__mcmp+0x32>
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	bd30      	pop	{r4, r5, pc}
 800bd40:	4283      	cmp	r3, r0
 800bd42:	d3f3      	bcc.n	800bd2c <__mcmp+0x18>
 800bd44:	e7fa      	b.n	800bd3c <__mcmp+0x28>
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4a:	e7f7      	b.n	800bd3c <__mcmp+0x28>

0800bd4c <__mdiff>:
 800bd4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd50:	460c      	mov	r4, r1
 800bd52:	4606      	mov	r6, r0
 800bd54:	4611      	mov	r1, r2
 800bd56:	4620      	mov	r0, r4
 800bd58:	4617      	mov	r7, r2
 800bd5a:	f7ff ffdb 	bl	800bd14 <__mcmp>
 800bd5e:	1e05      	subs	r5, r0, #0
 800bd60:	d110      	bne.n	800bd84 <__mdiff+0x38>
 800bd62:	4629      	mov	r1, r5
 800bd64:	4630      	mov	r0, r6
 800bd66:	f7ff fd0d 	bl	800b784 <_Balloc>
 800bd6a:	b930      	cbnz	r0, 800bd7a <__mdiff+0x2e>
 800bd6c:	4b39      	ldr	r3, [pc, #228]	; (800be54 <__mdiff+0x108>)
 800bd6e:	4602      	mov	r2, r0
 800bd70:	f240 2132 	movw	r1, #562	; 0x232
 800bd74:	4838      	ldr	r0, [pc, #224]	; (800be58 <__mdiff+0x10c>)
 800bd76:	f001 fa49 	bl	800d20c <__assert_func>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd84:	bfa4      	itt	ge
 800bd86:	463b      	movge	r3, r7
 800bd88:	4627      	movge	r7, r4
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	6879      	ldr	r1, [r7, #4]
 800bd8e:	bfa6      	itte	ge
 800bd90:	461c      	movge	r4, r3
 800bd92:	2500      	movge	r5, #0
 800bd94:	2501      	movlt	r5, #1
 800bd96:	f7ff fcf5 	bl	800b784 <_Balloc>
 800bd9a:	b920      	cbnz	r0, 800bda6 <__mdiff+0x5a>
 800bd9c:	4b2d      	ldr	r3, [pc, #180]	; (800be54 <__mdiff+0x108>)
 800bd9e:	4602      	mov	r2, r0
 800bda0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bda4:	e7e6      	b.n	800bd74 <__mdiff+0x28>
 800bda6:	693e      	ldr	r6, [r7, #16]
 800bda8:	60c5      	str	r5, [r0, #12]
 800bdaa:	6925      	ldr	r5, [r4, #16]
 800bdac:	f107 0114 	add.w	r1, r7, #20
 800bdb0:	f104 0914 	add.w	r9, r4, #20
 800bdb4:	f100 0e14 	add.w	lr, r0, #20
 800bdb8:	f107 0210 	add.w	r2, r7, #16
 800bdbc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bdc0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bdc4:	46f2      	mov	sl, lr
 800bdc6:	2700      	movs	r7, #0
 800bdc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bdcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bdd0:	fa1f f883 	uxth.w	r8, r3
 800bdd4:	fa17 f78b 	uxtah	r7, r7, fp
 800bdd8:	0c1b      	lsrs	r3, r3, #16
 800bdda:	eba7 0808 	sub.w	r8, r7, r8
 800bdde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bde2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bde6:	fa1f f888 	uxth.w	r8, r8
 800bdea:	141f      	asrs	r7, r3, #16
 800bdec:	454d      	cmp	r5, r9
 800bdee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bdf2:	f84a 3b04 	str.w	r3, [sl], #4
 800bdf6:	d8e7      	bhi.n	800bdc8 <__mdiff+0x7c>
 800bdf8:	1b2b      	subs	r3, r5, r4
 800bdfa:	3b15      	subs	r3, #21
 800bdfc:	f023 0303 	bic.w	r3, r3, #3
 800be00:	3304      	adds	r3, #4
 800be02:	3415      	adds	r4, #21
 800be04:	42a5      	cmp	r5, r4
 800be06:	bf38      	it	cc
 800be08:	2304      	movcc	r3, #4
 800be0a:	4419      	add	r1, r3
 800be0c:	4473      	add	r3, lr
 800be0e:	469e      	mov	lr, r3
 800be10:	460d      	mov	r5, r1
 800be12:	4565      	cmp	r5, ip
 800be14:	d30e      	bcc.n	800be34 <__mdiff+0xe8>
 800be16:	f10c 0203 	add.w	r2, ip, #3
 800be1a:	1a52      	subs	r2, r2, r1
 800be1c:	f022 0203 	bic.w	r2, r2, #3
 800be20:	3903      	subs	r1, #3
 800be22:	458c      	cmp	ip, r1
 800be24:	bf38      	it	cc
 800be26:	2200      	movcc	r2, #0
 800be28:	441a      	add	r2, r3
 800be2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800be2e:	b17b      	cbz	r3, 800be50 <__mdiff+0x104>
 800be30:	6106      	str	r6, [r0, #16]
 800be32:	e7a5      	b.n	800bd80 <__mdiff+0x34>
 800be34:	f855 8b04 	ldr.w	r8, [r5], #4
 800be38:	fa17 f488 	uxtah	r4, r7, r8
 800be3c:	1422      	asrs	r2, r4, #16
 800be3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800be42:	b2a4      	uxth	r4, r4
 800be44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800be48:	f84e 4b04 	str.w	r4, [lr], #4
 800be4c:	1417      	asrs	r7, r2, #16
 800be4e:	e7e0      	b.n	800be12 <__mdiff+0xc6>
 800be50:	3e01      	subs	r6, #1
 800be52:	e7ea      	b.n	800be2a <__mdiff+0xde>
 800be54:	0800d8cc 	.word	0x0800d8cc
 800be58:	0800d9c0 	.word	0x0800d9c0

0800be5c <__ulp>:
 800be5c:	b082      	sub	sp, #8
 800be5e:	ed8d 0b00 	vstr	d0, [sp]
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	4912      	ldr	r1, [pc, #72]	; (800beb0 <__ulp+0x54>)
 800be66:	4019      	ands	r1, r3
 800be68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800be6c:	2900      	cmp	r1, #0
 800be6e:	dd05      	ble.n	800be7c <__ulp+0x20>
 800be70:	2200      	movs	r2, #0
 800be72:	460b      	mov	r3, r1
 800be74:	ec43 2b10 	vmov	d0, r2, r3
 800be78:	b002      	add	sp, #8
 800be7a:	4770      	bx	lr
 800be7c:	4249      	negs	r1, r1
 800be7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800be82:	ea4f 5021 	mov.w	r0, r1, asr #20
 800be86:	f04f 0200 	mov.w	r2, #0
 800be8a:	f04f 0300 	mov.w	r3, #0
 800be8e:	da04      	bge.n	800be9a <__ulp+0x3e>
 800be90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be94:	fa41 f300 	asr.w	r3, r1, r0
 800be98:	e7ec      	b.n	800be74 <__ulp+0x18>
 800be9a:	f1a0 0114 	sub.w	r1, r0, #20
 800be9e:	291e      	cmp	r1, #30
 800bea0:	bfda      	itte	le
 800bea2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bea6:	fa20 f101 	lsrle.w	r1, r0, r1
 800beaa:	2101      	movgt	r1, #1
 800beac:	460a      	mov	r2, r1
 800beae:	e7e1      	b.n	800be74 <__ulp+0x18>
 800beb0:	7ff00000 	.word	0x7ff00000

0800beb4 <__b2d>:
 800beb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb6:	6905      	ldr	r5, [r0, #16]
 800beb8:	f100 0714 	add.w	r7, r0, #20
 800bebc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bec0:	1f2e      	subs	r6, r5, #4
 800bec2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bec6:	4620      	mov	r0, r4
 800bec8:	f7ff fd52 	bl	800b970 <__hi0bits>
 800becc:	f1c0 0320 	rsb	r3, r0, #32
 800bed0:	280a      	cmp	r0, #10
 800bed2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bf50 <__b2d+0x9c>
 800bed6:	600b      	str	r3, [r1, #0]
 800bed8:	dc14      	bgt.n	800bf04 <__b2d+0x50>
 800beda:	f1c0 0e0b 	rsb	lr, r0, #11
 800bede:	fa24 f10e 	lsr.w	r1, r4, lr
 800bee2:	42b7      	cmp	r7, r6
 800bee4:	ea41 030c 	orr.w	r3, r1, ip
 800bee8:	bf34      	ite	cc
 800beea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800beee:	2100      	movcs	r1, #0
 800bef0:	3015      	adds	r0, #21
 800bef2:	fa04 f000 	lsl.w	r0, r4, r0
 800bef6:	fa21 f10e 	lsr.w	r1, r1, lr
 800befa:	ea40 0201 	orr.w	r2, r0, r1
 800befe:	ec43 2b10 	vmov	d0, r2, r3
 800bf02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf04:	42b7      	cmp	r7, r6
 800bf06:	bf3a      	itte	cc
 800bf08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf0c:	f1a5 0608 	subcc.w	r6, r5, #8
 800bf10:	2100      	movcs	r1, #0
 800bf12:	380b      	subs	r0, #11
 800bf14:	d017      	beq.n	800bf46 <__b2d+0x92>
 800bf16:	f1c0 0c20 	rsb	ip, r0, #32
 800bf1a:	fa04 f500 	lsl.w	r5, r4, r0
 800bf1e:	42be      	cmp	r6, r7
 800bf20:	fa21 f40c 	lsr.w	r4, r1, ip
 800bf24:	ea45 0504 	orr.w	r5, r5, r4
 800bf28:	bf8c      	ite	hi
 800bf2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bf2e:	2400      	movls	r4, #0
 800bf30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bf34:	fa01 f000 	lsl.w	r0, r1, r0
 800bf38:	fa24 f40c 	lsr.w	r4, r4, ip
 800bf3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf40:	ea40 0204 	orr.w	r2, r0, r4
 800bf44:	e7db      	b.n	800befe <__b2d+0x4a>
 800bf46:	ea44 030c 	orr.w	r3, r4, ip
 800bf4a:	460a      	mov	r2, r1
 800bf4c:	e7d7      	b.n	800befe <__b2d+0x4a>
 800bf4e:	bf00      	nop
 800bf50:	3ff00000 	.word	0x3ff00000

0800bf54 <__d2b>:
 800bf54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf58:	4689      	mov	r9, r1
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	ec57 6b10 	vmov	r6, r7, d0
 800bf60:	4690      	mov	r8, r2
 800bf62:	f7ff fc0f 	bl	800b784 <_Balloc>
 800bf66:	4604      	mov	r4, r0
 800bf68:	b930      	cbnz	r0, 800bf78 <__d2b+0x24>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	4b25      	ldr	r3, [pc, #148]	; (800c004 <__d2b+0xb0>)
 800bf6e:	4826      	ldr	r0, [pc, #152]	; (800c008 <__d2b+0xb4>)
 800bf70:	f240 310a 	movw	r1, #778	; 0x30a
 800bf74:	f001 f94a 	bl	800d20c <__assert_func>
 800bf78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf80:	bb35      	cbnz	r5, 800bfd0 <__d2b+0x7c>
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	9301      	str	r3, [sp, #4]
 800bf86:	d028      	beq.n	800bfda <__d2b+0x86>
 800bf88:	4668      	mov	r0, sp
 800bf8a:	9600      	str	r6, [sp, #0]
 800bf8c:	f7ff fd10 	bl	800b9b0 <__lo0bits>
 800bf90:	9900      	ldr	r1, [sp, #0]
 800bf92:	b300      	cbz	r0, 800bfd6 <__d2b+0x82>
 800bf94:	9a01      	ldr	r2, [sp, #4]
 800bf96:	f1c0 0320 	rsb	r3, r0, #32
 800bf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	40c2      	lsrs	r2, r0
 800bfa2:	6163      	str	r3, [r4, #20]
 800bfa4:	9201      	str	r2, [sp, #4]
 800bfa6:	9b01      	ldr	r3, [sp, #4]
 800bfa8:	61a3      	str	r3, [r4, #24]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bf14      	ite	ne
 800bfae:	2202      	movne	r2, #2
 800bfb0:	2201      	moveq	r2, #1
 800bfb2:	6122      	str	r2, [r4, #16]
 800bfb4:	b1d5      	cbz	r5, 800bfec <__d2b+0x98>
 800bfb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bfba:	4405      	add	r5, r0
 800bfbc:	f8c9 5000 	str.w	r5, [r9]
 800bfc0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bfc4:	f8c8 0000 	str.w	r0, [r8]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	b003      	add	sp, #12
 800bfcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfd4:	e7d5      	b.n	800bf82 <__d2b+0x2e>
 800bfd6:	6161      	str	r1, [r4, #20]
 800bfd8:	e7e5      	b.n	800bfa6 <__d2b+0x52>
 800bfda:	a801      	add	r0, sp, #4
 800bfdc:	f7ff fce8 	bl	800b9b0 <__lo0bits>
 800bfe0:	9b01      	ldr	r3, [sp, #4]
 800bfe2:	6163      	str	r3, [r4, #20]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	6122      	str	r2, [r4, #16]
 800bfe8:	3020      	adds	r0, #32
 800bfea:	e7e3      	b.n	800bfb4 <__d2b+0x60>
 800bfec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bff0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bff4:	f8c9 0000 	str.w	r0, [r9]
 800bff8:	6918      	ldr	r0, [r3, #16]
 800bffa:	f7ff fcb9 	bl	800b970 <__hi0bits>
 800bffe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c002:	e7df      	b.n	800bfc4 <__d2b+0x70>
 800c004:	0800d8cc 	.word	0x0800d8cc
 800c008:	0800d9c0 	.word	0x0800d9c0

0800c00c <__ratio>:
 800c00c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c010:	4688      	mov	r8, r1
 800c012:	4669      	mov	r1, sp
 800c014:	4681      	mov	r9, r0
 800c016:	f7ff ff4d 	bl	800beb4 <__b2d>
 800c01a:	a901      	add	r1, sp, #4
 800c01c:	4640      	mov	r0, r8
 800c01e:	ec55 4b10 	vmov	r4, r5, d0
 800c022:	f7ff ff47 	bl	800beb4 <__b2d>
 800c026:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c02a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c02e:	eba3 0c02 	sub.w	ip, r3, r2
 800c032:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c036:	1a9b      	subs	r3, r3, r2
 800c038:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c03c:	ec51 0b10 	vmov	r0, r1, d0
 800c040:	2b00      	cmp	r3, #0
 800c042:	bfd6      	itet	le
 800c044:	460a      	movle	r2, r1
 800c046:	462a      	movgt	r2, r5
 800c048:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c04c:	468b      	mov	fp, r1
 800c04e:	462f      	mov	r7, r5
 800c050:	bfd4      	ite	le
 800c052:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c056:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c05a:	4620      	mov	r0, r4
 800c05c:	ee10 2a10 	vmov	r2, s0
 800c060:	465b      	mov	r3, fp
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 fc12 	bl	800088c <__aeabi_ddiv>
 800c068:	ec41 0b10 	vmov	d0, r0, r1
 800c06c:	b003      	add	sp, #12
 800c06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c072 <__copybits>:
 800c072:	3901      	subs	r1, #1
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	1149      	asrs	r1, r1, #5
 800c078:	6914      	ldr	r4, [r2, #16]
 800c07a:	3101      	adds	r1, #1
 800c07c:	f102 0314 	add.w	r3, r2, #20
 800c080:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c084:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c088:	1f05      	subs	r5, r0, #4
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	d30c      	bcc.n	800c0a8 <__copybits+0x36>
 800c08e:	1aa3      	subs	r3, r4, r2
 800c090:	3b11      	subs	r3, #17
 800c092:	f023 0303 	bic.w	r3, r3, #3
 800c096:	3211      	adds	r2, #17
 800c098:	42a2      	cmp	r2, r4
 800c09a:	bf88      	it	hi
 800c09c:	2300      	movhi	r3, #0
 800c09e:	4418      	add	r0, r3
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4288      	cmp	r0, r1
 800c0a4:	d305      	bcc.n	800c0b2 <__copybits+0x40>
 800c0a6:	bd70      	pop	{r4, r5, r6, pc}
 800c0a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800c0ac:	f845 6f04 	str.w	r6, [r5, #4]!
 800c0b0:	e7eb      	b.n	800c08a <__copybits+0x18>
 800c0b2:	f840 3b04 	str.w	r3, [r0], #4
 800c0b6:	e7f4      	b.n	800c0a2 <__copybits+0x30>

0800c0b8 <__any_on>:
 800c0b8:	f100 0214 	add.w	r2, r0, #20
 800c0bc:	6900      	ldr	r0, [r0, #16]
 800c0be:	114b      	asrs	r3, r1, #5
 800c0c0:	4298      	cmp	r0, r3
 800c0c2:	b510      	push	{r4, lr}
 800c0c4:	db11      	blt.n	800c0ea <__any_on+0x32>
 800c0c6:	dd0a      	ble.n	800c0de <__any_on+0x26>
 800c0c8:	f011 011f 	ands.w	r1, r1, #31
 800c0cc:	d007      	beq.n	800c0de <__any_on+0x26>
 800c0ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c0d2:	fa24 f001 	lsr.w	r0, r4, r1
 800c0d6:	fa00 f101 	lsl.w	r1, r0, r1
 800c0da:	428c      	cmp	r4, r1
 800c0dc:	d10b      	bne.n	800c0f6 <__any_on+0x3e>
 800c0de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d803      	bhi.n	800c0ee <__any_on+0x36>
 800c0e6:	2000      	movs	r0, #0
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	e7f7      	b.n	800c0de <__any_on+0x26>
 800c0ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0f2:	2900      	cmp	r1, #0
 800c0f4:	d0f5      	beq.n	800c0e2 <__any_on+0x2a>
 800c0f6:	2001      	movs	r0, #1
 800c0f8:	e7f6      	b.n	800c0e8 <__any_on+0x30>

0800c0fa <_calloc_r>:
 800c0fa:	b513      	push	{r0, r1, r4, lr}
 800c0fc:	434a      	muls	r2, r1
 800c0fe:	4611      	mov	r1, r2
 800c100:	9201      	str	r2, [sp, #4]
 800c102:	f000 f859 	bl	800c1b8 <_malloc_r>
 800c106:	4604      	mov	r4, r0
 800c108:	b118      	cbz	r0, 800c112 <_calloc_r+0x18>
 800c10a:	9a01      	ldr	r2, [sp, #4]
 800c10c:	2100      	movs	r1, #0
 800c10e:	f7fc f9f5 	bl	80084fc <memset>
 800c112:	4620      	mov	r0, r4
 800c114:	b002      	add	sp, #8
 800c116:	bd10      	pop	{r4, pc}

0800c118 <_free_r>:
 800c118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c11a:	2900      	cmp	r1, #0
 800c11c:	d048      	beq.n	800c1b0 <_free_r+0x98>
 800c11e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c122:	9001      	str	r0, [sp, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	f1a1 0404 	sub.w	r4, r1, #4
 800c12a:	bfb8      	it	lt
 800c12c:	18e4      	addlt	r4, r4, r3
 800c12e:	f001 f9dd 	bl	800d4ec <__malloc_lock>
 800c132:	4a20      	ldr	r2, [pc, #128]	; (800c1b4 <_free_r+0x9c>)
 800c134:	9801      	ldr	r0, [sp, #4]
 800c136:	6813      	ldr	r3, [r2, #0]
 800c138:	4615      	mov	r5, r2
 800c13a:	b933      	cbnz	r3, 800c14a <_free_r+0x32>
 800c13c:	6063      	str	r3, [r4, #4]
 800c13e:	6014      	str	r4, [r2, #0]
 800c140:	b003      	add	sp, #12
 800c142:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c146:	f001 b9d7 	b.w	800d4f8 <__malloc_unlock>
 800c14a:	42a3      	cmp	r3, r4
 800c14c:	d90b      	bls.n	800c166 <_free_r+0x4e>
 800c14e:	6821      	ldr	r1, [r4, #0]
 800c150:	1862      	adds	r2, r4, r1
 800c152:	4293      	cmp	r3, r2
 800c154:	bf04      	itt	eq
 800c156:	681a      	ldreq	r2, [r3, #0]
 800c158:	685b      	ldreq	r3, [r3, #4]
 800c15a:	6063      	str	r3, [r4, #4]
 800c15c:	bf04      	itt	eq
 800c15e:	1852      	addeq	r2, r2, r1
 800c160:	6022      	streq	r2, [r4, #0]
 800c162:	602c      	str	r4, [r5, #0]
 800c164:	e7ec      	b.n	800c140 <_free_r+0x28>
 800c166:	461a      	mov	r2, r3
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	b10b      	cbz	r3, 800c170 <_free_r+0x58>
 800c16c:	42a3      	cmp	r3, r4
 800c16e:	d9fa      	bls.n	800c166 <_free_r+0x4e>
 800c170:	6811      	ldr	r1, [r2, #0]
 800c172:	1855      	adds	r5, r2, r1
 800c174:	42a5      	cmp	r5, r4
 800c176:	d10b      	bne.n	800c190 <_free_r+0x78>
 800c178:	6824      	ldr	r4, [r4, #0]
 800c17a:	4421      	add	r1, r4
 800c17c:	1854      	adds	r4, r2, r1
 800c17e:	42a3      	cmp	r3, r4
 800c180:	6011      	str	r1, [r2, #0]
 800c182:	d1dd      	bne.n	800c140 <_free_r+0x28>
 800c184:	681c      	ldr	r4, [r3, #0]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	6053      	str	r3, [r2, #4]
 800c18a:	4421      	add	r1, r4
 800c18c:	6011      	str	r1, [r2, #0]
 800c18e:	e7d7      	b.n	800c140 <_free_r+0x28>
 800c190:	d902      	bls.n	800c198 <_free_r+0x80>
 800c192:	230c      	movs	r3, #12
 800c194:	6003      	str	r3, [r0, #0]
 800c196:	e7d3      	b.n	800c140 <_free_r+0x28>
 800c198:	6825      	ldr	r5, [r4, #0]
 800c19a:	1961      	adds	r1, r4, r5
 800c19c:	428b      	cmp	r3, r1
 800c19e:	bf04      	itt	eq
 800c1a0:	6819      	ldreq	r1, [r3, #0]
 800c1a2:	685b      	ldreq	r3, [r3, #4]
 800c1a4:	6063      	str	r3, [r4, #4]
 800c1a6:	bf04      	itt	eq
 800c1a8:	1949      	addeq	r1, r1, r5
 800c1aa:	6021      	streq	r1, [r4, #0]
 800c1ac:	6054      	str	r4, [r2, #4]
 800c1ae:	e7c7      	b.n	800c140 <_free_r+0x28>
 800c1b0:	b003      	add	sp, #12
 800c1b2:	bd30      	pop	{r4, r5, pc}
 800c1b4:	200002d0 	.word	0x200002d0

0800c1b8 <_malloc_r>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	1ccd      	adds	r5, r1, #3
 800c1bc:	f025 0503 	bic.w	r5, r5, #3
 800c1c0:	3508      	adds	r5, #8
 800c1c2:	2d0c      	cmp	r5, #12
 800c1c4:	bf38      	it	cc
 800c1c6:	250c      	movcc	r5, #12
 800c1c8:	2d00      	cmp	r5, #0
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	db01      	blt.n	800c1d2 <_malloc_r+0x1a>
 800c1ce:	42a9      	cmp	r1, r5
 800c1d0:	d903      	bls.n	800c1da <_malloc_r+0x22>
 800c1d2:	230c      	movs	r3, #12
 800c1d4:	6033      	str	r3, [r6, #0]
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1da:	f001 f987 	bl	800d4ec <__malloc_lock>
 800c1de:	4921      	ldr	r1, [pc, #132]	; (800c264 <_malloc_r+0xac>)
 800c1e0:	680a      	ldr	r2, [r1, #0]
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	b99c      	cbnz	r4, 800c20e <_malloc_r+0x56>
 800c1e6:	4f20      	ldr	r7, [pc, #128]	; (800c268 <_malloc_r+0xb0>)
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	b923      	cbnz	r3, 800c1f6 <_malloc_r+0x3e>
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f000 fe2a 	bl	800ce48 <_sbrk_r>
 800c1f4:	6038      	str	r0, [r7, #0]
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f000 fe25 	bl	800ce48 <_sbrk_r>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	d123      	bne.n	800c24a <_malloc_r+0x92>
 800c202:	230c      	movs	r3, #12
 800c204:	6033      	str	r3, [r6, #0]
 800c206:	4630      	mov	r0, r6
 800c208:	f001 f976 	bl	800d4f8 <__malloc_unlock>
 800c20c:	e7e3      	b.n	800c1d6 <_malloc_r+0x1e>
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	1b5b      	subs	r3, r3, r5
 800c212:	d417      	bmi.n	800c244 <_malloc_r+0x8c>
 800c214:	2b0b      	cmp	r3, #11
 800c216:	d903      	bls.n	800c220 <_malloc_r+0x68>
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	441c      	add	r4, r3
 800c21c:	6025      	str	r5, [r4, #0]
 800c21e:	e004      	b.n	800c22a <_malloc_r+0x72>
 800c220:	6863      	ldr	r3, [r4, #4]
 800c222:	42a2      	cmp	r2, r4
 800c224:	bf0c      	ite	eq
 800c226:	600b      	streq	r3, [r1, #0]
 800c228:	6053      	strne	r3, [r2, #4]
 800c22a:	4630      	mov	r0, r6
 800c22c:	f001 f964 	bl	800d4f8 <__malloc_unlock>
 800c230:	f104 000b 	add.w	r0, r4, #11
 800c234:	1d23      	adds	r3, r4, #4
 800c236:	f020 0007 	bic.w	r0, r0, #7
 800c23a:	1ac2      	subs	r2, r0, r3
 800c23c:	d0cc      	beq.n	800c1d8 <_malloc_r+0x20>
 800c23e:	1a1b      	subs	r3, r3, r0
 800c240:	50a3      	str	r3, [r4, r2]
 800c242:	e7c9      	b.n	800c1d8 <_malloc_r+0x20>
 800c244:	4622      	mov	r2, r4
 800c246:	6864      	ldr	r4, [r4, #4]
 800c248:	e7cc      	b.n	800c1e4 <_malloc_r+0x2c>
 800c24a:	1cc4      	adds	r4, r0, #3
 800c24c:	f024 0403 	bic.w	r4, r4, #3
 800c250:	42a0      	cmp	r0, r4
 800c252:	d0e3      	beq.n	800c21c <_malloc_r+0x64>
 800c254:	1a21      	subs	r1, r4, r0
 800c256:	4630      	mov	r0, r6
 800c258:	f000 fdf6 	bl	800ce48 <_sbrk_r>
 800c25c:	3001      	adds	r0, #1
 800c25e:	d1dd      	bne.n	800c21c <_malloc_r+0x64>
 800c260:	e7cf      	b.n	800c202 <_malloc_r+0x4a>
 800c262:	bf00      	nop
 800c264:	200002d0 	.word	0x200002d0
 800c268:	200002d4 	.word	0x200002d4

0800c26c <__ssputs_r>:
 800c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c270:	688e      	ldr	r6, [r1, #8]
 800c272:	429e      	cmp	r6, r3
 800c274:	4682      	mov	sl, r0
 800c276:	460c      	mov	r4, r1
 800c278:	4690      	mov	r8, r2
 800c27a:	461f      	mov	r7, r3
 800c27c:	d838      	bhi.n	800c2f0 <__ssputs_r+0x84>
 800c27e:	898a      	ldrh	r2, [r1, #12]
 800c280:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c284:	d032      	beq.n	800c2ec <__ssputs_r+0x80>
 800c286:	6825      	ldr	r5, [r4, #0]
 800c288:	6909      	ldr	r1, [r1, #16]
 800c28a:	eba5 0901 	sub.w	r9, r5, r1
 800c28e:	6965      	ldr	r5, [r4, #20]
 800c290:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c294:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c298:	3301      	adds	r3, #1
 800c29a:	444b      	add	r3, r9
 800c29c:	106d      	asrs	r5, r5, #1
 800c29e:	429d      	cmp	r5, r3
 800c2a0:	bf38      	it	cc
 800c2a2:	461d      	movcc	r5, r3
 800c2a4:	0553      	lsls	r3, r2, #21
 800c2a6:	d531      	bpl.n	800c30c <__ssputs_r+0xa0>
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7ff ff85 	bl	800c1b8 <_malloc_r>
 800c2ae:	4606      	mov	r6, r0
 800c2b0:	b950      	cbnz	r0, 800c2c8 <__ssputs_r+0x5c>
 800c2b2:	230c      	movs	r3, #12
 800c2b4:	f8ca 3000 	str.w	r3, [sl]
 800c2b8:	89a3      	ldrh	r3, [r4, #12]
 800c2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c8:	6921      	ldr	r1, [r4, #16]
 800c2ca:	464a      	mov	r2, r9
 800c2cc:	f7ff fa4c 	bl	800b768 <memcpy>
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2da:	81a3      	strh	r3, [r4, #12]
 800c2dc:	6126      	str	r6, [r4, #16]
 800c2de:	6165      	str	r5, [r4, #20]
 800c2e0:	444e      	add	r6, r9
 800c2e2:	eba5 0509 	sub.w	r5, r5, r9
 800c2e6:	6026      	str	r6, [r4, #0]
 800c2e8:	60a5      	str	r5, [r4, #8]
 800c2ea:	463e      	mov	r6, r7
 800c2ec:	42be      	cmp	r6, r7
 800c2ee:	d900      	bls.n	800c2f2 <__ssputs_r+0x86>
 800c2f0:	463e      	mov	r6, r7
 800c2f2:	4632      	mov	r2, r6
 800c2f4:	6820      	ldr	r0, [r4, #0]
 800c2f6:	4641      	mov	r1, r8
 800c2f8:	f001 f8de 	bl	800d4b8 <memmove>
 800c2fc:	68a3      	ldr	r3, [r4, #8]
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	1b9b      	subs	r3, r3, r6
 800c302:	4432      	add	r2, r6
 800c304:	60a3      	str	r3, [r4, #8]
 800c306:	6022      	str	r2, [r4, #0]
 800c308:	2000      	movs	r0, #0
 800c30a:	e7db      	b.n	800c2c4 <__ssputs_r+0x58>
 800c30c:	462a      	mov	r2, r5
 800c30e:	f001 f8f9 	bl	800d504 <_realloc_r>
 800c312:	4606      	mov	r6, r0
 800c314:	2800      	cmp	r0, #0
 800c316:	d1e1      	bne.n	800c2dc <__ssputs_r+0x70>
 800c318:	6921      	ldr	r1, [r4, #16]
 800c31a:	4650      	mov	r0, sl
 800c31c:	f7ff fefc 	bl	800c118 <_free_r>
 800c320:	e7c7      	b.n	800c2b2 <__ssputs_r+0x46>
	...

0800c324 <_svfiprintf_r>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	4698      	mov	r8, r3
 800c32a:	898b      	ldrh	r3, [r1, #12]
 800c32c:	061b      	lsls	r3, r3, #24
 800c32e:	b09d      	sub	sp, #116	; 0x74
 800c330:	4607      	mov	r7, r0
 800c332:	460d      	mov	r5, r1
 800c334:	4614      	mov	r4, r2
 800c336:	d50e      	bpl.n	800c356 <_svfiprintf_r+0x32>
 800c338:	690b      	ldr	r3, [r1, #16]
 800c33a:	b963      	cbnz	r3, 800c356 <_svfiprintf_r+0x32>
 800c33c:	2140      	movs	r1, #64	; 0x40
 800c33e:	f7ff ff3b 	bl	800c1b8 <_malloc_r>
 800c342:	6028      	str	r0, [r5, #0]
 800c344:	6128      	str	r0, [r5, #16]
 800c346:	b920      	cbnz	r0, 800c352 <_svfiprintf_r+0x2e>
 800c348:	230c      	movs	r3, #12
 800c34a:	603b      	str	r3, [r7, #0]
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	e0d1      	b.n	800c4f6 <_svfiprintf_r+0x1d2>
 800c352:	2340      	movs	r3, #64	; 0x40
 800c354:	616b      	str	r3, [r5, #20]
 800c356:	2300      	movs	r3, #0
 800c358:	9309      	str	r3, [sp, #36]	; 0x24
 800c35a:	2320      	movs	r3, #32
 800c35c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c360:	f8cd 800c 	str.w	r8, [sp, #12]
 800c364:	2330      	movs	r3, #48	; 0x30
 800c366:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c510 <_svfiprintf_r+0x1ec>
 800c36a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c36e:	f04f 0901 	mov.w	r9, #1
 800c372:	4623      	mov	r3, r4
 800c374:	469a      	mov	sl, r3
 800c376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c37a:	b10a      	cbz	r2, 800c380 <_svfiprintf_r+0x5c>
 800c37c:	2a25      	cmp	r2, #37	; 0x25
 800c37e:	d1f9      	bne.n	800c374 <_svfiprintf_r+0x50>
 800c380:	ebba 0b04 	subs.w	fp, sl, r4
 800c384:	d00b      	beq.n	800c39e <_svfiprintf_r+0x7a>
 800c386:	465b      	mov	r3, fp
 800c388:	4622      	mov	r2, r4
 800c38a:	4629      	mov	r1, r5
 800c38c:	4638      	mov	r0, r7
 800c38e:	f7ff ff6d 	bl	800c26c <__ssputs_r>
 800c392:	3001      	adds	r0, #1
 800c394:	f000 80aa 	beq.w	800c4ec <_svfiprintf_r+0x1c8>
 800c398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c39a:	445a      	add	r2, fp
 800c39c:	9209      	str	r2, [sp, #36]	; 0x24
 800c39e:	f89a 3000 	ldrb.w	r3, [sl]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	f000 80a2 	beq.w	800c4ec <_svfiprintf_r+0x1c8>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3b2:	f10a 0a01 	add.w	sl, sl, #1
 800c3b6:	9304      	str	r3, [sp, #16]
 800c3b8:	9307      	str	r3, [sp, #28]
 800c3ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3be:	931a      	str	r3, [sp, #104]	; 0x68
 800c3c0:	4654      	mov	r4, sl
 800c3c2:	2205      	movs	r2, #5
 800c3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c8:	4851      	ldr	r0, [pc, #324]	; (800c510 <_svfiprintf_r+0x1ec>)
 800c3ca:	f7f3 ff29 	bl	8000220 <memchr>
 800c3ce:	9a04      	ldr	r2, [sp, #16]
 800c3d0:	b9d8      	cbnz	r0, 800c40a <_svfiprintf_r+0xe6>
 800c3d2:	06d0      	lsls	r0, r2, #27
 800c3d4:	bf44      	itt	mi
 800c3d6:	2320      	movmi	r3, #32
 800c3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3dc:	0711      	lsls	r1, r2, #28
 800c3de:	bf44      	itt	mi
 800c3e0:	232b      	movmi	r3, #43	; 0x2b
 800c3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c3ec:	d015      	beq.n	800c41a <_svfiprintf_r+0xf6>
 800c3ee:	9a07      	ldr	r2, [sp, #28]
 800c3f0:	4654      	mov	r4, sl
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f04f 0c0a 	mov.w	ip, #10
 800c3f8:	4621      	mov	r1, r4
 800c3fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3fe:	3b30      	subs	r3, #48	; 0x30
 800c400:	2b09      	cmp	r3, #9
 800c402:	d94e      	bls.n	800c4a2 <_svfiprintf_r+0x17e>
 800c404:	b1b0      	cbz	r0, 800c434 <_svfiprintf_r+0x110>
 800c406:	9207      	str	r2, [sp, #28]
 800c408:	e014      	b.n	800c434 <_svfiprintf_r+0x110>
 800c40a:	eba0 0308 	sub.w	r3, r0, r8
 800c40e:	fa09 f303 	lsl.w	r3, r9, r3
 800c412:	4313      	orrs	r3, r2
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	46a2      	mov	sl, r4
 800c418:	e7d2      	b.n	800c3c0 <_svfiprintf_r+0x9c>
 800c41a:	9b03      	ldr	r3, [sp, #12]
 800c41c:	1d19      	adds	r1, r3, #4
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	9103      	str	r1, [sp, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	bfbb      	ittet	lt
 800c426:	425b      	neglt	r3, r3
 800c428:	f042 0202 	orrlt.w	r2, r2, #2
 800c42c:	9307      	strge	r3, [sp, #28]
 800c42e:	9307      	strlt	r3, [sp, #28]
 800c430:	bfb8      	it	lt
 800c432:	9204      	strlt	r2, [sp, #16]
 800c434:	7823      	ldrb	r3, [r4, #0]
 800c436:	2b2e      	cmp	r3, #46	; 0x2e
 800c438:	d10c      	bne.n	800c454 <_svfiprintf_r+0x130>
 800c43a:	7863      	ldrb	r3, [r4, #1]
 800c43c:	2b2a      	cmp	r3, #42	; 0x2a
 800c43e:	d135      	bne.n	800c4ac <_svfiprintf_r+0x188>
 800c440:	9b03      	ldr	r3, [sp, #12]
 800c442:	1d1a      	adds	r2, r3, #4
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	9203      	str	r2, [sp, #12]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	bfb8      	it	lt
 800c44c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c450:	3402      	adds	r4, #2
 800c452:	9305      	str	r3, [sp, #20]
 800c454:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c520 <_svfiprintf_r+0x1fc>
 800c458:	7821      	ldrb	r1, [r4, #0]
 800c45a:	2203      	movs	r2, #3
 800c45c:	4650      	mov	r0, sl
 800c45e:	f7f3 fedf 	bl	8000220 <memchr>
 800c462:	b140      	cbz	r0, 800c476 <_svfiprintf_r+0x152>
 800c464:	2340      	movs	r3, #64	; 0x40
 800c466:	eba0 000a 	sub.w	r0, r0, sl
 800c46a:	fa03 f000 	lsl.w	r0, r3, r0
 800c46e:	9b04      	ldr	r3, [sp, #16]
 800c470:	4303      	orrs	r3, r0
 800c472:	3401      	adds	r4, #1
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c47a:	4826      	ldr	r0, [pc, #152]	; (800c514 <_svfiprintf_r+0x1f0>)
 800c47c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c480:	2206      	movs	r2, #6
 800c482:	f7f3 fecd 	bl	8000220 <memchr>
 800c486:	2800      	cmp	r0, #0
 800c488:	d038      	beq.n	800c4fc <_svfiprintf_r+0x1d8>
 800c48a:	4b23      	ldr	r3, [pc, #140]	; (800c518 <_svfiprintf_r+0x1f4>)
 800c48c:	bb1b      	cbnz	r3, 800c4d6 <_svfiprintf_r+0x1b2>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	3307      	adds	r3, #7
 800c492:	f023 0307 	bic.w	r3, r3, #7
 800c496:	3308      	adds	r3, #8
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49c:	4433      	add	r3, r6
 800c49e:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a0:	e767      	b.n	800c372 <_svfiprintf_r+0x4e>
 800c4a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	2001      	movs	r0, #1
 800c4aa:	e7a5      	b.n	800c3f8 <_svfiprintf_r+0xd4>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	3401      	adds	r4, #1
 800c4b0:	9305      	str	r3, [sp, #20]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	f04f 0c0a 	mov.w	ip, #10
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4be:	3a30      	subs	r2, #48	; 0x30
 800c4c0:	2a09      	cmp	r2, #9
 800c4c2:	d903      	bls.n	800c4cc <_svfiprintf_r+0x1a8>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0c5      	beq.n	800c454 <_svfiprintf_r+0x130>
 800c4c8:	9105      	str	r1, [sp, #20]
 800c4ca:	e7c3      	b.n	800c454 <_svfiprintf_r+0x130>
 800c4cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e7f0      	b.n	800c4b8 <_svfiprintf_r+0x194>
 800c4d6:	ab03      	add	r3, sp, #12
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	462a      	mov	r2, r5
 800c4dc:	4b0f      	ldr	r3, [pc, #60]	; (800c51c <_svfiprintf_r+0x1f8>)
 800c4de:	a904      	add	r1, sp, #16
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f7fc f8b3 	bl	800864c <_printf_float>
 800c4e6:	1c42      	adds	r2, r0, #1
 800c4e8:	4606      	mov	r6, r0
 800c4ea:	d1d6      	bne.n	800c49a <_svfiprintf_r+0x176>
 800c4ec:	89ab      	ldrh	r3, [r5, #12]
 800c4ee:	065b      	lsls	r3, r3, #25
 800c4f0:	f53f af2c 	bmi.w	800c34c <_svfiprintf_r+0x28>
 800c4f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4f6:	b01d      	add	sp, #116	; 0x74
 800c4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fc:	ab03      	add	r3, sp, #12
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	462a      	mov	r2, r5
 800c502:	4b06      	ldr	r3, [pc, #24]	; (800c51c <_svfiprintf_r+0x1f8>)
 800c504:	a904      	add	r1, sp, #16
 800c506:	4638      	mov	r0, r7
 800c508:	f7fc fb44 	bl	8008b94 <_printf_i>
 800c50c:	e7eb      	b.n	800c4e6 <_svfiprintf_r+0x1c2>
 800c50e:	bf00      	nop
 800c510:	0800db1c 	.word	0x0800db1c
 800c514:	0800db26 	.word	0x0800db26
 800c518:	0800864d 	.word	0x0800864d
 800c51c:	0800c26d 	.word	0x0800c26d
 800c520:	0800db22 	.word	0x0800db22

0800c524 <_sungetc_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	1c4b      	adds	r3, r1, #1
 800c528:	4614      	mov	r4, r2
 800c52a:	d103      	bne.n	800c534 <_sungetc_r+0x10>
 800c52c:	f04f 35ff 	mov.w	r5, #4294967295
 800c530:	4628      	mov	r0, r5
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	8993      	ldrh	r3, [r2, #12]
 800c536:	f023 0320 	bic.w	r3, r3, #32
 800c53a:	8193      	strh	r3, [r2, #12]
 800c53c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c53e:	6852      	ldr	r2, [r2, #4]
 800c540:	b2cd      	uxtb	r5, r1
 800c542:	b18b      	cbz	r3, 800c568 <_sungetc_r+0x44>
 800c544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c546:	4293      	cmp	r3, r2
 800c548:	dd08      	ble.n	800c55c <_sungetc_r+0x38>
 800c54a:	6823      	ldr	r3, [r4, #0]
 800c54c:	1e5a      	subs	r2, r3, #1
 800c54e:	6022      	str	r2, [r4, #0]
 800c550:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c554:	6863      	ldr	r3, [r4, #4]
 800c556:	3301      	adds	r3, #1
 800c558:	6063      	str	r3, [r4, #4]
 800c55a:	e7e9      	b.n	800c530 <_sungetc_r+0xc>
 800c55c:	4621      	mov	r1, r4
 800c55e:	f000 fd4d 	bl	800cffc <__submore>
 800c562:	2800      	cmp	r0, #0
 800c564:	d0f1      	beq.n	800c54a <_sungetc_r+0x26>
 800c566:	e7e1      	b.n	800c52c <_sungetc_r+0x8>
 800c568:	6921      	ldr	r1, [r4, #16]
 800c56a:	6823      	ldr	r3, [r4, #0]
 800c56c:	b151      	cbz	r1, 800c584 <_sungetc_r+0x60>
 800c56e:	4299      	cmp	r1, r3
 800c570:	d208      	bcs.n	800c584 <_sungetc_r+0x60>
 800c572:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c576:	42a9      	cmp	r1, r5
 800c578:	d104      	bne.n	800c584 <_sungetc_r+0x60>
 800c57a:	3b01      	subs	r3, #1
 800c57c:	3201      	adds	r2, #1
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	6062      	str	r2, [r4, #4]
 800c582:	e7d5      	b.n	800c530 <_sungetc_r+0xc>
 800c584:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c58c:	6363      	str	r3, [r4, #52]	; 0x34
 800c58e:	2303      	movs	r3, #3
 800c590:	63a3      	str	r3, [r4, #56]	; 0x38
 800c592:	4623      	mov	r3, r4
 800c594:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	2301      	movs	r3, #1
 800c59c:	e7dc      	b.n	800c558 <_sungetc_r+0x34>

0800c59e <__ssrefill_r>:
 800c59e:	b510      	push	{r4, lr}
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c5a4:	b169      	cbz	r1, 800c5c2 <__ssrefill_r+0x24>
 800c5a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	d001      	beq.n	800c5b2 <__ssrefill_r+0x14>
 800c5ae:	f7ff fdb3 	bl	800c118 <_free_r>
 800c5b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5b4:	6063      	str	r3, [r4, #4]
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c5ba:	b113      	cbz	r3, 800c5c2 <__ssrefill_r+0x24>
 800c5bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	6923      	ldr	r3, [r4, #16]
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	6063      	str	r3, [r4, #4]
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	f043 0320 	orr.w	r3, r3, #32
 800c5d0:	81a3      	strh	r3, [r4, #12]
 800c5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d6:	e7f3      	b.n	800c5c0 <__ssrefill_r+0x22>

0800c5d8 <__ssvfiscanf_r>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	460c      	mov	r4, r1
 800c5de:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c5e8:	49b2      	ldr	r1, [pc, #712]	; (800c8b4 <__ssvfiscanf_r+0x2dc>)
 800c5ea:	91a0      	str	r1, [sp, #640]	; 0x280
 800c5ec:	f10d 0804 	add.w	r8, sp, #4
 800c5f0:	49b1      	ldr	r1, [pc, #708]	; (800c8b8 <__ssvfiscanf_r+0x2e0>)
 800c5f2:	4fb2      	ldr	r7, [pc, #712]	; (800c8bc <__ssvfiscanf_r+0x2e4>)
 800c5f4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c8c0 <__ssvfiscanf_r+0x2e8>
 800c5f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	91a1      	str	r1, [sp, #644]	; 0x284
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	f892 a000 	ldrb.w	sl, [r2]
 800c606:	f1ba 0f00 	cmp.w	sl, #0
 800c60a:	f000 8151 	beq.w	800c8b0 <__ssvfiscanf_r+0x2d8>
 800c60e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800c612:	f013 0308 	ands.w	r3, r3, #8
 800c616:	f102 0501 	add.w	r5, r2, #1
 800c61a:	d019      	beq.n	800c650 <__ssvfiscanf_r+0x78>
 800c61c:	6863      	ldr	r3, [r4, #4]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dd0f      	ble.n	800c642 <__ssvfiscanf_r+0x6a>
 800c622:	6823      	ldr	r3, [r4, #0]
 800c624:	781a      	ldrb	r2, [r3, #0]
 800c626:	5cba      	ldrb	r2, [r7, r2]
 800c628:	0712      	lsls	r2, r2, #28
 800c62a:	d401      	bmi.n	800c630 <__ssvfiscanf_r+0x58>
 800c62c:	462a      	mov	r2, r5
 800c62e:	e7e8      	b.n	800c602 <__ssvfiscanf_r+0x2a>
 800c630:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c632:	3201      	adds	r2, #1
 800c634:	9245      	str	r2, [sp, #276]	; 0x114
 800c636:	6862      	ldr	r2, [r4, #4]
 800c638:	3301      	adds	r3, #1
 800c63a:	3a01      	subs	r2, #1
 800c63c:	6062      	str	r2, [r4, #4]
 800c63e:	6023      	str	r3, [r4, #0]
 800c640:	e7ec      	b.n	800c61c <__ssvfiscanf_r+0x44>
 800c642:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c644:	4621      	mov	r1, r4
 800c646:	4630      	mov	r0, r6
 800c648:	4798      	blx	r3
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d0e9      	beq.n	800c622 <__ssvfiscanf_r+0x4a>
 800c64e:	e7ed      	b.n	800c62c <__ssvfiscanf_r+0x54>
 800c650:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800c654:	f040 8083 	bne.w	800c75e <__ssvfiscanf_r+0x186>
 800c658:	9341      	str	r3, [sp, #260]	; 0x104
 800c65a:	9343      	str	r3, [sp, #268]	; 0x10c
 800c65c:	7853      	ldrb	r3, [r2, #1]
 800c65e:	2b2a      	cmp	r3, #42	; 0x2a
 800c660:	bf02      	ittt	eq
 800c662:	2310      	moveq	r3, #16
 800c664:	1c95      	addeq	r5, r2, #2
 800c666:	9341      	streq	r3, [sp, #260]	; 0x104
 800c668:	220a      	movs	r2, #10
 800c66a:	46ab      	mov	fp, r5
 800c66c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c670:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c674:	2b09      	cmp	r3, #9
 800c676:	d91d      	bls.n	800c6b4 <__ssvfiscanf_r+0xdc>
 800c678:	4891      	ldr	r0, [pc, #580]	; (800c8c0 <__ssvfiscanf_r+0x2e8>)
 800c67a:	2203      	movs	r2, #3
 800c67c:	f7f3 fdd0 	bl	8000220 <memchr>
 800c680:	b140      	cbz	r0, 800c694 <__ssvfiscanf_r+0xbc>
 800c682:	2301      	movs	r3, #1
 800c684:	eba0 0009 	sub.w	r0, r0, r9
 800c688:	fa03 f000 	lsl.w	r0, r3, r0
 800c68c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c68e:	4318      	orrs	r0, r3
 800c690:	9041      	str	r0, [sp, #260]	; 0x104
 800c692:	465d      	mov	r5, fp
 800c694:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c698:	2b78      	cmp	r3, #120	; 0x78
 800c69a:	d806      	bhi.n	800c6aa <__ssvfiscanf_r+0xd2>
 800c69c:	2b57      	cmp	r3, #87	; 0x57
 800c69e:	d810      	bhi.n	800c6c2 <__ssvfiscanf_r+0xea>
 800c6a0:	2b25      	cmp	r3, #37	; 0x25
 800c6a2:	d05c      	beq.n	800c75e <__ssvfiscanf_r+0x186>
 800c6a4:	d856      	bhi.n	800c754 <__ssvfiscanf_r+0x17c>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d074      	beq.n	800c794 <__ssvfiscanf_r+0x1bc>
 800c6aa:	2303      	movs	r3, #3
 800c6ac:	9347      	str	r3, [sp, #284]	; 0x11c
 800c6ae:	230a      	movs	r3, #10
 800c6b0:	9342      	str	r3, [sp, #264]	; 0x108
 800c6b2:	e081      	b.n	800c7b8 <__ssvfiscanf_r+0x1e0>
 800c6b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c6b6:	fb02 1303 	mla	r3, r2, r3, r1
 800c6ba:	3b30      	subs	r3, #48	; 0x30
 800c6bc:	9343      	str	r3, [sp, #268]	; 0x10c
 800c6be:	465d      	mov	r5, fp
 800c6c0:	e7d3      	b.n	800c66a <__ssvfiscanf_r+0x92>
 800c6c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c6c6:	2a20      	cmp	r2, #32
 800c6c8:	d8ef      	bhi.n	800c6aa <__ssvfiscanf_r+0xd2>
 800c6ca:	a101      	add	r1, pc, #4	; (adr r1, 800c6d0 <__ssvfiscanf_r+0xf8>)
 800c6cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c6d0:	0800c7a3 	.word	0x0800c7a3
 800c6d4:	0800c6ab 	.word	0x0800c6ab
 800c6d8:	0800c6ab 	.word	0x0800c6ab
 800c6dc:	0800c801 	.word	0x0800c801
 800c6e0:	0800c6ab 	.word	0x0800c6ab
 800c6e4:	0800c6ab 	.word	0x0800c6ab
 800c6e8:	0800c6ab 	.word	0x0800c6ab
 800c6ec:	0800c6ab 	.word	0x0800c6ab
 800c6f0:	0800c6ab 	.word	0x0800c6ab
 800c6f4:	0800c6ab 	.word	0x0800c6ab
 800c6f8:	0800c6ab 	.word	0x0800c6ab
 800c6fc:	0800c817 	.word	0x0800c817
 800c700:	0800c7ed 	.word	0x0800c7ed
 800c704:	0800c75b 	.word	0x0800c75b
 800c708:	0800c75b 	.word	0x0800c75b
 800c70c:	0800c75b 	.word	0x0800c75b
 800c710:	0800c6ab 	.word	0x0800c6ab
 800c714:	0800c7f1 	.word	0x0800c7f1
 800c718:	0800c6ab 	.word	0x0800c6ab
 800c71c:	0800c6ab 	.word	0x0800c6ab
 800c720:	0800c6ab 	.word	0x0800c6ab
 800c724:	0800c6ab 	.word	0x0800c6ab
 800c728:	0800c827 	.word	0x0800c827
 800c72c:	0800c7f9 	.word	0x0800c7f9
 800c730:	0800c79b 	.word	0x0800c79b
 800c734:	0800c6ab 	.word	0x0800c6ab
 800c738:	0800c6ab 	.word	0x0800c6ab
 800c73c:	0800c823 	.word	0x0800c823
 800c740:	0800c6ab 	.word	0x0800c6ab
 800c744:	0800c7ed 	.word	0x0800c7ed
 800c748:	0800c6ab 	.word	0x0800c6ab
 800c74c:	0800c6ab 	.word	0x0800c6ab
 800c750:	0800c7a3 	.word	0x0800c7a3
 800c754:	3b45      	subs	r3, #69	; 0x45
 800c756:	2b02      	cmp	r3, #2
 800c758:	d8a7      	bhi.n	800c6aa <__ssvfiscanf_r+0xd2>
 800c75a:	2305      	movs	r3, #5
 800c75c:	e02b      	b.n	800c7b6 <__ssvfiscanf_r+0x1de>
 800c75e:	6863      	ldr	r3, [r4, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	dd0d      	ble.n	800c780 <__ssvfiscanf_r+0x1a8>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	781a      	ldrb	r2, [r3, #0]
 800c768:	4552      	cmp	r2, sl
 800c76a:	f040 80a1 	bne.w	800c8b0 <__ssvfiscanf_r+0x2d8>
 800c76e:	3301      	adds	r3, #1
 800c770:	6862      	ldr	r2, [r4, #4]
 800c772:	6023      	str	r3, [r4, #0]
 800c774:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c776:	3a01      	subs	r2, #1
 800c778:	3301      	adds	r3, #1
 800c77a:	6062      	str	r2, [r4, #4]
 800c77c:	9345      	str	r3, [sp, #276]	; 0x114
 800c77e:	e755      	b.n	800c62c <__ssvfiscanf_r+0x54>
 800c780:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c782:	4621      	mov	r1, r4
 800c784:	4630      	mov	r0, r6
 800c786:	4798      	blx	r3
 800c788:	2800      	cmp	r0, #0
 800c78a:	d0eb      	beq.n	800c764 <__ssvfiscanf_r+0x18c>
 800c78c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c78e:	2800      	cmp	r0, #0
 800c790:	f040 8084 	bne.w	800c89c <__ssvfiscanf_r+0x2c4>
 800c794:	f04f 30ff 	mov.w	r0, #4294967295
 800c798:	e086      	b.n	800c8a8 <__ssvfiscanf_r+0x2d0>
 800c79a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c79c:	f042 0220 	orr.w	r2, r2, #32
 800c7a0:	9241      	str	r2, [sp, #260]	; 0x104
 800c7a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c7a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c7a8:	9241      	str	r2, [sp, #260]	; 0x104
 800c7aa:	2210      	movs	r2, #16
 800c7ac:	2b6f      	cmp	r3, #111	; 0x6f
 800c7ae:	9242      	str	r2, [sp, #264]	; 0x108
 800c7b0:	bf34      	ite	cc
 800c7b2:	2303      	movcc	r3, #3
 800c7b4:	2304      	movcs	r3, #4
 800c7b6:	9347      	str	r3, [sp, #284]	; 0x11c
 800c7b8:	6863      	ldr	r3, [r4, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	dd41      	ble.n	800c842 <__ssvfiscanf_r+0x26a>
 800c7be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c7c0:	0659      	lsls	r1, r3, #25
 800c7c2:	d404      	bmi.n	800c7ce <__ssvfiscanf_r+0x1f6>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	781a      	ldrb	r2, [r3, #0]
 800c7c8:	5cba      	ldrb	r2, [r7, r2]
 800c7ca:	0712      	lsls	r2, r2, #28
 800c7cc:	d440      	bmi.n	800c850 <__ssvfiscanf_r+0x278>
 800c7ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	dc4f      	bgt.n	800c874 <__ssvfiscanf_r+0x29c>
 800c7d4:	466b      	mov	r3, sp
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	a941      	add	r1, sp, #260	; 0x104
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f000 f9ce 	bl	800cb7c <_scanf_chars>
 800c7e0:	2801      	cmp	r0, #1
 800c7e2:	d065      	beq.n	800c8b0 <__ssvfiscanf_r+0x2d8>
 800c7e4:	2802      	cmp	r0, #2
 800c7e6:	f47f af21 	bne.w	800c62c <__ssvfiscanf_r+0x54>
 800c7ea:	e7cf      	b.n	800c78c <__ssvfiscanf_r+0x1b4>
 800c7ec:	220a      	movs	r2, #10
 800c7ee:	e7dd      	b.n	800c7ac <__ssvfiscanf_r+0x1d4>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9342      	str	r3, [sp, #264]	; 0x108
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	e7de      	b.n	800c7b6 <__ssvfiscanf_r+0x1de>
 800c7f8:	2308      	movs	r3, #8
 800c7fa:	9342      	str	r3, [sp, #264]	; 0x108
 800c7fc:	2304      	movs	r3, #4
 800c7fe:	e7da      	b.n	800c7b6 <__ssvfiscanf_r+0x1de>
 800c800:	4629      	mov	r1, r5
 800c802:	4640      	mov	r0, r8
 800c804:	f000 fb30 	bl	800ce68 <__sccl>
 800c808:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c80e:	9341      	str	r3, [sp, #260]	; 0x104
 800c810:	4605      	mov	r5, r0
 800c812:	2301      	movs	r3, #1
 800c814:	e7cf      	b.n	800c7b6 <__ssvfiscanf_r+0x1de>
 800c816:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81c:	9341      	str	r3, [sp, #260]	; 0x104
 800c81e:	2300      	movs	r3, #0
 800c820:	e7c9      	b.n	800c7b6 <__ssvfiscanf_r+0x1de>
 800c822:	2302      	movs	r3, #2
 800c824:	e7c7      	b.n	800c7b6 <__ssvfiscanf_r+0x1de>
 800c826:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c828:	06c3      	lsls	r3, r0, #27
 800c82a:	f53f aeff 	bmi.w	800c62c <__ssvfiscanf_r+0x54>
 800c82e:	9b00      	ldr	r3, [sp, #0]
 800c830:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c832:	1d19      	adds	r1, r3, #4
 800c834:	9100      	str	r1, [sp, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	07c0      	lsls	r0, r0, #31
 800c83a:	bf4c      	ite	mi
 800c83c:	801a      	strhmi	r2, [r3, #0]
 800c83e:	601a      	strpl	r2, [r3, #0]
 800c840:	e6f4      	b.n	800c62c <__ssvfiscanf_r+0x54>
 800c842:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c844:	4621      	mov	r1, r4
 800c846:	4630      	mov	r0, r6
 800c848:	4798      	blx	r3
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d0b7      	beq.n	800c7be <__ssvfiscanf_r+0x1e6>
 800c84e:	e79d      	b.n	800c78c <__ssvfiscanf_r+0x1b4>
 800c850:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c852:	3201      	adds	r2, #1
 800c854:	9245      	str	r2, [sp, #276]	; 0x114
 800c856:	6862      	ldr	r2, [r4, #4]
 800c858:	3a01      	subs	r2, #1
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	6062      	str	r2, [r4, #4]
 800c85e:	dd02      	ble.n	800c866 <__ssvfiscanf_r+0x28e>
 800c860:	3301      	adds	r3, #1
 800c862:	6023      	str	r3, [r4, #0]
 800c864:	e7ae      	b.n	800c7c4 <__ssvfiscanf_r+0x1ec>
 800c866:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c868:	4621      	mov	r1, r4
 800c86a:	4630      	mov	r0, r6
 800c86c:	4798      	blx	r3
 800c86e:	2800      	cmp	r0, #0
 800c870:	d0a8      	beq.n	800c7c4 <__ssvfiscanf_r+0x1ec>
 800c872:	e78b      	b.n	800c78c <__ssvfiscanf_r+0x1b4>
 800c874:	2b04      	cmp	r3, #4
 800c876:	dc06      	bgt.n	800c886 <__ssvfiscanf_r+0x2ae>
 800c878:	466b      	mov	r3, sp
 800c87a:	4622      	mov	r2, r4
 800c87c:	a941      	add	r1, sp, #260	; 0x104
 800c87e:	4630      	mov	r0, r6
 800c880:	f000 f9d4 	bl	800cc2c <_scanf_i>
 800c884:	e7ac      	b.n	800c7e0 <__ssvfiscanf_r+0x208>
 800c886:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <__ssvfiscanf_r+0x2ec>)
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f43f aecf 	beq.w	800c62c <__ssvfiscanf_r+0x54>
 800c88e:	466b      	mov	r3, sp
 800c890:	4622      	mov	r2, r4
 800c892:	a941      	add	r1, sp, #260	; 0x104
 800c894:	4630      	mov	r0, r6
 800c896:	f7fc faa3 	bl	8008de0 <_scanf_float>
 800c89a:	e7a1      	b.n	800c7e0 <__ssvfiscanf_r+0x208>
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c8a2:	bf18      	it	ne
 800c8a4:	f04f 30ff 	movne.w	r0, #4294967295
 800c8a8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c8b2:	e7f9      	b.n	800c8a8 <__ssvfiscanf_r+0x2d0>
 800c8b4:	0800c525 	.word	0x0800c525
 800c8b8:	0800c59f 	.word	0x0800c59f
 800c8bc:	0800d749 	.word	0x0800d749
 800c8c0:	0800db22 	.word	0x0800db22
 800c8c4:	08008de1 	.word	0x08008de1

0800c8c8 <__sfputc_r>:
 800c8c8:	6893      	ldr	r3, [r2, #8]
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	b410      	push	{r4}
 800c8d0:	6093      	str	r3, [r2, #8]
 800c8d2:	da08      	bge.n	800c8e6 <__sfputc_r+0x1e>
 800c8d4:	6994      	ldr	r4, [r2, #24]
 800c8d6:	42a3      	cmp	r3, r4
 800c8d8:	db01      	blt.n	800c8de <__sfputc_r+0x16>
 800c8da:	290a      	cmp	r1, #10
 800c8dc:	d103      	bne.n	800c8e6 <__sfputc_r+0x1e>
 800c8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8e2:	f000 bbc5 	b.w	800d070 <__swbuf_r>
 800c8e6:	6813      	ldr	r3, [r2, #0]
 800c8e8:	1c58      	adds	r0, r3, #1
 800c8ea:	6010      	str	r0, [r2, #0]
 800c8ec:	7019      	strb	r1, [r3, #0]
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <__sfputs_r>:
 800c8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f8:	4606      	mov	r6, r0
 800c8fa:	460f      	mov	r7, r1
 800c8fc:	4614      	mov	r4, r2
 800c8fe:	18d5      	adds	r5, r2, r3
 800c900:	42ac      	cmp	r4, r5
 800c902:	d101      	bne.n	800c908 <__sfputs_r+0x12>
 800c904:	2000      	movs	r0, #0
 800c906:	e007      	b.n	800c918 <__sfputs_r+0x22>
 800c908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90c:	463a      	mov	r2, r7
 800c90e:	4630      	mov	r0, r6
 800c910:	f7ff ffda 	bl	800c8c8 <__sfputc_r>
 800c914:	1c43      	adds	r3, r0, #1
 800c916:	d1f3      	bne.n	800c900 <__sfputs_r+0xa>
 800c918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c91c <_vfiprintf_r>:
 800c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c920:	460d      	mov	r5, r1
 800c922:	b09d      	sub	sp, #116	; 0x74
 800c924:	4614      	mov	r4, r2
 800c926:	4698      	mov	r8, r3
 800c928:	4606      	mov	r6, r0
 800c92a:	b118      	cbz	r0, 800c934 <_vfiprintf_r+0x18>
 800c92c:	6983      	ldr	r3, [r0, #24]
 800c92e:	b90b      	cbnz	r3, 800c934 <_vfiprintf_r+0x18>
 800c930:	f7fe fada 	bl	800aee8 <__sinit>
 800c934:	4b89      	ldr	r3, [pc, #548]	; (800cb5c <_vfiprintf_r+0x240>)
 800c936:	429d      	cmp	r5, r3
 800c938:	d11b      	bne.n	800c972 <_vfiprintf_r+0x56>
 800c93a:	6875      	ldr	r5, [r6, #4]
 800c93c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c93e:	07d9      	lsls	r1, r3, #31
 800c940:	d405      	bmi.n	800c94e <_vfiprintf_r+0x32>
 800c942:	89ab      	ldrh	r3, [r5, #12]
 800c944:	059a      	lsls	r2, r3, #22
 800c946:	d402      	bmi.n	800c94e <_vfiprintf_r+0x32>
 800c948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c94a:	f7fe fede 	bl	800b70a <__retarget_lock_acquire_recursive>
 800c94e:	89ab      	ldrh	r3, [r5, #12]
 800c950:	071b      	lsls	r3, r3, #28
 800c952:	d501      	bpl.n	800c958 <_vfiprintf_r+0x3c>
 800c954:	692b      	ldr	r3, [r5, #16]
 800c956:	b9eb      	cbnz	r3, 800c994 <_vfiprintf_r+0x78>
 800c958:	4629      	mov	r1, r5
 800c95a:	4630      	mov	r0, r6
 800c95c:	f000 fbe8 	bl	800d130 <__swsetup_r>
 800c960:	b1c0      	cbz	r0, 800c994 <_vfiprintf_r+0x78>
 800c962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c964:	07dc      	lsls	r4, r3, #31
 800c966:	d50e      	bpl.n	800c986 <_vfiprintf_r+0x6a>
 800c968:	f04f 30ff 	mov.w	r0, #4294967295
 800c96c:	b01d      	add	sp, #116	; 0x74
 800c96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c972:	4b7b      	ldr	r3, [pc, #492]	; (800cb60 <_vfiprintf_r+0x244>)
 800c974:	429d      	cmp	r5, r3
 800c976:	d101      	bne.n	800c97c <_vfiprintf_r+0x60>
 800c978:	68b5      	ldr	r5, [r6, #8]
 800c97a:	e7df      	b.n	800c93c <_vfiprintf_r+0x20>
 800c97c:	4b79      	ldr	r3, [pc, #484]	; (800cb64 <_vfiprintf_r+0x248>)
 800c97e:	429d      	cmp	r5, r3
 800c980:	bf08      	it	eq
 800c982:	68f5      	ldreq	r5, [r6, #12]
 800c984:	e7da      	b.n	800c93c <_vfiprintf_r+0x20>
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	0598      	lsls	r0, r3, #22
 800c98a:	d4ed      	bmi.n	800c968 <_vfiprintf_r+0x4c>
 800c98c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c98e:	f7fe febd 	bl	800b70c <__retarget_lock_release_recursive>
 800c992:	e7e9      	b.n	800c968 <_vfiprintf_r+0x4c>
 800c994:	2300      	movs	r3, #0
 800c996:	9309      	str	r3, [sp, #36]	; 0x24
 800c998:	2320      	movs	r3, #32
 800c99a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c99e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9a2:	2330      	movs	r3, #48	; 0x30
 800c9a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb68 <_vfiprintf_r+0x24c>
 800c9a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9ac:	f04f 0901 	mov.w	r9, #1
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	469a      	mov	sl, r3
 800c9b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9b8:	b10a      	cbz	r2, 800c9be <_vfiprintf_r+0xa2>
 800c9ba:	2a25      	cmp	r2, #37	; 0x25
 800c9bc:	d1f9      	bne.n	800c9b2 <_vfiprintf_r+0x96>
 800c9be:	ebba 0b04 	subs.w	fp, sl, r4
 800c9c2:	d00b      	beq.n	800c9dc <_vfiprintf_r+0xc0>
 800c9c4:	465b      	mov	r3, fp
 800c9c6:	4622      	mov	r2, r4
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7ff ff93 	bl	800c8f6 <__sfputs_r>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	f000 80aa 	beq.w	800cb2a <_vfiprintf_r+0x20e>
 800c9d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9d8:	445a      	add	r2, fp
 800c9da:	9209      	str	r2, [sp, #36]	; 0x24
 800c9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80a2 	beq.w	800cb2a <_vfiprintf_r+0x20e>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9f0:	f10a 0a01 	add.w	sl, sl, #1
 800c9f4:	9304      	str	r3, [sp, #16]
 800c9f6:	9307      	str	r3, [sp, #28]
 800c9f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9fc:	931a      	str	r3, [sp, #104]	; 0x68
 800c9fe:	4654      	mov	r4, sl
 800ca00:	2205      	movs	r2, #5
 800ca02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca06:	4858      	ldr	r0, [pc, #352]	; (800cb68 <_vfiprintf_r+0x24c>)
 800ca08:	f7f3 fc0a 	bl	8000220 <memchr>
 800ca0c:	9a04      	ldr	r2, [sp, #16]
 800ca0e:	b9d8      	cbnz	r0, 800ca48 <_vfiprintf_r+0x12c>
 800ca10:	06d1      	lsls	r1, r2, #27
 800ca12:	bf44      	itt	mi
 800ca14:	2320      	movmi	r3, #32
 800ca16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca1a:	0713      	lsls	r3, r2, #28
 800ca1c:	bf44      	itt	mi
 800ca1e:	232b      	movmi	r3, #43	; 0x2b
 800ca20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca24:	f89a 3000 	ldrb.w	r3, [sl]
 800ca28:	2b2a      	cmp	r3, #42	; 0x2a
 800ca2a:	d015      	beq.n	800ca58 <_vfiprintf_r+0x13c>
 800ca2c:	9a07      	ldr	r2, [sp, #28]
 800ca2e:	4654      	mov	r4, sl
 800ca30:	2000      	movs	r0, #0
 800ca32:	f04f 0c0a 	mov.w	ip, #10
 800ca36:	4621      	mov	r1, r4
 800ca38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca3c:	3b30      	subs	r3, #48	; 0x30
 800ca3e:	2b09      	cmp	r3, #9
 800ca40:	d94e      	bls.n	800cae0 <_vfiprintf_r+0x1c4>
 800ca42:	b1b0      	cbz	r0, 800ca72 <_vfiprintf_r+0x156>
 800ca44:	9207      	str	r2, [sp, #28]
 800ca46:	e014      	b.n	800ca72 <_vfiprintf_r+0x156>
 800ca48:	eba0 0308 	sub.w	r3, r0, r8
 800ca4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ca50:	4313      	orrs	r3, r2
 800ca52:	9304      	str	r3, [sp, #16]
 800ca54:	46a2      	mov	sl, r4
 800ca56:	e7d2      	b.n	800c9fe <_vfiprintf_r+0xe2>
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	1d19      	adds	r1, r3, #4
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	9103      	str	r1, [sp, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	bfbb      	ittet	lt
 800ca64:	425b      	neglt	r3, r3
 800ca66:	f042 0202 	orrlt.w	r2, r2, #2
 800ca6a:	9307      	strge	r3, [sp, #28]
 800ca6c:	9307      	strlt	r3, [sp, #28]
 800ca6e:	bfb8      	it	lt
 800ca70:	9204      	strlt	r2, [sp, #16]
 800ca72:	7823      	ldrb	r3, [r4, #0]
 800ca74:	2b2e      	cmp	r3, #46	; 0x2e
 800ca76:	d10c      	bne.n	800ca92 <_vfiprintf_r+0x176>
 800ca78:	7863      	ldrb	r3, [r4, #1]
 800ca7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca7c:	d135      	bne.n	800caea <_vfiprintf_r+0x1ce>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	1d1a      	adds	r2, r3, #4
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	9203      	str	r2, [sp, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	bfb8      	it	lt
 800ca8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca8e:	3402      	adds	r4, #2
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb78 <_vfiprintf_r+0x25c>
 800ca96:	7821      	ldrb	r1, [r4, #0]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	4650      	mov	r0, sl
 800ca9c:	f7f3 fbc0 	bl	8000220 <memchr>
 800caa0:	b140      	cbz	r0, 800cab4 <_vfiprintf_r+0x198>
 800caa2:	2340      	movs	r3, #64	; 0x40
 800caa4:	eba0 000a 	sub.w	r0, r0, sl
 800caa8:	fa03 f000 	lsl.w	r0, r3, r0
 800caac:	9b04      	ldr	r3, [sp, #16]
 800caae:	4303      	orrs	r3, r0
 800cab0:	3401      	adds	r4, #1
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab8:	482c      	ldr	r0, [pc, #176]	; (800cb6c <_vfiprintf_r+0x250>)
 800caba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cabe:	2206      	movs	r2, #6
 800cac0:	f7f3 fbae 	bl	8000220 <memchr>
 800cac4:	2800      	cmp	r0, #0
 800cac6:	d03f      	beq.n	800cb48 <_vfiprintf_r+0x22c>
 800cac8:	4b29      	ldr	r3, [pc, #164]	; (800cb70 <_vfiprintf_r+0x254>)
 800caca:	bb1b      	cbnz	r3, 800cb14 <_vfiprintf_r+0x1f8>
 800cacc:	9b03      	ldr	r3, [sp, #12]
 800cace:	3307      	adds	r3, #7
 800cad0:	f023 0307 	bic.w	r3, r3, #7
 800cad4:	3308      	adds	r3, #8
 800cad6:	9303      	str	r3, [sp, #12]
 800cad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cada:	443b      	add	r3, r7
 800cadc:	9309      	str	r3, [sp, #36]	; 0x24
 800cade:	e767      	b.n	800c9b0 <_vfiprintf_r+0x94>
 800cae0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cae4:	460c      	mov	r4, r1
 800cae6:	2001      	movs	r0, #1
 800cae8:	e7a5      	b.n	800ca36 <_vfiprintf_r+0x11a>
 800caea:	2300      	movs	r3, #0
 800caec:	3401      	adds	r4, #1
 800caee:	9305      	str	r3, [sp, #20]
 800caf0:	4619      	mov	r1, r3
 800caf2:	f04f 0c0a 	mov.w	ip, #10
 800caf6:	4620      	mov	r0, r4
 800caf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cafc:	3a30      	subs	r2, #48	; 0x30
 800cafe:	2a09      	cmp	r2, #9
 800cb00:	d903      	bls.n	800cb0a <_vfiprintf_r+0x1ee>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0c5      	beq.n	800ca92 <_vfiprintf_r+0x176>
 800cb06:	9105      	str	r1, [sp, #20]
 800cb08:	e7c3      	b.n	800ca92 <_vfiprintf_r+0x176>
 800cb0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb0e:	4604      	mov	r4, r0
 800cb10:	2301      	movs	r3, #1
 800cb12:	e7f0      	b.n	800caf6 <_vfiprintf_r+0x1da>
 800cb14:	ab03      	add	r3, sp, #12
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	462a      	mov	r2, r5
 800cb1a:	4b16      	ldr	r3, [pc, #88]	; (800cb74 <_vfiprintf_r+0x258>)
 800cb1c:	a904      	add	r1, sp, #16
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f7fb fd94 	bl	800864c <_printf_float>
 800cb24:	4607      	mov	r7, r0
 800cb26:	1c78      	adds	r0, r7, #1
 800cb28:	d1d6      	bne.n	800cad8 <_vfiprintf_r+0x1bc>
 800cb2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb2c:	07d9      	lsls	r1, r3, #31
 800cb2e:	d405      	bmi.n	800cb3c <_vfiprintf_r+0x220>
 800cb30:	89ab      	ldrh	r3, [r5, #12]
 800cb32:	059a      	lsls	r2, r3, #22
 800cb34:	d402      	bmi.n	800cb3c <_vfiprintf_r+0x220>
 800cb36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb38:	f7fe fde8 	bl	800b70c <__retarget_lock_release_recursive>
 800cb3c:	89ab      	ldrh	r3, [r5, #12]
 800cb3e:	065b      	lsls	r3, r3, #25
 800cb40:	f53f af12 	bmi.w	800c968 <_vfiprintf_r+0x4c>
 800cb44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb46:	e711      	b.n	800c96c <_vfiprintf_r+0x50>
 800cb48:	ab03      	add	r3, sp, #12
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <_vfiprintf_r+0x258>)
 800cb50:	a904      	add	r1, sp, #16
 800cb52:	4630      	mov	r0, r6
 800cb54:	f7fc f81e 	bl	8008b94 <_printf_i>
 800cb58:	e7e4      	b.n	800cb24 <_vfiprintf_r+0x208>
 800cb5a:	bf00      	nop
 800cb5c:	0800d900 	.word	0x0800d900
 800cb60:	0800d920 	.word	0x0800d920
 800cb64:	0800d8e0 	.word	0x0800d8e0
 800cb68:	0800db1c 	.word	0x0800db1c
 800cb6c:	0800db26 	.word	0x0800db26
 800cb70:	0800864d 	.word	0x0800864d
 800cb74:	0800c8f7 	.word	0x0800c8f7
 800cb78:	0800db22 	.word	0x0800db22

0800cb7c <_scanf_chars>:
 800cb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb80:	4615      	mov	r5, r2
 800cb82:	688a      	ldr	r2, [r1, #8]
 800cb84:	4680      	mov	r8, r0
 800cb86:	460c      	mov	r4, r1
 800cb88:	b932      	cbnz	r2, 800cb98 <_scanf_chars+0x1c>
 800cb8a:	698a      	ldr	r2, [r1, #24]
 800cb8c:	2a00      	cmp	r2, #0
 800cb8e:	bf0c      	ite	eq
 800cb90:	2201      	moveq	r2, #1
 800cb92:	f04f 32ff 	movne.w	r2, #4294967295
 800cb96:	608a      	str	r2, [r1, #8]
 800cb98:	6822      	ldr	r2, [r4, #0]
 800cb9a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800cc28 <_scanf_chars+0xac>
 800cb9e:	06d1      	lsls	r1, r2, #27
 800cba0:	bf5f      	itttt	pl
 800cba2:	681a      	ldrpl	r2, [r3, #0]
 800cba4:	1d11      	addpl	r1, r2, #4
 800cba6:	6019      	strpl	r1, [r3, #0]
 800cba8:	6816      	ldrpl	r6, [r2, #0]
 800cbaa:	2700      	movs	r7, #0
 800cbac:	69a0      	ldr	r0, [r4, #24]
 800cbae:	b188      	cbz	r0, 800cbd4 <_scanf_chars+0x58>
 800cbb0:	2801      	cmp	r0, #1
 800cbb2:	d107      	bne.n	800cbc4 <_scanf_chars+0x48>
 800cbb4:	682b      	ldr	r3, [r5, #0]
 800cbb6:	781a      	ldrb	r2, [r3, #0]
 800cbb8:	6963      	ldr	r3, [r4, #20]
 800cbba:	5c9b      	ldrb	r3, [r3, r2]
 800cbbc:	b953      	cbnz	r3, 800cbd4 <_scanf_chars+0x58>
 800cbbe:	bb27      	cbnz	r7, 800cc0a <_scanf_chars+0x8e>
 800cbc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbc4:	2802      	cmp	r0, #2
 800cbc6:	d120      	bne.n	800cc0a <_scanf_chars+0x8e>
 800cbc8:	682b      	ldr	r3, [r5, #0]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cbd0:	071b      	lsls	r3, r3, #28
 800cbd2:	d41a      	bmi.n	800cc0a <_scanf_chars+0x8e>
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	06da      	lsls	r2, r3, #27
 800cbd8:	bf5e      	ittt	pl
 800cbda:	682b      	ldrpl	r3, [r5, #0]
 800cbdc:	781b      	ldrbpl	r3, [r3, #0]
 800cbde:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cbe2:	682a      	ldr	r2, [r5, #0]
 800cbe4:	686b      	ldr	r3, [r5, #4]
 800cbe6:	3201      	adds	r2, #1
 800cbe8:	602a      	str	r2, [r5, #0]
 800cbea:	68a2      	ldr	r2, [r4, #8]
 800cbec:	3b01      	subs	r3, #1
 800cbee:	3a01      	subs	r2, #1
 800cbf0:	606b      	str	r3, [r5, #4]
 800cbf2:	3701      	adds	r7, #1
 800cbf4:	60a2      	str	r2, [r4, #8]
 800cbf6:	b142      	cbz	r2, 800cc0a <_scanf_chars+0x8e>
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	dcd7      	bgt.n	800cbac <_scanf_chars+0x30>
 800cbfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cc00:	4629      	mov	r1, r5
 800cc02:	4640      	mov	r0, r8
 800cc04:	4798      	blx	r3
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d0d0      	beq.n	800cbac <_scanf_chars+0x30>
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	f013 0310 	ands.w	r3, r3, #16
 800cc10:	d105      	bne.n	800cc1e <_scanf_chars+0xa2>
 800cc12:	68e2      	ldr	r2, [r4, #12]
 800cc14:	3201      	adds	r2, #1
 800cc16:	60e2      	str	r2, [r4, #12]
 800cc18:	69a2      	ldr	r2, [r4, #24]
 800cc1a:	b102      	cbz	r2, 800cc1e <_scanf_chars+0xa2>
 800cc1c:	7033      	strb	r3, [r6, #0]
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	441f      	add	r7, r3
 800cc22:	6127      	str	r7, [r4, #16]
 800cc24:	2000      	movs	r0, #0
 800cc26:	e7cb      	b.n	800cbc0 <_scanf_chars+0x44>
 800cc28:	0800d749 	.word	0x0800d749

0800cc2c <_scanf_i>:
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	4698      	mov	r8, r3
 800cc32:	4b74      	ldr	r3, [pc, #464]	; (800ce04 <_scanf_i+0x1d8>)
 800cc34:	460c      	mov	r4, r1
 800cc36:	4682      	mov	sl, r0
 800cc38:	4616      	mov	r6, r2
 800cc3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	ab03      	add	r3, sp, #12
 800cc42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cc46:	4b70      	ldr	r3, [pc, #448]	; (800ce08 <_scanf_i+0x1dc>)
 800cc48:	69a1      	ldr	r1, [r4, #24]
 800cc4a:	4a70      	ldr	r2, [pc, #448]	; (800ce0c <_scanf_i+0x1e0>)
 800cc4c:	2903      	cmp	r1, #3
 800cc4e:	bf18      	it	ne
 800cc50:	461a      	movne	r2, r3
 800cc52:	68a3      	ldr	r3, [r4, #8]
 800cc54:	9201      	str	r2, [sp, #4]
 800cc56:	1e5a      	subs	r2, r3, #1
 800cc58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc5c:	bf88      	it	hi
 800cc5e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cc62:	4627      	mov	r7, r4
 800cc64:	bf82      	ittt	hi
 800cc66:	eb03 0905 	addhi.w	r9, r3, r5
 800cc6a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc6e:	60a3      	strhi	r3, [r4, #8]
 800cc70:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cc74:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cc78:	bf98      	it	ls
 800cc7a:	f04f 0900 	movls.w	r9, #0
 800cc7e:	6023      	str	r3, [r4, #0]
 800cc80:	463d      	mov	r5, r7
 800cc82:	f04f 0b00 	mov.w	fp, #0
 800cc86:	6831      	ldr	r1, [r6, #0]
 800cc88:	ab03      	add	r3, sp, #12
 800cc8a:	7809      	ldrb	r1, [r1, #0]
 800cc8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cc90:	2202      	movs	r2, #2
 800cc92:	f7f3 fac5 	bl	8000220 <memchr>
 800cc96:	b328      	cbz	r0, 800cce4 <_scanf_i+0xb8>
 800cc98:	f1bb 0f01 	cmp.w	fp, #1
 800cc9c:	d159      	bne.n	800cd52 <_scanf_i+0x126>
 800cc9e:	6862      	ldr	r2, [r4, #4]
 800cca0:	b92a      	cbnz	r2, 800ccae <_scanf_i+0x82>
 800cca2:	6822      	ldr	r2, [r4, #0]
 800cca4:	2308      	movs	r3, #8
 800cca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccaa:	6063      	str	r3, [r4, #4]
 800ccac:	6022      	str	r2, [r4, #0]
 800ccae:	6822      	ldr	r2, [r4, #0]
 800ccb0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ccb4:	6022      	str	r2, [r4, #0]
 800ccb6:	68a2      	ldr	r2, [r4, #8]
 800ccb8:	1e51      	subs	r1, r2, #1
 800ccba:	60a1      	str	r1, [r4, #8]
 800ccbc:	b192      	cbz	r2, 800cce4 <_scanf_i+0xb8>
 800ccbe:	6832      	ldr	r2, [r6, #0]
 800ccc0:	1c51      	adds	r1, r2, #1
 800ccc2:	6031      	str	r1, [r6, #0]
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	f805 2b01 	strb.w	r2, [r5], #1
 800ccca:	6872      	ldr	r2, [r6, #4]
 800cccc:	3a01      	subs	r2, #1
 800ccce:	2a00      	cmp	r2, #0
 800ccd0:	6072      	str	r2, [r6, #4]
 800ccd2:	dc07      	bgt.n	800cce4 <_scanf_i+0xb8>
 800ccd4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4650      	mov	r0, sl
 800ccdc:	4790      	blx	r2
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f040 8085 	bne.w	800cdee <_scanf_i+0x1c2>
 800cce4:	f10b 0b01 	add.w	fp, fp, #1
 800cce8:	f1bb 0f03 	cmp.w	fp, #3
 800ccec:	d1cb      	bne.n	800cc86 <_scanf_i+0x5a>
 800ccee:	6863      	ldr	r3, [r4, #4]
 800ccf0:	b90b      	cbnz	r3, 800ccf6 <_scanf_i+0xca>
 800ccf2:	230a      	movs	r3, #10
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	6863      	ldr	r3, [r4, #4]
 800ccf8:	4945      	ldr	r1, [pc, #276]	; (800ce10 <_scanf_i+0x1e4>)
 800ccfa:	6960      	ldr	r0, [r4, #20]
 800ccfc:	1ac9      	subs	r1, r1, r3
 800ccfe:	f000 f8b3 	bl	800ce68 <__sccl>
 800cd02:	f04f 0b00 	mov.w	fp, #0
 800cd06:	68a3      	ldr	r3, [r4, #8]
 800cd08:	6822      	ldr	r2, [r4, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d03d      	beq.n	800cd8a <_scanf_i+0x15e>
 800cd0e:	6831      	ldr	r1, [r6, #0]
 800cd10:	6960      	ldr	r0, [r4, #20]
 800cd12:	f891 c000 	ldrb.w	ip, [r1]
 800cd16:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d035      	beq.n	800cd8a <_scanf_i+0x15e>
 800cd1e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cd22:	d124      	bne.n	800cd6e <_scanf_i+0x142>
 800cd24:	0510      	lsls	r0, r2, #20
 800cd26:	d522      	bpl.n	800cd6e <_scanf_i+0x142>
 800cd28:	f10b 0b01 	add.w	fp, fp, #1
 800cd2c:	f1b9 0f00 	cmp.w	r9, #0
 800cd30:	d003      	beq.n	800cd3a <_scanf_i+0x10e>
 800cd32:	3301      	adds	r3, #1
 800cd34:	f109 39ff 	add.w	r9, r9, #4294967295
 800cd38:	60a3      	str	r3, [r4, #8]
 800cd3a:	6873      	ldr	r3, [r6, #4]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	6073      	str	r3, [r6, #4]
 800cd42:	dd1b      	ble.n	800cd7c <_scanf_i+0x150>
 800cd44:	6833      	ldr	r3, [r6, #0]
 800cd46:	3301      	adds	r3, #1
 800cd48:	6033      	str	r3, [r6, #0]
 800cd4a:	68a3      	ldr	r3, [r4, #8]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	60a3      	str	r3, [r4, #8]
 800cd50:	e7d9      	b.n	800cd06 <_scanf_i+0xda>
 800cd52:	f1bb 0f02 	cmp.w	fp, #2
 800cd56:	d1ae      	bne.n	800ccb6 <_scanf_i+0x8a>
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cd5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cd62:	d1bf      	bne.n	800cce4 <_scanf_i+0xb8>
 800cd64:	2310      	movs	r3, #16
 800cd66:	6063      	str	r3, [r4, #4]
 800cd68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd6c:	e7a2      	b.n	800ccb4 <_scanf_i+0x88>
 800cd6e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cd72:	6022      	str	r2, [r4, #0]
 800cd74:	780b      	ldrb	r3, [r1, #0]
 800cd76:	f805 3b01 	strb.w	r3, [r5], #1
 800cd7a:	e7de      	b.n	800cd3a <_scanf_i+0x10e>
 800cd7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd80:	4631      	mov	r1, r6
 800cd82:	4650      	mov	r0, sl
 800cd84:	4798      	blx	r3
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d0df      	beq.n	800cd4a <_scanf_i+0x11e>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	05d9      	lsls	r1, r3, #23
 800cd8e:	d50d      	bpl.n	800cdac <_scanf_i+0x180>
 800cd90:	42bd      	cmp	r5, r7
 800cd92:	d909      	bls.n	800cda8 <_scanf_i+0x17c>
 800cd94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	4650      	mov	r0, sl
 800cda0:	4798      	blx	r3
 800cda2:	f105 39ff 	add.w	r9, r5, #4294967295
 800cda6:	464d      	mov	r5, r9
 800cda8:	42bd      	cmp	r5, r7
 800cdaa:	d028      	beq.n	800cdfe <_scanf_i+0x1d2>
 800cdac:	6822      	ldr	r2, [r4, #0]
 800cdae:	f012 0210 	ands.w	r2, r2, #16
 800cdb2:	d113      	bne.n	800cddc <_scanf_i+0x1b0>
 800cdb4:	702a      	strb	r2, [r5, #0]
 800cdb6:	6863      	ldr	r3, [r4, #4]
 800cdb8:	9e01      	ldr	r6, [sp, #4]
 800cdba:	4639      	mov	r1, r7
 800cdbc:	4650      	mov	r0, sl
 800cdbe:	47b0      	blx	r6
 800cdc0:	f8d8 3000 	ldr.w	r3, [r8]
 800cdc4:	6821      	ldr	r1, [r4, #0]
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	f8c8 2000 	str.w	r2, [r8]
 800cdcc:	f011 0f20 	tst.w	r1, #32
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	d00f      	beq.n	800cdf4 <_scanf_i+0x1c8>
 800cdd4:	6018      	str	r0, [r3, #0]
 800cdd6:	68e3      	ldr	r3, [r4, #12]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	60e3      	str	r3, [r4, #12]
 800cddc:	1bed      	subs	r5, r5, r7
 800cdde:	44ab      	add	fp, r5
 800cde0:	6925      	ldr	r5, [r4, #16]
 800cde2:	445d      	add	r5, fp
 800cde4:	6125      	str	r5, [r4, #16]
 800cde6:	2000      	movs	r0, #0
 800cde8:	b007      	add	sp, #28
 800cdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdee:	f04f 0b00 	mov.w	fp, #0
 800cdf2:	e7ca      	b.n	800cd8a <_scanf_i+0x15e>
 800cdf4:	07ca      	lsls	r2, r1, #31
 800cdf6:	bf4c      	ite	mi
 800cdf8:	8018      	strhmi	r0, [r3, #0]
 800cdfa:	6018      	strpl	r0, [r3, #0]
 800cdfc:	e7eb      	b.n	800cdd6 <_scanf_i+0x1aa>
 800cdfe:	2001      	movs	r0, #1
 800ce00:	e7f2      	b.n	800cde8 <_scanf_i+0x1bc>
 800ce02:	bf00      	nop
 800ce04:	0800d690 	.word	0x0800d690
 800ce08:	0800cff9 	.word	0x0800cff9
 800ce0c:	0800a0c1 	.word	0x0800a0c1
 800ce10:	0800db46 	.word	0x0800db46

0800ce14 <_read_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d07      	ldr	r5, [pc, #28]	; (800ce34 <_read_r+0x20>)
 800ce18:	4604      	mov	r4, r0
 800ce1a:	4608      	mov	r0, r1
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	2200      	movs	r2, #0
 800ce20:	602a      	str	r2, [r5, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	f7f5 fa3a 	bl	800229c <_read>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d102      	bne.n	800ce32 <_read_r+0x1e>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	b103      	cbz	r3, 800ce32 <_read_r+0x1e>
 800ce30:	6023      	str	r3, [r4, #0]
 800ce32:	bd38      	pop	{r3, r4, r5, pc}
 800ce34:	20000950 	.word	0x20000950

0800ce38 <nan>:
 800ce38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce40 <nan+0x8>
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	00000000 	.word	0x00000000
 800ce44:	7ff80000 	.word	0x7ff80000

0800ce48 <_sbrk_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4d06      	ldr	r5, [pc, #24]	; (800ce64 <_sbrk_r+0x1c>)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4604      	mov	r4, r0
 800ce50:	4608      	mov	r0, r1
 800ce52:	602b      	str	r3, [r5, #0]
 800ce54:	f7f5 fa90 	bl	8002378 <_sbrk>
 800ce58:	1c43      	adds	r3, r0, #1
 800ce5a:	d102      	bne.n	800ce62 <_sbrk_r+0x1a>
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	b103      	cbz	r3, 800ce62 <_sbrk_r+0x1a>
 800ce60:	6023      	str	r3, [r4, #0]
 800ce62:	bd38      	pop	{r3, r4, r5, pc}
 800ce64:	20000950 	.word	0x20000950

0800ce68 <__sccl>:
 800ce68:	b570      	push	{r4, r5, r6, lr}
 800ce6a:	780b      	ldrb	r3, [r1, #0]
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	2b5e      	cmp	r3, #94	; 0x5e
 800ce70:	bf0b      	itete	eq
 800ce72:	784b      	ldrbeq	r3, [r1, #1]
 800ce74:	1c48      	addne	r0, r1, #1
 800ce76:	1c88      	addeq	r0, r1, #2
 800ce78:	2200      	movne	r2, #0
 800ce7a:	bf08      	it	eq
 800ce7c:	2201      	moveq	r2, #1
 800ce7e:	1e61      	subs	r1, r4, #1
 800ce80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ce84:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ce88:	42a9      	cmp	r1, r5
 800ce8a:	d1fb      	bne.n	800ce84 <__sccl+0x1c>
 800ce8c:	b90b      	cbnz	r3, 800ce92 <__sccl+0x2a>
 800ce8e:	3801      	subs	r0, #1
 800ce90:	bd70      	pop	{r4, r5, r6, pc}
 800ce92:	f082 0101 	eor.w	r1, r2, #1
 800ce96:	54e1      	strb	r1, [r4, r3]
 800ce98:	1c42      	adds	r2, r0, #1
 800ce9a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ce9e:	2d2d      	cmp	r5, #45	; 0x2d
 800cea0:	f102 36ff 	add.w	r6, r2, #4294967295
 800cea4:	4610      	mov	r0, r2
 800cea6:	d006      	beq.n	800ceb6 <__sccl+0x4e>
 800cea8:	2d5d      	cmp	r5, #93	; 0x5d
 800ceaa:	d0f1      	beq.n	800ce90 <__sccl+0x28>
 800ceac:	b90d      	cbnz	r5, 800ceb2 <__sccl+0x4a>
 800ceae:	4630      	mov	r0, r6
 800ceb0:	e7ee      	b.n	800ce90 <__sccl+0x28>
 800ceb2:	462b      	mov	r3, r5
 800ceb4:	e7ef      	b.n	800ce96 <__sccl+0x2e>
 800ceb6:	7816      	ldrb	r6, [r2, #0]
 800ceb8:	2e5d      	cmp	r6, #93	; 0x5d
 800ceba:	d0fa      	beq.n	800ceb2 <__sccl+0x4a>
 800cebc:	42b3      	cmp	r3, r6
 800cebe:	dcf8      	bgt.n	800ceb2 <__sccl+0x4a>
 800cec0:	4618      	mov	r0, r3
 800cec2:	3001      	adds	r0, #1
 800cec4:	4286      	cmp	r6, r0
 800cec6:	5421      	strb	r1, [r4, r0]
 800cec8:	dcfb      	bgt.n	800cec2 <__sccl+0x5a>
 800ceca:	43d8      	mvns	r0, r3
 800cecc:	4430      	add	r0, r6
 800cece:	1c5d      	adds	r5, r3, #1
 800ced0:	42b3      	cmp	r3, r6
 800ced2:	bfa8      	it	ge
 800ced4:	2000      	movge	r0, #0
 800ced6:	182b      	adds	r3, r5, r0
 800ced8:	3202      	adds	r2, #2
 800ceda:	e7de      	b.n	800ce9a <__sccl+0x32>

0800cedc <strncmp>:
 800cedc:	b510      	push	{r4, lr}
 800cede:	b16a      	cbz	r2, 800cefc <strncmp+0x20>
 800cee0:	3901      	subs	r1, #1
 800cee2:	1884      	adds	r4, r0, r2
 800cee4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cee8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d103      	bne.n	800cef8 <strncmp+0x1c>
 800cef0:	42a0      	cmp	r0, r4
 800cef2:	d001      	beq.n	800cef8 <strncmp+0x1c>
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1f5      	bne.n	800cee4 <strncmp+0x8>
 800cef8:	1a98      	subs	r0, r3, r2
 800cefa:	bd10      	pop	{r4, pc}
 800cefc:	4610      	mov	r0, r2
 800cefe:	e7fc      	b.n	800cefa <strncmp+0x1e>

0800cf00 <_strtoul_l.isra.0>:
 800cf00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf04:	4e3b      	ldr	r6, [pc, #236]	; (800cff4 <_strtoul_l.isra.0+0xf4>)
 800cf06:	4686      	mov	lr, r0
 800cf08:	468c      	mov	ip, r1
 800cf0a:	4660      	mov	r0, ip
 800cf0c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800cf10:	5da5      	ldrb	r5, [r4, r6]
 800cf12:	f015 0508 	ands.w	r5, r5, #8
 800cf16:	d1f8      	bne.n	800cf0a <_strtoul_l.isra.0+0xa>
 800cf18:	2c2d      	cmp	r4, #45	; 0x2d
 800cf1a:	d134      	bne.n	800cf86 <_strtoul_l.isra.0+0x86>
 800cf1c:	f89c 4000 	ldrb.w	r4, [ip]
 800cf20:	f04f 0801 	mov.w	r8, #1
 800cf24:	f100 0c02 	add.w	ip, r0, #2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d05e      	beq.n	800cfea <_strtoul_l.isra.0+0xea>
 800cf2c:	2b10      	cmp	r3, #16
 800cf2e:	d10c      	bne.n	800cf4a <_strtoul_l.isra.0+0x4a>
 800cf30:	2c30      	cmp	r4, #48	; 0x30
 800cf32:	d10a      	bne.n	800cf4a <_strtoul_l.isra.0+0x4a>
 800cf34:	f89c 0000 	ldrb.w	r0, [ip]
 800cf38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cf3c:	2858      	cmp	r0, #88	; 0x58
 800cf3e:	d14f      	bne.n	800cfe0 <_strtoul_l.isra.0+0xe0>
 800cf40:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800cf44:	2310      	movs	r3, #16
 800cf46:	f10c 0c02 	add.w	ip, ip, #2
 800cf4a:	f04f 37ff 	mov.w	r7, #4294967295
 800cf4e:	2500      	movs	r5, #0
 800cf50:	fbb7 f7f3 	udiv	r7, r7, r3
 800cf54:	fb03 f907 	mul.w	r9, r3, r7
 800cf58:	ea6f 0909 	mvn.w	r9, r9
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800cf62:	2e09      	cmp	r6, #9
 800cf64:	d818      	bhi.n	800cf98 <_strtoul_l.isra.0+0x98>
 800cf66:	4634      	mov	r4, r6
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	dd24      	ble.n	800cfb6 <_strtoul_l.isra.0+0xb6>
 800cf6c:	2d00      	cmp	r5, #0
 800cf6e:	db1f      	blt.n	800cfb0 <_strtoul_l.isra.0+0xb0>
 800cf70:	4287      	cmp	r7, r0
 800cf72:	d31d      	bcc.n	800cfb0 <_strtoul_l.isra.0+0xb0>
 800cf74:	d101      	bne.n	800cf7a <_strtoul_l.isra.0+0x7a>
 800cf76:	45a1      	cmp	r9, r4
 800cf78:	db1a      	blt.n	800cfb0 <_strtoul_l.isra.0+0xb0>
 800cf7a:	fb00 4003 	mla	r0, r0, r3, r4
 800cf7e:	2501      	movs	r5, #1
 800cf80:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800cf84:	e7eb      	b.n	800cf5e <_strtoul_l.isra.0+0x5e>
 800cf86:	2c2b      	cmp	r4, #43	; 0x2b
 800cf88:	bf08      	it	eq
 800cf8a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800cf8e:	46a8      	mov	r8, r5
 800cf90:	bf08      	it	eq
 800cf92:	f100 0c02 	addeq.w	ip, r0, #2
 800cf96:	e7c7      	b.n	800cf28 <_strtoul_l.isra.0+0x28>
 800cf98:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800cf9c:	2e19      	cmp	r6, #25
 800cf9e:	d801      	bhi.n	800cfa4 <_strtoul_l.isra.0+0xa4>
 800cfa0:	3c37      	subs	r4, #55	; 0x37
 800cfa2:	e7e1      	b.n	800cf68 <_strtoul_l.isra.0+0x68>
 800cfa4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800cfa8:	2e19      	cmp	r6, #25
 800cfaa:	d804      	bhi.n	800cfb6 <_strtoul_l.isra.0+0xb6>
 800cfac:	3c57      	subs	r4, #87	; 0x57
 800cfae:	e7db      	b.n	800cf68 <_strtoul_l.isra.0+0x68>
 800cfb0:	f04f 35ff 	mov.w	r5, #4294967295
 800cfb4:	e7e4      	b.n	800cf80 <_strtoul_l.isra.0+0x80>
 800cfb6:	2d00      	cmp	r5, #0
 800cfb8:	da07      	bge.n	800cfca <_strtoul_l.isra.0+0xca>
 800cfba:	2322      	movs	r3, #34	; 0x22
 800cfbc:	f8ce 3000 	str.w	r3, [lr]
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc4:	b942      	cbnz	r2, 800cfd8 <_strtoul_l.isra.0+0xd8>
 800cfc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfca:	f1b8 0f00 	cmp.w	r8, #0
 800cfce:	d000      	beq.n	800cfd2 <_strtoul_l.isra.0+0xd2>
 800cfd0:	4240      	negs	r0, r0
 800cfd2:	2a00      	cmp	r2, #0
 800cfd4:	d0f7      	beq.n	800cfc6 <_strtoul_l.isra.0+0xc6>
 800cfd6:	b10d      	cbz	r5, 800cfdc <_strtoul_l.isra.0+0xdc>
 800cfd8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800cfdc:	6011      	str	r1, [r2, #0]
 800cfde:	e7f2      	b.n	800cfc6 <_strtoul_l.isra.0+0xc6>
 800cfe0:	2430      	movs	r4, #48	; 0x30
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1b1      	bne.n	800cf4a <_strtoul_l.isra.0+0x4a>
 800cfe6:	2308      	movs	r3, #8
 800cfe8:	e7af      	b.n	800cf4a <_strtoul_l.isra.0+0x4a>
 800cfea:	2c30      	cmp	r4, #48	; 0x30
 800cfec:	d0a2      	beq.n	800cf34 <_strtoul_l.isra.0+0x34>
 800cfee:	230a      	movs	r3, #10
 800cff0:	e7ab      	b.n	800cf4a <_strtoul_l.isra.0+0x4a>
 800cff2:	bf00      	nop
 800cff4:	0800d749 	.word	0x0800d749

0800cff8 <_strtoul_r>:
 800cff8:	f7ff bf82 	b.w	800cf00 <_strtoul_l.isra.0>

0800cffc <__submore>:
 800cffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d000:	460c      	mov	r4, r1
 800d002:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d008:	4299      	cmp	r1, r3
 800d00a:	d11d      	bne.n	800d048 <__submore+0x4c>
 800d00c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d010:	f7ff f8d2 	bl	800c1b8 <_malloc_r>
 800d014:	b918      	cbnz	r0, 800d01e <__submore+0x22>
 800d016:	f04f 30ff 	mov.w	r0, #4294967295
 800d01a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d022:	63a3      	str	r3, [r4, #56]	; 0x38
 800d024:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d028:	6360      	str	r0, [r4, #52]	; 0x34
 800d02a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d02e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d032:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d036:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d03a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d03e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d042:	6020      	str	r0, [r4, #0]
 800d044:	2000      	movs	r0, #0
 800d046:	e7e8      	b.n	800d01a <__submore+0x1e>
 800d048:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d04a:	0077      	lsls	r7, r6, #1
 800d04c:	463a      	mov	r2, r7
 800d04e:	f000 fa59 	bl	800d504 <_realloc_r>
 800d052:	4605      	mov	r5, r0
 800d054:	2800      	cmp	r0, #0
 800d056:	d0de      	beq.n	800d016 <__submore+0x1a>
 800d058:	eb00 0806 	add.w	r8, r0, r6
 800d05c:	4601      	mov	r1, r0
 800d05e:	4632      	mov	r2, r6
 800d060:	4640      	mov	r0, r8
 800d062:	f7fe fb81 	bl	800b768 <memcpy>
 800d066:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d06a:	f8c4 8000 	str.w	r8, [r4]
 800d06e:	e7e9      	b.n	800d044 <__submore+0x48>

0800d070 <__swbuf_r>:
 800d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d072:	460e      	mov	r6, r1
 800d074:	4614      	mov	r4, r2
 800d076:	4605      	mov	r5, r0
 800d078:	b118      	cbz	r0, 800d082 <__swbuf_r+0x12>
 800d07a:	6983      	ldr	r3, [r0, #24]
 800d07c:	b90b      	cbnz	r3, 800d082 <__swbuf_r+0x12>
 800d07e:	f7fd ff33 	bl	800aee8 <__sinit>
 800d082:	4b21      	ldr	r3, [pc, #132]	; (800d108 <__swbuf_r+0x98>)
 800d084:	429c      	cmp	r4, r3
 800d086:	d12b      	bne.n	800d0e0 <__swbuf_r+0x70>
 800d088:	686c      	ldr	r4, [r5, #4]
 800d08a:	69a3      	ldr	r3, [r4, #24]
 800d08c:	60a3      	str	r3, [r4, #8]
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	071a      	lsls	r2, r3, #28
 800d092:	d52f      	bpl.n	800d0f4 <__swbuf_r+0x84>
 800d094:	6923      	ldr	r3, [r4, #16]
 800d096:	b36b      	cbz	r3, 800d0f4 <__swbuf_r+0x84>
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	6820      	ldr	r0, [r4, #0]
 800d09c:	1ac0      	subs	r0, r0, r3
 800d09e:	6963      	ldr	r3, [r4, #20]
 800d0a0:	b2f6      	uxtb	r6, r6
 800d0a2:	4283      	cmp	r3, r0
 800d0a4:	4637      	mov	r7, r6
 800d0a6:	dc04      	bgt.n	800d0b2 <__swbuf_r+0x42>
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f000 f952 	bl	800d354 <_fflush_r>
 800d0b0:	bb30      	cbnz	r0, 800d100 <__swbuf_r+0x90>
 800d0b2:	68a3      	ldr	r3, [r4, #8]
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	60a3      	str	r3, [r4, #8]
 800d0b8:	6823      	ldr	r3, [r4, #0]
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	6022      	str	r2, [r4, #0]
 800d0be:	701e      	strb	r6, [r3, #0]
 800d0c0:	6963      	ldr	r3, [r4, #20]
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	4283      	cmp	r3, r0
 800d0c6:	d004      	beq.n	800d0d2 <__swbuf_r+0x62>
 800d0c8:	89a3      	ldrh	r3, [r4, #12]
 800d0ca:	07db      	lsls	r3, r3, #31
 800d0cc:	d506      	bpl.n	800d0dc <__swbuf_r+0x6c>
 800d0ce:	2e0a      	cmp	r6, #10
 800d0d0:	d104      	bne.n	800d0dc <__swbuf_r+0x6c>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f000 f93d 	bl	800d354 <_fflush_r>
 800d0da:	b988      	cbnz	r0, 800d100 <__swbuf_r+0x90>
 800d0dc:	4638      	mov	r0, r7
 800d0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e0:	4b0a      	ldr	r3, [pc, #40]	; (800d10c <__swbuf_r+0x9c>)
 800d0e2:	429c      	cmp	r4, r3
 800d0e4:	d101      	bne.n	800d0ea <__swbuf_r+0x7a>
 800d0e6:	68ac      	ldr	r4, [r5, #8]
 800d0e8:	e7cf      	b.n	800d08a <__swbuf_r+0x1a>
 800d0ea:	4b09      	ldr	r3, [pc, #36]	; (800d110 <__swbuf_r+0xa0>)
 800d0ec:	429c      	cmp	r4, r3
 800d0ee:	bf08      	it	eq
 800d0f0:	68ec      	ldreq	r4, [r5, #12]
 800d0f2:	e7ca      	b.n	800d08a <__swbuf_r+0x1a>
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	f000 f81a 	bl	800d130 <__swsetup_r>
 800d0fc:	2800      	cmp	r0, #0
 800d0fe:	d0cb      	beq.n	800d098 <__swbuf_r+0x28>
 800d100:	f04f 37ff 	mov.w	r7, #4294967295
 800d104:	e7ea      	b.n	800d0dc <__swbuf_r+0x6c>
 800d106:	bf00      	nop
 800d108:	0800d900 	.word	0x0800d900
 800d10c:	0800d920 	.word	0x0800d920
 800d110:	0800d8e0 	.word	0x0800d8e0

0800d114 <__ascii_wctomb>:
 800d114:	b149      	cbz	r1, 800d12a <__ascii_wctomb+0x16>
 800d116:	2aff      	cmp	r2, #255	; 0xff
 800d118:	bf85      	ittet	hi
 800d11a:	238a      	movhi	r3, #138	; 0x8a
 800d11c:	6003      	strhi	r3, [r0, #0]
 800d11e:	700a      	strbls	r2, [r1, #0]
 800d120:	f04f 30ff 	movhi.w	r0, #4294967295
 800d124:	bf98      	it	ls
 800d126:	2001      	movls	r0, #1
 800d128:	4770      	bx	lr
 800d12a:	4608      	mov	r0, r1
 800d12c:	4770      	bx	lr
	...

0800d130 <__swsetup_r>:
 800d130:	4b32      	ldr	r3, [pc, #200]	; (800d1fc <__swsetup_r+0xcc>)
 800d132:	b570      	push	{r4, r5, r6, lr}
 800d134:	681d      	ldr	r5, [r3, #0]
 800d136:	4606      	mov	r6, r0
 800d138:	460c      	mov	r4, r1
 800d13a:	b125      	cbz	r5, 800d146 <__swsetup_r+0x16>
 800d13c:	69ab      	ldr	r3, [r5, #24]
 800d13e:	b913      	cbnz	r3, 800d146 <__swsetup_r+0x16>
 800d140:	4628      	mov	r0, r5
 800d142:	f7fd fed1 	bl	800aee8 <__sinit>
 800d146:	4b2e      	ldr	r3, [pc, #184]	; (800d200 <__swsetup_r+0xd0>)
 800d148:	429c      	cmp	r4, r3
 800d14a:	d10f      	bne.n	800d16c <__swsetup_r+0x3c>
 800d14c:	686c      	ldr	r4, [r5, #4]
 800d14e:	89a3      	ldrh	r3, [r4, #12]
 800d150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d154:	0719      	lsls	r1, r3, #28
 800d156:	d42c      	bmi.n	800d1b2 <__swsetup_r+0x82>
 800d158:	06dd      	lsls	r5, r3, #27
 800d15a:	d411      	bmi.n	800d180 <__swsetup_r+0x50>
 800d15c:	2309      	movs	r3, #9
 800d15e:	6033      	str	r3, [r6, #0]
 800d160:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d164:	81a3      	strh	r3, [r4, #12]
 800d166:	f04f 30ff 	mov.w	r0, #4294967295
 800d16a:	e03e      	b.n	800d1ea <__swsetup_r+0xba>
 800d16c:	4b25      	ldr	r3, [pc, #148]	; (800d204 <__swsetup_r+0xd4>)
 800d16e:	429c      	cmp	r4, r3
 800d170:	d101      	bne.n	800d176 <__swsetup_r+0x46>
 800d172:	68ac      	ldr	r4, [r5, #8]
 800d174:	e7eb      	b.n	800d14e <__swsetup_r+0x1e>
 800d176:	4b24      	ldr	r3, [pc, #144]	; (800d208 <__swsetup_r+0xd8>)
 800d178:	429c      	cmp	r4, r3
 800d17a:	bf08      	it	eq
 800d17c:	68ec      	ldreq	r4, [r5, #12]
 800d17e:	e7e6      	b.n	800d14e <__swsetup_r+0x1e>
 800d180:	0758      	lsls	r0, r3, #29
 800d182:	d512      	bpl.n	800d1aa <__swsetup_r+0x7a>
 800d184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d186:	b141      	cbz	r1, 800d19a <__swsetup_r+0x6a>
 800d188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d18c:	4299      	cmp	r1, r3
 800d18e:	d002      	beq.n	800d196 <__swsetup_r+0x66>
 800d190:	4630      	mov	r0, r6
 800d192:	f7fe ffc1 	bl	800c118 <_free_r>
 800d196:	2300      	movs	r3, #0
 800d198:	6363      	str	r3, [r4, #52]	; 0x34
 800d19a:	89a3      	ldrh	r3, [r4, #12]
 800d19c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1a0:	81a3      	strh	r3, [r4, #12]
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	6063      	str	r3, [r4, #4]
 800d1a6:	6923      	ldr	r3, [r4, #16]
 800d1a8:	6023      	str	r3, [r4, #0]
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	f043 0308 	orr.w	r3, r3, #8
 800d1b0:	81a3      	strh	r3, [r4, #12]
 800d1b2:	6923      	ldr	r3, [r4, #16]
 800d1b4:	b94b      	cbnz	r3, 800d1ca <__swsetup_r+0x9a>
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1c0:	d003      	beq.n	800d1ca <__swsetup_r+0x9a>
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	f000 f937 	bl	800d438 <__smakebuf_r>
 800d1ca:	89a0      	ldrh	r0, [r4, #12]
 800d1cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1d0:	f010 0301 	ands.w	r3, r0, #1
 800d1d4:	d00a      	beq.n	800d1ec <__swsetup_r+0xbc>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	60a3      	str	r3, [r4, #8]
 800d1da:	6963      	ldr	r3, [r4, #20]
 800d1dc:	425b      	negs	r3, r3
 800d1de:	61a3      	str	r3, [r4, #24]
 800d1e0:	6923      	ldr	r3, [r4, #16]
 800d1e2:	b943      	cbnz	r3, 800d1f6 <__swsetup_r+0xc6>
 800d1e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d1e8:	d1ba      	bne.n	800d160 <__swsetup_r+0x30>
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	0781      	lsls	r1, r0, #30
 800d1ee:	bf58      	it	pl
 800d1f0:	6963      	ldrpl	r3, [r4, #20]
 800d1f2:	60a3      	str	r3, [r4, #8]
 800d1f4:	e7f4      	b.n	800d1e0 <__swsetup_r+0xb0>
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	e7f7      	b.n	800d1ea <__swsetup_r+0xba>
 800d1fa:	bf00      	nop
 800d1fc:	2000006c 	.word	0x2000006c
 800d200:	0800d900 	.word	0x0800d900
 800d204:	0800d920 	.word	0x0800d920
 800d208:	0800d8e0 	.word	0x0800d8e0

0800d20c <__assert_func>:
 800d20c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d20e:	4614      	mov	r4, r2
 800d210:	461a      	mov	r2, r3
 800d212:	4b09      	ldr	r3, [pc, #36]	; (800d238 <__assert_func+0x2c>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4605      	mov	r5, r0
 800d218:	68d8      	ldr	r0, [r3, #12]
 800d21a:	b14c      	cbz	r4, 800d230 <__assert_func+0x24>
 800d21c:	4b07      	ldr	r3, [pc, #28]	; (800d23c <__assert_func+0x30>)
 800d21e:	9100      	str	r1, [sp, #0]
 800d220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d224:	4906      	ldr	r1, [pc, #24]	; (800d240 <__assert_func+0x34>)
 800d226:	462b      	mov	r3, r5
 800d228:	f000 f8d0 	bl	800d3cc <fiprintf>
 800d22c:	f000 f990 	bl	800d550 <abort>
 800d230:	4b04      	ldr	r3, [pc, #16]	; (800d244 <__assert_func+0x38>)
 800d232:	461c      	mov	r4, r3
 800d234:	e7f3      	b.n	800d21e <__assert_func+0x12>
 800d236:	bf00      	nop
 800d238:	2000006c 	.word	0x2000006c
 800d23c:	0800db48 	.word	0x0800db48
 800d240:	0800db55 	.word	0x0800db55
 800d244:	0800db83 	.word	0x0800db83

0800d248 <__sflush_r>:
 800d248:	898a      	ldrh	r2, [r1, #12]
 800d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	4605      	mov	r5, r0
 800d250:	0710      	lsls	r0, r2, #28
 800d252:	460c      	mov	r4, r1
 800d254:	d458      	bmi.n	800d308 <__sflush_r+0xc0>
 800d256:	684b      	ldr	r3, [r1, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	dc05      	bgt.n	800d268 <__sflush_r+0x20>
 800d25c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d25e:	2b00      	cmp	r3, #0
 800d260:	dc02      	bgt.n	800d268 <__sflush_r+0x20>
 800d262:	2000      	movs	r0, #0
 800d264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d26a:	2e00      	cmp	r6, #0
 800d26c:	d0f9      	beq.n	800d262 <__sflush_r+0x1a>
 800d26e:	2300      	movs	r3, #0
 800d270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d274:	682f      	ldr	r7, [r5, #0]
 800d276:	602b      	str	r3, [r5, #0]
 800d278:	d032      	beq.n	800d2e0 <__sflush_r+0x98>
 800d27a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d27c:	89a3      	ldrh	r3, [r4, #12]
 800d27e:	075a      	lsls	r2, r3, #29
 800d280:	d505      	bpl.n	800d28e <__sflush_r+0x46>
 800d282:	6863      	ldr	r3, [r4, #4]
 800d284:	1ac0      	subs	r0, r0, r3
 800d286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d288:	b10b      	cbz	r3, 800d28e <__sflush_r+0x46>
 800d28a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d28c:	1ac0      	subs	r0, r0, r3
 800d28e:	2300      	movs	r3, #0
 800d290:	4602      	mov	r2, r0
 800d292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d294:	6a21      	ldr	r1, [r4, #32]
 800d296:	4628      	mov	r0, r5
 800d298:	47b0      	blx	r6
 800d29a:	1c43      	adds	r3, r0, #1
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	d106      	bne.n	800d2ae <__sflush_r+0x66>
 800d2a0:	6829      	ldr	r1, [r5, #0]
 800d2a2:	291d      	cmp	r1, #29
 800d2a4:	d82c      	bhi.n	800d300 <__sflush_r+0xb8>
 800d2a6:	4a2a      	ldr	r2, [pc, #168]	; (800d350 <__sflush_r+0x108>)
 800d2a8:	40ca      	lsrs	r2, r1
 800d2aa:	07d6      	lsls	r6, r2, #31
 800d2ac:	d528      	bpl.n	800d300 <__sflush_r+0xb8>
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	6062      	str	r2, [r4, #4]
 800d2b2:	04d9      	lsls	r1, r3, #19
 800d2b4:	6922      	ldr	r2, [r4, #16]
 800d2b6:	6022      	str	r2, [r4, #0]
 800d2b8:	d504      	bpl.n	800d2c4 <__sflush_r+0x7c>
 800d2ba:	1c42      	adds	r2, r0, #1
 800d2bc:	d101      	bne.n	800d2c2 <__sflush_r+0x7a>
 800d2be:	682b      	ldr	r3, [r5, #0]
 800d2c0:	b903      	cbnz	r3, 800d2c4 <__sflush_r+0x7c>
 800d2c2:	6560      	str	r0, [r4, #84]	; 0x54
 800d2c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2c6:	602f      	str	r7, [r5, #0]
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	d0ca      	beq.n	800d262 <__sflush_r+0x1a>
 800d2cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2d0:	4299      	cmp	r1, r3
 800d2d2:	d002      	beq.n	800d2da <__sflush_r+0x92>
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	f7fe ff1f 	bl	800c118 <_free_r>
 800d2da:	2000      	movs	r0, #0
 800d2dc:	6360      	str	r0, [r4, #52]	; 0x34
 800d2de:	e7c1      	b.n	800d264 <__sflush_r+0x1c>
 800d2e0:	6a21      	ldr	r1, [r4, #32]
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	47b0      	blx	r6
 800d2e8:	1c41      	adds	r1, r0, #1
 800d2ea:	d1c7      	bne.n	800d27c <__sflush_r+0x34>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d0c4      	beq.n	800d27c <__sflush_r+0x34>
 800d2f2:	2b1d      	cmp	r3, #29
 800d2f4:	d001      	beq.n	800d2fa <__sflush_r+0xb2>
 800d2f6:	2b16      	cmp	r3, #22
 800d2f8:	d101      	bne.n	800d2fe <__sflush_r+0xb6>
 800d2fa:	602f      	str	r7, [r5, #0]
 800d2fc:	e7b1      	b.n	800d262 <__sflush_r+0x1a>
 800d2fe:	89a3      	ldrh	r3, [r4, #12]
 800d300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d304:	81a3      	strh	r3, [r4, #12]
 800d306:	e7ad      	b.n	800d264 <__sflush_r+0x1c>
 800d308:	690f      	ldr	r7, [r1, #16]
 800d30a:	2f00      	cmp	r7, #0
 800d30c:	d0a9      	beq.n	800d262 <__sflush_r+0x1a>
 800d30e:	0793      	lsls	r3, r2, #30
 800d310:	680e      	ldr	r6, [r1, #0]
 800d312:	bf08      	it	eq
 800d314:	694b      	ldreq	r3, [r1, #20]
 800d316:	600f      	str	r7, [r1, #0]
 800d318:	bf18      	it	ne
 800d31a:	2300      	movne	r3, #0
 800d31c:	eba6 0807 	sub.w	r8, r6, r7
 800d320:	608b      	str	r3, [r1, #8]
 800d322:	f1b8 0f00 	cmp.w	r8, #0
 800d326:	dd9c      	ble.n	800d262 <__sflush_r+0x1a>
 800d328:	6a21      	ldr	r1, [r4, #32]
 800d32a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d32c:	4643      	mov	r3, r8
 800d32e:	463a      	mov	r2, r7
 800d330:	4628      	mov	r0, r5
 800d332:	47b0      	blx	r6
 800d334:	2800      	cmp	r0, #0
 800d336:	dc06      	bgt.n	800d346 <__sflush_r+0xfe>
 800d338:	89a3      	ldrh	r3, [r4, #12]
 800d33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	f04f 30ff 	mov.w	r0, #4294967295
 800d344:	e78e      	b.n	800d264 <__sflush_r+0x1c>
 800d346:	4407      	add	r7, r0
 800d348:	eba8 0800 	sub.w	r8, r8, r0
 800d34c:	e7e9      	b.n	800d322 <__sflush_r+0xda>
 800d34e:	bf00      	nop
 800d350:	20400001 	.word	0x20400001

0800d354 <_fflush_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	690b      	ldr	r3, [r1, #16]
 800d358:	4605      	mov	r5, r0
 800d35a:	460c      	mov	r4, r1
 800d35c:	b913      	cbnz	r3, 800d364 <_fflush_r+0x10>
 800d35e:	2500      	movs	r5, #0
 800d360:	4628      	mov	r0, r5
 800d362:	bd38      	pop	{r3, r4, r5, pc}
 800d364:	b118      	cbz	r0, 800d36e <_fflush_r+0x1a>
 800d366:	6983      	ldr	r3, [r0, #24]
 800d368:	b90b      	cbnz	r3, 800d36e <_fflush_r+0x1a>
 800d36a:	f7fd fdbd 	bl	800aee8 <__sinit>
 800d36e:	4b14      	ldr	r3, [pc, #80]	; (800d3c0 <_fflush_r+0x6c>)
 800d370:	429c      	cmp	r4, r3
 800d372:	d11b      	bne.n	800d3ac <_fflush_r+0x58>
 800d374:	686c      	ldr	r4, [r5, #4]
 800d376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d0ef      	beq.n	800d35e <_fflush_r+0xa>
 800d37e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d380:	07d0      	lsls	r0, r2, #31
 800d382:	d404      	bmi.n	800d38e <_fflush_r+0x3a>
 800d384:	0599      	lsls	r1, r3, #22
 800d386:	d402      	bmi.n	800d38e <_fflush_r+0x3a>
 800d388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d38a:	f7fe f9be 	bl	800b70a <__retarget_lock_acquire_recursive>
 800d38e:	4628      	mov	r0, r5
 800d390:	4621      	mov	r1, r4
 800d392:	f7ff ff59 	bl	800d248 <__sflush_r>
 800d396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d398:	07da      	lsls	r2, r3, #31
 800d39a:	4605      	mov	r5, r0
 800d39c:	d4e0      	bmi.n	800d360 <_fflush_r+0xc>
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	059b      	lsls	r3, r3, #22
 800d3a2:	d4dd      	bmi.n	800d360 <_fflush_r+0xc>
 800d3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3a6:	f7fe f9b1 	bl	800b70c <__retarget_lock_release_recursive>
 800d3aa:	e7d9      	b.n	800d360 <_fflush_r+0xc>
 800d3ac:	4b05      	ldr	r3, [pc, #20]	; (800d3c4 <_fflush_r+0x70>)
 800d3ae:	429c      	cmp	r4, r3
 800d3b0:	d101      	bne.n	800d3b6 <_fflush_r+0x62>
 800d3b2:	68ac      	ldr	r4, [r5, #8]
 800d3b4:	e7df      	b.n	800d376 <_fflush_r+0x22>
 800d3b6:	4b04      	ldr	r3, [pc, #16]	; (800d3c8 <_fflush_r+0x74>)
 800d3b8:	429c      	cmp	r4, r3
 800d3ba:	bf08      	it	eq
 800d3bc:	68ec      	ldreq	r4, [r5, #12]
 800d3be:	e7da      	b.n	800d376 <_fflush_r+0x22>
 800d3c0:	0800d900 	.word	0x0800d900
 800d3c4:	0800d920 	.word	0x0800d920
 800d3c8:	0800d8e0 	.word	0x0800d8e0

0800d3cc <fiprintf>:
 800d3cc:	b40e      	push	{r1, r2, r3}
 800d3ce:	b503      	push	{r0, r1, lr}
 800d3d0:	4601      	mov	r1, r0
 800d3d2:	ab03      	add	r3, sp, #12
 800d3d4:	4805      	ldr	r0, [pc, #20]	; (800d3ec <fiprintf+0x20>)
 800d3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3da:	6800      	ldr	r0, [r0, #0]
 800d3dc:	9301      	str	r3, [sp, #4]
 800d3de:	f7ff fa9d 	bl	800c91c <_vfiprintf_r>
 800d3e2:	b002      	add	sp, #8
 800d3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3e8:	b003      	add	sp, #12
 800d3ea:	4770      	bx	lr
 800d3ec:	2000006c 	.word	0x2000006c

0800d3f0 <__swhatbuf_r>:
 800d3f0:	b570      	push	{r4, r5, r6, lr}
 800d3f2:	460e      	mov	r6, r1
 800d3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3f8:	2900      	cmp	r1, #0
 800d3fa:	b096      	sub	sp, #88	; 0x58
 800d3fc:	4614      	mov	r4, r2
 800d3fe:	461d      	mov	r5, r3
 800d400:	da07      	bge.n	800d412 <__swhatbuf_r+0x22>
 800d402:	2300      	movs	r3, #0
 800d404:	602b      	str	r3, [r5, #0]
 800d406:	89b3      	ldrh	r3, [r6, #12]
 800d408:	061a      	lsls	r2, r3, #24
 800d40a:	d410      	bmi.n	800d42e <__swhatbuf_r+0x3e>
 800d40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d410:	e00e      	b.n	800d430 <__swhatbuf_r+0x40>
 800d412:	466a      	mov	r2, sp
 800d414:	f000 f8a4 	bl	800d560 <_fstat_r>
 800d418:	2800      	cmp	r0, #0
 800d41a:	dbf2      	blt.n	800d402 <__swhatbuf_r+0x12>
 800d41c:	9a01      	ldr	r2, [sp, #4]
 800d41e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d422:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d426:	425a      	negs	r2, r3
 800d428:	415a      	adcs	r2, r3
 800d42a:	602a      	str	r2, [r5, #0]
 800d42c:	e7ee      	b.n	800d40c <__swhatbuf_r+0x1c>
 800d42e:	2340      	movs	r3, #64	; 0x40
 800d430:	2000      	movs	r0, #0
 800d432:	6023      	str	r3, [r4, #0]
 800d434:	b016      	add	sp, #88	; 0x58
 800d436:	bd70      	pop	{r4, r5, r6, pc}

0800d438 <__smakebuf_r>:
 800d438:	898b      	ldrh	r3, [r1, #12]
 800d43a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d43c:	079d      	lsls	r5, r3, #30
 800d43e:	4606      	mov	r6, r0
 800d440:	460c      	mov	r4, r1
 800d442:	d507      	bpl.n	800d454 <__smakebuf_r+0x1c>
 800d444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	6123      	str	r3, [r4, #16]
 800d44c:	2301      	movs	r3, #1
 800d44e:	6163      	str	r3, [r4, #20]
 800d450:	b002      	add	sp, #8
 800d452:	bd70      	pop	{r4, r5, r6, pc}
 800d454:	ab01      	add	r3, sp, #4
 800d456:	466a      	mov	r2, sp
 800d458:	f7ff ffca 	bl	800d3f0 <__swhatbuf_r>
 800d45c:	9900      	ldr	r1, [sp, #0]
 800d45e:	4605      	mov	r5, r0
 800d460:	4630      	mov	r0, r6
 800d462:	f7fe fea9 	bl	800c1b8 <_malloc_r>
 800d466:	b948      	cbnz	r0, 800d47c <__smakebuf_r+0x44>
 800d468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d46c:	059a      	lsls	r2, r3, #22
 800d46e:	d4ef      	bmi.n	800d450 <__smakebuf_r+0x18>
 800d470:	f023 0303 	bic.w	r3, r3, #3
 800d474:	f043 0302 	orr.w	r3, r3, #2
 800d478:	81a3      	strh	r3, [r4, #12]
 800d47a:	e7e3      	b.n	800d444 <__smakebuf_r+0xc>
 800d47c:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <__smakebuf_r+0x7c>)
 800d47e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d480:	89a3      	ldrh	r3, [r4, #12]
 800d482:	6020      	str	r0, [r4, #0]
 800d484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d488:	81a3      	strh	r3, [r4, #12]
 800d48a:	9b00      	ldr	r3, [sp, #0]
 800d48c:	6163      	str	r3, [r4, #20]
 800d48e:	9b01      	ldr	r3, [sp, #4]
 800d490:	6120      	str	r0, [r4, #16]
 800d492:	b15b      	cbz	r3, 800d4ac <__smakebuf_r+0x74>
 800d494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d498:	4630      	mov	r0, r6
 800d49a:	f000 f873 	bl	800d584 <_isatty_r>
 800d49e:	b128      	cbz	r0, 800d4ac <__smakebuf_r+0x74>
 800d4a0:	89a3      	ldrh	r3, [r4, #12]
 800d4a2:	f023 0303 	bic.w	r3, r3, #3
 800d4a6:	f043 0301 	orr.w	r3, r3, #1
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	89a0      	ldrh	r0, [r4, #12]
 800d4ae:	4305      	orrs	r5, r0
 800d4b0:	81a5      	strh	r5, [r4, #12]
 800d4b2:	e7cd      	b.n	800d450 <__smakebuf_r+0x18>
 800d4b4:	0800ae81 	.word	0x0800ae81

0800d4b8 <memmove>:
 800d4b8:	4288      	cmp	r0, r1
 800d4ba:	b510      	push	{r4, lr}
 800d4bc:	eb01 0402 	add.w	r4, r1, r2
 800d4c0:	d902      	bls.n	800d4c8 <memmove+0x10>
 800d4c2:	4284      	cmp	r4, r0
 800d4c4:	4623      	mov	r3, r4
 800d4c6:	d807      	bhi.n	800d4d8 <memmove+0x20>
 800d4c8:	1e43      	subs	r3, r0, #1
 800d4ca:	42a1      	cmp	r1, r4
 800d4cc:	d008      	beq.n	800d4e0 <memmove+0x28>
 800d4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4d6:	e7f8      	b.n	800d4ca <memmove+0x12>
 800d4d8:	4402      	add	r2, r0
 800d4da:	4601      	mov	r1, r0
 800d4dc:	428a      	cmp	r2, r1
 800d4de:	d100      	bne.n	800d4e2 <memmove+0x2a>
 800d4e0:	bd10      	pop	{r4, pc}
 800d4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4ea:	e7f7      	b.n	800d4dc <memmove+0x24>

0800d4ec <__malloc_lock>:
 800d4ec:	4801      	ldr	r0, [pc, #4]	; (800d4f4 <__malloc_lock+0x8>)
 800d4ee:	f7fe b90c 	b.w	800b70a <__retarget_lock_acquire_recursive>
 800d4f2:	bf00      	nop
 800d4f4:	20000948 	.word	0x20000948

0800d4f8 <__malloc_unlock>:
 800d4f8:	4801      	ldr	r0, [pc, #4]	; (800d500 <__malloc_unlock+0x8>)
 800d4fa:	f7fe b907 	b.w	800b70c <__retarget_lock_release_recursive>
 800d4fe:	bf00      	nop
 800d500:	20000948 	.word	0x20000948

0800d504 <_realloc_r>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	4607      	mov	r7, r0
 800d508:	4614      	mov	r4, r2
 800d50a:	460e      	mov	r6, r1
 800d50c:	b921      	cbnz	r1, 800d518 <_realloc_r+0x14>
 800d50e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d512:	4611      	mov	r1, r2
 800d514:	f7fe be50 	b.w	800c1b8 <_malloc_r>
 800d518:	b922      	cbnz	r2, 800d524 <_realloc_r+0x20>
 800d51a:	f7fe fdfd 	bl	800c118 <_free_r>
 800d51e:	4625      	mov	r5, r4
 800d520:	4628      	mov	r0, r5
 800d522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d524:	f000 f83e 	bl	800d5a4 <_malloc_usable_size_r>
 800d528:	42a0      	cmp	r0, r4
 800d52a:	d20f      	bcs.n	800d54c <_realloc_r+0x48>
 800d52c:	4621      	mov	r1, r4
 800d52e:	4638      	mov	r0, r7
 800d530:	f7fe fe42 	bl	800c1b8 <_malloc_r>
 800d534:	4605      	mov	r5, r0
 800d536:	2800      	cmp	r0, #0
 800d538:	d0f2      	beq.n	800d520 <_realloc_r+0x1c>
 800d53a:	4631      	mov	r1, r6
 800d53c:	4622      	mov	r2, r4
 800d53e:	f7fe f913 	bl	800b768 <memcpy>
 800d542:	4631      	mov	r1, r6
 800d544:	4638      	mov	r0, r7
 800d546:	f7fe fde7 	bl	800c118 <_free_r>
 800d54a:	e7e9      	b.n	800d520 <_realloc_r+0x1c>
 800d54c:	4635      	mov	r5, r6
 800d54e:	e7e7      	b.n	800d520 <_realloc_r+0x1c>

0800d550 <abort>:
 800d550:	b508      	push	{r3, lr}
 800d552:	2006      	movs	r0, #6
 800d554:	f000 f856 	bl	800d604 <raise>
 800d558:	2001      	movs	r0, #1
 800d55a:	f7f4 fe95 	bl	8002288 <_exit>
	...

0800d560 <_fstat_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d07      	ldr	r5, [pc, #28]	; (800d580 <_fstat_r+0x20>)
 800d564:	2300      	movs	r3, #0
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	4611      	mov	r1, r2
 800d56c:	602b      	str	r3, [r5, #0]
 800d56e:	f7f4 feda 	bl	8002326 <_fstat>
 800d572:	1c43      	adds	r3, r0, #1
 800d574:	d102      	bne.n	800d57c <_fstat_r+0x1c>
 800d576:	682b      	ldr	r3, [r5, #0]
 800d578:	b103      	cbz	r3, 800d57c <_fstat_r+0x1c>
 800d57a:	6023      	str	r3, [r4, #0]
 800d57c:	bd38      	pop	{r3, r4, r5, pc}
 800d57e:	bf00      	nop
 800d580:	20000950 	.word	0x20000950

0800d584 <_isatty_r>:
 800d584:	b538      	push	{r3, r4, r5, lr}
 800d586:	4d06      	ldr	r5, [pc, #24]	; (800d5a0 <_isatty_r+0x1c>)
 800d588:	2300      	movs	r3, #0
 800d58a:	4604      	mov	r4, r0
 800d58c:	4608      	mov	r0, r1
 800d58e:	602b      	str	r3, [r5, #0]
 800d590:	f7f4 fed9 	bl	8002346 <_isatty>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_isatty_r+0x1a>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_isatty_r+0x1a>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	20000950 	.word	0x20000950

0800d5a4 <_malloc_usable_size_r>:
 800d5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5a8:	1f18      	subs	r0, r3, #4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfbc      	itt	lt
 800d5ae:	580b      	ldrlt	r3, [r1, r0]
 800d5b0:	18c0      	addlt	r0, r0, r3
 800d5b2:	4770      	bx	lr

0800d5b4 <_raise_r>:
 800d5b4:	291f      	cmp	r1, #31
 800d5b6:	b538      	push	{r3, r4, r5, lr}
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	460d      	mov	r5, r1
 800d5bc:	d904      	bls.n	800d5c8 <_raise_r+0x14>
 800d5be:	2316      	movs	r3, #22
 800d5c0:	6003      	str	r3, [r0, #0]
 800d5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c6:	bd38      	pop	{r3, r4, r5, pc}
 800d5c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5ca:	b112      	cbz	r2, 800d5d2 <_raise_r+0x1e>
 800d5cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5d0:	b94b      	cbnz	r3, 800d5e6 <_raise_r+0x32>
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 f830 	bl	800d638 <_getpid_r>
 800d5d8:	462a      	mov	r2, r5
 800d5da:	4601      	mov	r1, r0
 800d5dc:	4620      	mov	r0, r4
 800d5de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e2:	f000 b817 	b.w	800d614 <_kill_r>
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d00a      	beq.n	800d600 <_raise_r+0x4c>
 800d5ea:	1c59      	adds	r1, r3, #1
 800d5ec:	d103      	bne.n	800d5f6 <_raise_r+0x42>
 800d5ee:	2316      	movs	r3, #22
 800d5f0:	6003      	str	r3, [r0, #0]
 800d5f2:	2001      	movs	r0, #1
 800d5f4:	e7e7      	b.n	800d5c6 <_raise_r+0x12>
 800d5f6:	2400      	movs	r4, #0
 800d5f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	4798      	blx	r3
 800d600:	2000      	movs	r0, #0
 800d602:	e7e0      	b.n	800d5c6 <_raise_r+0x12>

0800d604 <raise>:
 800d604:	4b02      	ldr	r3, [pc, #8]	; (800d610 <raise+0xc>)
 800d606:	4601      	mov	r1, r0
 800d608:	6818      	ldr	r0, [r3, #0]
 800d60a:	f7ff bfd3 	b.w	800d5b4 <_raise_r>
 800d60e:	bf00      	nop
 800d610:	2000006c 	.word	0x2000006c

0800d614 <_kill_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	4d07      	ldr	r5, [pc, #28]	; (800d634 <_kill_r+0x20>)
 800d618:	2300      	movs	r3, #0
 800d61a:	4604      	mov	r4, r0
 800d61c:	4608      	mov	r0, r1
 800d61e:	4611      	mov	r1, r2
 800d620:	602b      	str	r3, [r5, #0]
 800d622:	f7f4 fe21 	bl	8002268 <_kill>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	d102      	bne.n	800d630 <_kill_r+0x1c>
 800d62a:	682b      	ldr	r3, [r5, #0]
 800d62c:	b103      	cbz	r3, 800d630 <_kill_r+0x1c>
 800d62e:	6023      	str	r3, [r4, #0]
 800d630:	bd38      	pop	{r3, r4, r5, pc}
 800d632:	bf00      	nop
 800d634:	20000950 	.word	0x20000950

0800d638 <_getpid_r>:
 800d638:	f7f4 be0e 	b.w	8002258 <_getpid>

0800d63c <_init>:
 800d63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d63e:	bf00      	nop
 800d640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d642:	bc08      	pop	{r3}
 800d644:	469e      	mov	lr, r3
 800d646:	4770      	bx	lr

0800d648 <_fini>:
 800d648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64a:	bf00      	nop
 800d64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d64e:	bc08      	pop	{r3}
 800d650:	469e      	mov	lr, r3
 800d652:	4770      	bx	lr
