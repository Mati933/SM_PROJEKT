
Pliss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800d0e8  0800d0e8  0001d0e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d604  0800d604  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800d604  0800d604  0001d604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d60c  0800d60c  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d60c  0800d60c  0001d60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d610  0800d610  0001d610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800d614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  20000248  0800d85c  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800d85c  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec64  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004264  00000000  00000000  0003eedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  00043140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00044830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a847  00000000  00000000  00045d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9b4  00000000  00000000  0007056f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa748  00000000  00000000  0008df23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018866b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007748  00000000  00000000  001886c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d0cc 	.word	0x0800d0cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800d0cc 	.word	0x0800d0cc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a4 	b.w	8001048 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	468c      	mov	ip, r1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f040 8083 	bne.w	8000e9a <__udivmoddi4+0x116>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d947      	bls.n	8000e2a <__udivmoddi4+0xa6>
 8000d9a:	fab2 f282 	clz	r2, r2
 8000d9e:	b142      	cbz	r2, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	f1c2 0020 	rsb	r0, r2, #32
 8000da4:	fa24 f000 	lsr.w	r0, r4, r0
 8000da8:	4091      	lsls	r1, r2
 8000daa:	4097      	lsls	r7, r2
 8000dac:	ea40 0c01 	orr.w	ip, r0, r1
 8000db0:	4094      	lsls	r4, r2
 8000db2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000db6:	0c23      	lsrs	r3, r4, #16
 8000db8:	fbbc f6f8 	udiv	r6, ip, r8
 8000dbc:	fa1f fe87 	uxth.w	lr, r7
 8000dc0:	fb08 c116 	mls	r1, r8, r6, ip
 8000dc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x60>
 8000dd0:	18fb      	adds	r3, r7, r3
 8000dd2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dd6:	f080 8119 	bcs.w	800100c <__udivmoddi4+0x288>
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	f240 8116 	bls.w	800100c <__udivmoddi4+0x288>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	443b      	add	r3, r7
 8000de4:	1a5b      	subs	r3, r3, r1
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dec:	fb08 3310 	mls	r3, r8, r0, r3
 8000df0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d909      	bls.n	8000e10 <__udivmoddi4+0x8c>
 8000dfc:	193c      	adds	r4, r7, r4
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	f080 8105 	bcs.w	8001010 <__udivmoddi4+0x28c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f240 8102 	bls.w	8001010 <__udivmoddi4+0x28c>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	443c      	add	r4, r7
 8000e10:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e14:	eba4 040e 	sub.w	r4, r4, lr
 8000e18:	2600      	movs	r6, #0
 8000e1a:	b11d      	cbz	r5, 8000e24 <__udivmoddi4+0xa0>
 8000e1c:	40d4      	lsrs	r4, r2
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e9c5 4300 	strd	r4, r3, [r5]
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	b902      	cbnz	r2, 8000e2e <__udivmoddi4+0xaa>
 8000e2c:	deff      	udf	#255	; 0xff
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	d150      	bne.n	8000ed8 <__udivmoddi4+0x154>
 8000e36:	1bcb      	subs	r3, r1, r7
 8000e38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3c:	fa1f f887 	uxth.w	r8, r7
 8000e40:	2601      	movs	r6, #1
 8000e42:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e46:	0c21      	lsrs	r1, r4, #16
 8000e48:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb08 f30c 	mul.w	r3, r8, ip
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0xe4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0xe2>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	f200 80e9 	bhi.w	8001038 <__udivmoddi4+0x2b4>
 8000e66:	4684      	mov	ip, r0
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	b2a3      	uxth	r3, r4
 8000e6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e70:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e74:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e78:	fb08 f800 	mul.w	r8, r8, r0
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0x10c>
 8000e80:	193c      	adds	r4, r7, r4
 8000e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x10a>
 8000e88:	45a0      	cmp	r8, r4
 8000e8a:	f200 80d9 	bhi.w	8001040 <__udivmoddi4+0x2bc>
 8000e8e:	4618      	mov	r0, r3
 8000e90:	eba4 0408 	sub.w	r4, r4, r8
 8000e94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e98:	e7bf      	b.n	8000e1a <__udivmoddi4+0x96>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d909      	bls.n	8000eb2 <__udivmoddi4+0x12e>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	f000 80b1 	beq.w	8001006 <__udivmoddi4+0x282>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	e9c5 0100 	strd	r0, r1, [r5]
 8000eaa:	4630      	mov	r0, r6
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	fab3 f683 	clz	r6, r3
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	d14a      	bne.n	8000f50 <__udivmoddi4+0x1cc>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d302      	bcc.n	8000ec4 <__udivmoddi4+0x140>
 8000ebe:	4282      	cmp	r2, r0
 8000ec0:	f200 80b8 	bhi.w	8001034 <__udivmoddi4+0x2b0>
 8000ec4:	1a84      	subs	r4, r0, r2
 8000ec6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eca:	2001      	movs	r0, #1
 8000ecc:	468c      	mov	ip, r1
 8000ece:	2d00      	cmp	r5, #0
 8000ed0:	d0a8      	beq.n	8000e24 <__udivmoddi4+0xa0>
 8000ed2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ed6:	e7a5      	b.n	8000e24 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ee0:	4097      	lsls	r7, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eea:	40d9      	lsrs	r1, r3
 8000eec:	4330      	orrs	r0, r6
 8000eee:	0c03      	lsrs	r3, r0, #16
 8000ef0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ef4:	fa1f f887 	uxth.w	r8, r7
 8000ef8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000efc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f00:	fb06 f108 	mul.w	r1, r6, r8
 8000f04:	4299      	cmp	r1, r3
 8000f06:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0a:	d909      	bls.n	8000f20 <__udivmoddi4+0x19c>
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f12:	f080 808d 	bcs.w	8001030 <__udivmoddi4+0x2ac>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 808a 	bls.w	8001030 <__udivmoddi4+0x2ac>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	443b      	add	r3, r7
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b281      	uxth	r1, r0
 8000f24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f30:	fb00 f308 	mul.w	r3, r0, r8
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d907      	bls.n	8000f48 <__udivmoddi4+0x1c4>
 8000f38:	1879      	adds	r1, r7, r1
 8000f3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3e:	d273      	bcs.n	8001028 <__udivmoddi4+0x2a4>
 8000f40:	428b      	cmp	r3, r1
 8000f42:	d971      	bls.n	8001028 <__udivmoddi4+0x2a4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4439      	add	r1, r7
 8000f48:	1acb      	subs	r3, r1, r3
 8000f4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f4e:	e778      	b.n	8000e42 <__udivmoddi4+0xbe>
 8000f50:	f1c6 0c20 	rsb	ip, r6, #32
 8000f54:	fa03 f406 	lsl.w	r4, r3, r6
 8000f58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f5c:	431c      	orrs	r4, r3
 8000f5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f62:	fa01 f306 	lsl.w	r3, r1, r6
 8000f66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f6e:	431f      	orrs	r7, r3
 8000f70:	0c3b      	lsrs	r3, r7, #16
 8000f72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f76:	fa1f f884 	uxth.w	r8, r4
 8000f7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f82:	fb09 fa08 	mul.w	sl, r9, r8
 8000f86:	458a      	cmp	sl, r1
 8000f88:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x220>
 8000f92:	1861      	adds	r1, r4, r1
 8000f94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f98:	d248      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000f9a:	458a      	cmp	sl, r1
 8000f9c:	d946      	bls.n	800102c <__udivmoddi4+0x2a8>
 8000f9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000fa2:	4421      	add	r1, r4
 8000fa4:	eba1 010a 	sub.w	r1, r1, sl
 8000fa8:	b2bf      	uxth	r7, r7
 8000faa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fb6:	fb00 f808 	mul.w	r8, r0, r8
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x24a>
 8000fbe:	19e7      	adds	r7, r4, r7
 8000fc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fc4:	d22e      	bcs.n	8001024 <__udivmoddi4+0x2a0>
 8000fc6:	45b8      	cmp	r8, r7
 8000fc8:	d92c      	bls.n	8001024 <__udivmoddi4+0x2a0>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4427      	add	r7, r4
 8000fce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fd2:	eba7 0708 	sub.w	r7, r7, r8
 8000fd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fda:	454f      	cmp	r7, r9
 8000fdc:	46c6      	mov	lr, r8
 8000fde:	4649      	mov	r1, r9
 8000fe0:	d31a      	bcc.n	8001018 <__udivmoddi4+0x294>
 8000fe2:	d017      	beq.n	8001014 <__udivmoddi4+0x290>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x27a>
 8000fe6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fea:	eb67 0701 	sbc.w	r7, r7, r1
 8000fee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ff2:	40f2      	lsrs	r2, r6
 8000ff4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ff8:	40f7      	lsrs	r7, r6
 8000ffa:	e9c5 2700 	strd	r2, r7, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e70b      	b.n	8000e24 <__udivmoddi4+0xa0>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e9      	b.n	8000de4 <__udivmoddi4+0x60>
 8001010:	4618      	mov	r0, r3
 8001012:	e6fd      	b.n	8000e10 <__udivmoddi4+0x8c>
 8001014:	4543      	cmp	r3, r8
 8001016:	d2e5      	bcs.n	8000fe4 <__udivmoddi4+0x260>
 8001018:	ebb8 0e02 	subs.w	lr, r8, r2
 800101c:	eb69 0104 	sbc.w	r1, r9, r4
 8001020:	3801      	subs	r0, #1
 8001022:	e7df      	b.n	8000fe4 <__udivmoddi4+0x260>
 8001024:	4608      	mov	r0, r1
 8001026:	e7d2      	b.n	8000fce <__udivmoddi4+0x24a>
 8001028:	4660      	mov	r0, ip
 800102a:	e78d      	b.n	8000f48 <__udivmoddi4+0x1c4>
 800102c:	4681      	mov	r9, r0
 800102e:	e7b9      	b.n	8000fa4 <__udivmoddi4+0x220>
 8001030:	4666      	mov	r6, ip
 8001032:	e775      	b.n	8000f20 <__udivmoddi4+0x19c>
 8001034:	4630      	mov	r0, r6
 8001036:	e74a      	b.n	8000ece <__udivmoddi4+0x14a>
 8001038:	f1ac 0c02 	sub.w	ip, ip, #2
 800103c:	4439      	add	r1, r7
 800103e:	e713      	b.n	8000e68 <__udivmoddi4+0xe4>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	e724      	b.n	8000e90 <__udivmoddi4+0x10c>
 8001046:	bf00      	nop

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <pid_init>:
 *  Created on: Nov 22, 2021
 *      Author: Ja
 */
#include "PID.h"
void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6178      	str	r0, [r7, #20]
 8001054:	ed87 0a04 	vstr	s0, [r7, #16]
 8001058:	edc7 0a03 	vstr	s1, [r7, #12]
 800105c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001060:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	615a      	str	r2, [r3, #20]
}
 8001086:	bf00      	nop
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <pid_reset>:

void pid_reset(pid_str *pid_data)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <pid_calculate>:
int pid_calculate(pid_str *pid_data, int setpoint, int process_variable)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	441a      	add	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e8:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001102:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 7a04 	vldr	s14, [r3, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001130:	ed97 7a07 	vldr	s14, [r7, #28]
 8001134:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113c:	db08      	blt.n	8001150 <pid_calculate+0x9c>
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114a:	edc7 7a07 	vstr	s15, [r7, #28]
 800114e:	e016      	b.n	800117e <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	425b      	negs	r3, r3
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d808      	bhi.n	800117e <pid_calculate+0xca>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	425b      	negs	r3, r3
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117a:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

	if((int)(p_term + i_term + d_term)<-1000)
 8001184:	ed97 7a05 	vldr	s14, [r7, #20]
 8001188:	edd7 7a07 	vldr	s15, [r7, #28]
 800118c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001190:	edd7 7a04 	vldr	s15, [r7, #16]
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119c:	ee17 3a90 	vmov	r3, s15
 80011a0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80011a4:	da01      	bge.n	80011aa <pid_calculate+0xf6>
	{
		return (int)-1000;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <pid_calculate+0x120>)
 80011a8:	e00d      	b.n	80011c6 <pid_calculate+0x112>
	}
	else
	{
		return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 80011aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80011ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80011b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c2:	ee17 3a90 	vmov	r3, s15
	}



}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	fffffc18 	.word	0xfffffc18

080011d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011de:	463b      	mov	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_ADC1_Init+0x98>)
 80011ec:	4a21      	ldr	r2, [pc, #132]	; (8001274 <MX_ADC1_Init+0x9c>)
 80011ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_ADC1_Init+0x98>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_ADC1_Init+0x98>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC1_Init+0x98>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_ADC1_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_ADC1_Init+0x98>)
 8001218:	4a17      	ldr	r2, [pc, #92]	; (8001278 <MX_ADC1_Init+0xa0>)
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_ADC1_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_ADC1_Init+0x98>)
 8001224:	2201      	movs	r2, #1
 8001226:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_ADC1_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_ADC1_Init+0x98>)
 8001232:	2201      	movs	r2, #1
 8001234:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_ADC1_Init+0x98>)
 8001238:	f001 fb56 	bl	80028e8 <HAL_ADC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 fe83 	bl	8001f4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001246:	2303      	movs	r3, #3
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_ADC1_Init+0x98>)
 8001258:	f001 fcf0 	bl	8002c3c <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001262:	f000 fe73 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200002e4 	.word	0x200002e4
 8001274:	40012000 	.word	0x40012000
 8001278:	0f000001 	.word	0x0f000001

0800127c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <HAL_ADC_MspInit+0x74>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d123      	bne.n	80012e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_ADC_MspInit+0x78>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <HAL_ADC_MspInit+0x78>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_ADC_MspInit+0x78>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_ADC_MspInit+0x78>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_ADC_MspInit+0x78>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_ADC_MspInit+0x78>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ce:	2308      	movs	r3, #8
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_ADC_MspInit+0x7c>)
 80012e2:	f002 f893 	bl	800340c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	3728      	adds	r7, #40	; 0x28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40012000 	.word	0x40012000
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000

080012fc <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af02      	add	r7, sp, #8
 8001302:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	b299      	uxth	r1, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f107 020f 	add.w	r2, r7, #15
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	f002 fae5 	bl	80038ec <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8001322:	2310      	movs	r3, #16
 8001324:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	791b      	ldrb	r3, [r3, #4]
 800132e:	b299      	uxth	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f107 020f 	add.w	r2, r7, #15
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	f002 fad6 	bl	80038ec <HAL_I2C_Master_Transmit>
}
 8001340:	bf00      	nop
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	b299      	uxth	r1, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f107 020c 	add.w	r2, r7, #12
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2302      	movs	r3, #2
 8001366:	f002 fbb5 	bl	8003ad4 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 800136a:	7b3b      	ldrb	r3, [r7, #12]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	7b7a      	ldrb	r2, [r7, #13]
 8001370:	4313      	orrs	r3, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f906 	bl	8000584 <__aeabi_i2d>
 8001378:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <BH1750_ReadLux+0x58>)
 800137e:	f7ff fa95 	bl	80008ac <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fc5d 	bl	8000c48 <__aeabi_d2f>
 800138e:	4603      	mov	r3, r0
 8001390:	ee07 3a90 	vmov	s15, r3
}
 8001394:	eeb0 0a67 	vmov.f32	s0, s15
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	3ff33333 	.word	0x3ff33333

080013a4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a8a      	ldr	r2, [pc, #552]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a84      	ldr	r2, [pc, #528]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013d8:	f043 0320 	orr.w	r3, r3, #32
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	4b7f      	ldr	r3, [pc, #508]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a7e      	ldr	r2, [pc, #504]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b7c      	ldr	r3, [pc, #496]	; (80015e8 <MX_GPIO_Init+0x244>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b79      	ldr	r3, [pc, #484]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a78      	ldr	r2, [pc, #480]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b73      	ldr	r3, [pc, #460]	; (80015e8 <MX_GPIO_Init+0x244>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a72      	ldr	r2, [pc, #456]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b6a      	ldr	r3, [pc, #424]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144a:	4b67      	ldr	r3, [pc, #412]	; (80015e8 <MX_GPIO_Init+0x244>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a66      	ldr	r2, [pc, #408]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b64      	ldr	r3, [pc, #400]	; (80015e8 <MX_GPIO_Init+0x244>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D7_Pin|D4_Pin|D5_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f240 4124 	movw	r1, #1060	; 0x424
 8001468:	4860      	ldr	r0, [pc, #384]	; (80015ec <MX_GPIO_Init+0x248>)
 800146a:	f002 f97b 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	210c      	movs	r1, #12
 8001472:	485f      	ldr	r0, [pc, #380]	; (80015f0 <MX_GPIO_Init+0x24c>)
 8001474:	f002 f976 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	f244 0181 	movw	r1, #16513	; 0x4081
 800147e:	485d      	ldr	r0, [pc, #372]	; (80015f4 <MX_GPIO_Init+0x250>)
 8001480:	f002 f970 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2140      	movs	r1, #64	; 0x40
 8001488:	485b      	ldr	r0, [pc, #364]	; (80015f8 <MX_GPIO_Init+0x254>)
 800148a:	f002 f96b 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2101      	movs	r1, #1
 8001492:	485a      	ldr	r0, [pc, #360]	; (80015fc <MX_GPIO_Init+0x258>)
 8001494:	f002 f966 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800149e:	4b58      	ldr	r3, [pc, #352]	; (8001600 <MX_GPIO_Init+0x25c>)
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4850      	ldr	r0, [pc, #320]	; (80015f0 <MX_GPIO_Init+0x24c>)
 80014ae:	f001 ffad 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D7_Pin|D4_Pin|D5_Pin;
 80014b2:	f240 4324 	movw	r3, #1060	; 0x424
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4848      	ldr	r0, [pc, #288]	; (80015ec <MX_GPIO_Init+0x248>)
 80014cc:	f001 ff9e 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014d0:	2332      	movs	r3, #50	; 0x32
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e0:	230b      	movs	r3, #11
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4841      	ldr	r0, [pc, #260]	; (80015f0 <MX_GPIO_Init+0x24c>)
 80014ec:	f001 ff8e 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin;
 80014f0:	230c      	movs	r3, #12
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	483a      	ldr	r0, [pc, #232]	; (80015f0 <MX_GPIO_Init+0x24c>)
 8001508:	f001 ff80 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800150c:	2386      	movs	r3, #134	; 0x86
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800151c:	230b      	movs	r3, #11
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4837      	ldr	r0, [pc, #220]	; (8001604 <MX_GPIO_Init+0x260>)
 8001528:	f001 ff70 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800152c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	482b      	ldr	r0, [pc, #172]	; (80015f4 <MX_GPIO_Init+0x250>)
 8001546:	f001 ff61 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800154a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800155c:	230b      	movs	r3, #11
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4823      	ldr	r0, [pc, #140]	; (80015f4 <MX_GPIO_Init+0x250>)
 8001568:	f001 ff50 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800156c:	2340      	movs	r3, #64	; 0x40
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800157c:	f107 031c 	add.w	r3, r7, #28
 8001580:	4619      	mov	r1, r3
 8001582:	481d      	ldr	r0, [pc, #116]	; (80015f8 <MX_GPIO_Init+0x254>)
 8001584:	f001 ff42 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4817      	ldr	r0, [pc, #92]	; (80015f8 <MX_GPIO_Init+0x254>)
 800159c:	f001 ff36 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D6_Pin;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(D6_GPIO_Port, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	4811      	ldr	r0, [pc, #68]	; (80015fc <MX_GPIO_Init+0x258>)
 80015b8:	f001 ff28 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ce:	230b      	movs	r3, #11
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4807      	ldr	r0, [pc, #28]	; (80015f8 <MX_GPIO_Init+0x254>)
 80015da:	f001 ff17 	bl	800340c <HAL_GPIO_Init>

}
 80015de:	bf00      	nop
 80015e0:	3730      	adds	r7, #48	; 0x30
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020400 	.word	0x40020400
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	10110000 	.word	0x10110000
 8001604:	40020000 	.word	0x40020000

08001608 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C1_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C1_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C1_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <MX_I2C1_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_I2C1_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_I2C1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <MX_I2C1_Init+0x74>)
 8001644:	f002 f8c2 	bl	80037cc <HAL_I2C_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 fc7d 	bl	8001f4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C1_Init+0x74>)
 8001656:	f002 fd13 	bl	8004080 <HAL_I2CEx_ConfigAnalogFilter>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 fc74 	bl	8001f4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_I2C1_Init+0x74>)
 8001668:	f002 fd55 	bl	8004116 <HAL_I2CEx_ConfigDigitalFilter>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 fc6b 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000032c 	.word	0x2000032c
 8001680:	40005400 	.word	0x40005400
 8001684:	00808cd2 	.word	0x00808cd2

08001688 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x7c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d128      	bne.n	80016fc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c8:	2312      	movs	r3, #18
 80016ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d4:	2304      	movs	r3, #4
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	480b      	ldr	r0, [pc, #44]	; (800170c <HAL_I2C_MspInit+0x84>)
 80016e0:	f001 fe94 	bl	800340c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_I2C_MspInit+0x80>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40005400 	.word	0x40005400
 8001708:	40023800 	.word	0x40023800
 800170c:	40020400 	.word	0x40020400

08001710 <lcd_write_command>:
 * @param[in] hlcd    LCD handler
 * @param[in] command Display command @see lcd.h/Define
 * @return None
 */
void lcd_write_command(LCD_HandleTypeDef* hlcd, uint8_t command)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_COMMAND_REG);    // Write to command register
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6898      	ldr	r0, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	899b      	ldrh	r3, [r3, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	4619      	mov	r1, r3
 8001728:	f002 f81c 	bl	8003764 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7d9b      	ldrb	r3, [r3, #22]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d115      	bne.n	8001760 <lcd_write_command+0x50>
  {
    if(hlcd->IsInitialized) // Before initialization ignore most significant nibble
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7f1b      	ldrb	r3, [r3, #28]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <lcd_write_command+0x3c>
    {
      lcd_write(hlcd, (command >> 4), LCD_NIB);
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	2204      	movs	r2, #4
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f842 	bl	80017d0 <lcd_write>
    }
    lcd_write(hlcd, command & 0x0F, LCD_NIB);
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2204      	movs	r2, #4
 8001756:	4619      	mov	r1, r3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 f839 	bl	80017d0 <lcd_write>
  }
  else
  {
     lcd_write(hlcd, command, LCD_BYTE);
  }
}
 800175e:	e005      	b.n	800176c <lcd_write_command+0x5c>
     lcd_write(hlcd, command, LCD_BYTE);
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	2208      	movs	r2, #8
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f832 	bl	80017d0 <lcd_write>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <lcd_write_data>:
 * @param[in] hlcd LCD handler
 * @param[in] data Display data byte
 * @return None
 */
void lcd_write_data(LCD_HandleTypeDef* hlcd, uint8_t data)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hlcd->RS_Port, hlcd->RS_Pin, LCD_DATA_REG);     // Write to data register
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6898      	ldr	r0, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	899b      	ldrh	r3, [r3, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	4619      	mov	r1, r3
 800178c:	f001 ffea 	bl	8003764 <HAL_GPIO_WritePin>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7d9b      	ldrb	r3, [r3, #22]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d111      	bne.n	80017bc <lcd_write_data+0x48>
  {
    lcd_write(hlcd, data >> 4, LCD_NIB);
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2204      	movs	r2, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f814 	bl	80017d0 <lcd_write>
    lcd_write(hlcd, data & 0x0F, LCD_NIB);
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2204      	movs	r2, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f80b 	bl	80017d0 <lcd_write>
  }
  else
  {
    lcd_write(hlcd, data, LCD_BYTE);
  }
}
 80017ba:	e005      	b.n	80017c8 <lcd_write_data+0x54>
    lcd_write(hlcd, data, LCD_BYTE);
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	2208      	movs	r2, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f804 	bl	80017d0 <lcd_write>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <lcd_write>:
 * @param[in] data Data byte
 * @param[in] len  Data port size (length): 4 ( LCD_NIB )or 8 ( LCD_BYTE ) bits
 * @return None
 */
void lcd_write(LCD_HandleTypeDef* hlcd, uint8_t data, uint8_t len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
 80017dc:	4613      	mov	r3, r2
 80017de:	70bb      	strb	r3, [r7, #2]
  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_SET);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6918      	ldr	r0, [r3, #16]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8a9b      	ldrh	r3, [r3, #20]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4619      	mov	r1, r3
 80017ec:	f001 ffba 	bl	8003764 <HAL_GPIO_WritePin>

  for(uint8_t i = 0; i < len; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e019      	b.n	800182a <lcd_write+0x5a>
    HAL_GPIO_WritePin(hlcd->DATA_Ports[i], hlcd->DATA_Pins[i], (data >> i) & 0x01);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	8819      	ldrh	r1, [r3, #0]
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	fa42 f303 	asr.w	r3, r2, r3
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	f001 ffa0 	bl	8003764 <HAL_GPIO_WritePin>
  for(uint8_t i = 0; i < len; i++)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	3301      	adds	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	78bb      	ldrb	r3, [r7, #2]
 800182e:	429a      	cmp	r2, r3
 8001830:	d3e1      	bcc.n	80017f6 <lcd_write+0x26>

  HAL_GPIO_WritePin(hlcd->E_Port, hlcd->E_Pin, GPIO_PIN_RESET); // Data receive on falling edge
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6918      	ldr	r0, [r3, #16]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	8a9b      	ldrh	r3, [r3, #20]
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	f001 ff91 	bl	8003764 <HAL_GPIO_WritePin>
  __LCD_Delay(hlcd, 0.05);  // > 41 us
 8001842:	2132      	movs	r1, #50	; 0x32
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f804 	bl	8001852 <lcd_delay_us>
}
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <lcd_delay_us>:
 * @param[in] hlcd LCD handler
 * @param[in] delay_us Delay period in microseconds
 * @return None
 */
void lcd_delay_us(LCD_HandleTypeDef* hlcd, uint32_t delay_us)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  __HAL_TIM_SET_COUNTER(hlcd->Timer, 0);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(hlcd->Timer);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4618      	mov	r0, r3
 800186c:	f003 fee6 	bl	800563c <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(hlcd->Timer) < delay_us);
 8001870:	bf00      	nop
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d8f8      	bhi.n	8001872 <lcd_delay_us+0x20>
  HAL_TIM_Base_Stop(hlcd->Timer);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 ff49 	bl	800571c <HAL_TIM_Base_Stop>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <LCD_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd LCD handler
 * @return None
 */
void LCD_Init(LCD_HandleTypeDef* hlcd)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  hlcd->IsInitialized = 0;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	771a      	strb	r2, [r3, #28]

  __LCD_Delay(hlcd, 15.2);         // >15 ms
 80018a0:	f643 315f 	movw	r1, #15199	; 0x3b5f
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffd4 	bl	8001852 <lcd_delay_us>

  if(hlcd->Mode == LCD_4_BIT_MODE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7d9b      	ldrb	r3, [r3, #22]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d120      	bne.n	80018f4 <LCD_Init+0x62>
  {
    lcd_write_command(hlcd, 0x3);  // 0011
 80018b2:	2103      	movs	r1, #3
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff2b 	bl	8001710 <lcd_write_command>
    __LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 80018ba:	f241 0167 	movw	r1, #4199	; 0x1067
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffc7 	bl	8001852 <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 80018c4:	2103      	movs	r1, #3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ff22 	bl	8001710 <lcd_write_command>
    __LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 80018cc:	21c8      	movs	r1, #200	; 0xc8
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffbf 	bl	8001852 <lcd_delay_us>
    lcd_write_command(hlcd, 0x3);  // 0011
 80018d4:	2103      	movs	r1, #3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff1a 	bl	8001710 <lcd_write_command>
    lcd_write_command(hlcd, 0x2);  // 0010
 80018dc:	2102      	movs	r1, #2
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff ff16 	bl	8001710 <lcd_write_command>

    hlcd->IsInitialized = 1;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);
 80018ea:	2128      	movs	r1, #40	; 0x28
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff0f 	bl	8001710 <lcd_write_command>
 80018f2:	e01f      	b.n	8001934 <LCD_Init+0xa2>
  }
  else if(hlcd->Mode == LCD_8_BIT_MODE) /* TODO: test 8-bit interface */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7d9b      	ldrb	r3, [r3, #22]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d11b      	bne.n	8001934 <LCD_Init+0xa2>
  {
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 80018fc:	2130      	movs	r1, #48	; 0x30
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff06 	bl	8001710 <lcd_write_command>
	__LCD_Delay(hlcd, 4.2);        // > 4.1 ms
 8001904:	f241 0167 	movw	r1, #4199	; 0x1067
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ffa2 	bl	8001852 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 800190e:	2130      	movs	r1, #48	; 0x30
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fefd 	bl	8001710 <lcd_write_command>
	__LCD_Delay(hlcd, 0.2);        // > 0.1 ms
 8001916:	21c8      	movs	r1, #200	; 0xc8
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff9a 	bl	8001852 <lcd_delay_us>
	lcd_write_command(hlcd, 0x30); // 0011 XXXX
 800191e:	2130      	movs	r1, #48	; 0x30
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff fef5 	bl	8001710 <lcd_write_command>

	hlcd->IsInitialized = 1;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	771a      	strb	r2, [r3, #28]

    lcd_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_DL | LCD_OPT_N);
 800192c:	2138      	movs	r1, #56	; 0x38
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff feee 	bl	8001710 <lcd_write_command>
  }

  lcd_write_command(hlcd, LCD_CLEAR_DISPLAY);                        // Clear screen
 8001934:	2101      	movs	r1, #1
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff feea 	bl	8001710 <lcd_write_command>
  __LCD_Delay(hlcd, 1.6);                                            // > 1.52 ms
 800193c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff86 	bl	8001852 <lcd_delay_us>
  lcd_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D);   // LCD on, Cursor off, No blink
 8001946:	210c      	movs	r1, #12
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fee1 	bl	8001710 <lcd_write_command>
  lcd_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);         // Cursor increment on
 800194e:	2106      	movs	r1, #6
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff fedd 	bl	8001710 <lcd_write_command>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <LCD_printStr>:
 * @param[in] hlcd LCD handler
 * @param[in] str  Null-terminated string
 * @return None
 */
void LCD_printStr(LCD_HandleTypeDef* hlcd, char* str)
{
 800195e:	b590      	push	{r4, r7, lr}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
 800196c:	e00a      	b.n	8001984 <LCD_printStr+0x26>
    lcd_write_data(hlcd, str[i]);
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fefb 	bl	8001774 <lcd_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	3301      	adds	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	7bfc      	ldrb	r4, [r7, #15]
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f7fe fc4c 	bl	8000224 <strlen>
 800198c:	4603      	mov	r3, r0
 800198e:	429c      	cmp	r4, r3
 8001990:	d3ed      	bcc.n	800196e <LCD_printStr+0x10>
}
 8001992:	bf00      	nop
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bd90      	pop	{r4, r7, pc}

0800199c <LCD_printf>:
 * @param[in] format Text format @see http://www.cplusplus.com/reference/cstdio/printf/
 * @param[in] ...    Variadic arguments
 * @return None
 */
void LCD_printf(LCD_HandleTypeDef* hlcd, const char* format, ...)
{
 800199c:	b40e      	push	{r1, r2, r3}
 800199e:	b580      	push	{r7, lr}
 80019a0:	b095      	sub	sp, #84	; 0x54
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  char buffer[LCD_PRINTF_BUF_SIZE];
  va_list args;
  va_start(args, format);
 80019a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019aa:	60fb      	str	r3, [r7, #12]
  vsprintf(buffer,format, args);
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019b4:	4618      	mov	r0, r3
 80019b6:	f008 f8e3 	bl	8009b80 <vsiprintf>
  LCD_printStr(hlcd, buffer);
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffcc 	bl	800195e <LCD_printStr>
  va_end(args);
}
 80019c6:	bf00      	nop
 80019c8:	3754      	adds	r7, #84	; 0x54
 80019ca:	46bd      	mov	sp, r7
 80019cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019d0:	b003      	add	sp, #12
 80019d2:	4770      	bx	lr

080019d4 <__io_putchar>:
int rand2;
time_t t;

int START=0;
int __io_putchar(int ch)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	d109      	bne.n	80019f6 <__io_putchar+0x22>
	{
		int ch2='\r';
 80019e2:	230d      	movs	r3, #13
 80019e4:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 80019e6:	f107 010c 	add.w	r1, r7, #12
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	2201      	movs	r2, #1
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <__io_putchar+0x3c>)
 80019f2:	f005 f865 	bl	8006ac0 <HAL_UART_Transmit>

	}
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80019f6:	1d39      	adds	r1, r7, #4
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
 80019fc:	2201      	movs	r2, #1
 80019fe:	4804      	ldr	r0, [pc, #16]	; (8001a10 <__io_putchar+0x3c>)
 8001a00:	f005 f85e 	bl	8006ac0 <HAL_UART_Transmit>
	return ch;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200004c8 	.word	0x200004c8

08001a14 <losowa>:
	    int c=10;
	    int m=89;
	    int los=0;
	    float x=0;
float losowa()
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0


	    los=(a*los+c)%m;
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <losowa+0x90>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <losowa+0x94>)
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	fb02 f203 	mul.w	r2, r2, r3
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <losowa+0x98>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <losowa+0x9c>)
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a32:	fb02 f201 	mul.w	r2, r2, r1
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <losowa+0x94>)
 8001a3a:	6013      	str	r3, [r2, #0]
	    x=(float)los/(float)m-0.5;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <losowa+0x94>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a48:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <losowa+0x9c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <losowa+0xa0>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
	    x=abs(x*400);
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <losowa+0xa0>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ab8 <losowa+0xa4>
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a78:	ee17 3a90 	vmov	r3, s15
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bfb8      	it	lt
 8001a80:	425b      	neglt	r3, r3
 8001a82:	ee07 3a90 	vmov	s15, r3
 8001a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <losowa+0xa0>)
 8001a8c:	edc3 7a00 	vstr	s15, [r3]

	    return x;
 8001a90:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <losowa+0xa0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	ee07 3a90 	vmov	s15, r3
}
 8001a98:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	2000005c 	.word	0x2000005c
 8001aa8:	200002cc 	.word	0x200002cc
 8001aac:	20000060 	.word	0x20000060
 8001ab0:	20000064 	.word	0x20000064
 8001ab4:	200002d0 	.word	0x200002d0
 8001ab8:	43c80000 	.word	0x43c80000

08001abc <line_append>:
void line_append(uint8_t value)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n')
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b0d      	cmp	r3, #13
 8001aca:	d002      	beq.n	8001ad2 <line_append+0x16>
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b0a      	cmp	r3, #10
 8001ad0:	d13b      	bne.n	8001b4a <line_append+0x8e>
	{
		// odebraliśmy znak końca linii
		if (line_length > 0)
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <line_append+0xb8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d047      	beq.n	8001b6a <line_append+0xae>
		{
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <line_append+0xb8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <line_append+0xbc>)
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	54d1      	strb	r1, [r2, r3]
			if(strcmp(line_buffer,tablica)==0)
 8001ae4:	4925      	ldr	r1, [pc, #148]	; (8001b7c <line_append+0xc0>)
 8001ae6:	4824      	ldr	r0, [pc, #144]	; (8001b78 <line_append+0xbc>)
 8001ae8:	f7fe fb92 	bl	8000210 <strcmp>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <line_append+0x3e>
			{
				START=0;
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <line_append+0xc4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e023      	b.n	8001b42 <line_append+0x86>
				//printf("TWOJASTARA\n");
			}
			else
			{
				sscanf(line_buffer,"Kp%fKd%fKi%fZ%f",&kp_init,&kd_init,&ki_init,&zak);
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <line_append+0xc8>)
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <line_append+0xcc>)
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <line_append+0xd0>)
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <line_append+0xd4>)
 8001b06:	4923      	ldr	r1, [pc, #140]	; (8001b94 <line_append+0xd8>)
 8001b08:	481b      	ldr	r0, [pc, #108]	; (8001b78 <line_append+0xbc>)
 8001b0a:	f007 f8fd 	bl	8008d08 <siscanf>
				pid_init(PID,kp_init,ki_init,kd_init,anti_windup_limit_init);
 8001b0e:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <line_append+0xdc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <line_append+0xd4>)
 8001b14:	edd2 7a00 	vldr	s15, [r2]
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <line_append+0xcc>)
 8001b1a:	ed92 7a00 	vldr	s14, [r2]
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <line_append+0xd0>)
 8001b20:	edd2 6a00 	vldr	s13, [r2]
 8001b24:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <line_append+0xe0>)
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	eeb0 1a66 	vmov.f32	s2, s13
 8001b2e:	eef0 0a47 	vmov.f32	s1, s14
 8001b32:	eeb0 0a67 	vmov.f32	s0, s15
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fa88 	bl	800104c <pid_init>
				START=1;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <line_append+0xc4>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
			}
			//printf("%c\n",line_buffer[0]);
			line_length = 0;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <line_append+0xb8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
		if (line_length > 0)
 8001b48:	e00f      	b.n	8001b6a <line_append+0xae>
		}
	}
	else
	{
		if (line_length >= LINE_MAX_LENGTH)
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <line_append+0xb8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b4f      	cmp	r3, #79	; 0x4f
 8001b50:	d902      	bls.n	8001b58 <line_append+0x9c>
		{
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <line_append+0xb8>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <line_append+0xb8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	4905      	ldr	r1, [pc, #20]	; (8001b74 <line_append+0xb8>)
 8001b60:	600a      	str	r2, [r1, #0]
 8001b62:	4905      	ldr	r1, [pc, #20]	; (8001b78 <line_append+0xbc>)
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	54ca      	strb	r2, [r1, r3]
	}
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002c4 	.word	0x200002c4
 8001b78:	20000270 	.word	0x20000270
 8001b7c:	20000054 	.word	0x20000054
 8001b80:	200002c8 	.word	0x200002c8
 8001b84:	20000268 	.word	0x20000268
 8001b88:	2000004c 	.word	0x2000004c
 8001b8c:	20000264 	.word	0x20000264
 8001b90:	20000048 	.word	0x20000048
 8001b94:	0800d0e8 	.word	0x0800d0e8
 8001b98:	20000380 	.word	0x20000380
 8001b9c:	20000050 	.word	0x20000050

08001ba0 <HAL_TIM_PeriodElapsedCallback>:
//PID
int j=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a53      	ldr	r2, [pc, #332]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d16b      	bne.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0xe8>
  {
	  if(START)
 8001bb0:	4b52      	ldr	r3, [pc, #328]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d05c      	beq.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0xd2>
	  {
	 //SP
	 HAL_ADC_Start(&hadc1);
 8001bb8:	4851      	ldr	r0, [pc, #324]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001bba:	f000 fed9 	bl	8002970 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc2:	484f      	ldr	r0, [pc, #316]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001bc4:	f000 ffa2 	bl	8002b0c <HAL_ADC_PollForConversion>
	 uint32_t adc=HAL_ADC_GetValue(&hadc1);
 8001bc8:	484d      	ldr	r0, [pc, #308]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001bca:	f001 f82a 	bl	8002c22 <HAL_ADC_GetValue>
 8001bce:	60f8      	str	r0, [r7, #12]
	 value_SP=70*adc/4096;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2246      	movs	r2, #70	; 0x46
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	0b1b      	lsrs	r3, r3, #12
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001bde:	601a      	str	r2, [r3, #0]

	 //PV
	 value_PV=BH1750_ReadLux(&hbh1750_1);
 8001be0:	4849      	ldr	r0, [pc, #292]	; (8001d08 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001be2:	f7ff fbb1 	bl	8001348 <BH1750_ReadLux>
 8001be6:	eef0 7a40 	vmov.f32	s15, s0
 8001bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bee:	ee17 2a90 	vmov	r2, s15
 8001bf2:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001bf4:	601a      	str	r2, [r3, #0]


	 value_U=pid_calculate(PID, value_SP, value_PV);
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001bfc:	6811      	ldr	r1, [r2, #0]
 8001bfe:	4a43      	ldr	r2, [pc, #268]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fa56 	bl	80010b4 <pid_calculate>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c0c:	6013      	str	r3, [r2, #0]
	 PWM=__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8001c0e:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b41      	ldr	r3, [pc, #260]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c18:	601a      	str	r2, [r3, #0]
	 PWM=PWM+value_U;
 8001c1a:	4b40      	ldr	r3, [pc, #256]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c26:	6013      	str	r3, [r2, #0]
	 if(PWM<0)
 8001c28:	4b3c      	ldr	r3, [pc, #240]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da03      	bge.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x98>
	 {
		 PWM=0;
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e008      	b.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0xaa>
	 }
	 else if(PWM>1000)
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c40:	dd03      	ble.n	8001c4a <HAL_TIM_PeriodElapsedCallback+0xaa>
	 {
		 PWM=1000;
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c48:	601a      	str	r2, [r3, #0]
	 }
	 printf("PV%dSP%dCV%d\n",value_PV,value_SP,PWM);
 8001c4a:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4832      	ldr	r0, [pc, #200]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001c58:	f007 f818 	bl	8008c8c <iprintf>
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 8001c5c:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
	 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001c66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c6a:	482e      	ldr	r0, [pc, #184]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001c6c:	f001 fd93 	bl	8003796 <HAL_GPIO_TogglePin>
 8001c70:	e00a      	b.n	8001c88 <HAL_TIM_PeriodElapsedCallback+0xe8>
	  }
	  else
	  {
		  pid_reset(&PID);
 8001c72:	4827      	ldr	r0, [pc, #156]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001c74:	f7ff fa0d 	bl	8001092 <pid_reset>
		  PWM=0;
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 8001c7e:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
	  }



  }
  if (htim == &htim10)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a27      	ldr	r2, [pc, #156]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d12f      	bne.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0x150>
  {
	  if(zak==1)
 8001c90:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c9a:	eef4 7a47 	vcmp.f32	s15, s14
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	d112      	bne.n	8001cca <HAL_TIM_PeriodElapsedCallback+0x12a>
	  {
	  rand2=losowa();
 8001ca4:	f7ff feb6 	bl	8001a14 <losowa>
 8001ca8:	eef0 7a40 	vmov.f32	s15, s0
 8001cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb0:	ee17 2a90 	vmov	r2, s15
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001cb6:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, rand2);
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	639a      	str	r2, [r3, #56]	; 0x38
	  j=1;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		j=0;
	  }

  }
}
 8001cc8:	e012      	b.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0x150>
	  else if(zak==0&&j==1)
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d10a      	bne.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0x150>
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d106      	bne.n	8001cf0 <HAL_TIM_PeriodElapsedCallback+0x150>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
		j=0;
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000430 	.word	0x20000430
 8001cfc:	200002c8 	.word	0x200002c8
 8001d00:	200002e4 	.word	0x200002e4
 8001d04:	20000044 	.word	0x20000044
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	2000038c 	.word	0x2000038c
 8001d10:	20000380 	.word	0x20000380
 8001d14:	20000388 	.word	0x20000388
 8001d18:	200003e4 	.word	0x200003e4
 8001d1c:	2000026c 	.word	0x2000026c
 8001d20:	0800d0f8 	.word	0x0800d0f8
 8001d24:	40020400 	.word	0x40020400
 8001d28:	20000398 	.word	0x20000398
 8001d2c:	20000268 	.word	0x20000268
 8001d30:	20000384 	.word	0x20000384
 8001d34:	200002d4 	.word	0x200002d4

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3c:	f000 fd53 	bl	80027e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d40:	f000 f872 	bl	8001e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d44:	f7ff fb2e 	bl	80013a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001d48:	f000 fc1e 	bl	8002588 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d4c:	f000 fc98 	bl	8002680 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001d50:	f7ff fc5a 	bl	8001608 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001d54:	f000 fa44 	bl	80021e0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001d58:	f000 fac4 	bl	80022e4 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001d5c:	f7ff fa3c 	bl	80011d8 <MX_ADC1_Init>
  MX_TIM7_Init();
 8001d60:	f000 faf8 	bl	8002354 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001d64:	f000 fb2c 	bl	80023c0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hbh1750_1);
 8001d68:	4822      	ldr	r0, [pc, #136]	; (8001df4 <main+0xbc>)
 8001d6a:	f7ff fac7 	bl	80012fc <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001d6e:	4822      	ldr	r0, [pc, #136]	; (8001df8 <main+0xc0>)
 8001d70:	f003 fcfc 	bl	800576c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001d74:	4821      	ldr	r0, [pc, #132]	; (8001dfc <main+0xc4>)
 8001d76:	f003 fcf9 	bl	800576c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001d7a:	4821      	ldr	r0, [pc, #132]	; (8001e00 <main+0xc8>)
 8001d7c:	f003 fcf6 	bl	800576c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d80:	2100      	movs	r1, #0
 8001d82:	481d      	ldr	r0, [pc, #116]	; (8001df8 <main+0xc0>)
 8001d84:	f003 fdcc 	bl	8005920 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001d88:	2104      	movs	r1, #4
 8001d8a:	481b      	ldr	r0, [pc, #108]	; (8001df8 <main+0xc0>)
 8001d8c:	f003 fdc8 	bl	8005920 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001d90:	2108      	movs	r1, #8
 8001d92:	4819      	ldr	r0, [pc, #100]	; (8001df8 <main+0xc0>)
 8001d94:	f003 fdc4 	bl	8005920 <HAL_TIM_PWM_Start>
  //pid
  pid_init(PID,kp_init,ki_init,kd_init,anti_windup_limit_init);
 8001d98:	4b1a      	ldr	r3, [pc, #104]	; (8001e04 <main+0xcc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <main+0xd0>)
 8001d9e:	edd2 7a00 	vldr	s15, [r2]
 8001da2:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <main+0xd4>)
 8001da4:	ed92 7a00 	vldr	s14, [r2]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <main+0xd8>)
 8001daa:	edd2 6a00 	vldr	s13, [r2]
 8001dae:	4a19      	ldr	r2, [pc, #100]	; (8001e14 <main+0xdc>)
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	4611      	mov	r1, r2
 8001db4:	eeb0 1a66 	vmov.f32	s2, s13
 8001db8:	eef0 0a47 	vmov.f32	s1, s14
 8001dbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff f943 	bl	800104c <pid_init>
  LCD_Init(&hlcd1);
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <main+0xe0>)
 8001dc8:	f7ff fd63 	bl	8001892 <LCD_Init>
  LCD_printf(&hlcd1, "Projekt SM");
 8001dcc:	4913      	ldr	r1, [pc, #76]	; (8001e1c <main+0xe4>)
 8001dce:	4812      	ldr	r0, [pc, #72]	; (8001e18 <main+0xe0>)
 8001dd0:	f7ff fde4 	bl	800199c <LCD_printf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_UART_Receive(&huart3, &value, 1, 0) == HAL_OK)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4911      	ldr	r1, [pc, #68]	; (8001e20 <main+0xe8>)
 8001dda:	4812      	ldr	r0, [pc, #72]	; (8001e24 <main+0xec>)
 8001ddc:	f004 ff03 	bl	8006be6 <HAL_UART_Receive>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f6      	bne.n	8001dd4 <main+0x9c>
	  {
	  	line_append(value);
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <main+0xe8>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fe66 	bl	8001abc <line_append>
	  if (HAL_UART_Receive(&huart3, &value, 1, 0) == HAL_OK)
 8001df0:	e7f0      	b.n	8001dd4 <main+0x9c>
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000
 8001df8:	200003e4 	.word	0x200003e4
 8001dfc:	20000430 	.word	0x20000430
 8001e00:	20000398 	.word	0x20000398
 8001e04:	20000380 	.word	0x20000380
 8001e08:	20000048 	.word	0x20000048
 8001e0c:	2000004c 	.word	0x2000004c
 8001e10:	20000264 	.word	0x20000264
 8001e14:	20000050 	.word	0x20000050
 8001e18:	20000024 	.word	0x20000024
 8001e1c:	0800d108 	.word	0x0800d108
 8001e20:	20000394 	.word	0x20000394
 8001e24:	200004c8 	.word	0x200004c8

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0b4      	sub	sp, #208	; 0xd0
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e32:	2230      	movs	r2, #48	; 0x30
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 f8a6 	bl	8007f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	2284      	movs	r2, #132	; 0x84
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f006 f897 	bl	8007f88 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e5a:	f002 faf1 	bl	8004440 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <SystemClock_Config+0x118>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a37      	ldr	r2, [pc, #220]	; (8001f40 <SystemClock_Config+0x118>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b35      	ldr	r3, [pc, #212]	; (8001f40 <SystemClock_Config+0x118>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e76:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <SystemClock_Config+0x11c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <SystemClock_Config+0x11c>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <SystemClock_Config+0x11c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e98:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001eb4:	2348      	movs	r3, #72	; 0x48
 8001eb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 fac8 	bl	8004460 <HAL_RCC_OscConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001ed6:	f000 f839 	bl	8001f4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eda:	230f      	movs	r3, #15
 8001edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001efa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001efe:	2102      	movs	r1, #2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fd51 	bl	80049a8 <HAL_RCC_ClockConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001f0c:	f000 f81e 	bl	8001f4c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <SystemClock_Config+0x120>)
 8001f12:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f22:	f107 0308 	add.w	r3, r7, #8
 8001f26:	4618      	mov	r0, r3
 8001f28:	f002 ff40 	bl	8004dac <HAL_RCCEx_PeriphCLKConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8001f32:	f000 f80b 	bl	8001f4c <Error_Handler>
  }
}
 8001f36:	bf00      	nop
 8001f38:	37d0      	adds	r7, #208	; 0xd0
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000
 8001f48:	00204100 	.word	0x00204100

08001f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f50:	b672      	cpsid	i
}
 8001f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <Error_Handler+0x8>
	...

08001f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <HAL_MspInit+0x44>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_MspInit+0x44>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_MspInit+0x44>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_MspInit+0x44>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_MspInit+0x44>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_MspInit+0x44>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fec:	f000 fc38 	bl	8002860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ffa:	f003 fd8b 	bl	8005b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000398 	.word	0x20000398

08002008 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <USART3_IRQHandler+0x10>)
 800200e:	f004 febb 	bl	8006d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200004c8 	.word	0x200004c8

0800201c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM6_DAC_IRQHandler+0x10>)
 8002022:	f003 fd77 	bl	8005b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000430 	.word	0x20000430

08002030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
	return 1;
 8002034:	2301      	movs	r3, #1
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_kill>:

int _kill(int pid, int sig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800204a:	f005 ff73 	bl	8007f34 <__errno>
 800204e:	4603      	mov	r3, r0
 8002050:	2216      	movs	r2, #22
 8002052:	601a      	str	r2, [r3, #0]
	return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_exit>:

void _exit (int status)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffe7 	bl	8002040 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002072:	e7fe      	b.n	8002072 <_exit+0x12>

08002074 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e00a      	b.n	800209c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002086:	f3af 8000 	nop.w
 800208a:	4601      	mov	r1, r0
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	60ba      	str	r2, [r7, #8]
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbf0      	blt.n	8002086 <_read+0x12>
	}

return len;
 80020a4:	687b      	ldr	r3, [r7, #4]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e009      	b.n	80020d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	60ba      	str	r2, [r7, #8]
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fc83 	bl	80019d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	dbf1      	blt.n	80020c0 <_write+0x12>
	}
	return len;
 80020dc:	687b      	ldr	r3, [r7, #4]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <_close>:

int _close(int file)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	return -1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800210e:	605a      	str	r2, [r3, #4]
	return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_isatty>:

int _isatty(int file)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
	return 1;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
	return 0;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f005 fed8 	bl	8007f34 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20050000 	.word	0x20050000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	200002d8 	.word	0x200002d8
 80021b8:	20000968 	.word	0x20000968

080021bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08e      	sub	sp, #56	; 0x38
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002200:	463b      	mov	r3, r7
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	615a      	str	r2, [r3, #20]
 8002210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002212:	4b32      	ldr	r3, [pc, #200]	; (80022dc <MX_TIM3_Init+0xfc>)
 8002214:	4a32      	ldr	r2, [pc, #200]	; (80022e0 <MX_TIM3_Init+0x100>)
 8002216:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002218:	4b30      	ldr	r3, [pc, #192]	; (80022dc <MX_TIM3_Init+0xfc>)
 800221a:	2247      	movs	r2, #71	; 0x47
 800221c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <MX_TIM3_Init+0xfc>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <MX_TIM3_Init+0xfc>)
 8002226:	f240 32e7 	movw	r2, #999	; 0x3e7
 800222a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <MX_TIM3_Init+0xfc>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <MX_TIM3_Init+0xfc>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002238:	4828      	ldr	r0, [pc, #160]	; (80022dc <MX_TIM3_Init+0xfc>)
 800223a:	f003 f9a7 	bl	800558c <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002244:	f7ff fe82 	bl	8001f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800224e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002252:	4619      	mov	r1, r3
 8002254:	4821      	ldr	r0, [pc, #132]	; (80022dc <MX_TIM3_Init+0xfc>)
 8002256:	f003 fe8d 	bl	8005f74 <HAL_TIM_ConfigClockSource>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002260:	f7ff fe74 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002264:	481d      	ldr	r0, [pc, #116]	; (80022dc <MX_TIM3_Init+0xfc>)
 8002266:	f003 faf9 	bl	800585c <HAL_TIM_PWM_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002270:	f7ff fe6c 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	4619      	mov	r1, r3
 8002282:	4816      	ldr	r0, [pc, #88]	; (80022dc <MX_TIM3_Init+0xfc>)
 8002284:	f004 fb22 	bl	80068cc <HAL_TIMEx_MasterConfigSynchronization>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800228e:	f7ff fe5d 	bl	8001f4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002292:	2360      	movs	r3, #96	; 0x60
 8002294:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a2:	463b      	mov	r3, r7
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <MX_TIM3_Init+0xfc>)
 80022aa:	f003 fd53 	bl	8005d54 <HAL_TIM_PWM_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80022b4:	f7ff fe4a 	bl	8001f4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b8:	463b      	mov	r3, r7
 80022ba:	2204      	movs	r2, #4
 80022bc:	4619      	mov	r1, r3
 80022be:	4807      	ldr	r0, [pc, #28]	; (80022dc <MX_TIM3_Init+0xfc>)
 80022c0:	f003 fd48 	bl	8005d54 <HAL_TIM_PWM_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80022ca:	f7ff fe3f 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022ce:	4803      	ldr	r0, [pc, #12]	; (80022dc <MX_TIM3_Init+0xfc>)
 80022d0:	f000 f904 	bl	80024dc <HAL_TIM_MspPostInit>

}
 80022d4:	bf00      	nop
 80022d6:	3738      	adds	r7, #56	; 0x38
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	200003e4 	.word	0x200003e4
 80022e0:	40000400 	.word	0x40000400

080022e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022f4:	4b15      	ldr	r3, [pc, #84]	; (800234c <MX_TIM6_Init+0x68>)
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <MX_TIM6_Init+0x6c>)
 80022f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3599;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <MX_TIM6_Init+0x68>)
 80022fc:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002300:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <MX_TIM6_Init+0x68>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_TIM6_Init+0x68>)
 800230a:	f242 720f 	movw	r2, #9999	; 0x270f
 800230e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_TIM6_Init+0x68>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002316:	480d      	ldr	r0, [pc, #52]	; (800234c <MX_TIM6_Init+0x68>)
 8002318:	f003 f938 	bl	800558c <HAL_TIM_Base_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002322:	f7ff fe13 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4806      	ldr	r0, [pc, #24]	; (800234c <MX_TIM6_Init+0x68>)
 8002334:	f004 faca 	bl	80068cc <HAL_TIMEx_MasterConfigSynchronization>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800233e:	f7ff fe05 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000430 	.word	0x20000430
 8002350:	40001000 	.word	0x40001000

08002354 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_TIM7_Init+0x64>)
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <MX_TIM7_Init+0x68>)
 8002368:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 109;
 800236a:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <MX_TIM7_Init+0x64>)
 800236c:	226d      	movs	r2, #109	; 0x6d
 800236e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_TIM7_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <MX_TIM7_Init+0x64>)
 8002378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800237c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_TIM7_Init+0x64>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <MX_TIM7_Init+0x64>)
 8002386:	f003 f901 	bl	800558c <HAL_TIM_Base_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002390:	f7ff fddc 	bl	8001f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_TIM7_Init+0x64>)
 80023a2:	f004 fa93 	bl	80068cc <HAL_TIMEx_MasterConfigSynchronization>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023ac:	f7ff fdce 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	2000047c 	.word	0x2000047c
 80023bc:	40001400 	.word	0x40001400

080023c0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <MX_TIM10_Init+0x40>)
 80023c6:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <MX_TIM10_Init+0x44>)
 80023c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 7199;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	; (8002400 <MX_TIM10_Init+0x40>)
 80023cc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80023d0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <MX_TIM10_Init+0x40>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 19999;
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <MX_TIM10_Init+0x40>)
 80023da:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80023de:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <MX_TIM10_Init+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <MX_TIM10_Init+0x40>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023ec:	4804      	ldr	r0, [pc, #16]	; (8002400 <MX_TIM10_Init+0x40>)
 80023ee:	f003 f8cd 	bl	800558c <HAL_TIM_Base_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80023f8:	f7ff fda8 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000398 	.word	0x20000398
 8002404:	40014400 	.word	0x40014400

08002408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <HAL_TIM_Base_MspInit+0xc0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10c      	bne.n	8002434 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a2b      	ldr	r2, [pc, #172]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002432:	e044      	b.n	80024be <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM6)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_TIM_Base_MspInit+0xc8>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d114      	bne.n	8002468 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b20      	ldr	r3, [pc, #128]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2036      	movs	r0, #54	; 0x36
 800245c:	f000 ff0d 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002460:	2036      	movs	r0, #54	; 0x36
 8002462:	f000 ff26 	bl	80032b2 <HAL_NVIC_EnableIRQ>
}
 8002466:	e02a      	b.n	80024be <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM7)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_TIM_Base_MspInit+0xcc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10c      	bne.n	800248c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002478:	f043 0320 	orr.w	r3, r3, #32
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
}
 800248a:	e018      	b.n	80024be <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_TIM_Base_MspInit+0xd0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d113      	bne.n	80024be <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a0c      	ldr	r2, [pc, #48]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_TIM_Base_MspInit+0xc4>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	2019      	movs	r0, #25
 80024b4:	f000 fee1 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024b8:	2019      	movs	r0, #25
 80024ba:	f000 fefa 	bl	80032b2 <HAL_NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40001000 	.word	0x40001000
 80024d4:	40001400 	.word	0x40001400
 80024d8:	40014400 	.word	0x40014400

080024dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	; 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <HAL_TIM_MspPostInit+0x9c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d137      	bne.n	800256e <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	4b1f      	ldr	r3, [pc, #124]	; (800257c <HAL_TIM_MspPostInit+0xa0>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4a1e      	ldr	r2, [pc, #120]	; (800257c <HAL_TIM_MspPostInit+0xa0>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6313      	str	r3, [r2, #48]	; 0x30
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_TIM_MspPostInit+0xa0>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_TIM_MspPostInit+0xa0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_TIM_MspPostInit+0xa0>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_TIM_MspPostInit+0xa0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800252e:	2340      	movs	r3, #64	; 0x40
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800253e:	2302      	movs	r3, #2
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	480d      	ldr	r0, [pc, #52]	; (8002580 <HAL_TIM_MspPostInit+0xa4>)
 800254a:	f000 ff5f 	bl	800340c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800255e:	2302      	movs	r3, #2
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 0314 	add.w	r3, r7, #20
 8002566:	4619      	mov	r1, r3
 8002568:	4806      	ldr	r0, [pc, #24]	; (8002584 <HAL_TIM_MspPostInit+0xa8>)
 800256a:	f000 ff4f 	bl	800340c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40000400 	.word	0x40000400
 800257c:	40023800 	.word	0x40023800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020800 	.word	0x40020800

08002588 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <MX_USART3_UART_Init+0x5c>)
 8002590:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002592:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 8002594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002598:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025ae:	220c      	movs	r2, #12
 80025b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <MX_USART3_UART_Init+0x58>)
 80025cc:	f004 fa2a 	bl	8006a24 <HAL_UART_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80025d6:	f7ff fcb9 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200004c8 	.word	0x200004c8
 80025e4:	40004800 	.word	0x40004800

080025e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08a      	sub	sp, #40	; 0x28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_UART_MspInit+0x8c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d130      	bne.n	800266c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_UART_MspInit+0x90>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_UART_MspInit+0x90>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6413      	str	r3, [r2, #64]	; 0x40
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_UART_MspInit+0x90>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <HAL_UART_MspInit+0x90>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_UART_MspInit+0x90>)
 8002628:	f043 0308 	orr.w	r3, r3, #8
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_UART_MspInit+0x90>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800263a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002648:	2303      	movs	r3, #3
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800264c:	2307      	movs	r3, #7
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4809      	ldr	r0, [pc, #36]	; (800267c <HAL_UART_MspInit+0x94>)
 8002658:	f000 fed8 	bl	800340c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	2027      	movs	r0, #39	; 0x27
 8002662:	f000 fe0a 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002666:	2027      	movs	r0, #39	; 0x27
 8002668:	f000 fe23 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40004800 	.word	0x40004800
 8002678:	40023800 	.word	0x40023800
 800267c:	40020c00 	.word	0x40020c00

08002680 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800268a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800268e:	2206      	movs	r2, #6
 8002690:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002694:	2202      	movs	r2, #2
 8002696:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002698:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026a0:	2202      	movs	r2, #2
 80026a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80026b6:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026be:	2200      	movs	r2, #0
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	; (80026d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026c4:	f001 fd73 	bl	80041ae <HAL_PCD_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80026ce:	f7ff fc3d 	bl	8001f4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000054c 	.word	0x2000054c

080026dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026fc:	d141      	bne.n	8002782 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_PCD_MspInit+0xb0>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_PCD_MspInit+0xb0>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_PCD_MspInit+0xb0>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002716:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800271a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002728:	230a      	movs	r3, #10
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	4817      	ldr	r0, [pc, #92]	; (8002790 <HAL_PCD_MspInit+0xb4>)
 8002734:	f000 fe6a 	bl	800340c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4810      	ldr	r0, [pc, #64]	; (8002790 <HAL_PCD_MspInit+0xb4>)
 800274e:	f000 fe5d 	bl	800340c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_PCD_MspInit+0xb0>)
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	4a0d      	ldr	r2, [pc, #52]	; (800278c <HAL_PCD_MspInit+0xb0>)
 8002758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275c:	6353      	str	r3, [r2, #52]	; 0x34
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_PCD_MspInit+0xb0>)
 8002760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_PCD_MspInit+0xb0>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_PCD_MspInit+0xb0>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_PCD_MspInit+0xb0>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002782:	bf00      	nop
 8002784:	3728      	adds	r7, #40	; 0x28
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40020000 	.word	0x40020000

08002794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002798:	480d      	ldr	r0, [pc, #52]	; (80027d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800279a:	490e      	ldr	r1, [pc, #56]	; (80027d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800279c:	4a0e      	ldr	r2, [pc, #56]	; (80027d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a0:	e002      	b.n	80027a8 <LoopCopyDataInit>

080027a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a6:	3304      	adds	r3, #4

080027a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027ac:	d3f9      	bcc.n	80027a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b0:	4c0b      	ldr	r4, [pc, #44]	; (80027e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b4:	e001      	b.n	80027ba <LoopFillZerobss>

080027b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b8:	3204      	adds	r2, #4

080027ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027bc:	d3fb      	bcc.n	80027b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027be:	f7ff fcfd 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c2:	f005 fbbd 	bl	8007f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c6:	f7ff fab7 	bl	8001d38 <main>
  bx  lr    
 80027ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80027d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027d4:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80027d8:	0800d614 	.word	0x0800d614
  ldr r2, =_sbss
 80027dc:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80027e0:	20000964 	.word	0x20000964

080027e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <ADC_IRQHandler>

080027e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027ea:	2003      	movs	r0, #3
 80027ec:	f000 fd3a 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f000 f805 	bl	8002800 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80027f6:	f7ff fbaf 	bl	8001f58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_InitTick+0x54>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_InitTick+0x58>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002816:	fbb3 f3f1 	udiv	r3, r3, r1
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fd55 	bl	80032ce <HAL_SYSTICK_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00e      	b.n	800284c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d80a      	bhi.n	800284a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002834:	2200      	movs	r2, #0
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f000 fd1d 	bl	800327a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <HAL_InitTick+0x5c>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000068 	.word	0x20000068
 8002858:	20000070 	.word	0x20000070
 800285c:	2000006c 	.word	0x2000006c

08002860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x20>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_IncTick+0x24>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4413      	add	r3, r2
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_IncTick+0x24>)
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000070 	.word	0x20000070
 8002884:	20000950 	.word	0x20000950

08002888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return uwTick;
 800288c:	4b03      	ldr	r3, [pc, #12]	; (800289c <HAL_GetTick+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000950 	.word	0x20000950

080028a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff ffee 	bl	8002888 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d005      	beq.n	80028c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_Delay+0x44>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c6:	bf00      	nop
 80028c8:	f7ff ffde 	bl	8002888 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d8f7      	bhi.n	80028c8 <HAL_Delay+0x28>
  {
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000070 	.word	0x20000070

080028e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e031      	b.n	8002962 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fcb8 	bl	800127c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d116      	bne.n	8002954 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <HAL_ADC_Init+0x84>)
 800292c:	4013      	ands	r3, r2
 800292e:	f043 0202 	orr.w	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 faca 	bl	8002ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	f043 0201 	orr.w	r2, r3, #1
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
 8002952:	e001      	b.n	8002958 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002960:	7bfb      	ldrb	r3, [r7, #15]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	ffffeefd 	.word	0xffffeefd

08002970 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_ADC_Start+0x1a>
 8002986:	2302      	movs	r3, #2
 8002988:	e0ad      	b.n	8002ae6 <HAL_ADC_Start+0x176>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d018      	beq.n	80029d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80029b0:	4b50      	ldr	r3, [pc, #320]	; (8002af4 <HAL_ADC_Start+0x184>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a50      	ldr	r2, [pc, #320]	; (8002af8 <HAL_ADC_Start+0x188>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9a      	lsrs	r2, r3, #18
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029c4:	e002      	b.n	80029cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f9      	bne.n	80029c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d175      	bne.n	8002acc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e4:	4b45      	ldr	r3, [pc, #276]	; (8002afc <HAL_ADC_Start+0x18c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1a:	d106      	bne.n	8002a2a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f023 0206 	bic.w	r2, r3, #6
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	645a      	str	r2, [r3, #68]	; 0x44
 8002a28:	e002      	b.n	8002a30 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a42:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <HAL_ADC_Start+0x190>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d143      	bne.n	8002ae4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	e03a      	b.n	8002ae4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_ADC_Start+0x194>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d10e      	bne.n	8002a96 <HAL_ADC_Start+0x126>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a94:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a96:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <HAL_ADC_Start+0x190>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d120      	bne.n	8002ae4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_ADC_Start+0x198>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_ADC_Start+0x174>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d114      	bne.n	8002ae4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	e00b      	b.n	8002ae4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	20000068 	.word	0x20000068
 8002af8:	431bde83 	.word	0x431bde83
 8002afc:	fffff8fe 	.word	0xfffff8fe
 8002b00:	40012300 	.word	0x40012300
 8002b04:	40012000 	.word	0x40012000
 8002b08:	40012200 	.word	0x40012200

08002b0c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d113      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d10b      	bne.n	8002b52 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0220 	orr.w	r2, r3, #32
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e063      	b.n	8002c1a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b52:	f7ff fe99 	bl	8002888 <HAL_GetTick>
 8002b56:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b58:	e021      	b.n	8002b9e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d01d      	beq.n	8002b9e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d007      	beq.n	8002b78 <HAL_ADC_PollForConversion+0x6c>
 8002b68:	f7ff fe8e 	bl	8002888 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d212      	bcs.n	8002b9e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d00b      	beq.n	8002b9e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e03d      	b.n	8002c1a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d1d6      	bne.n	8002b5a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0212 	mvn.w	r2, #18
 8002bb4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d123      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d11f      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d111      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1c>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e12a      	b.n	8002eae <HAL_ADC_ConfigChannel+0x272>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d93a      	bls.n	8002cde <HAL_ADC_ConfigChannel+0xa2>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c70:	d035      	beq.n	8002cde <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68d9      	ldr	r1, [r3, #12]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	3b1e      	subs	r3, #30
 8002c88:	2207      	movs	r2, #7
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	400a      	ands	r2, r1
 8002c96:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a87      	ldr	r2, [pc, #540]	; (8002ebc <HAL_ADC_ConfigChannel+0x280>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68d9      	ldr	r1, [r3, #12]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	061a      	lsls	r2, r3, #24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cb6:	e035      	b.n	8002d24 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68d9      	ldr	r1, [r3, #12]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4403      	add	r3, r0
 8002cd0:	3b1e      	subs	r3, #30
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cdc:	e022      	b.n	8002d24 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6919      	ldr	r1, [r3, #16]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43da      	mvns	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	400a      	ands	r2, r1
 8002d00:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6919      	ldr	r1, [r3, #16]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	4603      	mov	r3, r0
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4403      	add	r3, r0
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d824      	bhi.n	8002d76 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b05      	subs	r3, #5
 8002d3e:	221f      	movs	r2, #31
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43da      	mvns	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	3b05      	subs	r3, #5
 8002d68:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	635a      	str	r2, [r3, #52]	; 0x34
 8002d74:	e04c      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d824      	bhi.n	8002dc8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b23      	subs	r3, #35	; 0x23
 8002d90:	221f      	movs	r2, #31
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	4618      	mov	r0, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	3b23      	subs	r3, #35	; 0x23
 8002dba:	fa00 f203 	lsl.w	r2, r0, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc6:	e023      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b41      	subs	r3, #65	; 0x41
 8002dda:	221f      	movs	r2, #31
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43da      	mvns	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	400a      	ands	r2, r1
 8002de8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	3b41      	subs	r3, #65	; 0x41
 8002e04:	fa00 f203 	lsl.w	r2, r0, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2a      	ldr	r2, [pc, #168]	; (8002ec0 <HAL_ADC_ConfigChannel+0x284>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10a      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1f4>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e22:	d105      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_ADC_ConfigChannel+0x288>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a26      	ldr	r2, [pc, #152]	; (8002ec4 <HAL_ADC_ConfigChannel+0x288>)
 8002e2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002e2e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <HAL_ADC_ConfigChannel+0x284>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d109      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x212>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b12      	cmp	r3, #18
 8002e40:	d105      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_ADC_ConfigChannel+0x288>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <HAL_ADC_ConfigChannel+0x288>)
 8002e48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e4c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_ADC_ConfigChannel+0x284>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d125      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x268>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_ADC_ConfigChannel+0x280>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d003      	beq.n	8002e6a <HAL_ADC_ConfigChannel+0x22e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b11      	cmp	r3, #17
 8002e68:	d11c      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_ADC_ConfigChannel+0x288>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_ADC_ConfigChannel+0x288>)
 8002e70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e74:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a10      	ldr	r2, [pc, #64]	; (8002ebc <HAL_ADC_ConfigChannel+0x280>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d111      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_ADC_ConfigChannel+0x28c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_ADC_ConfigChannel+0x290>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	0c9a      	lsrs	r2, r3, #18
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e96:	e002      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1f9      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	10000012 	.word	0x10000012
 8002ec0:	40012000 	.word	0x40012000
 8002ec4:	40012300 	.word	0x40012300
 8002ec8:	20000068 	.word	0x20000068
 8002ecc:	431bde83 	.word	0x431bde83

08002ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002ed8:	4b78      	ldr	r3, [pc, #480]	; (80030bc <ADC_Init+0x1ec>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a77      	ldr	r2, [pc, #476]	; (80030bc <ADC_Init+0x1ec>)
 8002ede:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ee2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ee4:	4b75      	ldr	r3, [pc, #468]	; (80030bc <ADC_Init+0x1ec>)
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4973      	ldr	r1, [pc, #460]	; (80030bc <ADC_Init+0x1ec>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6859      	ldr	r1, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	021a      	lsls	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	4a58      	ldr	r2, [pc, #352]	; (80030c0 <ADC_Init+0x1f0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6899      	ldr	r1, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e00f      	b.n	8002fca <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0202 	bic.w	r2, r2, #2
 8002fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	005a      	lsls	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	3b01      	subs	r3, #1
 8003024:	035a      	lsls	r2, r3, #13
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	e007      	b.n	8003040 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	3b01      	subs	r3, #1
 800305c:	051a      	lsls	r2, r3, #20
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003082:	025a      	lsls	r2, r3, #9
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800309a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	029a      	lsls	r2, r3, #10
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40012300 	.word	0x40012300
 80030c0:	0f000001 	.word	0x0f000001

080030c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <__NVIC_SetPriorityGrouping+0x40>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e0:	4013      	ands	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <__NVIC_SetPriorityGrouping+0x40>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000ed00 	.word	0xe000ed00
 8003108:	05fa0000 	.word	0x05fa0000

0800310c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <__NVIC_GetPriorityGrouping+0x18>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 0307 	and.w	r3, r3, #7
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	2b00      	cmp	r3, #0
 8003138:	db0b      	blt.n	8003152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	f003 021f 	and.w	r2, r3, #31
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <__NVIC_EnableIRQ+0x38>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2001      	movs	r0, #1
 800314a:	fa00 f202 	lsl.w	r2, r0, r2
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000e100 	.word	0xe000e100

08003164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	; (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
         );
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003230:	d301      	bcc.n	8003236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <SysTick_Config+0x40>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323e:	210f      	movs	r1, #15
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f7ff ff8e 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <SysTick_Config+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <SysTick_Config+0x40>)
 8003250:	2207      	movs	r2, #7
 8003252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010

08003264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff29 	bl	80030c4 <__NVIC_SetPriorityGrouping>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800328c:	f7ff ff3e 	bl	800310c <__NVIC_GetPriorityGrouping>
 8003290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff8e 	bl	80031b8 <NVIC_EncodePriority>
 800329c:	4602      	mov	r2, r0
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff5d 	bl	8003164 <__NVIC_SetPriority>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff31 	bl	8003128 <__NVIC_EnableIRQ>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff ffa2 	bl	8003220 <SysTick_Config>
 80032dc:	4603      	mov	r3, r0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7ff fac8 	bl	8002888 <HAL_GetTick>
 80032f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d008      	beq.n	8003318 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e052      	b.n	80033be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0216 	bic.w	r2, r2, #22
 8003326:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003336:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	2b00      	cmp	r3, #0
 800333e:	d103      	bne.n	8003348 <HAL_DMA_Abort+0x62>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0208 	bic.w	r2, r2, #8
 8003356:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003368:	e013      	b.n	8003392 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800336a:	f7ff fa8d 	bl	8002888 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b05      	cmp	r3, #5
 8003376:	d90c      	bls.n	8003392 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e015      	b.n	80033be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1e4      	bne.n	800336a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a4:	223f      	movs	r2, #63	; 0x3f
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d004      	beq.n	80033e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e00c      	b.n	80033fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2205      	movs	r2, #5
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
	...

0800340c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800340c:	b480      	push	{r7}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	e175      	b.n	8003718 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	f040 8164 	bne.w	8003712 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d00b      	beq.n	800346a <HAL_GPIO_Init+0x5e>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800345e:	2b11      	cmp	r3, #17
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b12      	cmp	r3, #18
 8003468:	d130      	bne.n	80034cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	2203      	movs	r2, #3
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a0:	2201      	movs	r2, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 0201 	and.w	r2, r3, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b02      	cmp	r3, #2
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x100>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b12      	cmp	r3, #18
 800350a:	d123      	bne.n	8003554 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	69b9      	ldr	r1, [r7, #24]
 8003550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0203 	and.w	r2, r3, #3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80be 	beq.w	8003712 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_GPIO_Init+0x324>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_GPIO_Init+0x324>)
 800359c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b63      	ldr	r3, [pc, #396]	; (8003730 <HAL_GPIO_Init+0x324>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035ae:	4a61      	ldr	r2, [pc, #388]	; (8003734 <HAL_GPIO_Init+0x328>)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	089b      	lsrs	r3, r3, #2
 80035b4:	3302      	adds	r3, #2
 80035b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	220f      	movs	r2, #15
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_GPIO_Init+0x32c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d037      	beq.n	800364a <HAL_GPIO_Init+0x23e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a57      	ldr	r2, [pc, #348]	; (800373c <HAL_GPIO_Init+0x330>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_GPIO_Init+0x23a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a56      	ldr	r2, [pc, #344]	; (8003740 <HAL_GPIO_Init+0x334>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d02b      	beq.n	8003642 <HAL_GPIO_Init+0x236>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a55      	ldr	r2, [pc, #340]	; (8003744 <HAL_GPIO_Init+0x338>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d025      	beq.n	800363e <HAL_GPIO_Init+0x232>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a54      	ldr	r2, [pc, #336]	; (8003748 <HAL_GPIO_Init+0x33c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01f      	beq.n	800363a <HAL_GPIO_Init+0x22e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a53      	ldr	r2, [pc, #332]	; (800374c <HAL_GPIO_Init+0x340>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d019      	beq.n	8003636 <HAL_GPIO_Init+0x22a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_GPIO_Init+0x344>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_GPIO_Init+0x226>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a51      	ldr	r2, [pc, #324]	; (8003754 <HAL_GPIO_Init+0x348>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00d      	beq.n	800362e <HAL_GPIO_Init+0x222>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a50      	ldr	r2, [pc, #320]	; (8003758 <HAL_GPIO_Init+0x34c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <HAL_GPIO_Init+0x21e>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4f      	ldr	r2, [pc, #316]	; (800375c <HAL_GPIO_Init+0x350>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <HAL_GPIO_Init+0x21a>
 8003622:	2309      	movs	r3, #9
 8003624:	e012      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003626:	230a      	movs	r3, #10
 8003628:	e010      	b.n	800364c <HAL_GPIO_Init+0x240>
 800362a:	2308      	movs	r3, #8
 800362c:	e00e      	b.n	800364c <HAL_GPIO_Init+0x240>
 800362e:	2307      	movs	r3, #7
 8003630:	e00c      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003632:	2306      	movs	r3, #6
 8003634:	e00a      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003636:	2305      	movs	r3, #5
 8003638:	e008      	b.n	800364c <HAL_GPIO_Init+0x240>
 800363a:	2304      	movs	r3, #4
 800363c:	e006      	b.n	800364c <HAL_GPIO_Init+0x240>
 800363e:	2303      	movs	r3, #3
 8003640:	e004      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003642:	2302      	movs	r3, #2
 8003644:	e002      	b.n	800364c <HAL_GPIO_Init+0x240>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_GPIO_Init+0x240>
 800364a:	2300      	movs	r3, #0
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	f002 0203 	and.w	r2, r2, #3
 8003652:	0092      	lsls	r2, r2, #2
 8003654:	4093      	lsls	r3, r2
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800365c:	4935      	ldr	r1, [pc, #212]	; (8003734 <HAL_GPIO_Init+0x328>)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	3302      	adds	r3, #2
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800366a:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_GPIO_Init+0x354>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	43db      	mvns	r3, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4013      	ands	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800368e:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_GPIO_Init+0x354>)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003694:	4b32      	ldr	r3, [pc, #200]	; (8003760 <HAL_GPIO_Init+0x354>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b8:	4a29      	ldr	r2, [pc, #164]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036e2:	4a1f      	ldr	r2, [pc, #124]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e8:	4b1d      	ldr	r3, [pc, #116]	; (8003760 <HAL_GPIO_Init+0x354>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <HAL_GPIO_Init+0x354>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	f67f ae86 	bls.w	800342c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	; 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	40013800 	.word	0x40013800
 8003738:	40020000 	.word	0x40020000
 800373c:	40020400 	.word	0x40020400
 8003740:	40020800 	.word	0x40020800
 8003744:	40020c00 	.word	0x40020c00
 8003748:	40021000 	.word	0x40021000
 800374c:	40021400 	.word	0x40021400
 8003750:	40021800 	.word	0x40021800
 8003754:	40021c00 	.word	0x40021c00
 8003758:	40022000 	.word	0x40022000
 800375c:	40022400 	.word	0x40022400
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003780:	e003      	b.n	800378a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	619a      	str	r2, [r3, #24]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80037a8:	887a      	ldrh	r2, [r7, #2]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	041a      	lsls	r2, r3, #16
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	400b      	ands	r3, r1
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e07f      	b.n	80038de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd ff48 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800381c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800382c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	e006      	b.n	8003854 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003852:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	2b02      	cmp	r3, #2
 800385a:	d104      	bne.n	8003866 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003864:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <HAL_I2C_Init+0x11c>)
 8003872:	430b      	orrs	r3, r1
 8003874:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003884:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	ea42 0103 	orr.w	r1, r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	021a      	lsls	r2, r3, #8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69d9      	ldr	r1, [r3, #28]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1a      	ldr	r2, [r3, #32]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	02008000 	.word	0x02008000

080038ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	461a      	mov	r2, r3
 80038f8:	460b      	mov	r3, r1
 80038fa:	817b      	strh	r3, [r7, #10]
 80038fc:	4613      	mov	r3, r2
 80038fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b20      	cmp	r3, #32
 800390a:	f040 80da 	bne.w	8003ac2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_I2C_Master_Transmit+0x30>
 8003918:	2302      	movs	r3, #2
 800391a:	e0d3      	b.n	8003ac4 <HAL_I2C_Master_Transmit+0x1d8>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003924:	f7fe ffb0 	bl	8002888 <HAL_GetTick>
 8003928:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2319      	movs	r3, #25
 8003930:	2201      	movs	r2, #1
 8003932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f9e6 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0be      	b.n	8003ac4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2221      	movs	r2, #33	; 0x21
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2210      	movs	r2, #16
 8003952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	893a      	ldrh	r2, [r7, #8]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2bff      	cmp	r3, #255	; 0xff
 8003976:	d90e      	bls.n	8003996 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	b2da      	uxtb	r2, r3
 8003984:	8979      	ldrh	r1, [r7, #10]
 8003986:	4b51      	ldr	r3, [pc, #324]	; (8003acc <HAL_I2C_Master_Transmit+0x1e0>)
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fb48 	bl	8004024 <I2C_TransferConfig>
 8003994:	e06c      	b.n	8003a70 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	4b48      	ldr	r3, [pc, #288]	; (8003acc <HAL_I2C_Master_Transmit+0x1e0>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fb37 	bl	8004024 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80039b6:	e05b      	b.n	8003a70 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	6a39      	ldr	r1, [r7, #32]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f9e3 	bl	8003d88 <I2C_WaitOnTXISFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e07b      	b.n	8003ac4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	781a      	ldrb	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d034      	beq.n	8003a70 <HAL_I2C_Master_Transmit+0x184>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d130      	bne.n	8003a70 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f975 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e04d      	b.n	8003ac4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2bff      	cmp	r3, #255	; 0xff
 8003a30:	d90e      	bls.n	8003a50 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	8979      	ldrh	r1, [r7, #10]
 8003a40:	2300      	movs	r3, #0
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 faeb 	bl	8004024 <I2C_TransferConfig>
 8003a4e:	e00f      	b.n	8003a70 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	8979      	ldrh	r1, [r7, #10]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fada 	bl	8004024 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d19e      	bne.n	80039b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	6a39      	ldr	r1, [r7, #32]
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 f9c2 	bl	8003e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e01a      	b.n	8003ac4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2220      	movs	r2, #32
 8003a94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6859      	ldr	r1, [r3, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_I2C_Master_Transmit+0x1e4>)
 8003aa2:	400b      	ands	r3, r1
 8003aa4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e000      	b.n	8003ac4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	80002000 	.word	0x80002000
 8003ad0:	fe00e800 	.word	0xfe00e800

08003ad4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	817b      	strh	r3, [r7, #10]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	f040 80db 	bne.w	8003cac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_I2C_Master_Receive+0x30>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0d4      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b0c:	f7fe febc 	bl	8002888 <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2319      	movs	r3, #25
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8f2 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0bf      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2222      	movs	r2, #34	; 0x22
 8003b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	893a      	ldrh	r2, [r7, #8]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	2bff      	cmp	r3, #255	; 0xff
 8003b5e:	d90e      	bls.n	8003b7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	22ff      	movs	r2, #255	; 0xff
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	8979      	ldrh	r1, [r7, #10]
 8003b6e:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_I2C_Master_Receive+0x1e4>)
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fa54 	bl	8004024 <I2C_TransferConfig>
 8003b7c:	e06d      	b.n	8003c5a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	8979      	ldrh	r1, [r7, #10]
 8003b90:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <HAL_I2C_Master_Receive+0x1e4>)
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fa43 	bl	8004024 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003b9e:	e05c      	b.n	8003c5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	6a39      	ldr	r1, [r7, #32]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f96b 	bl	8003e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e07c      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d034      	beq.n	8003c5a <HAL_I2C_Master_Receive+0x186>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d130      	bne.n	8003c5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 f880 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e04d      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2bff      	cmp	r3, #255	; 0xff
 8003c1a:	d90e      	bls.n	8003c3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	22ff      	movs	r2, #255	; 0xff
 8003c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	8979      	ldrh	r1, [r7, #10]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f9f6 	bl	8004024 <I2C_TransferConfig>
 8003c38:	e00f      	b.n	8003c5a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f9e5 	bl	8004024 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d19d      	bne.n	8003ba0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8cd 	bl	8003e08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e01a      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <HAL_I2C_Master_Receive+0x1e8>)
 8003c8c:	400b      	ands	r3, r1
 8003c8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	80002400 	.word	0x80002400
 8003cbc:	fe00e800 	.word	0xfe00e800

08003cc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d103      	bne.n	8003cde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d007      	beq.n	8003cfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699a      	ldr	r2, [r3, #24]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	619a      	str	r2, [r3, #24]
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d18:	e022      	b.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d01e      	beq.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe fdb1 	bl	8002888 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d113      	bne.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	f043 0220 	orr.w	r2, r3, #32
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e00f      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d0cd      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d94:	e02c      	b.n	8003df0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f8dc 	bl	8003f58 <I2C_IsAcknowledgeFailed>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e02a      	b.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d01e      	beq.n	8003df0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fe fd69 	bl	8002888 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d113      	bne.n	8003df0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f043 0220 	orr.w	r2, r3, #32
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e007      	b.n	8003e00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d1cb      	bne.n	8003d96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e14:	e028      	b.n	8003e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f89c 	bl	8003f58 <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e026      	b.n	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2a:	f7fe fd2d 	bl	8002888 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d113      	bne.n	8003e68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	f043 0220 	orr.w	r2, r3, #32
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e007      	b.n	8003e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	d1cf      	bne.n	8003e16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e8c:	e055      	b.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f860 	bl	8003f58 <I2C_IsAcknowledgeFailed>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e053      	b.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d129      	bne.n	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d105      	bne.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e03f      	b.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b1d      	ldr	r3, [pc, #116]	; (8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003ede:	400b      	ands	r3, r1
 8003ee0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e022      	b.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f04:	f7fe fcc0 	bl	8002888 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d302      	bcc.n	8003f1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e007      	b.n	8003f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d1a2      	bne.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	fe00e800 	.word	0xfe00e800

08003f58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b10      	cmp	r3, #16
 8003f70:	d151      	bne.n	8004016 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f72:	e022      	b.n	8003fba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d01e      	beq.n	8003fba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7c:	f7fe fc84 	bl	8002888 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <I2C_IsAcknowledgeFailed+0x3a>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f043 0220 	orr.w	r2, r3, #32
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e02e      	b.n	8004018 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d1d5      	bne.n	8003f74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2210      	movs	r2, #16
 8003fce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7ff fe71 	bl	8003cc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <I2C_IsAcknowledgeFailed+0xc8>)
 8003fea:	400b      	ands	r3, r1
 8003fec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	fe00e800 	.word	0xfe00e800

08004024 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	607b      	str	r3, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	817b      	strh	r3, [r7, #10]
 8004032:	4613      	mov	r3, r2
 8004034:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	0d5b      	lsrs	r3, r3, #21
 8004040:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004044:	4b0d      	ldr	r3, [pc, #52]	; (800407c <I2C_TransferConfig+0x58>)
 8004046:	430b      	orrs	r3, r1
 8004048:	43db      	mvns	r3, r3
 800404a:	ea02 0103 	and.w	r1, r2, r3
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004054:	7a7b      	ldrb	r3, [r7, #9]
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	431a      	orrs	r2, r3
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	431a      	orrs	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	03ff63ff 	.word	0x03ff63ff

08004080 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b20      	cmp	r3, #32
 8004094:	d138      	bne.n	8004108 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e032      	b.n	800410a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2224      	movs	r2, #36	; 0x24
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b20      	cmp	r3, #32
 800412a:	d139      	bne.n	80041a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004136:	2302      	movs	r3, #2
 8004138:	e033      	b.n	80041a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2224      	movs	r2, #36	; 0x24
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004168:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	e000      	b.n	80041a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b0:	b08f      	sub	sp, #60	; 0x3c
 80041b2:	af0a      	add	r7, sp, #40	; 0x28
 80041b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e116      	b.n	80043ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fe fa7e 	bl	80026dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2203      	movs	r2, #3
 80041e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f003 fc38 	bl	8007a74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	687e      	ldr	r6, [r7, #4]
 800420c:	466d      	mov	r5, sp
 800420e:	f106 0410 	add.w	r4, r6, #16
 8004212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800421a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800421e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004222:	1d33      	adds	r3, r6, #4
 8004224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004226:	6838      	ldr	r0, [r7, #0]
 8004228:	f003 fbcc 	bl	80079c4 <USB_CoreInit>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0d7      	b.n	80043ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f003 fc26 	bl	8007a96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e04a      	b.n	80042e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	333d      	adds	r3, #61	; 0x3d
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	333c      	adds	r3, #60	; 0x3c
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	b298      	uxth	r0, r3
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	3342      	adds	r3, #66	; 0x42
 800428c:	4602      	mov	r2, r0
 800428e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	333f      	adds	r3, #63	; 0x3f
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3344      	adds	r3, #68	; 0x44
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	3348      	adds	r3, #72	; 0x48
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	3350      	adds	r3, #80	; 0x50
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	3301      	adds	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d3af      	bcc.n	8004250 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	e044      	b.n	8004380 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3301      	adds	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d3b5      	bcc.n	80042f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	687e      	ldr	r6, [r7, #4]
 8004392:	466d      	mov	r5, sp
 8004394:	f106 0410 	add.w	r4, r6, #16
 8004398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80043a8:	1d33      	adds	r3, r6, #4
 80043aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ac:	6838      	ldr	r0, [r7, #0]
 80043ae:	f003 fb9d 	bl	8007aec <USB_DevInit>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e014      	b.n	80043ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d102      	bne.n	80043e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f80b 	bl	80043f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f003 fd4f 	bl	8007e8a <USB_DevDisconnect>

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_PCDEx_ActivateLPM+0x44>)
 8004428:	4313      	orrs	r3, r2
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	10000003 	.word	0x10000003

08004440 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004468:	2300      	movs	r3, #0
 800446a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e291      	b.n	800499a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8087 	beq.w	8004592 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004484:	4b96      	ldr	r3, [pc, #600]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b04      	cmp	r3, #4
 800448e:	d00c      	beq.n	80044aa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004490:	4b93      	ldr	r3, [pc, #588]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b08      	cmp	r3, #8
 800449a:	d112      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
 800449c:	4b90      	ldr	r3, [pc, #576]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044a8:	d10b      	bne.n	80044c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044aa:	4b8d      	ldr	r3, [pc, #564]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d06c      	beq.n	8004590 <HAL_RCC_OscConfig+0x130>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d168      	bne.n	8004590 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e26b      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ca:	d106      	bne.n	80044da <HAL_RCC_OscConfig+0x7a>
 80044cc:	4b84      	ldr	r3, [pc, #528]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a83      	ldr	r2, [pc, #524]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e02e      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0x9c>
 80044e2:	4b7f      	ldr	r3, [pc, #508]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a7e      	ldr	r2, [pc, #504]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b7c      	ldr	r3, [pc, #496]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a7b      	ldr	r2, [pc, #492]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80044f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e01d      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0xc0>
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800450c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b73      	ldr	r3, [pc, #460]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a72      	ldr	r2, [pc, #456]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e00b      	b.n	8004538 <HAL_RCC_OscConfig+0xd8>
 8004520:	4b6f      	ldr	r3, [pc, #444]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b6c      	ldr	r3, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a6b      	ldr	r2, [pc, #428]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d013      	beq.n	8004568 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe f9a2 	bl	8002888 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004548:	f7fe f99e 	bl	8002888 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e21f      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0xe8>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fe f98e 	bl	8002888 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fe f98a 	bl	8002888 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	; 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e20b      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004582:	4b57      	ldr	r3, [pc, #348]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x110>
 800458e:	e000      	b.n	8004592 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d069      	beq.n	8004672 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800459e:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045aa:	4b4d      	ldr	r3, [pc, #308]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d11c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d001      	beq.n	80045da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e1df      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	493d      	ldr	r1, [pc, #244]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	e040      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d023      	beq.n	8004640 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a38      	ldr	r2, [pc, #224]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fe f940 	bl	8002888 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7fe f93c 	bl	8002888 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1bd      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461e:	4b30      	ldr	r3, [pc, #192]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4929      	ldr	r1, [pc, #164]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
 800463e:	e018      	b.n	8004672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004640:	4b27      	ldr	r3, [pc, #156]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a26      	ldr	r2, [pc, #152]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fe f91c 	bl	8002888 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004654:	f7fe f918 	bl	8002888 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e199      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004666:	4b1e      	ldr	r3, [pc, #120]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d038      	beq.n	80046f0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d019      	beq.n	80046ba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004686:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 8004688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004692:	f7fe f8f9 	bl	8002888 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800469a:	f7fe f8f5 	bl	8002888 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e176      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0f0      	beq.n	800469a <HAL_RCC_OscConfig+0x23a>
 80046b8:	e01a      	b.n	80046f0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <HAL_RCC_OscConfig+0x280>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fe f8df 	bl	8002888 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fe f8db 	bl	8002888 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d903      	bls.n	80046e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e15c      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
 80046e0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b91      	ldr	r3, [pc, #580]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ee      	bne.n	80046ce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a4 	beq.w	8004846 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fe:	4b8b      	ldr	r3, [pc, #556]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	4b88      	ldr	r3, [pc, #544]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	4a87      	ldr	r2, [pc, #540]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	; 0x40
 8004716:	4b85      	ldr	r3, [pc, #532]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004726:	4b82      	ldr	r3, [pc, #520]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004732:	4b7f      	ldr	r3, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7e      	ldr	r2, [pc, #504]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fe f8a3 	bl	8002888 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fe f89f 	bl	8002888 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b64      	cmp	r3, #100	; 0x64
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e120      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004758:	4b75      	ldr	r3, [pc, #468]	; (8004930 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x31a>
 800476c:	4b6f      	ldr	r3, [pc, #444]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	4a6e      	ldr	r2, [pc, #440]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	; 0x70
 8004778:	e02d      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x33c>
 8004782:	4b6a      	ldr	r3, [pc, #424]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a69      	ldr	r2, [pc, #420]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6713      	str	r3, [r2, #112]	; 0x70
 800478e:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	4a66      	ldr	r2, [pc, #408]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004794:	f023 0304 	bic.w	r3, r3, #4
 8004798:	6713      	str	r3, [r2, #112]	; 0x70
 800479a:	e01c      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b05      	cmp	r3, #5
 80047a2:	d10c      	bne.n	80047be <HAL_RCC_OscConfig+0x35e>
 80047a4:	4b61      	ldr	r3, [pc, #388]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047aa:	f043 0304 	orr.w	r3, r3, #4
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a5d      	ldr	r2, [pc, #372]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e00b      	b.n	80047d6 <HAL_RCC_OscConfig+0x376>
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047c4:	f023 0301 	bic.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a57      	ldr	r2, [pc, #348]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047d0:	f023 0304 	bic.w	r3, r3, #4
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d015      	beq.n	800480a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047de:	f7fe f853 	bl	8002888 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e6:	f7fe f84f 	bl	8002888 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d901      	bls.n	80047fc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e0ce      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	4b4b      	ldr	r3, [pc, #300]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d0ee      	beq.n	80047e6 <HAL_RCC_OscConfig+0x386>
 8004808:	e014      	b.n	8004834 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480a:	f7fe f83d 	bl	8002888 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004810:	e00a      	b.n	8004828 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004812:	f7fe f839 	bl	8002888 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e0b8      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	4b40      	ldr	r3, [pc, #256]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ee      	bne.n	8004812 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004834:	7dfb      	ldrb	r3, [r7, #23]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	4a3b      	ldr	r2, [pc, #236]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80a4 	beq.w	8004998 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004850:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d06b      	beq.n	8004934 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b02      	cmp	r3, #2
 8004862:	d149      	bne.n	80048f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004864:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a30      	ldr	r2, [pc, #192]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800486a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800486e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fe f80a 	bl	8002888 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004878:	f7fe f806 	bl	8002888 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e087      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488a:	4b28      	ldr	r3, [pc, #160]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69da      	ldr	r2, [r3, #28]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	3b01      	subs	r3, #1
 80048b0:	041b      	lsls	r3, r3, #16
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	061b      	lsls	r3, r3, #24
 80048ba:	4313      	orrs	r3, r2
 80048bc:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c4:	4b19      	ldr	r3, [pc, #100]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd ffda 	bl	8002888 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd ffd6 	bl	8002888 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e057      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0f0      	beq.n	80048d8 <HAL_RCC_OscConfig+0x478>
 80048f6:	e04f      	b.n	8004998 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a0b      	ldr	r2, [pc, #44]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 80048fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd ffc0 	bl	8002888 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd ffbc 	bl	8002888 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e03d      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b03      	ldr	r3, [pc, #12]	; (800492c <HAL_RCC_OscConfig+0x4cc>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x4ac>
 800492a:	e035      	b.n	8004998 <HAL_RCC_OscConfig+0x538>
 800492c:	40023800 	.word	0x40023800
 8004930:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004934:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <HAL_RCC_OscConfig+0x544>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d028      	beq.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d121      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d11a      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800496a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800496c:	4293      	cmp	r3, r2
 800496e:	d111      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	3b01      	subs	r3, #1
 800497e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d107      	bne.n	8004994 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0d0      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c0:	4b6a      	ldr	r3, [pc, #424]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d910      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 020f 	bic.w	r2, r3, #15
 80049d6:	4965      	ldr	r1, [pc, #404]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049de:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 030f 	and.w	r3, r3, #15
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0b8      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a08:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a58      	ldr	r2, [pc, #352]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a20:	4b53      	ldr	r3, [pc, #332]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a52      	ldr	r2, [pc, #328]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a2c:	4b50      	ldr	r3, [pc, #320]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	494d      	ldr	r1, [pc, #308]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d040      	beq.n	8004acc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d107      	bne.n	8004a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	4b47      	ldr	r3, [pc, #284]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d115      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e07f      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6a:	4b41      	ldr	r3, [pc, #260]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d109      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e073      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7a:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e06b      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8a:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 0203 	bic.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4936      	ldr	r1, [pc, #216]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a9c:	f7fd fef4 	bl	8002888 <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa4:	f7fd fef0 	bl	8002888 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e053      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 020c 	and.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d1eb      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d210      	bcs.n	8004afc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b24      	ldr	r3, [pc, #144]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	4922      	ldr	r1, [pc, #136]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e032      	b.n	8004b62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d008      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b08:	4b19      	ldr	r3, [pc, #100]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4916      	ldr	r1, [pc, #88]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d009      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b26:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	490e      	ldr	r1, [pc, #56]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b3a:	f000 f821 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_ClockConfig+0x1c8>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	091b      	lsrs	r3, r3, #4
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	490a      	ldr	r1, [pc, #40]	; (8004b74 <HAL_RCC_ClockConfig+0x1cc>)
 8004b4c:	5ccb      	ldrb	r3, [r1, r3]
 8004b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b52:	4a09      	ldr	r2, [pc, #36]	; (8004b78 <HAL_RCC_ClockConfig+0x1d0>)
 8004b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1d4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fd fe50 	bl	8002800 <HAL_InitTick>

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023c00 	.word	0x40023c00
 8004b70:	40023800 	.word	0x40023800
 8004b74:	0800d120 	.word	0x0800d120
 8004b78:	20000068 	.word	0x20000068
 8004b7c:	2000006c 	.word	0x2000006c

08004b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	2300      	movs	r3, #0
 8004b92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b98:	4b67      	ldr	r3, [pc, #412]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d00d      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	f200 80bd 	bhi.w	8004d24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0x3a>
 8004bb2:	e0b7      	b.n	8004d24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb4:	4b61      	ldr	r3, [pc, #388]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bb6:	60bb      	str	r3, [r7, #8]
      break;
 8004bb8:	e0b7      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bba:	4b61      	ldr	r3, [pc, #388]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004bbc:	60bb      	str	r3, [r7, #8]
      break;
 8004bbe:	e0b4      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc0:	4b5d      	ldr	r3, [pc, #372]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bc8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004bca:	4b5b      	ldr	r3, [pc, #364]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04d      	beq.n	8004c72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd6:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	099b      	lsrs	r3, r3, #6
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	ea02 0800 	and.w	r8, r2, r0
 8004bee:	ea03 0901 	and.w	r9, r3, r1
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	014b      	lsls	r3, r1, #5
 8004c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c04:	0142      	lsls	r2, r0, #5
 8004c06:	4610      	mov	r0, r2
 8004c08:	4619      	mov	r1, r3
 8004c0a:	ebb0 0008 	subs.w	r0, r0, r8
 8004c0e:	eb61 0109 	sbc.w	r1, r1, r9
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	018b      	lsls	r3, r1, #6
 8004c1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c20:	0182      	lsls	r2, r0, #6
 8004c22:	1a12      	subs	r2, r2, r0
 8004c24:	eb63 0301 	sbc.w	r3, r3, r1
 8004c28:	f04f 0000 	mov.w	r0, #0
 8004c2c:	f04f 0100 	mov.w	r1, #0
 8004c30:	00d9      	lsls	r1, r3, #3
 8004c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c36:	00d0      	lsls	r0, r2, #3
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	eb12 0208 	adds.w	r2, r2, r8
 8004c40:	eb43 0309 	adc.w	r3, r3, r9
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	f04f 0100 	mov.w	r1, #0
 8004c4c:	0259      	lsls	r1, r3, #9
 8004c4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c52:	0250      	lsls	r0, r2, #9
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f7fc f840 	bl	8000ce8 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e04a      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c72:	4b31      	ldr	r3, [pc, #196]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c82:	f04f 0100 	mov.w	r1, #0
 8004c86:	ea02 0400 	and.w	r4, r2, r0
 8004c8a:	ea03 0501 	and.w	r5, r3, r1
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	014b      	lsls	r3, r1, #5
 8004c9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ca0:	0142      	lsls	r2, r0, #5
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	1b00      	subs	r0, r0, r4
 8004ca8:	eb61 0105 	sbc.w	r1, r1, r5
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	018b      	lsls	r3, r1, #6
 8004cb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cba:	0182      	lsls	r2, r0, #6
 8004cbc:	1a12      	subs	r2, r2, r0
 8004cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	00d9      	lsls	r1, r3, #3
 8004ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cd0:	00d0      	lsls	r0, r2, #3
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	1912      	adds	r2, r2, r4
 8004cd8:	eb45 0303 	adc.w	r3, r5, r3
 8004cdc:	f04f 0000 	mov.w	r0, #0
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	0299      	lsls	r1, r3, #10
 8004ce6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004cea:	0290      	lsls	r0, r2, #10
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	f7fb fff4 	bl	8000ce8 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4613      	mov	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d08:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	3301      	adds	r3, #1
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	60bb      	str	r3, [r7, #8]
      break;
 8004d22:	e002      	b.n	8004d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004d26:	60bb      	str	r3, [r7, #8]
      break;
 8004d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d36:	bf00      	nop
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	00f42400 	.word	0x00f42400
 8004d40:	007a1200 	.word	0x007a1200

08004d44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000068 	.word	0x20000068

08004d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d60:	f7ff fff0 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	4903      	ldr	r1, [pc, #12]	; (8004d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	0800d130 	.word	0x0800d130

08004d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d88:	f7ff ffdc 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0b5b      	lsrs	r3, r3, #13
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4903      	ldr	r1, [pc, #12]	; (8004da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	0800d130 	.word	0x0800d130

08004dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d012      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dd4:	4b69      	ldr	r3, [pc, #420]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a68      	ldr	r2, [pc, #416]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dde:	6093      	str	r3, [r2, #8]
 8004de0:	4b66      	ldr	r3, [pc, #408]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de8:	4964      	ldr	r1, [pc, #400]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d017      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e06:	4b5d      	ldr	r3, [pc, #372]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e14:	4959      	ldr	r1, [pc, #356]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e24:	d101      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e26:	2301      	movs	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d017      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e42:	4b4e      	ldr	r3, [pc, #312]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	494a      	ldr	r1, [pc, #296]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e60:	d101      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 808b 	beq.w	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e90:	4b3a      	ldr	r3, [pc, #232]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9c:	4b37      	ldr	r3, [pc, #220]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ea8:	4b35      	ldr	r3, [pc, #212]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a34      	ldr	r2, [pc, #208]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb4:	f7fd fce8 	bl	8002888 <HAL_GetTick>
 8004eb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ebc:	f7fd fce4 	bl	8002888 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	; 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e357      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ece:	4b2c      	ldr	r3, [pc, #176]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eda:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d035      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d02e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ef8:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f02:	4b1e      	ldr	r3, [pc, #120]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f0e:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f20:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d114      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fcac 	bl	8002888 <HAL_GetTick>
 8004f30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fd fca8 	bl	8002888 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e319      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ee      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f62:	d111      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f72:	400b      	ands	r3, r1
 8004f74:	4901      	ldr	r1, [pc, #4]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	608b      	str	r3, [r1, #8]
 8004f7a:	e00b      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	40007000 	.word	0x40007000
 8004f84:	0ffffcff 	.word	0x0ffffcff
 8004f88:	4bb1      	ldr	r3, [pc, #708]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	4ab0      	ldr	r2, [pc, #704]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f92:	6093      	str	r3, [r2, #8]
 8004f94:	4bae      	ldr	r3, [pc, #696]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa0:	49ab      	ldr	r1, [pc, #684]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d010      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fb2:	4ba7      	ldr	r3, [pc, #668]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb8:	4aa5      	ldr	r2, [pc, #660]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fc2:	4ba3      	ldr	r3, [pc, #652]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	49a0      	ldr	r1, [pc, #640]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00a      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fe0:	4b9b      	ldr	r3, [pc, #620]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fee:	4998      	ldr	r1, [pc, #608]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005002:	4b93      	ldr	r3, [pc, #588]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005010:	498f      	ldr	r1, [pc, #572]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005024:	4b8a      	ldr	r3, [pc, #552]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005032:	4987      	ldr	r1, [pc, #540]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005046:	4b82      	ldr	r3, [pc, #520]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005054:	497e      	ldr	r1, [pc, #504]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005056:	4313      	orrs	r3, r2
 8005058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005068:	4b79      	ldr	r3, [pc, #484]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800506a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506e:	f023 0203 	bic.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	4976      	ldr	r1, [pc, #472]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005078:	4313      	orrs	r3, r2
 800507a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800508a:	4b71      	ldr	r3, [pc, #452]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	f023 020c 	bic.w	r2, r3, #12
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005098:	496d      	ldr	r1, [pc, #436]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ac:	4b68      	ldr	r3, [pc, #416]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ba:	4965      	ldr	r1, [pc, #404]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ce:	4b60      	ldr	r3, [pc, #384]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050dc:	495c      	ldr	r1, [pc, #368]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050f0:	4b57      	ldr	r3, [pc, #348]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fe:	4954      	ldr	r1, [pc, #336]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005112:	4b4f      	ldr	r3, [pc, #316]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005118:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	494b      	ldr	r1, [pc, #300]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005134:	4b46      	ldr	r3, [pc, #280]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005142:	4943      	ldr	r1, [pc, #268]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005156:	4b3e      	ldr	r3, [pc, #248]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	493a      	ldr	r1, [pc, #232]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005186:	4932      	ldr	r1, [pc, #200]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d011      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800519a:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a8:	4929      	ldr	r1, [pc, #164]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b8:	d101      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e8:	4919      	ldr	r1, [pc, #100]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520c:	4910      	ldr	r1, [pc, #64]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d006      	beq.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80d9 	beq.w	80053da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a08      	ldr	r2, [pc, #32]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800522e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005232:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005234:	f7fd fb28 	bl	8002888 <HAL_GetTick>
 8005238:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800523a:	e00b      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800523c:	f7fd fb24 	bl	8002888 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	; 0x64
 8005248:	d904      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e197      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005254:	4b6c      	ldr	r3, [pc, #432]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1ed      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d021      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11d      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005274:	4b64      	ldr	r3, [pc, #400]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527a:	0c1b      	lsrs	r3, r3, #16
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005282:	4b61      	ldr	r3, [pc, #388]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005288:	0e1b      	lsrs	r3, r3, #24
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	019a      	lsls	r2, r3, #6
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	041b      	lsls	r3, r3, #16
 800529a:	431a      	orrs	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	061b      	lsls	r3, r3, #24
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	071b      	lsls	r3, r3, #28
 80052a8:	4957      	ldr	r1, [pc, #348]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052c4:	d00a      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d02e      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052da:	d129      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052dc:	4b4a      	ldr	r3, [pc, #296]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e2:	0c1b      	lsrs	r3, r3, #16
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f0:	0f1b      	lsrs	r3, r3, #28
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	019a      	lsls	r2, r3, #6
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	431a      	orrs	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	071b      	lsls	r3, r3, #28
 8005310:	493d      	ldr	r1, [pc, #244]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005312:	4313      	orrs	r3, r2
 8005314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005318:	4b3b      	ldr	r3, [pc, #236]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800531a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531e:	f023 021f 	bic.w	r2, r3, #31
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	3b01      	subs	r3, #1
 8005328:	4937      	ldr	r1, [pc, #220]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01d      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800533c:	4b32      	ldr	r3, [pc, #200]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005342:	0e1b      	lsrs	r3, r3, #24
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800534c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005350:	0f1b      	lsrs	r3, r3, #28
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	019a      	lsls	r2, r3, #6
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	431a      	orrs	r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	061b      	lsls	r3, r3, #24
 800536a:	431a      	orrs	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	071b      	lsls	r3, r3, #28
 8005370:	4925      	ldr	r1, [pc, #148]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d011      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	019a      	lsls	r2, r3, #6
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	061b      	lsls	r3, r3, #24
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	071b      	lsls	r3, r3, #28
 80053a0:	4919      	ldr	r1, [pc, #100]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053a8:	4b17      	ldr	r3, [pc, #92]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a16      	ldr	r2, [pc, #88]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b4:	f7fd fa68 	bl	8002888 <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053bc:	f7fd fa64 	bl	8002888 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	; 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e0d7      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f040 80cd 	bne.w	800557c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80053e2:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a08      	ldr	r2, [pc, #32]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053ee:	f7fd fa4b 	bl	8002888 <HAL_GetTick>
 80053f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80053f4:	e00a      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80053f6:	f7fd fa47 	bl	8002888 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b64      	cmp	r3, #100	; 0x64
 8005402:	d903      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e0ba      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005408:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800540c:	4b5e      	ldr	r3, [pc, #376]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005418:	d0ed      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d009      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005436:	2b00      	cmp	r3, #0
 8005438:	d02e      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d12a      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005442:	4b51      	ldr	r3, [pc, #324]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005450:	4b4d      	ldr	r3, [pc, #308]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005456:	0f1b      	lsrs	r3, r3, #28
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	019a      	lsls	r2, r3, #6
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	061b      	lsls	r3, r3, #24
 8005470:	431a      	orrs	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	071b      	lsls	r3, r3, #28
 8005476:	4944      	ldr	r1, [pc, #272]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800547e:	4b42      	ldr	r3, [pc, #264]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005484:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	3b01      	subs	r3, #1
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	493d      	ldr	r1, [pc, #244]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d022      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054ac:	d11d      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054ae:	4b36      	ldr	r3, [pc, #216]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	0e1b      	lsrs	r3, r3, #24
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054bc:	4b32      	ldr	r3, [pc, #200]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	0f1b      	lsrs	r3, r3, #28
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	019a      	lsls	r2, r3, #6
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	431a      	orrs	r2, r3
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	061b      	lsls	r3, r3, #24
 80054dc:	431a      	orrs	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	071b      	lsls	r3, r3, #28
 80054e2:	4929      	ldr	r1, [pc, #164]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d028      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	0e1b      	lsrs	r3, r3, #24
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005504:	4b20      	ldr	r3, [pc, #128]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	019a      	lsls	r2, r3, #6
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	431a      	orrs	r2, r3
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	061b      	lsls	r3, r3, #24
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	071b      	lsls	r3, r3, #28
 800552a:	4917      	ldr	r1, [pc, #92]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4911      	ldr	r1, [pc, #68]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005554:	f7fd f998 	bl	8002888 <HAL_GetTick>
 8005558:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800555a:	e008      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800555c:	f7fd f994 	bl	8002888 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b64      	cmp	r3, #100	; 0x64
 8005568:	d901      	bls.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e007      	b.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557a:	d1ef      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800

0800558c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e049      	b.n	8005632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7fc ff28 	bl	8002408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f000 fdc0 	bl	8006150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b01      	cmp	r3, #1
 800564e:	d001      	beq.n	8005654 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e04c      	b.n	80056ee <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a26      	ldr	r2, [pc, #152]	; (80056fc <HAL_TIM_Base_Start+0xc0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d022      	beq.n	80056ac <HAL_TIM_Base_Start+0x70>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800566e:	d01d      	beq.n	80056ac <HAL_TIM_Base_Start+0x70>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a22      	ldr	r2, [pc, #136]	; (8005700 <HAL_TIM_Base_Start+0xc4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_TIM_Base_Start+0x70>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a21      	ldr	r2, [pc, #132]	; (8005704 <HAL_TIM_Base_Start+0xc8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_TIM_Base_Start+0x70>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a1f      	ldr	r2, [pc, #124]	; (8005708 <HAL_TIM_Base_Start+0xcc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_TIM_Base_Start+0x70>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_TIM_Base_Start+0xd0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_TIM_Base_Start+0x70>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1c      	ldr	r2, [pc, #112]	; (8005710 <HAL_TIM_Base_Start+0xd4>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_TIM_Base_Start+0x70>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_TIM_Base_Start+0xd8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d115      	bne.n	80056d8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	4b19      	ldr	r3, [pc, #100]	; (8005718 <HAL_TIM_Base_Start+0xdc>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d015      	beq.n	80056ea <HAL_TIM_Base_Start+0xae>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d011      	beq.n	80056ea <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0201 	orr.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d6:	e008      	b.n	80056ea <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e000      	b.n	80056ec <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40001800 	.word	0x40001800
 8005718:	00010007 	.word	0x00010007

0800571c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	f241 1311 	movw	r3, #4369	; 0x1111
 800572e:	4013      	ands	r3, r2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10f      	bne.n	8005754 <HAL_TIM_Base_Stop+0x38>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	f240 4344 	movw	r3, #1092	; 0x444
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d107      	bne.n	8005754 <HAL_TIM_Base_Stop+0x38>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
	...

0800576c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	d001      	beq.n	8005784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e054      	b.n	800582e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a26      	ldr	r2, [pc, #152]	; (800583c <HAL_TIM_Base_Start_IT+0xd0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d022      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d01d      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a22      	ldr	r2, [pc, #136]	; (8005840 <HAL_TIM_Base_Start_IT+0xd4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d018      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a21      	ldr	r2, [pc, #132]	; (8005844 <HAL_TIM_Base_Start_IT+0xd8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d013      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <HAL_TIM_Base_Start_IT+0xdc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00e      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1e      	ldr	r2, [pc, #120]	; (800584c <HAL_TIM_Base_Start_IT+0xe0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d009      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <HAL_TIM_Base_Start_IT+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <HAL_TIM_Base_Start_IT+0x80>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1b      	ldr	r2, [pc, #108]	; (8005854 <HAL_TIM_Base_Start_IT+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d115      	bne.n	8005818 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_TIM_Base_Start_IT+0xec>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d015      	beq.n	800582a <HAL_TIM_Base_Start_IT+0xbe>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005804:	d011      	beq.n	800582a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005816:	e008      	b.n	800582a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e000      	b.n	800582c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40000c00 	.word	0x40000c00
 800584c:	40010400 	.word	0x40010400
 8005850:	40014000 	.word	0x40014000
 8005854:	40001800 	.word	0x40001800
 8005858:	00010007 	.word	0x00010007

0800585c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e049      	b.n	8005902 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f841 	bl	800590a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f000 fc58 	bl	8006150 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_TIM_PWM_Start+0x24>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b01      	cmp	r3, #1
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	b2db      	uxtb	r3, r3
 8005942:	e03c      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d109      	bne.n	800595e <HAL_TIM_PWM_Start+0x3e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b01      	cmp	r3, #1
 8005954:	bf14      	ite	ne
 8005956:	2301      	movne	r3, #1
 8005958:	2300      	moveq	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	e02f      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d109      	bne.n	8005978 <HAL_TIM_PWM_Start+0x58>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	e022      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b0c      	cmp	r3, #12
 800597c:	d109      	bne.n	8005992 <HAL_TIM_PWM_Start+0x72>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	bf14      	ite	ne
 800598a:	2301      	movne	r3, #1
 800598c:	2300      	moveq	r3, #0
 800598e:	b2db      	uxtb	r3, r3
 8005990:	e015      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b10      	cmp	r3, #16
 8005996:	d109      	bne.n	80059ac <HAL_TIM_PWM_Start+0x8c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	e008      	b.n	80059be <HAL_TIM_PWM_Start+0x9e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e092      	b.n	8005aec <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0xb6>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d4:	e023      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_PWM_Start+0xc6>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	e01b      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d104      	bne.n	80059f6 <HAL_TIM_PWM_Start+0xd6>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f4:	e013      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b0c      	cmp	r3, #12
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_PWM_Start+0xe6>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a04:	e00b      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xf6>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a14:	e003      	b.n	8005a1e <HAL_TIM_PWM_Start+0xfe>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2201      	movs	r2, #1
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 ff2a 	bl	8006880 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a30      	ldr	r2, [pc, #192]	; (8005af4 <HAL_TIM_PWM_Start+0x1d4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <HAL_TIM_PWM_Start+0x120>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <HAL_TIM_PWM_Start+0x1d8>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIM_PWM_Start+0x124>
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_TIM_PWM_Start+0x126>
 8005a44:	2300      	movs	r3, #0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a25      	ldr	r2, [pc, #148]	; (8005af4 <HAL_TIM_PWM_Start+0x1d4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x18a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6c:	d01d      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x18a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a22      	ldr	r2, [pc, #136]	; (8005afc <HAL_TIM_PWM_Start+0x1dc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x18a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <HAL_TIM_PWM_Start+0x1e0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x18a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1f      	ldr	r2, [pc, #124]	; (8005b04 <HAL_TIM_PWM_Start+0x1e4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x18a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <HAL_TIM_PWM_Start+0x1d8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x18a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIM_PWM_Start+0x1e8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x18a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a19      	ldr	r2, [pc, #100]	; (8005b0c <HAL_TIM_PWM_Start+0x1ec>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d115      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	4b17      	ldr	r3, [pc, #92]	; (8005b10 <HAL_TIM_PWM_Start+0x1f0>)
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d015      	beq.n	8005ae8 <HAL_TIM_PWM_Start+0x1c8>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac2:	d011      	beq.n	8005ae8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad4:	e008      	b.n	8005ae8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0201 	orr.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e000      	b.n	8005aea <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40010000 	.word	0x40010000
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40000400 	.word	0x40000400
 8005b00:	40000800 	.word	0x40000800
 8005b04:	40000c00 	.word	0x40000c00
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40001800 	.word	0x40001800
 8005b10:	00010007 	.word	0x00010007

08005b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d122      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d11b      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0202 	mvn.w	r2, #2
 8005b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fadc 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 face 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fadf 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d122      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0204 	mvn.w	r2, #4
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fab2 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 faa4 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fab5 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0308 	and.w	r3, r3, #8
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d122      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d11b      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0208 	mvn.w	r2, #8
 8005be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2204      	movs	r2, #4
 8005bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0303 	and.w	r3, r3, #3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fa88 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8005c04:	e005      	b.n	8005c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa7a 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fa8b 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0310 	and.w	r3, r3, #16
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0210 	mvn.w	r2, #16
 8005c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2208      	movs	r2, #8
 8005c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa5e 	bl	8006114 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fa50 	bl	8006100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa61 	bl	8006128 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d10e      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d107      	bne.n	8005c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0201 	mvn.w	r2, #1
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7fb ff84 	bl	8001ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca2:	2b80      	cmp	r3, #128	; 0x80
 8005ca4:	d10e      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d107      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fe9c 	bl	80069fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cd2:	d10e      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cde:	2b80      	cmp	r3, #128	; 0x80
 8005ce0:	d107      	bne.n	8005cf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fe8f 	bl	8006a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d10e      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0a:	2b40      	cmp	r3, #64	; 0x40
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fa0f 	bl	800613c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d10e      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	d107      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f06f 0220 	mvn.w	r2, #32
 8005d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fe4f 	bl	80069e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e0fd      	b.n	8005f6a <HAL_TIM_PWM_ConfigChannel+0x216>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b14      	cmp	r3, #20
 8005d7a:	f200 80f0 	bhi.w	8005f5e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005dd9 	.word	0x08005dd9
 8005d88:	08005f5f 	.word	0x08005f5f
 8005d8c:	08005f5f 	.word	0x08005f5f
 8005d90:	08005f5f 	.word	0x08005f5f
 8005d94:	08005e19 	.word	0x08005e19
 8005d98:	08005f5f 	.word	0x08005f5f
 8005d9c:	08005f5f 	.word	0x08005f5f
 8005da0:	08005f5f 	.word	0x08005f5f
 8005da4:	08005e5b 	.word	0x08005e5b
 8005da8:	08005f5f 	.word	0x08005f5f
 8005dac:	08005f5f 	.word	0x08005f5f
 8005db0:	08005f5f 	.word	0x08005f5f
 8005db4:	08005e9b 	.word	0x08005e9b
 8005db8:	08005f5f 	.word	0x08005f5f
 8005dbc:	08005f5f 	.word	0x08005f5f
 8005dc0:	08005f5f 	.word	0x08005f5f
 8005dc4:	08005edd 	.word	0x08005edd
 8005dc8:	08005f5f 	.word	0x08005f5f
 8005dcc:	08005f5f 	.word	0x08005f5f
 8005dd0:	08005f5f 	.word	0x08005f5f
 8005dd4:	08005f1d 	.word	0x08005f1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fa56 	bl	8006290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0208 	orr.w	r2, r2, #8
 8005df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6999      	ldr	r1, [r3, #24]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	619a      	str	r2, [r3, #24]
      break;
 8005e16:	e0a3      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 faa8 	bl	8006374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6999      	ldr	r1, [r3, #24]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	619a      	str	r2, [r3, #24]
      break;
 8005e58:	e082      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 faff 	bl	8006464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0208 	orr.w	r2, r2, #8
 8005e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69da      	ldr	r2, [r3, #28]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0204 	bic.w	r2, r2, #4
 8005e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69d9      	ldr	r1, [r3, #28]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691a      	ldr	r2, [r3, #16]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	61da      	str	r2, [r3, #28]
      break;
 8005e98:	e062      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fb55 	bl	8006550 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	69da      	ldr	r2, [r3, #28]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69d9      	ldr	r1, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	021a      	lsls	r2, r3, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	61da      	str	r2, [r3, #28]
      break;
 8005eda:	e041      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fb8c 	bl	8006600 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0208 	orr.w	r2, r2, #8
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f1a:	e021      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fbbe 	bl	80066a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f5c:	e000      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005f5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop

08005f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <HAL_TIM_ConfigClockSource+0x18>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e0b3      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x180>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4b55      	ldr	r3, [pc, #340]	; (80060fc <HAL_TIM_ConfigClockSource+0x188>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc4:	d03e      	beq.n	8006044 <HAL_TIM_ConfigClockSource+0xd0>
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fca:	f200 8087 	bhi.w	80060dc <HAL_TIM_ConfigClockSource+0x168>
 8005fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd2:	f000 8085 	beq.w	80060e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fda:	d87f      	bhi.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
 8005fdc:	2b70      	cmp	r3, #112	; 0x70
 8005fde:	d01a      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0xa2>
 8005fe0:	2b70      	cmp	r3, #112	; 0x70
 8005fe2:	d87b      	bhi.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
 8005fe4:	2b60      	cmp	r3, #96	; 0x60
 8005fe6:	d050      	beq.n	800608a <HAL_TIM_ConfigClockSource+0x116>
 8005fe8:	2b60      	cmp	r3, #96	; 0x60
 8005fea:	d877      	bhi.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
 8005fec:	2b50      	cmp	r3, #80	; 0x50
 8005fee:	d03c      	beq.n	800606a <HAL_TIM_ConfigClockSource+0xf6>
 8005ff0:	2b50      	cmp	r3, #80	; 0x50
 8005ff2:	d873      	bhi.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d058      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x136>
 8005ff8:	2b40      	cmp	r3, #64	; 0x40
 8005ffa:	d86f      	bhi.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
 8005ffc:	2b30      	cmp	r3, #48	; 0x30
 8005ffe:	d064      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x156>
 8006000:	2b30      	cmp	r3, #48	; 0x30
 8006002:	d86b      	bhi.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d060      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x156>
 8006008:	2b20      	cmp	r3, #32
 800600a:	d867      	bhi.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
 800600c:	2b00      	cmp	r3, #0
 800600e:	d05c      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x156>
 8006010:	2b10      	cmp	r3, #16
 8006012:	d05a      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006014:	e062      	b.n	80060dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6899      	ldr	r1, [r3, #8]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f000 fc0b 	bl	8006840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006038:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	609a      	str	r2, [r3, #8]
      break;
 8006042:	e04e      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	6899      	ldr	r1, [r3, #8]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f000 fbf4 	bl	8006840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006066:	609a      	str	r2, [r3, #8]
      break;
 8006068:	e03b      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6818      	ldr	r0, [r3, #0]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	461a      	mov	r2, r3
 8006078:	f000 fb68 	bl	800674c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2150      	movs	r1, #80	; 0x50
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fbc1 	bl	800680a <TIM_ITRx_SetConfig>
      break;
 8006088:	e02b      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6818      	ldr	r0, [r3, #0]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	6859      	ldr	r1, [r3, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	461a      	mov	r2, r3
 8006098:	f000 fb87 	bl	80067aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2160      	movs	r1, #96	; 0x60
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fbb1 	bl	800680a <TIM_ITRx_SetConfig>
      break;
 80060a8:	e01b      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6859      	ldr	r1, [r3, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f000 fb48 	bl	800674c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2140      	movs	r1, #64	; 0x40
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fba1 	bl	800680a <TIM_ITRx_SetConfig>
      break;
 80060c8:	e00b      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f000 fb98 	bl	800680a <TIM_ITRx_SetConfig>
        break;
 80060da:	e002      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060dc:	bf00      	nop
 80060de:	e000      	b.n	80060e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80060e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	fffeff88 	.word	0xfffeff88

08006100 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a40      	ldr	r2, [pc, #256]	; (8006264 <TIM_Base_SetConfig+0x114>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616e:	d00f      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3d      	ldr	r2, [pc, #244]	; (8006268 <TIM_Base_SetConfig+0x118>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00b      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a3c      	ldr	r2, [pc, #240]	; (800626c <TIM_Base_SetConfig+0x11c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d007      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3b      	ldr	r2, [pc, #236]	; (8006270 <TIM_Base_SetConfig+0x120>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <TIM_Base_SetConfig+0x40>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a3a      	ldr	r2, [pc, #232]	; (8006274 <TIM_Base_SetConfig+0x124>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d108      	bne.n	80061a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4313      	orrs	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2f      	ldr	r2, [pc, #188]	; (8006264 <TIM_Base_SetConfig+0x114>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d02b      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b0:	d027      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2c      	ldr	r2, [pc, #176]	; (8006268 <TIM_Base_SetConfig+0x118>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d023      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2b      	ldr	r2, [pc, #172]	; (800626c <TIM_Base_SetConfig+0x11c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01f      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a2a      	ldr	r2, [pc, #168]	; (8006270 <TIM_Base_SetConfig+0x120>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01b      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a29      	ldr	r2, [pc, #164]	; (8006274 <TIM_Base_SetConfig+0x124>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d017      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a28      	ldr	r2, [pc, #160]	; (8006278 <TIM_Base_SetConfig+0x128>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a27      	ldr	r2, [pc, #156]	; (800627c <TIM_Base_SetConfig+0x12c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00f      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a26      	ldr	r2, [pc, #152]	; (8006280 <TIM_Base_SetConfig+0x130>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d00b      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a25      	ldr	r2, [pc, #148]	; (8006284 <TIM_Base_SetConfig+0x134>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d007      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a24      	ldr	r2, [pc, #144]	; (8006288 <TIM_Base_SetConfig+0x138>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a23      	ldr	r2, [pc, #140]	; (800628c <TIM_Base_SetConfig+0x13c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d108      	bne.n	8006214 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a0a      	ldr	r2, [pc, #40]	; (8006264 <TIM_Base_SetConfig+0x114>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_Base_SetConfig+0xf8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a0c      	ldr	r2, [pc, #48]	; (8006274 <TIM_Base_SetConfig+0x124>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d103      	bne.n	8006250 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691a      	ldr	r2, [r3, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	615a      	str	r2, [r3, #20]
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40010000 	.word	0x40010000
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40010400 	.word	0x40010400
 8006278:	40014000 	.word	0x40014000
 800627c:	40014400 	.word	0x40014400
 8006280:	40014800 	.word	0x40014800
 8006284:	40001800 	.word	0x40001800
 8006288:	40001c00 	.word	0x40001c00
 800628c:	40002000 	.word	0x40002000

08006290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	f023 0201 	bic.w	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4b2b      	ldr	r3, [pc, #172]	; (8006368 <TIM_OC1_SetConfig+0xd8>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f023 0303 	bic.w	r3, r3, #3
 80062c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f023 0302 	bic.w	r3, r3, #2
 80062d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a21      	ldr	r2, [pc, #132]	; (800636c <TIM_OC1_SetConfig+0xdc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC1_SetConfig+0x64>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a20      	ldr	r2, [pc, #128]	; (8006370 <TIM_OC1_SetConfig+0xe0>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d10c      	bne.n	800630e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f023 0308 	bic.w	r3, r3, #8
 80062fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 0304 	bic.w	r3, r3, #4
 800630c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a16      	ldr	r2, [pc, #88]	; (800636c <TIM_OC1_SetConfig+0xdc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_OC1_SetConfig+0x8e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a15      	ldr	r2, [pc, #84]	; (8006370 <TIM_OC1_SetConfig+0xe0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d111      	bne.n	8006342 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800632c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	4313      	orrs	r3, r2
 8006340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	621a      	str	r2, [r3, #32]
}
 800635c:	bf00      	nop
 800635e:	371c      	adds	r7, #28
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	fffeff8f 	.word	0xfffeff8f
 800636c:	40010000 	.word	0x40010000
 8006370:	40010400 	.word	0x40010400

08006374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	f023 0210 	bic.w	r2, r3, #16
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4b2e      	ldr	r3, [pc, #184]	; (8006458 <TIM_OC2_SetConfig+0xe4>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f023 0320 	bic.w	r3, r3, #32
 80063be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a23      	ldr	r2, [pc, #140]	; (800645c <TIM_OC2_SetConfig+0xe8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_OC2_SetConfig+0x68>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a22      	ldr	r2, [pc, #136]	; (8006460 <TIM_OC2_SetConfig+0xec>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d10d      	bne.n	80063f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a18      	ldr	r2, [pc, #96]	; (800645c <TIM_OC2_SetConfig+0xe8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_OC2_SetConfig+0x94>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a17      	ldr	r2, [pc, #92]	; (8006460 <TIM_OC2_SetConfig+0xec>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d113      	bne.n	8006430 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800640e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4313      	orrs	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	feff8fff 	.word	0xfeff8fff
 800645c:	40010000 	.word	0x40010000
 8006460:	40010400 	.word	0x40010400

08006464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4b2d      	ldr	r3, [pc, #180]	; (8006544 <TIM_OC3_SetConfig+0xe0>)
 8006490:	4013      	ands	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a22      	ldr	r2, [pc, #136]	; (8006548 <TIM_OC3_SetConfig+0xe4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <TIM_OC3_SetConfig+0x66>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a21      	ldr	r2, [pc, #132]	; (800654c <TIM_OC3_SetConfig+0xe8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d10d      	bne.n	80064e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	021b      	lsls	r3, r3, #8
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a17      	ldr	r2, [pc, #92]	; (8006548 <TIM_OC3_SetConfig+0xe4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_OC3_SetConfig+0x92>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a16      	ldr	r2, [pc, #88]	; (800654c <TIM_OC3_SetConfig+0xe8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d113      	bne.n	800651e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	621a      	str	r2, [r3, #32]
}
 8006538:	bf00      	nop
 800653a:	371c      	adds	r7, #28
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	fffeff8f 	.word	0xfffeff8f
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400

08006550 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4b1e      	ldr	r3, [pc, #120]	; (80065f4 <TIM_OC4_SetConfig+0xa4>)
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800659a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <TIM_OC4_SetConfig+0xa8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_OC4_SetConfig+0x68>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a12      	ldr	r2, [pc, #72]	; (80065fc <TIM_OC4_SetConfig+0xac>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d109      	bne.n	80065cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	019b      	lsls	r3, r3, #6
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	621a      	str	r2, [r3, #32]
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	feff8fff 	.word	0xfeff8fff
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40010400 	.word	0x40010400

08006600 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4b1b      	ldr	r3, [pc, #108]	; (8006698 <TIM_OC5_SetConfig+0x98>)
 800662c:	4013      	ands	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a12      	ldr	r2, [pc, #72]	; (800669c <TIM_OC5_SetConfig+0x9c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d003      	beq.n	800665e <TIM_OC5_SetConfig+0x5e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a11      	ldr	r2, [pc, #68]	; (80066a0 <TIM_OC5_SetConfig+0xa0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d109      	bne.n	8006672 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006664:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	621a      	str	r2, [r3, #32]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	fffeff8f 	.word	0xfffeff8f
 800669c:	40010000 	.word	0x40010000
 80066a0:	40010400 	.word	0x40010400

080066a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a1b      	ldr	r3, [r3, #32]
 80066be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <TIM_OC6_SetConfig+0x9c>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	051b      	lsls	r3, r3, #20
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a13      	ldr	r2, [pc, #76]	; (8006744 <TIM_OC6_SetConfig+0xa0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC6_SetConfig+0x60>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a12      	ldr	r2, [pc, #72]	; (8006748 <TIM_OC6_SetConfig+0xa4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d109      	bne.n	8006718 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800670a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	029b      	lsls	r3, r3, #10
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	697a      	ldr	r2, [r7, #20]
 800671c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	feff8fff 	.word	0xfeff8fff
 8006744:	40010000 	.word	0x40010000
 8006748:	40010400 	.word	0x40010400

0800674c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f023 0201 	bic.w	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f023 030a 	bic.w	r3, r3, #10
 8006788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	693a      	ldr	r2, [r7, #16]
 8006796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b087      	sub	sp, #28
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	60f8      	str	r0, [r7, #12]
 80067b2:	60b9      	str	r1, [r7, #8]
 80067b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f023 0210 	bic.w	r2, r3, #16
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	031b      	lsls	r3, r3, #12
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	f043 0307 	orr.w	r3, r3, #7
 800682c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	609a      	str	r2, [r3, #8]
}
 8006834:	bf00      	nop
 8006836:	3714      	adds	r7, #20
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800685a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	021a      	lsls	r2, r3, #8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	431a      	orrs	r2, r3
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4313      	orrs	r3, r2
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	4313      	orrs	r3, r2
 800686c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	609a      	str	r2, [r3, #8]
}
 8006874:	bf00      	nop
 8006876:	371c      	adds	r7, #28
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	2201      	movs	r2, #1
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a1a      	ldr	r2, [r3, #32]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	43db      	mvns	r3, r3
 80068a2:	401a      	ands	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	f003 031f 	and.w	r3, r3, #31
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	fa01 f303 	lsl.w	r3, r1, r3
 80068b8:	431a      	orrs	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e06d      	b.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a30      	ldr	r2, [pc, #192]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a2f      	ldr	r2, [pc, #188]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d108      	bne.n	800692a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800691e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4313      	orrs	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d022      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006956:	d01d      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d018      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1c      	ldr	r2, [pc, #112]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d013      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1a      	ldr	r2, [pc, #104]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00e      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d009      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d004      	beq.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10c      	bne.n	80069ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800699a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40010000 	.word	0x40010000
 80069d0:	40010400 	.word	0x40010400
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40000800 	.word	0x40000800
 80069dc:	40000c00 	.word	0x40000c00
 80069e0:	40014000 	.word	0x40014000
 80069e4:	40001800 	.word	0x40001800

080069e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e040      	b.n	8006ab8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fb fdce 	bl	80025e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2224      	movs	r2, #36	; 0x24
 8006a50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fb9c 	bl	80071a0 <UART_SetConfig>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e022      	b.n	8006ab8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fdf2 	bl	8007664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fe79 	bl	80077a8 <UART_CheckIdleState>
 8006ab6:	4603      	mov	r3, r0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08a      	sub	sp, #40	; 0x28
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	603b      	str	r3, [r7, #0]
 8006acc:	4613      	mov	r3, r2
 8006ace:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad4:	2b20      	cmp	r3, #32
 8006ad6:	f040 8081 	bne.w	8006bdc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <HAL_UART_Transmit+0x26>
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e079      	b.n	8006bde <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_UART_Transmit+0x38>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e072      	b.n	8006bde <HAL_UART_Transmit+0x11e>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2221      	movs	r2, #33	; 0x21
 8006b0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b0e:	f7fb febb 	bl	8002888 <HAL_GetTick>
 8006b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d108      	bne.n	8006b40 <HAL_UART_Transmit+0x80>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	e003      	b.n	8006b48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b50:	e02c      	b.n	8006bac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2180      	movs	r1, #128	; 0x80
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 fe56 	bl	800780e <UART_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e038      	b.n	8006bde <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10b      	bne.n	8006b8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	3302      	adds	r3, #2
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	e007      	b.n	8006b9a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3301      	adds	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1cc      	bne.n	8006b52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	2140      	movs	r1, #64	; 0x40
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fe23 	bl	800780e <UART_WaitOnFlagUntilTimeout>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e005      	b.n	8006bde <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e000      	b.n	8006bde <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
  }
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3720      	adds	r7, #32
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b08a      	sub	sp, #40	; 0x28
 8006bea:	af02      	add	r7, sp, #8
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	f040 80be 	bne.w	8006d7c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d002      	beq.n	8006c0c <HAL_UART_Receive+0x26>
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e0b6      	b.n	8006d7e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Receive+0x38>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e0af      	b.n	8006d7e <HAL_UART_Receive+0x198>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2222      	movs	r2, #34	; 0x22
 8006c32:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c3a:	f7fb fe25 	bl	8002888 <HAL_GetTick>
 8006c3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	88fa      	ldrh	r2, [r7, #6]
 8006c44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	88fa      	ldrh	r2, [r7, #6]
 8006c4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c58:	d10e      	bne.n	8006c78 <HAL_UART_Receive+0x92>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d105      	bne.n	8006c6e <HAL_UART_Receive+0x88>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006c68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c6c:	e02d      	b.n	8006cca <HAL_UART_Receive+0xe4>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	22ff      	movs	r2, #255	; 0xff
 8006c72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c76:	e028      	b.n	8006cca <HAL_UART_Receive+0xe4>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10d      	bne.n	8006c9c <HAL_UART_Receive+0xb6>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d104      	bne.n	8006c92 <HAL_UART_Receive+0xac>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	22ff      	movs	r2, #255	; 0xff
 8006c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c90:	e01b      	b.n	8006cca <HAL_UART_Receive+0xe4>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	227f      	movs	r2, #127	; 0x7f
 8006c96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006c9a:	e016      	b.n	8006cca <HAL_UART_Receive+0xe4>
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ca4:	d10d      	bne.n	8006cc2 <HAL_UART_Receive+0xdc>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <HAL_UART_Receive+0xd2>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	227f      	movs	r2, #127	; 0x7f
 8006cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cb6:	e008      	b.n	8006cca <HAL_UART_Receive+0xe4>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	223f      	movs	r2, #63	; 0x3f
 8006cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006cc0:	e003      	b.n	8006cca <HAL_UART_Receive+0xe4>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cd0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cda:	d108      	bne.n	8006cee <HAL_UART_Receive+0x108>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e003      	b.n	8006cf6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006cfe:	e032      	b.n	8006d66 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2120      	movs	r1, #32
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fd7f 	bl	800780e <UART_WaitOnFlagUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e031      	b.n	8006d7e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10c      	bne.n	8006d3a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	8a7b      	ldrh	r3, [r7, #18]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	3302      	adds	r3, #2
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	e00c      	b.n	8006d54 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	8a7b      	ldrh	r3, [r7, #18]
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	4013      	ands	r3, r2
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	3301      	adds	r3, #1
 8006d52:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1c6      	bne.n	8006d00 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2220      	movs	r2, #32
 8006d76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e000      	b.n	8006d7e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
  }
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3720      	adds	r7, #32
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	f640 030f 	movw	r3, #2063	; 0x80f
 8006dae:	4013      	ands	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d113      	bne.n	8006de0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00e      	beq.n	8006de0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d009      	beq.n	8006de0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f000 81b9 	beq.w	8007148 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	4798      	blx	r3
      }
      return;
 8006dde:	e1b3      	b.n	8007148 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80e3 	beq.w	8006fae <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d105      	bne.n	8006dfe <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	4ba5      	ldr	r3, [pc, #660]	; (800708c <HAL_UART_IRQHandler+0x304>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 80d8 	beq.w	8006fae <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d010      	beq.n	8006e2a <HAL_UART_IRQHandler+0xa2>
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2201      	movs	r2, #1
 8006e18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e20:	f043 0201 	orr.w	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d010      	beq.n	8006e56 <HAL_UART_IRQHandler+0xce>
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00b      	beq.n	8006e56 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2202      	movs	r2, #2
 8006e44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e4c:	f043 0204 	orr.w	r2, r3, #4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d010      	beq.n	8006e82 <HAL_UART_IRQHandler+0xfa>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e78:	f043 0202 	orr.w	r2, r3, #2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d015      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d104      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2208      	movs	r2, #8
 8006ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eae:	f043 0208 	orr.w	r2, r3, #8
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d011      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x15e>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00c      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006edc:	f043 0220 	orr.w	r2, r3, #32
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 812d 	beq.w	800714c <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	f003 0320 	and.w	r3, r3, #32
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00c      	beq.n	8006f16 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d004      	beq.n	8006f36 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d031      	beq.n	8006f9a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fce5 	bl	8007906 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f46:	2b40      	cmp	r3, #64	; 0x40
 8006f48:	d123      	bne.n	8006f92 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f58:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	4a4a      	ldr	r2, [pc, #296]	; (8007090 <HAL_UART_IRQHandler+0x308>)
 8006f68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fc fa29 	bl	80033c6 <HAL_DMA_Abort_IT>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d017      	beq.n	8006faa <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f88:	e00f      	b.n	8006faa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f8f2 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f90:	e00b      	b.n	8006faa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8ee 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f98:	e007      	b.n	8006faa <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f8ea 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006fa8:	e0d0      	b.n	800714c <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006faa:	bf00      	nop
    return;
 8006fac:	e0ce      	b.n	800714c <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	f040 80a7 	bne.w	8007106 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80a1 	beq.w	8007106 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 809b 	beq.w	8007106 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d156      	bne.n	8007094 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006ff0:	893b      	ldrh	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80ac 	beq.w	8007150 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ffe:	893a      	ldrh	r2, [r7, #8]
 8007000:	429a      	cmp	r2, r3
 8007002:	f080 80a5 	bcs.w	8007150 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	893a      	ldrh	r2, [r7, #8]
 800700a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007018:	d02a      	beq.n	8007070 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007028:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f022 0201 	bic.w	r2, r2, #1
 8007038:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007048:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0210 	bic.w	r2, r2, #16
 8007064:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706a:	4618      	mov	r0, r3
 800706c:	f7fc f93b 	bl	80032e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800707c:	b29b      	uxth	r3, r3
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	b29b      	uxth	r3, r3
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f87f 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800708a:	e061      	b.n	8007150 <HAL_UART_IRQHandler+0x3c8>
 800708c:	04000120 	.word	0x04000120
 8007090:	08007965 	.word	0x08007965
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d050      	beq.n	8007154 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 80070b2:	897b      	ldrh	r3, [r7, #10]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d04d      	beq.n	8007154 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0201 	bic.w	r2, r2, #1
 80070d6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 0210 	bic.w	r2, r2, #16
 80070f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070fa:	897b      	ldrh	r3, [r7, #10]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f842 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007104:	e026      	b.n	8007154 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00d      	beq.n	800712c <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d008      	beq.n	800712c <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01a      	beq.n	8007158 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
    }
    return;
 800712a:	e015      	b.n	8007158 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d011      	beq.n	800715a <HAL_UART_IRQHandler+0x3d2>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00c      	beq.n	800715a <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fc25 	bl	8007990 <UART_EndTransmit_IT>
    return;
 8007146:	e008      	b.n	800715a <HAL_UART_IRQHandler+0x3d2>
      return;
 8007148:	bf00      	nop
 800714a:	e006      	b.n	800715a <HAL_UART_IRQHandler+0x3d2>
    return;
 800714c:	bf00      	nop
 800714e:	e004      	b.n	800715a <HAL_UART_IRQHandler+0x3d2>
      return;
 8007150:	bf00      	nop
 8007152:	e002      	b.n	800715a <HAL_UART_IRQHandler+0x3d2>
      return;
 8007154:	bf00      	nop
 8007156:	e000      	b.n	800715a <HAL_UART_IRQHandler+0x3d2>
    return;
 8007158:	bf00      	nop
  }

}
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4ba7      	ldr	r3, [pc, #668]	; (8007468 <UART_SetConfig+0x2c8>)
 80071cc:	4013      	ands	r3, r2
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a95      	ldr	r2, [pc, #596]	; (800746c <UART_SetConfig+0x2cc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d120      	bne.n	800725e <UART_SetConfig+0xbe>
 800721c:	4b94      	ldr	r3, [pc, #592]	; (8007470 <UART_SetConfig+0x2d0>)
 800721e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b03      	cmp	r3, #3
 8007228:	d816      	bhi.n	8007258 <UART_SetConfig+0xb8>
 800722a:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <UART_SetConfig+0x90>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007241 	.word	0x08007241
 8007234:	0800724d 	.word	0x0800724d
 8007238:	08007247 	.word	0x08007247
 800723c:	08007253 	.word	0x08007253
 8007240:	2301      	movs	r3, #1
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e14f      	b.n	80074e6 <UART_SetConfig+0x346>
 8007246:	2302      	movs	r3, #2
 8007248:	77fb      	strb	r3, [r7, #31]
 800724a:	e14c      	b.n	80074e6 <UART_SetConfig+0x346>
 800724c:	2304      	movs	r3, #4
 800724e:	77fb      	strb	r3, [r7, #31]
 8007250:	e149      	b.n	80074e6 <UART_SetConfig+0x346>
 8007252:	2308      	movs	r3, #8
 8007254:	77fb      	strb	r3, [r7, #31]
 8007256:	e146      	b.n	80074e6 <UART_SetConfig+0x346>
 8007258:	2310      	movs	r3, #16
 800725a:	77fb      	strb	r3, [r7, #31]
 800725c:	e143      	b.n	80074e6 <UART_SetConfig+0x346>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a84      	ldr	r2, [pc, #528]	; (8007474 <UART_SetConfig+0x2d4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d132      	bne.n	80072ce <UART_SetConfig+0x12e>
 8007268:	4b81      	ldr	r3, [pc, #516]	; (8007470 <UART_SetConfig+0x2d0>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	f003 030c 	and.w	r3, r3, #12
 8007272:	2b0c      	cmp	r3, #12
 8007274:	d828      	bhi.n	80072c8 <UART_SetConfig+0x128>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0xdc>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072c9 	.word	0x080072c9
 8007288:	080072c9 	.word	0x080072c9
 800728c:	080072bd 	.word	0x080072bd
 8007290:	080072c9 	.word	0x080072c9
 8007294:	080072c9 	.word	0x080072c9
 8007298:	080072c9 	.word	0x080072c9
 800729c:	080072b7 	.word	0x080072b7
 80072a0:	080072c9 	.word	0x080072c9
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072c9 	.word	0x080072c9
 80072ac:	080072c3 	.word	0x080072c3
 80072b0:	2300      	movs	r3, #0
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e117      	b.n	80074e6 <UART_SetConfig+0x346>
 80072b6:	2302      	movs	r3, #2
 80072b8:	77fb      	strb	r3, [r7, #31]
 80072ba:	e114      	b.n	80074e6 <UART_SetConfig+0x346>
 80072bc:	2304      	movs	r3, #4
 80072be:	77fb      	strb	r3, [r7, #31]
 80072c0:	e111      	b.n	80074e6 <UART_SetConfig+0x346>
 80072c2:	2308      	movs	r3, #8
 80072c4:	77fb      	strb	r3, [r7, #31]
 80072c6:	e10e      	b.n	80074e6 <UART_SetConfig+0x346>
 80072c8:	2310      	movs	r3, #16
 80072ca:	77fb      	strb	r3, [r7, #31]
 80072cc:	e10b      	b.n	80074e6 <UART_SetConfig+0x346>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a69      	ldr	r2, [pc, #420]	; (8007478 <UART_SetConfig+0x2d8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d120      	bne.n	800731a <UART_SetConfig+0x17a>
 80072d8:	4b65      	ldr	r3, [pc, #404]	; (8007470 <UART_SetConfig+0x2d0>)
 80072da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072e2:	2b30      	cmp	r3, #48	; 0x30
 80072e4:	d013      	beq.n	800730e <UART_SetConfig+0x16e>
 80072e6:	2b30      	cmp	r3, #48	; 0x30
 80072e8:	d814      	bhi.n	8007314 <UART_SetConfig+0x174>
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d009      	beq.n	8007302 <UART_SetConfig+0x162>
 80072ee:	2b20      	cmp	r3, #32
 80072f0:	d810      	bhi.n	8007314 <UART_SetConfig+0x174>
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <UART_SetConfig+0x15c>
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d006      	beq.n	8007308 <UART_SetConfig+0x168>
 80072fa:	e00b      	b.n	8007314 <UART_SetConfig+0x174>
 80072fc:	2300      	movs	r3, #0
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e0f1      	b.n	80074e6 <UART_SetConfig+0x346>
 8007302:	2302      	movs	r3, #2
 8007304:	77fb      	strb	r3, [r7, #31]
 8007306:	e0ee      	b.n	80074e6 <UART_SetConfig+0x346>
 8007308:	2304      	movs	r3, #4
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e0eb      	b.n	80074e6 <UART_SetConfig+0x346>
 800730e:	2308      	movs	r3, #8
 8007310:	77fb      	strb	r3, [r7, #31]
 8007312:	e0e8      	b.n	80074e6 <UART_SetConfig+0x346>
 8007314:	2310      	movs	r3, #16
 8007316:	77fb      	strb	r3, [r7, #31]
 8007318:	e0e5      	b.n	80074e6 <UART_SetConfig+0x346>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a57      	ldr	r2, [pc, #348]	; (800747c <UART_SetConfig+0x2dc>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d120      	bne.n	8007366 <UART_SetConfig+0x1c6>
 8007324:	4b52      	ldr	r3, [pc, #328]	; (8007470 <UART_SetConfig+0x2d0>)
 8007326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800732a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800732e:	2bc0      	cmp	r3, #192	; 0xc0
 8007330:	d013      	beq.n	800735a <UART_SetConfig+0x1ba>
 8007332:	2bc0      	cmp	r3, #192	; 0xc0
 8007334:	d814      	bhi.n	8007360 <UART_SetConfig+0x1c0>
 8007336:	2b80      	cmp	r3, #128	; 0x80
 8007338:	d009      	beq.n	800734e <UART_SetConfig+0x1ae>
 800733a:	2b80      	cmp	r3, #128	; 0x80
 800733c:	d810      	bhi.n	8007360 <UART_SetConfig+0x1c0>
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <UART_SetConfig+0x1a8>
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d006      	beq.n	8007354 <UART_SetConfig+0x1b4>
 8007346:	e00b      	b.n	8007360 <UART_SetConfig+0x1c0>
 8007348:	2300      	movs	r3, #0
 800734a:	77fb      	strb	r3, [r7, #31]
 800734c:	e0cb      	b.n	80074e6 <UART_SetConfig+0x346>
 800734e:	2302      	movs	r3, #2
 8007350:	77fb      	strb	r3, [r7, #31]
 8007352:	e0c8      	b.n	80074e6 <UART_SetConfig+0x346>
 8007354:	2304      	movs	r3, #4
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e0c5      	b.n	80074e6 <UART_SetConfig+0x346>
 800735a:	2308      	movs	r3, #8
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e0c2      	b.n	80074e6 <UART_SetConfig+0x346>
 8007360:	2310      	movs	r3, #16
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e0bf      	b.n	80074e6 <UART_SetConfig+0x346>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a45      	ldr	r2, [pc, #276]	; (8007480 <UART_SetConfig+0x2e0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d125      	bne.n	80073bc <UART_SetConfig+0x21c>
 8007370:	4b3f      	ldr	r3, [pc, #252]	; (8007470 <UART_SetConfig+0x2d0>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800737a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800737e:	d017      	beq.n	80073b0 <UART_SetConfig+0x210>
 8007380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007384:	d817      	bhi.n	80073b6 <UART_SetConfig+0x216>
 8007386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800738a:	d00b      	beq.n	80073a4 <UART_SetConfig+0x204>
 800738c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007390:	d811      	bhi.n	80073b6 <UART_SetConfig+0x216>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <UART_SetConfig+0x1fe>
 8007396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739a:	d006      	beq.n	80073aa <UART_SetConfig+0x20a>
 800739c:	e00b      	b.n	80073b6 <UART_SetConfig+0x216>
 800739e:	2300      	movs	r3, #0
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e0a0      	b.n	80074e6 <UART_SetConfig+0x346>
 80073a4:	2302      	movs	r3, #2
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e09d      	b.n	80074e6 <UART_SetConfig+0x346>
 80073aa:	2304      	movs	r3, #4
 80073ac:	77fb      	strb	r3, [r7, #31]
 80073ae:	e09a      	b.n	80074e6 <UART_SetConfig+0x346>
 80073b0:	2308      	movs	r3, #8
 80073b2:	77fb      	strb	r3, [r7, #31]
 80073b4:	e097      	b.n	80074e6 <UART_SetConfig+0x346>
 80073b6:	2310      	movs	r3, #16
 80073b8:	77fb      	strb	r3, [r7, #31]
 80073ba:	e094      	b.n	80074e6 <UART_SetConfig+0x346>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a30      	ldr	r2, [pc, #192]	; (8007484 <UART_SetConfig+0x2e4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d125      	bne.n	8007412 <UART_SetConfig+0x272>
 80073c6:	4b2a      	ldr	r3, [pc, #168]	; (8007470 <UART_SetConfig+0x2d0>)
 80073c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073d4:	d017      	beq.n	8007406 <UART_SetConfig+0x266>
 80073d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073da:	d817      	bhi.n	800740c <UART_SetConfig+0x26c>
 80073dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e0:	d00b      	beq.n	80073fa <UART_SetConfig+0x25a>
 80073e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e6:	d811      	bhi.n	800740c <UART_SetConfig+0x26c>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <UART_SetConfig+0x254>
 80073ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f0:	d006      	beq.n	8007400 <UART_SetConfig+0x260>
 80073f2:	e00b      	b.n	800740c <UART_SetConfig+0x26c>
 80073f4:	2301      	movs	r3, #1
 80073f6:	77fb      	strb	r3, [r7, #31]
 80073f8:	e075      	b.n	80074e6 <UART_SetConfig+0x346>
 80073fa:	2302      	movs	r3, #2
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e072      	b.n	80074e6 <UART_SetConfig+0x346>
 8007400:	2304      	movs	r3, #4
 8007402:	77fb      	strb	r3, [r7, #31]
 8007404:	e06f      	b.n	80074e6 <UART_SetConfig+0x346>
 8007406:	2308      	movs	r3, #8
 8007408:	77fb      	strb	r3, [r7, #31]
 800740a:	e06c      	b.n	80074e6 <UART_SetConfig+0x346>
 800740c:	2310      	movs	r3, #16
 800740e:	77fb      	strb	r3, [r7, #31]
 8007410:	e069      	b.n	80074e6 <UART_SetConfig+0x346>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1c      	ldr	r2, [pc, #112]	; (8007488 <UART_SetConfig+0x2e8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d137      	bne.n	800748c <UART_SetConfig+0x2ec>
 800741c:	4b14      	ldr	r3, [pc, #80]	; (8007470 <UART_SetConfig+0x2d0>)
 800741e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007422:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007426:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800742a:	d017      	beq.n	800745c <UART_SetConfig+0x2bc>
 800742c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007430:	d817      	bhi.n	8007462 <UART_SetConfig+0x2c2>
 8007432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007436:	d00b      	beq.n	8007450 <UART_SetConfig+0x2b0>
 8007438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800743c:	d811      	bhi.n	8007462 <UART_SetConfig+0x2c2>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <UART_SetConfig+0x2aa>
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007446:	d006      	beq.n	8007456 <UART_SetConfig+0x2b6>
 8007448:	e00b      	b.n	8007462 <UART_SetConfig+0x2c2>
 800744a:	2300      	movs	r3, #0
 800744c:	77fb      	strb	r3, [r7, #31]
 800744e:	e04a      	b.n	80074e6 <UART_SetConfig+0x346>
 8007450:	2302      	movs	r3, #2
 8007452:	77fb      	strb	r3, [r7, #31]
 8007454:	e047      	b.n	80074e6 <UART_SetConfig+0x346>
 8007456:	2304      	movs	r3, #4
 8007458:	77fb      	strb	r3, [r7, #31]
 800745a:	e044      	b.n	80074e6 <UART_SetConfig+0x346>
 800745c:	2308      	movs	r3, #8
 800745e:	77fb      	strb	r3, [r7, #31]
 8007460:	e041      	b.n	80074e6 <UART_SetConfig+0x346>
 8007462:	2310      	movs	r3, #16
 8007464:	77fb      	strb	r3, [r7, #31]
 8007466:	e03e      	b.n	80074e6 <UART_SetConfig+0x346>
 8007468:	efff69f3 	.word	0xefff69f3
 800746c:	40011000 	.word	0x40011000
 8007470:	40023800 	.word	0x40023800
 8007474:	40004400 	.word	0x40004400
 8007478:	40004800 	.word	0x40004800
 800747c:	40004c00 	.word	0x40004c00
 8007480:	40005000 	.word	0x40005000
 8007484:	40011400 	.word	0x40011400
 8007488:	40007800 	.word	0x40007800
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a71      	ldr	r2, [pc, #452]	; (8007658 <UART_SetConfig+0x4b8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d125      	bne.n	80074e2 <UART_SetConfig+0x342>
 8007496:	4b71      	ldr	r3, [pc, #452]	; (800765c <UART_SetConfig+0x4bc>)
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074a4:	d017      	beq.n	80074d6 <UART_SetConfig+0x336>
 80074a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074aa:	d817      	bhi.n	80074dc <UART_SetConfig+0x33c>
 80074ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b0:	d00b      	beq.n	80074ca <UART_SetConfig+0x32a>
 80074b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b6:	d811      	bhi.n	80074dc <UART_SetConfig+0x33c>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <UART_SetConfig+0x324>
 80074bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c0:	d006      	beq.n	80074d0 <UART_SetConfig+0x330>
 80074c2:	e00b      	b.n	80074dc <UART_SetConfig+0x33c>
 80074c4:	2300      	movs	r3, #0
 80074c6:	77fb      	strb	r3, [r7, #31]
 80074c8:	e00d      	b.n	80074e6 <UART_SetConfig+0x346>
 80074ca:	2302      	movs	r3, #2
 80074cc:	77fb      	strb	r3, [r7, #31]
 80074ce:	e00a      	b.n	80074e6 <UART_SetConfig+0x346>
 80074d0:	2304      	movs	r3, #4
 80074d2:	77fb      	strb	r3, [r7, #31]
 80074d4:	e007      	b.n	80074e6 <UART_SetConfig+0x346>
 80074d6:	2308      	movs	r3, #8
 80074d8:	77fb      	strb	r3, [r7, #31]
 80074da:	e004      	b.n	80074e6 <UART_SetConfig+0x346>
 80074dc:	2310      	movs	r3, #16
 80074de:	77fb      	strb	r3, [r7, #31]
 80074e0:	e001      	b.n	80074e6 <UART_SetConfig+0x346>
 80074e2:	2310      	movs	r3, #16
 80074e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	d15b      	bne.n	80075a8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80074f0:	7ffb      	ldrb	r3, [r7, #31]
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d827      	bhi.n	8007546 <UART_SetConfig+0x3a6>
 80074f6:	a201      	add	r2, pc, #4	; (adr r2, 80074fc <UART_SetConfig+0x35c>)
 80074f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007529 	.word	0x08007529
 8007504:	08007531 	.word	0x08007531
 8007508:	08007547 	.word	0x08007547
 800750c:	08007537 	.word	0x08007537
 8007510:	08007547 	.word	0x08007547
 8007514:	08007547 	.word	0x08007547
 8007518:	08007547 	.word	0x08007547
 800751c:	0800753f 	.word	0x0800753f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007520:	f7fd fc1c 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 8007524:	61b8      	str	r0, [r7, #24]
        break;
 8007526:	e013      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fd fc2c 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 800752c:	61b8      	str	r0, [r7, #24]
        break;
 800752e:	e00f      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007530:	4b4b      	ldr	r3, [pc, #300]	; (8007660 <UART_SetConfig+0x4c0>)
 8007532:	61bb      	str	r3, [r7, #24]
        break;
 8007534:	e00c      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007536:	f7fd fb23 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 800753a:	61b8      	str	r0, [r7, #24]
        break;
 800753c:	e008      	b.n	8007550 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800753e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007542:	61bb      	str	r3, [r7, #24]
        break;
 8007544:	e004      	b.n	8007550 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	77bb      	strb	r3, [r7, #30]
        break;
 800754e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d074      	beq.n	8007640 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	005a      	lsls	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	441a      	add	r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	fbb2 f3f3 	udiv	r3, r2, r3
 800756a:	b29b      	uxth	r3, r3
 800756c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b0f      	cmp	r3, #15
 8007572:	d916      	bls.n	80075a2 <UART_SetConfig+0x402>
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757a:	d212      	bcs.n	80075a2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	b29b      	uxth	r3, r3
 8007580:	f023 030f 	bic.w	r3, r3, #15
 8007584:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	b29b      	uxth	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	b29a      	uxth	r2, r3
 8007592:	89fb      	ldrh	r3, [r7, #14]
 8007594:	4313      	orrs	r3, r2
 8007596:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	89fa      	ldrh	r2, [r7, #14]
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	e04e      	b.n	8007640 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	77bb      	strb	r3, [r7, #30]
 80075a6:	e04b      	b.n	8007640 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075a8:	7ffb      	ldrb	r3, [r7, #31]
 80075aa:	2b08      	cmp	r3, #8
 80075ac:	d827      	bhi.n	80075fe <UART_SetConfig+0x45e>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <UART_SetConfig+0x414>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075d9 	.word	0x080075d9
 80075b8:	080075e1 	.word	0x080075e1
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	080075ff 	.word	0x080075ff
 80075c4:	080075ef 	.word	0x080075ef
 80075c8:	080075ff 	.word	0x080075ff
 80075cc:	080075ff 	.word	0x080075ff
 80075d0:	080075ff 	.word	0x080075ff
 80075d4:	080075f7 	.word	0x080075f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075d8:	f7fd fbc0 	bl	8004d5c <HAL_RCC_GetPCLK1Freq>
 80075dc:	61b8      	str	r0, [r7, #24]
        break;
 80075de:	e013      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075e0:	f7fd fbd0 	bl	8004d84 <HAL_RCC_GetPCLK2Freq>
 80075e4:	61b8      	str	r0, [r7, #24]
        break;
 80075e6:	e00f      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075e8:	4b1d      	ldr	r3, [pc, #116]	; (8007660 <UART_SetConfig+0x4c0>)
 80075ea:	61bb      	str	r3, [r7, #24]
        break;
 80075ec:	e00c      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075ee:	f7fd fac7 	bl	8004b80 <HAL_RCC_GetSysClockFreq>
 80075f2:	61b8      	str	r0, [r7, #24]
        break;
 80075f4:	e008      	b.n	8007608 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fa:	61bb      	str	r3, [r7, #24]
        break;
 80075fc:	e004      	b.n	8007608 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	77bb      	strb	r3, [r7, #30]
        break;
 8007606:	bf00      	nop
    }

    if (pclk != 0U)
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d018      	beq.n	8007640 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	085a      	lsrs	r2, r3, #1
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	441a      	add	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007620:	b29b      	uxth	r3, r3
 8007622:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	2b0f      	cmp	r3, #15
 8007628:	d908      	bls.n	800763c <UART_SetConfig+0x49c>
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007630:	d204      	bcs.n	800763c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	693a      	ldr	r2, [r7, #16]
 8007638:	60da      	str	r2, [r3, #12]
 800763a:	e001      	b.n	8007640 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800764c:	7fbb      	ldrb	r3, [r7, #30]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40007c00 	.word	0x40007c00
 800765c:	40023800 	.word	0x40023800
 8007660:	00f42400 	.word	0x00f42400

08007664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	430a      	orrs	r2, r1
 80076f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	f003 0320 	and.w	r3, r3, #32
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01a      	beq.n	800777a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007762:	d10a      	bne.n	800777a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
  }
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077b8:	f7fb f866 	bl	8002888 <HAL_GetTick>
 80077bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d10e      	bne.n	80077ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f817 	bl	800780e <UART_WaitOnFlagUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e00d      	b.n	8007806 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	603b      	str	r3, [r7, #0]
 800781a:	4613      	mov	r3, r2
 800781c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781e:	e05e      	b.n	80078de <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007826:	d05a      	beq.n	80078de <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007828:	f7fb f82e 	bl	8002888 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	429a      	cmp	r2, r3
 8007836:	d302      	bcc.n	800783e <UART_WaitOnFlagUntilTimeout+0x30>
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d11b      	bne.n	8007876 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800784c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0201 	bic.w	r2, r2, #1
 800785c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e043      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d02c      	beq.n	80078de <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007892:	d124      	bne.n	80078de <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800789c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689a      	ldr	r2, [r3, #8]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f022 0201 	bic.w	r2, r2, #1
 80078bc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2220      	movs	r2, #32
 80078ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e00f      	b.n	80078fe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	69da      	ldr	r2, [r3, #28]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4013      	ands	r3, r2
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d091      	beq.n	8007820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800791c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0201 	bic.w	r2, r2, #1
 800792c:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007932:	2b01      	cmp	r3, #1
 8007934:	d107      	bne.n	8007946 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0210 	bic.w	r2, r2, #16
 8007944:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007970:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f7ff fbf6 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2220      	movs	r2, #32
 80079ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff fbd3 	bl	8007160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079c4:	b084      	sub	sp, #16
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	f107 001c 	add.w	r0, r7, #28
 80079d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d120      	bne.n	8007a1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <USB_CoreInit+0xac>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d105      	bne.n	8007a12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa5a 	bl	8007ecc <USB_CoreReset>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e010      	b.n	8007a40 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa4e 	bl	8007ecc <USB_CoreReset>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10b      	bne.n	8007a5e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f043 0206 	orr.w	r2, r3, #6
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f043 0220 	orr.w	r2, r3, #32
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a6a:	b004      	add	sp, #16
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	ffbdffbf 	.word	0xffbdffbf

08007a74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	f023 0201 	bic.w	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007aae:	78fb      	ldrb	r3, [r7, #3]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d106      	bne.n	8007ac2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60da      	str	r2, [r3, #12]
 8007ac0:	e00b      	b.n	8007ada <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	e001      	b.n	8007ada <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e003      	b.n	8007ae2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ada:	2032      	movs	r0, #50	; 0x32
 8007adc:	f7fa fee0 	bl	80028a0 <HAL_Delay>

  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007aec:	b084      	sub	sp, #16
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b086      	sub	sp, #24
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	e009      	b.n	8007b20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	3340      	adds	r3, #64	; 0x40
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	2200      	movs	r2, #0
 8007b18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	2b0e      	cmp	r3, #14
 8007b24:	d9f2      	bls.n	8007b0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d11c      	bne.n	8007b66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b3a:	f043 0302 	orr.w	r3, r3, #2
 8007b3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e005      	b.n	8007b72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b84:	4619      	mov	r1, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	680b      	ldr	r3, [r1, #0]
 8007b90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d10c      	bne.n	8007bb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d104      	bne.n	8007ba8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f959 	bl	8007e58 <USB_SetDevSpeed>
 8007ba6:	e018      	b.n	8007bda <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ba8:	2101      	movs	r1, #1
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f954 	bl	8007e58 <USB_SetDevSpeed>
 8007bb0:	e013      	b.n	8007bda <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d10c      	bne.n	8007bd2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d104      	bne.n	8007bc8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f949 	bl	8007e58 <USB_SetDevSpeed>
 8007bc6:	e008      	b.n	8007bda <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bc8:	2101      	movs	r1, #1
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f944 	bl	8007e58 <USB_SetDevSpeed>
 8007bd0:	e003      	b.n	8007bda <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bd2:	2103      	movs	r1, #3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f93f 	bl	8007e58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007bda:	2110      	movs	r1, #16
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f8f3 	bl	8007dc8 <USB_FlushTxFifo>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f911 	bl	8007e14 <USB_FlushRxFifo>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c02:	461a      	mov	r2, r3
 8007c04:	2300      	movs	r3, #0
 8007c06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c0e:	461a      	mov	r2, r3
 8007c10:	2300      	movs	r3, #0
 8007c12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c20:	2300      	movs	r3, #0
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	e043      	b.n	8007cae <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c3c:	d118      	bne.n	8007c70 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	461a      	mov	r2, r3
 8007c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e013      	b.n	8007c82 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c66:	461a      	mov	r2, r3
 8007c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	e008      	b.n	8007c82 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8e:	461a      	mov	r2, r3
 8007c90:	2300      	movs	r3, #0
 8007c92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	015a      	lsls	r2, r3, #5
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3301      	adds	r3, #1
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d3b7      	bcc.n	8007c26 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
 8007cba:	e043      	b.n	8007d44 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	015a      	lsls	r2, r3, #5
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cd2:	d118      	bne.n	8007d06 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e013      	b.n	8007d18 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	e008      	b.n	8007d18 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d12:	461a      	mov	r2, r3
 8007d14:	2300      	movs	r3, #0
 8007d16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d24:	461a      	mov	r2, r3
 8007d26:	2300      	movs	r3, #0
 8007d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	461a      	mov	r2, r3
 8007d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	3301      	adds	r3, #1
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d3b7      	bcc.n	8007cbc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007d6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f043 0210 	orr.w	r2, r3, #16
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699a      	ldr	r2, [r3, #24]
 8007d84:	4b0e      	ldr	r3, [pc, #56]	; (8007dc0 <USB_DevInit+0x2d4>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	f043 0208 	orr.w	r2, r3, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d105      	bne.n	8007db0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699a      	ldr	r2, [r3, #24]
 8007da8:	4b06      	ldr	r3, [pc, #24]	; (8007dc4 <USB_DevInit+0x2d8>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3718      	adds	r7, #24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dbc:	b004      	add	sp, #16
 8007dbe:	4770      	bx	lr
 8007dc0:	803c3800 	.word	0x803c3800
 8007dc4:	40000004 	.word	0x40000004

08007dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	019b      	lsls	r3, r3, #6
 8007dda:	f043 0220 	orr.w	r2, r3, #32
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	3301      	adds	r3, #1
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <USB_FlushTxFifo+0x48>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d901      	bls.n	8007df4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e006      	b.n	8007e02 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d0f0      	beq.n	8007de2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	00030d40 	.word	0x00030d40

08007e14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2210      	movs	r2, #16
 8007e24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <USB_FlushRxFifo+0x40>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d901      	bls.n	8007e38 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e006      	b.n	8007e46 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d0f0      	beq.n	8007e26 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	00030d40 	.word	0x00030d40

08007e58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b085      	sub	sp, #20
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ea4:	f023 0303 	bic.w	r3, r3, #3
 8007ea8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eb8:	f043 0302 	orr.w	r3, r3, #2
 8007ebc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ebe:	2300      	movs	r3, #0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3301      	adds	r3, #1
 8007edc:	60fb      	str	r3, [r7, #12]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4a13      	ldr	r2, [pc, #76]	; (8007f30 <USB_CoreReset+0x64>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d901      	bls.n	8007eea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ee6:	2303      	movs	r3, #3
 8007ee8:	e01b      	b.n	8007f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	daf2      	bge.n	8007ed8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f043 0201 	orr.w	r2, r3, #1
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	3301      	adds	r3, #1
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <USB_CoreReset+0x64>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d901      	bls.n	8007f14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e006      	b.n	8007f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d0f0      	beq.n	8007f02 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	00030d40 	.word	0x00030d40

08007f34 <__errno>:
 8007f34:	4b01      	ldr	r3, [pc, #4]	; (8007f3c <__errno+0x8>)
 8007f36:	6818      	ldr	r0, [r3, #0]
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20000074 	.word	0x20000074

08007f40 <__libc_init_array>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	4d0d      	ldr	r5, [pc, #52]	; (8007f78 <__libc_init_array+0x38>)
 8007f44:	4c0d      	ldr	r4, [pc, #52]	; (8007f7c <__libc_init_array+0x3c>)
 8007f46:	1b64      	subs	r4, r4, r5
 8007f48:	10a4      	asrs	r4, r4, #2
 8007f4a:	2600      	movs	r6, #0
 8007f4c:	42a6      	cmp	r6, r4
 8007f4e:	d109      	bne.n	8007f64 <__libc_init_array+0x24>
 8007f50:	4d0b      	ldr	r5, [pc, #44]	; (8007f80 <__libc_init_array+0x40>)
 8007f52:	4c0c      	ldr	r4, [pc, #48]	; (8007f84 <__libc_init_array+0x44>)
 8007f54:	f005 f8ba 	bl	800d0cc <_init>
 8007f58:	1b64      	subs	r4, r4, r5
 8007f5a:	10a4      	asrs	r4, r4, #2
 8007f5c:	2600      	movs	r6, #0
 8007f5e:	42a6      	cmp	r6, r4
 8007f60:	d105      	bne.n	8007f6e <__libc_init_array+0x2e>
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f68:	4798      	blx	r3
 8007f6a:	3601      	adds	r6, #1
 8007f6c:	e7ee      	b.n	8007f4c <__libc_init_array+0xc>
 8007f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f72:	4798      	blx	r3
 8007f74:	3601      	adds	r6, #1
 8007f76:	e7f2      	b.n	8007f5e <__libc_init_array+0x1e>
 8007f78:	0800d60c 	.word	0x0800d60c
 8007f7c:	0800d60c 	.word	0x0800d60c
 8007f80:	0800d60c 	.word	0x0800d60c
 8007f84:	0800d610 	.word	0x0800d610

08007f88 <memset>:
 8007f88:	4402      	add	r2, r0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d100      	bne.n	8007f92 <memset+0xa>
 8007f90:	4770      	bx	lr
 8007f92:	f803 1b01 	strb.w	r1, [r3], #1
 8007f96:	e7f9      	b.n	8007f8c <memset+0x4>

08007f98 <__cvt>:
 8007f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	ec55 4b10 	vmov	r4, r5, d0
 8007fa0:	2d00      	cmp	r5, #0
 8007fa2:	460e      	mov	r6, r1
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	bfbb      	ittet	lt
 8007faa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fae:	461d      	movlt	r5, r3
 8007fb0:	2300      	movge	r3, #0
 8007fb2:	232d      	movlt	r3, #45	; 0x2d
 8007fb4:	700b      	strb	r3, [r1, #0]
 8007fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fbc:	4691      	mov	r9, r2
 8007fbe:	f023 0820 	bic.w	r8, r3, #32
 8007fc2:	bfbc      	itt	lt
 8007fc4:	4622      	movlt	r2, r4
 8007fc6:	4614      	movlt	r4, r2
 8007fc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fcc:	d005      	beq.n	8007fda <__cvt+0x42>
 8007fce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fd2:	d100      	bne.n	8007fd6 <__cvt+0x3e>
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	2102      	movs	r1, #2
 8007fd8:	e000      	b.n	8007fdc <__cvt+0x44>
 8007fda:	2103      	movs	r1, #3
 8007fdc:	ab03      	add	r3, sp, #12
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	ab02      	add	r3, sp, #8
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	ec45 4b10 	vmov	d0, r4, r5
 8007fe8:	4653      	mov	r3, sl
 8007fea:	4632      	mov	r2, r6
 8007fec:	f001 fe80 	bl	8009cf0 <_dtoa_r>
 8007ff0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ff4:	4607      	mov	r7, r0
 8007ff6:	d102      	bne.n	8007ffe <__cvt+0x66>
 8007ff8:	f019 0f01 	tst.w	r9, #1
 8007ffc:	d022      	beq.n	8008044 <__cvt+0xac>
 8007ffe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008002:	eb07 0906 	add.w	r9, r7, r6
 8008006:	d110      	bne.n	800802a <__cvt+0x92>
 8008008:	783b      	ldrb	r3, [r7, #0]
 800800a:	2b30      	cmp	r3, #48	; 0x30
 800800c:	d10a      	bne.n	8008024 <__cvt+0x8c>
 800800e:	2200      	movs	r2, #0
 8008010:	2300      	movs	r3, #0
 8008012:	4620      	mov	r0, r4
 8008014:	4629      	mov	r1, r5
 8008016:	f7f8 fd87 	bl	8000b28 <__aeabi_dcmpeq>
 800801a:	b918      	cbnz	r0, 8008024 <__cvt+0x8c>
 800801c:	f1c6 0601 	rsb	r6, r6, #1
 8008020:	f8ca 6000 	str.w	r6, [sl]
 8008024:	f8da 3000 	ldr.w	r3, [sl]
 8008028:	4499      	add	r9, r3
 800802a:	2200      	movs	r2, #0
 800802c:	2300      	movs	r3, #0
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fd79 	bl	8000b28 <__aeabi_dcmpeq>
 8008036:	b108      	cbz	r0, 800803c <__cvt+0xa4>
 8008038:	f8cd 900c 	str.w	r9, [sp, #12]
 800803c:	2230      	movs	r2, #48	; 0x30
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	454b      	cmp	r3, r9
 8008042:	d307      	bcc.n	8008054 <__cvt+0xbc>
 8008044:	9b03      	ldr	r3, [sp, #12]
 8008046:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008048:	1bdb      	subs	r3, r3, r7
 800804a:	4638      	mov	r0, r7
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	b004      	add	sp, #16
 8008050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008054:	1c59      	adds	r1, r3, #1
 8008056:	9103      	str	r1, [sp, #12]
 8008058:	701a      	strb	r2, [r3, #0]
 800805a:	e7f0      	b.n	800803e <__cvt+0xa6>

0800805c <__exponent>:
 800805c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800805e:	4603      	mov	r3, r0
 8008060:	2900      	cmp	r1, #0
 8008062:	bfb8      	it	lt
 8008064:	4249      	neglt	r1, r1
 8008066:	f803 2b02 	strb.w	r2, [r3], #2
 800806a:	bfb4      	ite	lt
 800806c:	222d      	movlt	r2, #45	; 0x2d
 800806e:	222b      	movge	r2, #43	; 0x2b
 8008070:	2909      	cmp	r1, #9
 8008072:	7042      	strb	r2, [r0, #1]
 8008074:	dd2a      	ble.n	80080cc <__exponent+0x70>
 8008076:	f10d 0407 	add.w	r4, sp, #7
 800807a:	46a4      	mov	ip, r4
 800807c:	270a      	movs	r7, #10
 800807e:	46a6      	mov	lr, r4
 8008080:	460a      	mov	r2, r1
 8008082:	fb91 f6f7 	sdiv	r6, r1, r7
 8008086:	fb07 1516 	mls	r5, r7, r6, r1
 800808a:	3530      	adds	r5, #48	; 0x30
 800808c:	2a63      	cmp	r2, #99	; 0x63
 800808e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008092:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008096:	4631      	mov	r1, r6
 8008098:	dcf1      	bgt.n	800807e <__exponent+0x22>
 800809a:	3130      	adds	r1, #48	; 0x30
 800809c:	f1ae 0502 	sub.w	r5, lr, #2
 80080a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080a4:	1c44      	adds	r4, r0, #1
 80080a6:	4629      	mov	r1, r5
 80080a8:	4561      	cmp	r1, ip
 80080aa:	d30a      	bcc.n	80080c2 <__exponent+0x66>
 80080ac:	f10d 0209 	add.w	r2, sp, #9
 80080b0:	eba2 020e 	sub.w	r2, r2, lr
 80080b4:	4565      	cmp	r5, ip
 80080b6:	bf88      	it	hi
 80080b8:	2200      	movhi	r2, #0
 80080ba:	4413      	add	r3, r2
 80080bc:	1a18      	subs	r0, r3, r0
 80080be:	b003      	add	sp, #12
 80080c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080ca:	e7ed      	b.n	80080a8 <__exponent+0x4c>
 80080cc:	2330      	movs	r3, #48	; 0x30
 80080ce:	3130      	adds	r1, #48	; 0x30
 80080d0:	7083      	strb	r3, [r0, #2]
 80080d2:	70c1      	strb	r1, [r0, #3]
 80080d4:	1d03      	adds	r3, r0, #4
 80080d6:	e7f1      	b.n	80080bc <__exponent+0x60>

080080d8 <_printf_float>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	ed2d 8b02 	vpush	{d8}
 80080e0:	b08d      	sub	sp, #52	; 0x34
 80080e2:	460c      	mov	r4, r1
 80080e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080e8:	4616      	mov	r6, r2
 80080ea:	461f      	mov	r7, r3
 80080ec:	4605      	mov	r5, r0
 80080ee:	f003 f84f 	bl	800b190 <_localeconv_r>
 80080f2:	f8d0 a000 	ldr.w	sl, [r0]
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7f8 f894 	bl	8000224 <strlen>
 80080fc:	2300      	movs	r3, #0
 80080fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8d8 3000 	ldr.w	r3, [r8]
 8008108:	f894 b018 	ldrb.w	fp, [r4, #24]
 800810c:	3307      	adds	r3, #7
 800810e:	f023 0307 	bic.w	r3, r3, #7
 8008112:	f103 0208 	add.w	r2, r3, #8
 8008116:	f8c8 2000 	str.w	r2, [r8]
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008122:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008126:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800812a:	9307      	str	r3, [sp, #28]
 800812c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008130:	ee08 0a10 	vmov	s16, r0
 8008134:	4b9f      	ldr	r3, [pc, #636]	; (80083b4 <_printf_float+0x2dc>)
 8008136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800813a:	f04f 32ff 	mov.w	r2, #4294967295
 800813e:	f7f8 fd25 	bl	8000b8c <__aeabi_dcmpun>
 8008142:	bb88      	cbnz	r0, 80081a8 <_printf_float+0xd0>
 8008144:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008148:	4b9a      	ldr	r3, [pc, #616]	; (80083b4 <_printf_float+0x2dc>)
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	f7f8 fcff 	bl	8000b50 <__aeabi_dcmple>
 8008152:	bb48      	cbnz	r0, 80081a8 <_printf_float+0xd0>
 8008154:	2200      	movs	r2, #0
 8008156:	2300      	movs	r3, #0
 8008158:	4640      	mov	r0, r8
 800815a:	4649      	mov	r1, r9
 800815c:	f7f8 fcee 	bl	8000b3c <__aeabi_dcmplt>
 8008160:	b110      	cbz	r0, 8008168 <_printf_float+0x90>
 8008162:	232d      	movs	r3, #45	; 0x2d
 8008164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008168:	4b93      	ldr	r3, [pc, #588]	; (80083b8 <_printf_float+0x2e0>)
 800816a:	4894      	ldr	r0, [pc, #592]	; (80083bc <_printf_float+0x2e4>)
 800816c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008170:	bf94      	ite	ls
 8008172:	4698      	movls	r8, r3
 8008174:	4680      	movhi	r8, r0
 8008176:	2303      	movs	r3, #3
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	f023 0204 	bic.w	r2, r3, #4
 8008180:	6022      	str	r2, [r4, #0]
 8008182:	f04f 0900 	mov.w	r9, #0
 8008186:	9700      	str	r7, [sp, #0]
 8008188:	4633      	mov	r3, r6
 800818a:	aa0b      	add	r2, sp, #44	; 0x2c
 800818c:	4621      	mov	r1, r4
 800818e:	4628      	mov	r0, r5
 8008190:	f000 f9d8 	bl	8008544 <_printf_common>
 8008194:	3001      	adds	r0, #1
 8008196:	f040 8090 	bne.w	80082ba <_printf_float+0x1e2>
 800819a:	f04f 30ff 	mov.w	r0, #4294967295
 800819e:	b00d      	add	sp, #52	; 0x34
 80081a0:	ecbd 8b02 	vpop	{d8}
 80081a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a8:	4642      	mov	r2, r8
 80081aa:	464b      	mov	r3, r9
 80081ac:	4640      	mov	r0, r8
 80081ae:	4649      	mov	r1, r9
 80081b0:	f7f8 fcec 	bl	8000b8c <__aeabi_dcmpun>
 80081b4:	b140      	cbz	r0, 80081c8 <_printf_float+0xf0>
 80081b6:	464b      	mov	r3, r9
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	bfbc      	itt	lt
 80081bc:	232d      	movlt	r3, #45	; 0x2d
 80081be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081c2:	487f      	ldr	r0, [pc, #508]	; (80083c0 <_printf_float+0x2e8>)
 80081c4:	4b7f      	ldr	r3, [pc, #508]	; (80083c4 <_printf_float+0x2ec>)
 80081c6:	e7d1      	b.n	800816c <_printf_float+0x94>
 80081c8:	6863      	ldr	r3, [r4, #4]
 80081ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081ce:	9206      	str	r2, [sp, #24]
 80081d0:	1c5a      	adds	r2, r3, #1
 80081d2:	d13f      	bne.n	8008254 <_printf_float+0x17c>
 80081d4:	2306      	movs	r3, #6
 80081d6:	6063      	str	r3, [r4, #4]
 80081d8:	9b05      	ldr	r3, [sp, #20]
 80081da:	6861      	ldr	r1, [r4, #4]
 80081dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081e0:	2300      	movs	r3, #0
 80081e2:	9303      	str	r3, [sp, #12]
 80081e4:	ab0a      	add	r3, sp, #40	; 0x28
 80081e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80081ea:	ab09      	add	r3, sp, #36	; 0x24
 80081ec:	ec49 8b10 	vmov	d0, r8, r9
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	6022      	str	r2, [r4, #0]
 80081f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081f8:	4628      	mov	r0, r5
 80081fa:	f7ff fecd 	bl	8007f98 <__cvt>
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008202:	2b47      	cmp	r3, #71	; 0x47
 8008204:	4680      	mov	r8, r0
 8008206:	d108      	bne.n	800821a <_printf_float+0x142>
 8008208:	1cc8      	adds	r0, r1, #3
 800820a:	db02      	blt.n	8008212 <_printf_float+0x13a>
 800820c:	6863      	ldr	r3, [r4, #4]
 800820e:	4299      	cmp	r1, r3
 8008210:	dd41      	ble.n	8008296 <_printf_float+0x1be>
 8008212:	f1ab 0b02 	sub.w	fp, fp, #2
 8008216:	fa5f fb8b 	uxtb.w	fp, fp
 800821a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800821e:	d820      	bhi.n	8008262 <_printf_float+0x18a>
 8008220:	3901      	subs	r1, #1
 8008222:	465a      	mov	r2, fp
 8008224:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008228:	9109      	str	r1, [sp, #36]	; 0x24
 800822a:	f7ff ff17 	bl	800805c <__exponent>
 800822e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008230:	1813      	adds	r3, r2, r0
 8008232:	2a01      	cmp	r2, #1
 8008234:	4681      	mov	r9, r0
 8008236:	6123      	str	r3, [r4, #16]
 8008238:	dc02      	bgt.n	8008240 <_printf_float+0x168>
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	07d2      	lsls	r2, r2, #31
 800823e:	d501      	bpl.n	8008244 <_printf_float+0x16c>
 8008240:	3301      	adds	r3, #1
 8008242:	6123      	str	r3, [r4, #16]
 8008244:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008248:	2b00      	cmp	r3, #0
 800824a:	d09c      	beq.n	8008186 <_printf_float+0xae>
 800824c:	232d      	movs	r3, #45	; 0x2d
 800824e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008252:	e798      	b.n	8008186 <_printf_float+0xae>
 8008254:	9a06      	ldr	r2, [sp, #24]
 8008256:	2a47      	cmp	r2, #71	; 0x47
 8008258:	d1be      	bne.n	80081d8 <_printf_float+0x100>
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1bc      	bne.n	80081d8 <_printf_float+0x100>
 800825e:	2301      	movs	r3, #1
 8008260:	e7b9      	b.n	80081d6 <_printf_float+0xfe>
 8008262:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008266:	d118      	bne.n	800829a <_printf_float+0x1c2>
 8008268:	2900      	cmp	r1, #0
 800826a:	6863      	ldr	r3, [r4, #4]
 800826c:	dd0b      	ble.n	8008286 <_printf_float+0x1ae>
 800826e:	6121      	str	r1, [r4, #16]
 8008270:	b913      	cbnz	r3, 8008278 <_printf_float+0x1a0>
 8008272:	6822      	ldr	r2, [r4, #0]
 8008274:	07d0      	lsls	r0, r2, #31
 8008276:	d502      	bpl.n	800827e <_printf_float+0x1a6>
 8008278:	3301      	adds	r3, #1
 800827a:	440b      	add	r3, r1
 800827c:	6123      	str	r3, [r4, #16]
 800827e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008280:	f04f 0900 	mov.w	r9, #0
 8008284:	e7de      	b.n	8008244 <_printf_float+0x16c>
 8008286:	b913      	cbnz	r3, 800828e <_printf_float+0x1b6>
 8008288:	6822      	ldr	r2, [r4, #0]
 800828a:	07d2      	lsls	r2, r2, #31
 800828c:	d501      	bpl.n	8008292 <_printf_float+0x1ba>
 800828e:	3302      	adds	r3, #2
 8008290:	e7f4      	b.n	800827c <_printf_float+0x1a4>
 8008292:	2301      	movs	r3, #1
 8008294:	e7f2      	b.n	800827c <_printf_float+0x1a4>
 8008296:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800829a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800829c:	4299      	cmp	r1, r3
 800829e:	db05      	blt.n	80082ac <_printf_float+0x1d4>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	6121      	str	r1, [r4, #16]
 80082a4:	07d8      	lsls	r0, r3, #31
 80082a6:	d5ea      	bpl.n	800827e <_printf_float+0x1a6>
 80082a8:	1c4b      	adds	r3, r1, #1
 80082aa:	e7e7      	b.n	800827c <_printf_float+0x1a4>
 80082ac:	2900      	cmp	r1, #0
 80082ae:	bfd4      	ite	le
 80082b0:	f1c1 0202 	rsble	r2, r1, #2
 80082b4:	2201      	movgt	r2, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	e7e0      	b.n	800827c <_printf_float+0x1a4>
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	055a      	lsls	r2, r3, #21
 80082be:	d407      	bmi.n	80082d0 <_printf_float+0x1f8>
 80082c0:	6923      	ldr	r3, [r4, #16]
 80082c2:	4642      	mov	r2, r8
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	47b8      	blx	r7
 80082ca:	3001      	adds	r0, #1
 80082cc:	d12c      	bne.n	8008328 <_printf_float+0x250>
 80082ce:	e764      	b.n	800819a <_printf_float+0xc2>
 80082d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082d4:	f240 80e0 	bls.w	8008498 <_printf_float+0x3c0>
 80082d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082dc:	2200      	movs	r2, #0
 80082de:	2300      	movs	r3, #0
 80082e0:	f7f8 fc22 	bl	8000b28 <__aeabi_dcmpeq>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d034      	beq.n	8008352 <_printf_float+0x27a>
 80082e8:	4a37      	ldr	r2, [pc, #220]	; (80083c8 <_printf_float+0x2f0>)
 80082ea:	2301      	movs	r3, #1
 80082ec:	4631      	mov	r1, r6
 80082ee:	4628      	mov	r0, r5
 80082f0:	47b8      	blx	r7
 80082f2:	3001      	adds	r0, #1
 80082f4:	f43f af51 	beq.w	800819a <_printf_float+0xc2>
 80082f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082fc:	429a      	cmp	r2, r3
 80082fe:	db02      	blt.n	8008306 <_printf_float+0x22e>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	07d8      	lsls	r0, r3, #31
 8008304:	d510      	bpl.n	8008328 <_printf_float+0x250>
 8008306:	ee18 3a10 	vmov	r3, s16
 800830a:	4652      	mov	r2, sl
 800830c:	4631      	mov	r1, r6
 800830e:	4628      	mov	r0, r5
 8008310:	47b8      	blx	r7
 8008312:	3001      	adds	r0, #1
 8008314:	f43f af41 	beq.w	800819a <_printf_float+0xc2>
 8008318:	f04f 0800 	mov.w	r8, #0
 800831c:	f104 091a 	add.w	r9, r4, #26
 8008320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008322:	3b01      	subs	r3, #1
 8008324:	4543      	cmp	r3, r8
 8008326:	dc09      	bgt.n	800833c <_printf_float+0x264>
 8008328:	6823      	ldr	r3, [r4, #0]
 800832a:	079b      	lsls	r3, r3, #30
 800832c:	f100 8105 	bmi.w	800853a <_printf_float+0x462>
 8008330:	68e0      	ldr	r0, [r4, #12]
 8008332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008334:	4298      	cmp	r0, r3
 8008336:	bfb8      	it	lt
 8008338:	4618      	movlt	r0, r3
 800833a:	e730      	b.n	800819e <_printf_float+0xc6>
 800833c:	2301      	movs	r3, #1
 800833e:	464a      	mov	r2, r9
 8008340:	4631      	mov	r1, r6
 8008342:	4628      	mov	r0, r5
 8008344:	47b8      	blx	r7
 8008346:	3001      	adds	r0, #1
 8008348:	f43f af27 	beq.w	800819a <_printf_float+0xc2>
 800834c:	f108 0801 	add.w	r8, r8, #1
 8008350:	e7e6      	b.n	8008320 <_printf_float+0x248>
 8008352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	dc39      	bgt.n	80083cc <_printf_float+0x2f4>
 8008358:	4a1b      	ldr	r2, [pc, #108]	; (80083c8 <_printf_float+0x2f0>)
 800835a:	2301      	movs	r3, #1
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f af19 	beq.w	800819a <_printf_float+0xc2>
 8008368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800836c:	4313      	orrs	r3, r2
 800836e:	d102      	bne.n	8008376 <_printf_float+0x29e>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	07d9      	lsls	r1, r3, #31
 8008374:	d5d8      	bpl.n	8008328 <_printf_float+0x250>
 8008376:	ee18 3a10 	vmov	r3, s16
 800837a:	4652      	mov	r2, sl
 800837c:	4631      	mov	r1, r6
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	f43f af09 	beq.w	800819a <_printf_float+0xc2>
 8008388:	f04f 0900 	mov.w	r9, #0
 800838c:	f104 0a1a 	add.w	sl, r4, #26
 8008390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008392:	425b      	negs	r3, r3
 8008394:	454b      	cmp	r3, r9
 8008396:	dc01      	bgt.n	800839c <_printf_float+0x2c4>
 8008398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800839a:	e792      	b.n	80082c2 <_printf_float+0x1ea>
 800839c:	2301      	movs	r3, #1
 800839e:	4652      	mov	r2, sl
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f aef7 	beq.w	800819a <_printf_float+0xc2>
 80083ac:	f109 0901 	add.w	r9, r9, #1
 80083b0:	e7ee      	b.n	8008390 <_printf_float+0x2b8>
 80083b2:	bf00      	nop
 80083b4:	7fefffff 	.word	0x7fefffff
 80083b8:	0800d13c 	.word	0x0800d13c
 80083bc:	0800d140 	.word	0x0800d140
 80083c0:	0800d148 	.word	0x0800d148
 80083c4:	0800d144 	.word	0x0800d144
 80083c8:	0800d5b1 	.word	0x0800d5b1
 80083cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083d0:	429a      	cmp	r2, r3
 80083d2:	bfa8      	it	ge
 80083d4:	461a      	movge	r2, r3
 80083d6:	2a00      	cmp	r2, #0
 80083d8:	4691      	mov	r9, r2
 80083da:	dc37      	bgt.n	800844c <_printf_float+0x374>
 80083dc:	f04f 0b00 	mov.w	fp, #0
 80083e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e4:	f104 021a 	add.w	r2, r4, #26
 80083e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	eba3 0309 	sub.w	r3, r3, r9
 80083f0:	455b      	cmp	r3, fp
 80083f2:	dc33      	bgt.n	800845c <_printf_float+0x384>
 80083f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f8:	429a      	cmp	r2, r3
 80083fa:	db3b      	blt.n	8008474 <_printf_float+0x39c>
 80083fc:	6823      	ldr	r3, [r4, #0]
 80083fe:	07da      	lsls	r2, r3, #31
 8008400:	d438      	bmi.n	8008474 <_printf_float+0x39c>
 8008402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008404:	9b05      	ldr	r3, [sp, #20]
 8008406:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	eba2 0901 	sub.w	r9, r2, r1
 800840e:	4599      	cmp	r9, r3
 8008410:	bfa8      	it	ge
 8008412:	4699      	movge	r9, r3
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	dc35      	bgt.n	8008486 <_printf_float+0x3ae>
 800841a:	f04f 0800 	mov.w	r8, #0
 800841e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008422:	f104 0a1a 	add.w	sl, r4, #26
 8008426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800842a:	1a9b      	subs	r3, r3, r2
 800842c:	eba3 0309 	sub.w	r3, r3, r9
 8008430:	4543      	cmp	r3, r8
 8008432:	f77f af79 	ble.w	8008328 <_printf_float+0x250>
 8008436:	2301      	movs	r3, #1
 8008438:	4652      	mov	r2, sl
 800843a:	4631      	mov	r1, r6
 800843c:	4628      	mov	r0, r5
 800843e:	47b8      	blx	r7
 8008440:	3001      	adds	r0, #1
 8008442:	f43f aeaa 	beq.w	800819a <_printf_float+0xc2>
 8008446:	f108 0801 	add.w	r8, r8, #1
 800844a:	e7ec      	b.n	8008426 <_printf_float+0x34e>
 800844c:	4613      	mov	r3, r2
 800844e:	4631      	mov	r1, r6
 8008450:	4642      	mov	r2, r8
 8008452:	4628      	mov	r0, r5
 8008454:	47b8      	blx	r7
 8008456:	3001      	adds	r0, #1
 8008458:	d1c0      	bne.n	80083dc <_printf_float+0x304>
 800845a:	e69e      	b.n	800819a <_printf_float+0xc2>
 800845c:	2301      	movs	r3, #1
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	9205      	str	r2, [sp, #20]
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f ae97 	beq.w	800819a <_printf_float+0xc2>
 800846c:	9a05      	ldr	r2, [sp, #20]
 800846e:	f10b 0b01 	add.w	fp, fp, #1
 8008472:	e7b9      	b.n	80083e8 <_printf_float+0x310>
 8008474:	ee18 3a10 	vmov	r3, s16
 8008478:	4652      	mov	r2, sl
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	47b8      	blx	r7
 8008480:	3001      	adds	r0, #1
 8008482:	d1be      	bne.n	8008402 <_printf_float+0x32a>
 8008484:	e689      	b.n	800819a <_printf_float+0xc2>
 8008486:	9a05      	ldr	r2, [sp, #20]
 8008488:	464b      	mov	r3, r9
 800848a:	4442      	add	r2, r8
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	d1c1      	bne.n	800841a <_printf_float+0x342>
 8008496:	e680      	b.n	800819a <_printf_float+0xc2>
 8008498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800849a:	2a01      	cmp	r2, #1
 800849c:	dc01      	bgt.n	80084a2 <_printf_float+0x3ca>
 800849e:	07db      	lsls	r3, r3, #31
 80084a0:	d538      	bpl.n	8008514 <_printf_float+0x43c>
 80084a2:	2301      	movs	r3, #1
 80084a4:	4642      	mov	r2, r8
 80084a6:	4631      	mov	r1, r6
 80084a8:	4628      	mov	r0, r5
 80084aa:	47b8      	blx	r7
 80084ac:	3001      	adds	r0, #1
 80084ae:	f43f ae74 	beq.w	800819a <_printf_float+0xc2>
 80084b2:	ee18 3a10 	vmov	r3, s16
 80084b6:	4652      	mov	r2, sl
 80084b8:	4631      	mov	r1, r6
 80084ba:	4628      	mov	r0, r5
 80084bc:	47b8      	blx	r7
 80084be:	3001      	adds	r0, #1
 80084c0:	f43f ae6b 	beq.w	800819a <_printf_float+0xc2>
 80084c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084c8:	2200      	movs	r2, #0
 80084ca:	2300      	movs	r3, #0
 80084cc:	f7f8 fb2c 	bl	8000b28 <__aeabi_dcmpeq>
 80084d0:	b9d8      	cbnz	r0, 800850a <_printf_float+0x432>
 80084d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d4:	f108 0201 	add.w	r2, r8, #1
 80084d8:	3b01      	subs	r3, #1
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	d10e      	bne.n	8008502 <_printf_float+0x42a>
 80084e4:	e659      	b.n	800819a <_printf_float+0xc2>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4652      	mov	r2, sl
 80084ea:	4631      	mov	r1, r6
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	f43f ae52 	beq.w	800819a <_printf_float+0xc2>
 80084f6:	f108 0801 	add.w	r8, r8, #1
 80084fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4543      	cmp	r3, r8
 8008500:	dcf1      	bgt.n	80084e6 <_printf_float+0x40e>
 8008502:	464b      	mov	r3, r9
 8008504:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008508:	e6dc      	b.n	80082c4 <_printf_float+0x1ec>
 800850a:	f04f 0800 	mov.w	r8, #0
 800850e:	f104 0a1a 	add.w	sl, r4, #26
 8008512:	e7f2      	b.n	80084fa <_printf_float+0x422>
 8008514:	2301      	movs	r3, #1
 8008516:	4642      	mov	r2, r8
 8008518:	e7df      	b.n	80084da <_printf_float+0x402>
 800851a:	2301      	movs	r3, #1
 800851c:	464a      	mov	r2, r9
 800851e:	4631      	mov	r1, r6
 8008520:	4628      	mov	r0, r5
 8008522:	47b8      	blx	r7
 8008524:	3001      	adds	r0, #1
 8008526:	f43f ae38 	beq.w	800819a <_printf_float+0xc2>
 800852a:	f108 0801 	add.w	r8, r8, #1
 800852e:	68e3      	ldr	r3, [r4, #12]
 8008530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008532:	1a5b      	subs	r3, r3, r1
 8008534:	4543      	cmp	r3, r8
 8008536:	dcf0      	bgt.n	800851a <_printf_float+0x442>
 8008538:	e6fa      	b.n	8008330 <_printf_float+0x258>
 800853a:	f04f 0800 	mov.w	r8, #0
 800853e:	f104 0919 	add.w	r9, r4, #25
 8008542:	e7f4      	b.n	800852e <_printf_float+0x456>

08008544 <_printf_common>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	4616      	mov	r6, r2
 800854a:	4699      	mov	r9, r3
 800854c:	688a      	ldr	r2, [r1, #8]
 800854e:	690b      	ldr	r3, [r1, #16]
 8008550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008554:	4293      	cmp	r3, r2
 8008556:	bfb8      	it	lt
 8008558:	4613      	movlt	r3, r2
 800855a:	6033      	str	r3, [r6, #0]
 800855c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008560:	4607      	mov	r7, r0
 8008562:	460c      	mov	r4, r1
 8008564:	b10a      	cbz	r2, 800856a <_printf_common+0x26>
 8008566:	3301      	adds	r3, #1
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	0699      	lsls	r1, r3, #26
 800856e:	bf42      	ittt	mi
 8008570:	6833      	ldrmi	r3, [r6, #0]
 8008572:	3302      	addmi	r3, #2
 8008574:	6033      	strmi	r3, [r6, #0]
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	f015 0506 	ands.w	r5, r5, #6
 800857c:	d106      	bne.n	800858c <_printf_common+0x48>
 800857e:	f104 0a19 	add.w	sl, r4, #25
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	6832      	ldr	r2, [r6, #0]
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	42ab      	cmp	r3, r5
 800858a:	dc26      	bgt.n	80085da <_printf_common+0x96>
 800858c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008590:	1e13      	subs	r3, r2, #0
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	bf18      	it	ne
 8008596:	2301      	movne	r3, #1
 8008598:	0692      	lsls	r2, r2, #26
 800859a:	d42b      	bmi.n	80085f4 <_printf_common+0xb0>
 800859c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a0:	4649      	mov	r1, r9
 80085a2:	4638      	mov	r0, r7
 80085a4:	47c0      	blx	r8
 80085a6:	3001      	adds	r0, #1
 80085a8:	d01e      	beq.n	80085e8 <_printf_common+0xa4>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	68e5      	ldr	r5, [r4, #12]
 80085ae:	6832      	ldr	r2, [r6, #0]
 80085b0:	f003 0306 	and.w	r3, r3, #6
 80085b4:	2b04      	cmp	r3, #4
 80085b6:	bf08      	it	eq
 80085b8:	1aad      	subeq	r5, r5, r2
 80085ba:	68a3      	ldr	r3, [r4, #8]
 80085bc:	6922      	ldr	r2, [r4, #16]
 80085be:	bf0c      	ite	eq
 80085c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085c4:	2500      	movne	r5, #0
 80085c6:	4293      	cmp	r3, r2
 80085c8:	bfc4      	itt	gt
 80085ca:	1a9b      	subgt	r3, r3, r2
 80085cc:	18ed      	addgt	r5, r5, r3
 80085ce:	2600      	movs	r6, #0
 80085d0:	341a      	adds	r4, #26
 80085d2:	42b5      	cmp	r5, r6
 80085d4:	d11a      	bne.n	800860c <_printf_common+0xc8>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e008      	b.n	80085ec <_printf_common+0xa8>
 80085da:	2301      	movs	r3, #1
 80085dc:	4652      	mov	r2, sl
 80085de:	4649      	mov	r1, r9
 80085e0:	4638      	mov	r0, r7
 80085e2:	47c0      	blx	r8
 80085e4:	3001      	adds	r0, #1
 80085e6:	d103      	bne.n	80085f0 <_printf_common+0xac>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	3501      	adds	r5, #1
 80085f2:	e7c6      	b.n	8008582 <_printf_common+0x3e>
 80085f4:	18e1      	adds	r1, r4, r3
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	2030      	movs	r0, #48	; 0x30
 80085fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085fe:	4422      	add	r2, r4
 8008600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008608:	3302      	adds	r3, #2
 800860a:	e7c7      	b.n	800859c <_printf_common+0x58>
 800860c:	2301      	movs	r3, #1
 800860e:	4622      	mov	r2, r4
 8008610:	4649      	mov	r1, r9
 8008612:	4638      	mov	r0, r7
 8008614:	47c0      	blx	r8
 8008616:	3001      	adds	r0, #1
 8008618:	d0e6      	beq.n	80085e8 <_printf_common+0xa4>
 800861a:	3601      	adds	r6, #1
 800861c:	e7d9      	b.n	80085d2 <_printf_common+0x8e>
	...

08008620 <_printf_i>:
 8008620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	4691      	mov	r9, r2
 8008628:	7e27      	ldrb	r7, [r4, #24]
 800862a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800862c:	2f78      	cmp	r7, #120	; 0x78
 800862e:	4680      	mov	r8, r0
 8008630:	469a      	mov	sl, r3
 8008632:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008636:	d807      	bhi.n	8008648 <_printf_i+0x28>
 8008638:	2f62      	cmp	r7, #98	; 0x62
 800863a:	d80a      	bhi.n	8008652 <_printf_i+0x32>
 800863c:	2f00      	cmp	r7, #0
 800863e:	f000 80d8 	beq.w	80087f2 <_printf_i+0x1d2>
 8008642:	2f58      	cmp	r7, #88	; 0x58
 8008644:	f000 80a3 	beq.w	800878e <_printf_i+0x16e>
 8008648:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800864c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008650:	e03a      	b.n	80086c8 <_printf_i+0xa8>
 8008652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008656:	2b15      	cmp	r3, #21
 8008658:	d8f6      	bhi.n	8008648 <_printf_i+0x28>
 800865a:	a001      	add	r0, pc, #4	; (adr r0, 8008660 <_printf_i+0x40>)
 800865c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008660:	080086b9 	.word	0x080086b9
 8008664:	080086cd 	.word	0x080086cd
 8008668:	08008649 	.word	0x08008649
 800866c:	08008649 	.word	0x08008649
 8008670:	08008649 	.word	0x08008649
 8008674:	08008649 	.word	0x08008649
 8008678:	080086cd 	.word	0x080086cd
 800867c:	08008649 	.word	0x08008649
 8008680:	08008649 	.word	0x08008649
 8008684:	08008649 	.word	0x08008649
 8008688:	08008649 	.word	0x08008649
 800868c:	080087d9 	.word	0x080087d9
 8008690:	080086fd 	.word	0x080086fd
 8008694:	080087bb 	.word	0x080087bb
 8008698:	08008649 	.word	0x08008649
 800869c:	08008649 	.word	0x08008649
 80086a0:	080087fb 	.word	0x080087fb
 80086a4:	08008649 	.word	0x08008649
 80086a8:	080086fd 	.word	0x080086fd
 80086ac:	08008649 	.word	0x08008649
 80086b0:	08008649 	.word	0x08008649
 80086b4:	080087c3 	.word	0x080087c3
 80086b8:	680b      	ldr	r3, [r1, #0]
 80086ba:	1d1a      	adds	r2, r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	600a      	str	r2, [r1, #0]
 80086c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c8:	2301      	movs	r3, #1
 80086ca:	e0a3      	b.n	8008814 <_printf_i+0x1f4>
 80086cc:	6825      	ldr	r5, [r4, #0]
 80086ce:	6808      	ldr	r0, [r1, #0]
 80086d0:	062e      	lsls	r6, r5, #24
 80086d2:	f100 0304 	add.w	r3, r0, #4
 80086d6:	d50a      	bpl.n	80086ee <_printf_i+0xce>
 80086d8:	6805      	ldr	r5, [r0, #0]
 80086da:	600b      	str	r3, [r1, #0]
 80086dc:	2d00      	cmp	r5, #0
 80086de:	da03      	bge.n	80086e8 <_printf_i+0xc8>
 80086e0:	232d      	movs	r3, #45	; 0x2d
 80086e2:	426d      	negs	r5, r5
 80086e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e8:	485e      	ldr	r0, [pc, #376]	; (8008864 <_printf_i+0x244>)
 80086ea:	230a      	movs	r3, #10
 80086ec:	e019      	b.n	8008722 <_printf_i+0x102>
 80086ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80086f2:	6805      	ldr	r5, [r0, #0]
 80086f4:	600b      	str	r3, [r1, #0]
 80086f6:	bf18      	it	ne
 80086f8:	b22d      	sxthne	r5, r5
 80086fa:	e7ef      	b.n	80086dc <_printf_i+0xbc>
 80086fc:	680b      	ldr	r3, [r1, #0]
 80086fe:	6825      	ldr	r5, [r4, #0]
 8008700:	1d18      	adds	r0, r3, #4
 8008702:	6008      	str	r0, [r1, #0]
 8008704:	0628      	lsls	r0, r5, #24
 8008706:	d501      	bpl.n	800870c <_printf_i+0xec>
 8008708:	681d      	ldr	r5, [r3, #0]
 800870a:	e002      	b.n	8008712 <_printf_i+0xf2>
 800870c:	0669      	lsls	r1, r5, #25
 800870e:	d5fb      	bpl.n	8008708 <_printf_i+0xe8>
 8008710:	881d      	ldrh	r5, [r3, #0]
 8008712:	4854      	ldr	r0, [pc, #336]	; (8008864 <_printf_i+0x244>)
 8008714:	2f6f      	cmp	r7, #111	; 0x6f
 8008716:	bf0c      	ite	eq
 8008718:	2308      	moveq	r3, #8
 800871a:	230a      	movne	r3, #10
 800871c:	2100      	movs	r1, #0
 800871e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008722:	6866      	ldr	r6, [r4, #4]
 8008724:	60a6      	str	r6, [r4, #8]
 8008726:	2e00      	cmp	r6, #0
 8008728:	bfa2      	ittt	ge
 800872a:	6821      	ldrge	r1, [r4, #0]
 800872c:	f021 0104 	bicge.w	r1, r1, #4
 8008730:	6021      	strge	r1, [r4, #0]
 8008732:	b90d      	cbnz	r5, 8008738 <_printf_i+0x118>
 8008734:	2e00      	cmp	r6, #0
 8008736:	d04d      	beq.n	80087d4 <_printf_i+0x1b4>
 8008738:	4616      	mov	r6, r2
 800873a:	fbb5 f1f3 	udiv	r1, r5, r3
 800873e:	fb03 5711 	mls	r7, r3, r1, r5
 8008742:	5dc7      	ldrb	r7, [r0, r7]
 8008744:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008748:	462f      	mov	r7, r5
 800874a:	42bb      	cmp	r3, r7
 800874c:	460d      	mov	r5, r1
 800874e:	d9f4      	bls.n	800873a <_printf_i+0x11a>
 8008750:	2b08      	cmp	r3, #8
 8008752:	d10b      	bne.n	800876c <_printf_i+0x14c>
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	07df      	lsls	r7, r3, #31
 8008758:	d508      	bpl.n	800876c <_printf_i+0x14c>
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	6861      	ldr	r1, [r4, #4]
 800875e:	4299      	cmp	r1, r3
 8008760:	bfde      	ittt	le
 8008762:	2330      	movle	r3, #48	; 0x30
 8008764:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008768:	f106 36ff 	addle.w	r6, r6, #4294967295
 800876c:	1b92      	subs	r2, r2, r6
 800876e:	6122      	str	r2, [r4, #16]
 8008770:	f8cd a000 	str.w	sl, [sp]
 8008774:	464b      	mov	r3, r9
 8008776:	aa03      	add	r2, sp, #12
 8008778:	4621      	mov	r1, r4
 800877a:	4640      	mov	r0, r8
 800877c:	f7ff fee2 	bl	8008544 <_printf_common>
 8008780:	3001      	adds	r0, #1
 8008782:	d14c      	bne.n	800881e <_printf_i+0x1fe>
 8008784:	f04f 30ff 	mov.w	r0, #4294967295
 8008788:	b004      	add	sp, #16
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878e:	4835      	ldr	r0, [pc, #212]	; (8008864 <_printf_i+0x244>)
 8008790:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	680e      	ldr	r6, [r1, #0]
 8008798:	061f      	lsls	r7, r3, #24
 800879a:	f856 5b04 	ldr.w	r5, [r6], #4
 800879e:	600e      	str	r6, [r1, #0]
 80087a0:	d514      	bpl.n	80087cc <_printf_i+0x1ac>
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	bf44      	itt	mi
 80087a6:	f043 0320 	orrmi.w	r3, r3, #32
 80087aa:	6023      	strmi	r3, [r4, #0]
 80087ac:	b91d      	cbnz	r5, 80087b6 <_printf_i+0x196>
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	f023 0320 	bic.w	r3, r3, #32
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	2310      	movs	r3, #16
 80087b8:	e7b0      	b.n	800871c <_printf_i+0xfc>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	f043 0320 	orr.w	r3, r3, #32
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	2378      	movs	r3, #120	; 0x78
 80087c4:	4828      	ldr	r0, [pc, #160]	; (8008868 <_printf_i+0x248>)
 80087c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087ca:	e7e3      	b.n	8008794 <_printf_i+0x174>
 80087cc:	065e      	lsls	r6, r3, #25
 80087ce:	bf48      	it	mi
 80087d0:	b2ad      	uxthmi	r5, r5
 80087d2:	e7e6      	b.n	80087a2 <_printf_i+0x182>
 80087d4:	4616      	mov	r6, r2
 80087d6:	e7bb      	b.n	8008750 <_printf_i+0x130>
 80087d8:	680b      	ldr	r3, [r1, #0]
 80087da:	6826      	ldr	r6, [r4, #0]
 80087dc:	6960      	ldr	r0, [r4, #20]
 80087de:	1d1d      	adds	r5, r3, #4
 80087e0:	600d      	str	r5, [r1, #0]
 80087e2:	0635      	lsls	r5, r6, #24
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	d501      	bpl.n	80087ec <_printf_i+0x1cc>
 80087e8:	6018      	str	r0, [r3, #0]
 80087ea:	e002      	b.n	80087f2 <_printf_i+0x1d2>
 80087ec:	0671      	lsls	r1, r6, #25
 80087ee:	d5fb      	bpl.n	80087e8 <_printf_i+0x1c8>
 80087f0:	8018      	strh	r0, [r3, #0]
 80087f2:	2300      	movs	r3, #0
 80087f4:	6123      	str	r3, [r4, #16]
 80087f6:	4616      	mov	r6, r2
 80087f8:	e7ba      	b.n	8008770 <_printf_i+0x150>
 80087fa:	680b      	ldr	r3, [r1, #0]
 80087fc:	1d1a      	adds	r2, r3, #4
 80087fe:	600a      	str	r2, [r1, #0]
 8008800:	681e      	ldr	r6, [r3, #0]
 8008802:	6862      	ldr	r2, [r4, #4]
 8008804:	2100      	movs	r1, #0
 8008806:	4630      	mov	r0, r6
 8008808:	f7f7 fd1a 	bl	8000240 <memchr>
 800880c:	b108      	cbz	r0, 8008812 <_printf_i+0x1f2>
 800880e:	1b80      	subs	r0, r0, r6
 8008810:	6060      	str	r0, [r4, #4]
 8008812:	6863      	ldr	r3, [r4, #4]
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	2300      	movs	r3, #0
 8008818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881c:	e7a8      	b.n	8008770 <_printf_i+0x150>
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	4632      	mov	r2, r6
 8008822:	4649      	mov	r1, r9
 8008824:	4640      	mov	r0, r8
 8008826:	47d0      	blx	sl
 8008828:	3001      	adds	r0, #1
 800882a:	d0ab      	beq.n	8008784 <_printf_i+0x164>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	079b      	lsls	r3, r3, #30
 8008830:	d413      	bmi.n	800885a <_printf_i+0x23a>
 8008832:	68e0      	ldr	r0, [r4, #12]
 8008834:	9b03      	ldr	r3, [sp, #12]
 8008836:	4298      	cmp	r0, r3
 8008838:	bfb8      	it	lt
 800883a:	4618      	movlt	r0, r3
 800883c:	e7a4      	b.n	8008788 <_printf_i+0x168>
 800883e:	2301      	movs	r3, #1
 8008840:	4632      	mov	r2, r6
 8008842:	4649      	mov	r1, r9
 8008844:	4640      	mov	r0, r8
 8008846:	47d0      	blx	sl
 8008848:	3001      	adds	r0, #1
 800884a:	d09b      	beq.n	8008784 <_printf_i+0x164>
 800884c:	3501      	adds	r5, #1
 800884e:	68e3      	ldr	r3, [r4, #12]
 8008850:	9903      	ldr	r1, [sp, #12]
 8008852:	1a5b      	subs	r3, r3, r1
 8008854:	42ab      	cmp	r3, r5
 8008856:	dcf2      	bgt.n	800883e <_printf_i+0x21e>
 8008858:	e7eb      	b.n	8008832 <_printf_i+0x212>
 800885a:	2500      	movs	r5, #0
 800885c:	f104 0619 	add.w	r6, r4, #25
 8008860:	e7f5      	b.n	800884e <_printf_i+0x22e>
 8008862:	bf00      	nop
 8008864:	0800d14c 	.word	0x0800d14c
 8008868:	0800d15d 	.word	0x0800d15d

0800886c <_scanf_float>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	b087      	sub	sp, #28
 8008872:	4617      	mov	r7, r2
 8008874:	9303      	str	r3, [sp, #12]
 8008876:	688b      	ldr	r3, [r1, #8]
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800887e:	bf83      	ittte	hi
 8008880:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008884:	195b      	addhi	r3, r3, r5
 8008886:	9302      	strhi	r3, [sp, #8]
 8008888:	2300      	movls	r3, #0
 800888a:	bf86      	itte	hi
 800888c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008890:	608b      	strhi	r3, [r1, #8]
 8008892:	9302      	strls	r3, [sp, #8]
 8008894:	680b      	ldr	r3, [r1, #0]
 8008896:	468b      	mov	fp, r1
 8008898:	2500      	movs	r5, #0
 800889a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800889e:	f84b 3b1c 	str.w	r3, [fp], #28
 80088a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088a6:	4680      	mov	r8, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	465e      	mov	r6, fp
 80088ac:	46aa      	mov	sl, r5
 80088ae:	46a9      	mov	r9, r5
 80088b0:	9501      	str	r5, [sp, #4]
 80088b2:	68a2      	ldr	r2, [r4, #8]
 80088b4:	b152      	cbz	r2, 80088cc <_scanf_float+0x60>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	2b4e      	cmp	r3, #78	; 0x4e
 80088bc:	d864      	bhi.n	8008988 <_scanf_float+0x11c>
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d83c      	bhi.n	800893c <_scanf_float+0xd0>
 80088c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80088c6:	b2c8      	uxtb	r0, r1
 80088c8:	280e      	cmp	r0, #14
 80088ca:	d93a      	bls.n	8008942 <_scanf_float+0xd6>
 80088cc:	f1b9 0f00 	cmp.w	r9, #0
 80088d0:	d003      	beq.n	80088da <_scanf_float+0x6e>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088de:	f1ba 0f01 	cmp.w	sl, #1
 80088e2:	f200 8113 	bhi.w	8008b0c <_scanf_float+0x2a0>
 80088e6:	455e      	cmp	r6, fp
 80088e8:	f200 8105 	bhi.w	8008af6 <_scanf_float+0x28a>
 80088ec:	2501      	movs	r5, #1
 80088ee:	4628      	mov	r0, r5
 80088f0:	b007      	add	sp, #28
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80088fa:	2a0d      	cmp	r2, #13
 80088fc:	d8e6      	bhi.n	80088cc <_scanf_float+0x60>
 80088fe:	a101      	add	r1, pc, #4	; (adr r1, 8008904 <_scanf_float+0x98>)
 8008900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008904:	08008a43 	.word	0x08008a43
 8008908:	080088cd 	.word	0x080088cd
 800890c:	080088cd 	.word	0x080088cd
 8008910:	080088cd 	.word	0x080088cd
 8008914:	08008aa3 	.word	0x08008aa3
 8008918:	08008a7b 	.word	0x08008a7b
 800891c:	080088cd 	.word	0x080088cd
 8008920:	080088cd 	.word	0x080088cd
 8008924:	08008a51 	.word	0x08008a51
 8008928:	080088cd 	.word	0x080088cd
 800892c:	080088cd 	.word	0x080088cd
 8008930:	080088cd 	.word	0x080088cd
 8008934:	080088cd 	.word	0x080088cd
 8008938:	08008a09 	.word	0x08008a09
 800893c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008940:	e7db      	b.n	80088fa <_scanf_float+0x8e>
 8008942:	290e      	cmp	r1, #14
 8008944:	d8c2      	bhi.n	80088cc <_scanf_float+0x60>
 8008946:	a001      	add	r0, pc, #4	; (adr r0, 800894c <_scanf_float+0xe0>)
 8008948:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800894c:	080089fb 	.word	0x080089fb
 8008950:	080088cd 	.word	0x080088cd
 8008954:	080089fb 	.word	0x080089fb
 8008958:	08008a8f 	.word	0x08008a8f
 800895c:	080088cd 	.word	0x080088cd
 8008960:	080089a9 	.word	0x080089a9
 8008964:	080089e5 	.word	0x080089e5
 8008968:	080089e5 	.word	0x080089e5
 800896c:	080089e5 	.word	0x080089e5
 8008970:	080089e5 	.word	0x080089e5
 8008974:	080089e5 	.word	0x080089e5
 8008978:	080089e5 	.word	0x080089e5
 800897c:	080089e5 	.word	0x080089e5
 8008980:	080089e5 	.word	0x080089e5
 8008984:	080089e5 	.word	0x080089e5
 8008988:	2b6e      	cmp	r3, #110	; 0x6e
 800898a:	d809      	bhi.n	80089a0 <_scanf_float+0x134>
 800898c:	2b60      	cmp	r3, #96	; 0x60
 800898e:	d8b2      	bhi.n	80088f6 <_scanf_float+0x8a>
 8008990:	2b54      	cmp	r3, #84	; 0x54
 8008992:	d077      	beq.n	8008a84 <_scanf_float+0x218>
 8008994:	2b59      	cmp	r3, #89	; 0x59
 8008996:	d199      	bne.n	80088cc <_scanf_float+0x60>
 8008998:	2d07      	cmp	r5, #7
 800899a:	d197      	bne.n	80088cc <_scanf_float+0x60>
 800899c:	2508      	movs	r5, #8
 800899e:	e029      	b.n	80089f4 <_scanf_float+0x188>
 80089a0:	2b74      	cmp	r3, #116	; 0x74
 80089a2:	d06f      	beq.n	8008a84 <_scanf_float+0x218>
 80089a4:	2b79      	cmp	r3, #121	; 0x79
 80089a6:	e7f6      	b.n	8008996 <_scanf_float+0x12a>
 80089a8:	6821      	ldr	r1, [r4, #0]
 80089aa:	05c8      	lsls	r0, r1, #23
 80089ac:	d51a      	bpl.n	80089e4 <_scanf_float+0x178>
 80089ae:	9b02      	ldr	r3, [sp, #8]
 80089b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089b4:	6021      	str	r1, [r4, #0]
 80089b6:	f109 0901 	add.w	r9, r9, #1
 80089ba:	b11b      	cbz	r3, 80089c4 <_scanf_float+0x158>
 80089bc:	3b01      	subs	r3, #1
 80089be:	3201      	adds	r2, #1
 80089c0:	9302      	str	r3, [sp, #8]
 80089c2:	60a2      	str	r2, [r4, #8]
 80089c4:	68a3      	ldr	r3, [r4, #8]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	60a3      	str	r3, [r4, #8]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	3301      	adds	r3, #1
 80089ce:	6123      	str	r3, [r4, #16]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	607b      	str	r3, [r7, #4]
 80089d8:	f340 8084 	ble.w	8008ae4 <_scanf_float+0x278>
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	3301      	adds	r3, #1
 80089e0:	603b      	str	r3, [r7, #0]
 80089e2:	e766      	b.n	80088b2 <_scanf_float+0x46>
 80089e4:	eb1a 0f05 	cmn.w	sl, r5
 80089e8:	f47f af70 	bne.w	80088cc <_scanf_float+0x60>
 80089ec:	6822      	ldr	r2, [r4, #0]
 80089ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80089f2:	6022      	str	r2, [r4, #0]
 80089f4:	f806 3b01 	strb.w	r3, [r6], #1
 80089f8:	e7e4      	b.n	80089c4 <_scanf_float+0x158>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	0610      	lsls	r0, r2, #24
 80089fe:	f57f af65 	bpl.w	80088cc <_scanf_float+0x60>
 8008a02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a06:	e7f4      	b.n	80089f2 <_scanf_float+0x186>
 8008a08:	f1ba 0f00 	cmp.w	sl, #0
 8008a0c:	d10e      	bne.n	8008a2c <_scanf_float+0x1c0>
 8008a0e:	f1b9 0f00 	cmp.w	r9, #0
 8008a12:	d10e      	bne.n	8008a32 <_scanf_float+0x1c6>
 8008a14:	6822      	ldr	r2, [r4, #0]
 8008a16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a1e:	d108      	bne.n	8008a32 <_scanf_float+0x1c6>
 8008a20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a24:	6022      	str	r2, [r4, #0]
 8008a26:	f04f 0a01 	mov.w	sl, #1
 8008a2a:	e7e3      	b.n	80089f4 <_scanf_float+0x188>
 8008a2c:	f1ba 0f02 	cmp.w	sl, #2
 8008a30:	d055      	beq.n	8008ade <_scanf_float+0x272>
 8008a32:	2d01      	cmp	r5, #1
 8008a34:	d002      	beq.n	8008a3c <_scanf_float+0x1d0>
 8008a36:	2d04      	cmp	r5, #4
 8008a38:	f47f af48 	bne.w	80088cc <_scanf_float+0x60>
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	b2ed      	uxtb	r5, r5
 8008a40:	e7d8      	b.n	80089f4 <_scanf_float+0x188>
 8008a42:	f1ba 0f01 	cmp.w	sl, #1
 8008a46:	f47f af41 	bne.w	80088cc <_scanf_float+0x60>
 8008a4a:	f04f 0a02 	mov.w	sl, #2
 8008a4e:	e7d1      	b.n	80089f4 <_scanf_float+0x188>
 8008a50:	b97d      	cbnz	r5, 8008a72 <_scanf_float+0x206>
 8008a52:	f1b9 0f00 	cmp.w	r9, #0
 8008a56:	f47f af3c 	bne.w	80088d2 <_scanf_float+0x66>
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a64:	f47f af39 	bne.w	80088da <_scanf_float+0x6e>
 8008a68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a6c:	6022      	str	r2, [r4, #0]
 8008a6e:	2501      	movs	r5, #1
 8008a70:	e7c0      	b.n	80089f4 <_scanf_float+0x188>
 8008a72:	2d03      	cmp	r5, #3
 8008a74:	d0e2      	beq.n	8008a3c <_scanf_float+0x1d0>
 8008a76:	2d05      	cmp	r5, #5
 8008a78:	e7de      	b.n	8008a38 <_scanf_float+0x1cc>
 8008a7a:	2d02      	cmp	r5, #2
 8008a7c:	f47f af26 	bne.w	80088cc <_scanf_float+0x60>
 8008a80:	2503      	movs	r5, #3
 8008a82:	e7b7      	b.n	80089f4 <_scanf_float+0x188>
 8008a84:	2d06      	cmp	r5, #6
 8008a86:	f47f af21 	bne.w	80088cc <_scanf_float+0x60>
 8008a8a:	2507      	movs	r5, #7
 8008a8c:	e7b2      	b.n	80089f4 <_scanf_float+0x188>
 8008a8e:	6822      	ldr	r2, [r4, #0]
 8008a90:	0591      	lsls	r1, r2, #22
 8008a92:	f57f af1b 	bpl.w	80088cc <_scanf_float+0x60>
 8008a96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a9a:	6022      	str	r2, [r4, #0]
 8008a9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008aa0:	e7a8      	b.n	80089f4 <_scanf_float+0x188>
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008aa8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008aac:	d006      	beq.n	8008abc <_scanf_float+0x250>
 8008aae:	0550      	lsls	r0, r2, #21
 8008ab0:	f57f af0c 	bpl.w	80088cc <_scanf_float+0x60>
 8008ab4:	f1b9 0f00 	cmp.w	r9, #0
 8008ab8:	f43f af0f 	beq.w	80088da <_scanf_float+0x6e>
 8008abc:	0591      	lsls	r1, r2, #22
 8008abe:	bf58      	it	pl
 8008ac0:	9901      	ldrpl	r1, [sp, #4]
 8008ac2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ac6:	bf58      	it	pl
 8008ac8:	eba9 0101 	subpl.w	r1, r9, r1
 8008acc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008ad0:	bf58      	it	pl
 8008ad2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008ad6:	6022      	str	r2, [r4, #0]
 8008ad8:	f04f 0900 	mov.w	r9, #0
 8008adc:	e78a      	b.n	80089f4 <_scanf_float+0x188>
 8008ade:	f04f 0a03 	mov.w	sl, #3
 8008ae2:	e787      	b.n	80089f4 <_scanf_float+0x188>
 8008ae4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ae8:	4639      	mov	r1, r7
 8008aea:	4640      	mov	r0, r8
 8008aec:	4798      	blx	r3
 8008aee:	2800      	cmp	r0, #0
 8008af0:	f43f aedf 	beq.w	80088b2 <_scanf_float+0x46>
 8008af4:	e6ea      	b.n	80088cc <_scanf_float+0x60>
 8008af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008afe:	463a      	mov	r2, r7
 8008b00:	4640      	mov	r0, r8
 8008b02:	4798      	blx	r3
 8008b04:	6923      	ldr	r3, [r4, #16]
 8008b06:	3b01      	subs	r3, #1
 8008b08:	6123      	str	r3, [r4, #16]
 8008b0a:	e6ec      	b.n	80088e6 <_scanf_float+0x7a>
 8008b0c:	1e6b      	subs	r3, r5, #1
 8008b0e:	2b06      	cmp	r3, #6
 8008b10:	d825      	bhi.n	8008b5e <_scanf_float+0x2f2>
 8008b12:	2d02      	cmp	r5, #2
 8008b14:	d836      	bhi.n	8008b84 <_scanf_float+0x318>
 8008b16:	455e      	cmp	r6, fp
 8008b18:	f67f aee8 	bls.w	80088ec <_scanf_float+0x80>
 8008b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b24:	463a      	mov	r2, r7
 8008b26:	4640      	mov	r0, r8
 8008b28:	4798      	blx	r3
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	e7f1      	b.n	8008b16 <_scanf_float+0x2aa>
 8008b32:	9802      	ldr	r0, [sp, #8]
 8008b34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b3c:	9002      	str	r0, [sp, #8]
 8008b3e:	463a      	mov	r2, r7
 8008b40:	4640      	mov	r0, r8
 8008b42:	4798      	blx	r3
 8008b44:	6923      	ldr	r3, [r4, #16]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	6123      	str	r3, [r4, #16]
 8008b4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b4e:	fa5f fa8a 	uxtb.w	sl, sl
 8008b52:	f1ba 0f02 	cmp.w	sl, #2
 8008b56:	d1ec      	bne.n	8008b32 <_scanf_float+0x2c6>
 8008b58:	3d03      	subs	r5, #3
 8008b5a:	b2ed      	uxtb	r5, r5
 8008b5c:	1b76      	subs	r6, r6, r5
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	05da      	lsls	r2, r3, #23
 8008b62:	d52f      	bpl.n	8008bc4 <_scanf_float+0x358>
 8008b64:	055b      	lsls	r3, r3, #21
 8008b66:	d510      	bpl.n	8008b8a <_scanf_float+0x31e>
 8008b68:	455e      	cmp	r6, fp
 8008b6a:	f67f aebf 	bls.w	80088ec <_scanf_float+0x80>
 8008b6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b76:	463a      	mov	r2, r7
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4798      	blx	r3
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	e7f1      	b.n	8008b68 <_scanf_float+0x2fc>
 8008b84:	46aa      	mov	sl, r5
 8008b86:	9602      	str	r6, [sp, #8]
 8008b88:	e7df      	b.n	8008b4a <_scanf_float+0x2de>
 8008b8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008b8e:	6923      	ldr	r3, [r4, #16]
 8008b90:	2965      	cmp	r1, #101	; 0x65
 8008b92:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b96:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b9a:	6123      	str	r3, [r4, #16]
 8008b9c:	d00c      	beq.n	8008bb8 <_scanf_float+0x34c>
 8008b9e:	2945      	cmp	r1, #69	; 0x45
 8008ba0:	d00a      	beq.n	8008bb8 <_scanf_float+0x34c>
 8008ba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ba6:	463a      	mov	r2, r7
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4798      	blx	r3
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	1eb5      	subs	r5, r6, #2
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bbc:	463a      	mov	r2, r7
 8008bbe:	4640      	mov	r0, r8
 8008bc0:	4798      	blx	r3
 8008bc2:	462e      	mov	r6, r5
 8008bc4:	6825      	ldr	r5, [r4, #0]
 8008bc6:	f015 0510 	ands.w	r5, r5, #16
 8008bca:	d158      	bne.n	8008c7e <_scanf_float+0x412>
 8008bcc:	7035      	strb	r5, [r6, #0]
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bd8:	d11c      	bne.n	8008c14 <_scanf_float+0x3a8>
 8008bda:	9b01      	ldr	r3, [sp, #4]
 8008bdc:	454b      	cmp	r3, r9
 8008bde:	eba3 0209 	sub.w	r2, r3, r9
 8008be2:	d124      	bne.n	8008c2e <_scanf_float+0x3c2>
 8008be4:	2200      	movs	r2, #0
 8008be6:	4659      	mov	r1, fp
 8008be8:	4640      	mov	r0, r8
 8008bea:	f000 ff27 	bl	8009a3c <_strtod_r>
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	6821      	ldr	r1, [r4, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f011 0f02 	tst.w	r1, #2
 8008bf8:	ec57 6b10 	vmov	r6, r7, d0
 8008bfc:	f103 0204 	add.w	r2, r3, #4
 8008c00:	d020      	beq.n	8008c44 <_scanf_float+0x3d8>
 8008c02:	9903      	ldr	r1, [sp, #12]
 8008c04:	600a      	str	r2, [r1, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	e9c3 6700 	strd	r6, r7, [r3]
 8008c0c:	68e3      	ldr	r3, [r4, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60e3      	str	r3, [r4, #12]
 8008c12:	e66c      	b.n	80088ee <_scanf_float+0x82>
 8008c14:	9b04      	ldr	r3, [sp, #16]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0e4      	beq.n	8008be4 <_scanf_float+0x378>
 8008c1a:	9905      	ldr	r1, [sp, #20]
 8008c1c:	230a      	movs	r3, #10
 8008c1e:	462a      	mov	r2, r5
 8008c20:	3101      	adds	r1, #1
 8008c22:	4640      	mov	r0, r8
 8008c24:	f000 ff94 	bl	8009b50 <_strtol_r>
 8008c28:	9b04      	ldr	r3, [sp, #16]
 8008c2a:	9e05      	ldr	r6, [sp, #20]
 8008c2c:	1ac2      	subs	r2, r0, r3
 8008c2e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c32:	429e      	cmp	r6, r3
 8008c34:	bf28      	it	cs
 8008c36:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c3a:	4912      	ldr	r1, [pc, #72]	; (8008c84 <_scanf_float+0x418>)
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 f843 	bl	8008cc8 <siprintf>
 8008c42:	e7cf      	b.n	8008be4 <_scanf_float+0x378>
 8008c44:	f011 0f04 	tst.w	r1, #4
 8008c48:	9903      	ldr	r1, [sp, #12]
 8008c4a:	600a      	str	r2, [r1, #0]
 8008c4c:	d1db      	bne.n	8008c06 <_scanf_float+0x39a>
 8008c4e:	f8d3 8000 	ldr.w	r8, [r3]
 8008c52:	ee10 2a10 	vmov	r2, s0
 8008c56:	ee10 0a10 	vmov	r0, s0
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	f7f7 ff95 	bl	8000b8c <__aeabi_dcmpun>
 8008c62:	b128      	cbz	r0, 8008c70 <_scanf_float+0x404>
 8008c64:	4808      	ldr	r0, [pc, #32]	; (8008c88 <_scanf_float+0x41c>)
 8008c66:	f000 f829 	bl	8008cbc <nanf>
 8008c6a:	ed88 0a00 	vstr	s0, [r8]
 8008c6e:	e7cd      	b.n	8008c0c <_scanf_float+0x3a0>
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 ffe8 	bl	8000c48 <__aeabi_d2f>
 8008c78:	f8c8 0000 	str.w	r0, [r8]
 8008c7c:	e7c6      	b.n	8008c0c <_scanf_float+0x3a0>
 8008c7e:	2500      	movs	r5, #0
 8008c80:	e635      	b.n	80088ee <_scanf_float+0x82>
 8008c82:	bf00      	nop
 8008c84:	0800d16e 	.word	0x0800d16e
 8008c88:	0800d603 	.word	0x0800d603

08008c8c <iprintf>:
 8008c8c:	b40f      	push	{r0, r1, r2, r3}
 8008c8e:	4b0a      	ldr	r3, [pc, #40]	; (8008cb8 <iprintf+0x2c>)
 8008c90:	b513      	push	{r0, r1, r4, lr}
 8008c92:	681c      	ldr	r4, [r3, #0]
 8008c94:	b124      	cbz	r4, 8008ca0 <iprintf+0x14>
 8008c96:	69a3      	ldr	r3, [r4, #24]
 8008c98:	b913      	cbnz	r3, 8008ca0 <iprintf+0x14>
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f001 fe6c 	bl	800a978 <__sinit>
 8008ca0:	ab05      	add	r3, sp, #20
 8008ca2:	9a04      	ldr	r2, [sp, #16]
 8008ca4:	68a1      	ldr	r1, [r4, #8]
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	f003 fb7f 	bl	800c3ac <_vfiprintf_r>
 8008cae:	b002      	add	sp, #8
 8008cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb4:	b004      	add	sp, #16
 8008cb6:	4770      	bx	lr
 8008cb8:	20000074 	.word	0x20000074

08008cbc <nanf>:
 8008cbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008cc4 <nanf+0x8>
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	7fc00000 	.word	0x7fc00000

08008cc8 <siprintf>:
 8008cc8:	b40e      	push	{r1, r2, r3}
 8008cca:	b500      	push	{lr}
 8008ccc:	b09c      	sub	sp, #112	; 0x70
 8008cce:	ab1d      	add	r3, sp, #116	; 0x74
 8008cd0:	9002      	str	r0, [sp, #8]
 8008cd2:	9006      	str	r0, [sp, #24]
 8008cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cd8:	4809      	ldr	r0, [pc, #36]	; (8008d00 <siprintf+0x38>)
 8008cda:	9107      	str	r1, [sp, #28]
 8008cdc:	9104      	str	r1, [sp, #16]
 8008cde:	4909      	ldr	r1, [pc, #36]	; (8008d04 <siprintf+0x3c>)
 8008ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce4:	9105      	str	r1, [sp, #20]
 8008ce6:	6800      	ldr	r0, [r0, #0]
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	a902      	add	r1, sp, #8
 8008cec:	f003 f862 	bl	800bdb4 <_svfiprintf_r>
 8008cf0:	9b02      	ldr	r3, [sp, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	b01c      	add	sp, #112	; 0x70
 8008cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cfc:	b003      	add	sp, #12
 8008cfe:	4770      	bx	lr
 8008d00:	20000074 	.word	0x20000074
 8008d04:	ffff0208 	.word	0xffff0208

08008d08 <siscanf>:
 8008d08:	b40e      	push	{r1, r2, r3}
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	b09f      	sub	sp, #124	; 0x7c
 8008d0e:	ac21      	add	r4, sp, #132	; 0x84
 8008d10:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008d14:	f854 2b04 	ldr.w	r2, [r4], #4
 8008d18:	9201      	str	r2, [sp, #4]
 8008d1a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008d1e:	9004      	str	r0, [sp, #16]
 8008d20:	9008      	str	r0, [sp, #32]
 8008d22:	f7f7 fa7f 	bl	8000224 <strlen>
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <siscanf+0x50>)
 8008d28:	9005      	str	r0, [sp, #20]
 8008d2a:	9009      	str	r0, [sp, #36]	; 0x24
 8008d2c:	930d      	str	r3, [sp, #52]	; 0x34
 8008d2e:	480b      	ldr	r0, [pc, #44]	; (8008d5c <siscanf+0x54>)
 8008d30:	9a01      	ldr	r2, [sp, #4]
 8008d32:	6800      	ldr	r0, [r0, #0]
 8008d34:	9403      	str	r4, [sp, #12]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9311      	str	r3, [sp, #68]	; 0x44
 8008d3a:	9316      	str	r3, [sp, #88]	; 0x58
 8008d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008d44:	a904      	add	r1, sp, #16
 8008d46:	4623      	mov	r3, r4
 8008d48:	f003 f98e 	bl	800c068 <__ssvfiscanf_r>
 8008d4c:	b01f      	add	sp, #124	; 0x7c
 8008d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d52:	b003      	add	sp, #12
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	08008d83 	.word	0x08008d83
 8008d5c:	20000074 	.word	0x20000074

08008d60 <__sread>:
 8008d60:	b510      	push	{r4, lr}
 8008d62:	460c      	mov	r4, r1
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	f003 fd9c 	bl	800c8a4 <_read_r>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	bfab      	itete	ge
 8008d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d72:	89a3      	ldrhlt	r3, [r4, #12]
 8008d74:	181b      	addge	r3, r3, r0
 8008d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d7a:	bfac      	ite	ge
 8008d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d7e:	81a3      	strhlt	r3, [r4, #12]
 8008d80:	bd10      	pop	{r4, pc}

08008d82 <__seofread>:
 8008d82:	2000      	movs	r0, #0
 8008d84:	4770      	bx	lr

08008d86 <__swrite>:
 8008d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	461f      	mov	r7, r3
 8008d8c:	898b      	ldrh	r3, [r1, #12]
 8008d8e:	05db      	lsls	r3, r3, #23
 8008d90:	4605      	mov	r5, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	4616      	mov	r6, r2
 8008d96:	d505      	bpl.n	8008da4 <__swrite+0x1e>
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f002 f9fe 	bl	800b1a0 <_lseek_r>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	4632      	mov	r2, r6
 8008db2:	463b      	mov	r3, r7
 8008db4:	4628      	mov	r0, r5
 8008db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dba:	f000 beeb 	b.w	8009b94 <_write_r>

08008dbe <__sseek>:
 8008dbe:	b510      	push	{r4, lr}
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc6:	f002 f9eb 	bl	800b1a0 <_lseek_r>
 8008dca:	1c43      	adds	r3, r0, #1
 8008dcc:	89a3      	ldrh	r3, [r4, #12]
 8008dce:	bf15      	itete	ne
 8008dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008dda:	81a3      	strheq	r3, [r4, #12]
 8008ddc:	bf18      	it	ne
 8008dde:	81a3      	strhne	r3, [r4, #12]
 8008de0:	bd10      	pop	{r4, pc}

08008de2 <__sclose>:
 8008de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de6:	f000 bee7 	b.w	8009bb8 <_close_r>

08008dea <sulp>:
 8008dea:	b570      	push	{r4, r5, r6, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	460d      	mov	r5, r1
 8008df0:	ec45 4b10 	vmov	d0, r4, r5
 8008df4:	4616      	mov	r6, r2
 8008df6:	f002 fd79 	bl	800b8ec <__ulp>
 8008dfa:	ec51 0b10 	vmov	r0, r1, d0
 8008dfe:	b17e      	cbz	r6, 8008e20 <sulp+0x36>
 8008e00:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008e04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	dd09      	ble.n	8008e20 <sulp+0x36>
 8008e0c:	051b      	lsls	r3, r3, #20
 8008e0e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008e12:	2400      	movs	r4, #0
 8008e14:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008e18:	4622      	mov	r2, r4
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	f7f7 fc1c 	bl	8000658 <__aeabi_dmul>
 8008e20:	bd70      	pop	{r4, r5, r6, pc}
 8008e22:	0000      	movs	r0, r0
 8008e24:	0000      	movs	r0, r0
	...

08008e28 <_strtod_l>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	b0a3      	sub	sp, #140	; 0x8c
 8008e2e:	461f      	mov	r7, r3
 8008e30:	2300      	movs	r3, #0
 8008e32:	931e      	str	r3, [sp, #120]	; 0x78
 8008e34:	4ba4      	ldr	r3, [pc, #656]	; (80090c8 <_strtod_l+0x2a0>)
 8008e36:	9219      	str	r2, [sp, #100]	; 0x64
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	9307      	str	r3, [sp, #28]
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	4688      	mov	r8, r1
 8008e42:	f7f7 f9ef 	bl	8000224 <strlen>
 8008e46:	f04f 0a00 	mov.w	sl, #0
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	f04f 0b00 	mov.w	fp, #0
 8008e50:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e56:	781a      	ldrb	r2, [r3, #0]
 8008e58:	2a2b      	cmp	r2, #43	; 0x2b
 8008e5a:	d04c      	beq.n	8008ef6 <_strtod_l+0xce>
 8008e5c:	d839      	bhi.n	8008ed2 <_strtod_l+0xaa>
 8008e5e:	2a0d      	cmp	r2, #13
 8008e60:	d832      	bhi.n	8008ec8 <_strtod_l+0xa0>
 8008e62:	2a08      	cmp	r2, #8
 8008e64:	d832      	bhi.n	8008ecc <_strtod_l+0xa4>
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	d03c      	beq.n	8008ee4 <_strtod_l+0xbc>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8008e6e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008e70:	7833      	ldrb	r3, [r6, #0]
 8008e72:	2b30      	cmp	r3, #48	; 0x30
 8008e74:	f040 80b4 	bne.w	8008fe0 <_strtod_l+0x1b8>
 8008e78:	7873      	ldrb	r3, [r6, #1]
 8008e7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e7e:	2b58      	cmp	r3, #88	; 0x58
 8008e80:	d16c      	bne.n	8008f5c <_strtod_l+0x134>
 8008e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	ab1e      	add	r3, sp, #120	; 0x78
 8008e88:	9702      	str	r7, [sp, #8]
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	4a8f      	ldr	r2, [pc, #572]	; (80090cc <_strtod_l+0x2a4>)
 8008e8e:	ab1f      	add	r3, sp, #124	; 0x7c
 8008e90:	a91d      	add	r1, sp, #116	; 0x74
 8008e92:	4620      	mov	r0, r4
 8008e94:	f001 fe74 	bl	800ab80 <__gethex>
 8008e98:	f010 0707 	ands.w	r7, r0, #7
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	d005      	beq.n	8008eac <_strtod_l+0x84>
 8008ea0:	2f06      	cmp	r7, #6
 8008ea2:	d12a      	bne.n	8008efa <_strtod_l+0xd2>
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	961d      	str	r6, [sp, #116]	; 0x74
 8008eaa:	930e      	str	r3, [sp, #56]	; 0x38
 8008eac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f040 8596 	bne.w	80099e0 <_strtod_l+0xbb8>
 8008eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eb6:	b1db      	cbz	r3, 8008ef0 <_strtod_l+0xc8>
 8008eb8:	4652      	mov	r2, sl
 8008eba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008ebe:	ec43 2b10 	vmov	d0, r2, r3
 8008ec2:	b023      	add	sp, #140	; 0x8c
 8008ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec8:	2a20      	cmp	r2, #32
 8008eca:	d1ce      	bne.n	8008e6a <_strtod_l+0x42>
 8008ecc:	3301      	adds	r3, #1
 8008ece:	931d      	str	r3, [sp, #116]	; 0x74
 8008ed0:	e7c0      	b.n	8008e54 <_strtod_l+0x2c>
 8008ed2:	2a2d      	cmp	r2, #45	; 0x2d
 8008ed4:	d1c9      	bne.n	8008e6a <_strtod_l+0x42>
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	920e      	str	r2, [sp, #56]	; 0x38
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	921d      	str	r2, [sp, #116]	; 0x74
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1c4      	bne.n	8008e6e <_strtod_l+0x46>
 8008ee4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ee6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 8576 	bne.w	80099dc <_strtod_l+0xbb4>
 8008ef0:	4652      	mov	r2, sl
 8008ef2:	465b      	mov	r3, fp
 8008ef4:	e7e3      	b.n	8008ebe <_strtod_l+0x96>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	e7ee      	b.n	8008ed8 <_strtod_l+0xb0>
 8008efa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008efc:	b13a      	cbz	r2, 8008f0e <_strtod_l+0xe6>
 8008efe:	2135      	movs	r1, #53	; 0x35
 8008f00:	a820      	add	r0, sp, #128	; 0x80
 8008f02:	f002 fdfe 	bl	800bb02 <__copybits>
 8008f06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f002 f9c3 	bl	800b294 <_Bfree>
 8008f0e:	3f01      	subs	r7, #1
 8008f10:	2f05      	cmp	r7, #5
 8008f12:	d807      	bhi.n	8008f24 <_strtod_l+0xfc>
 8008f14:	e8df f007 	tbb	[pc, r7]
 8008f18:	1d180b0e 	.word	0x1d180b0e
 8008f1c:	030e      	.short	0x030e
 8008f1e:	f04f 0b00 	mov.w	fp, #0
 8008f22:	46da      	mov	sl, fp
 8008f24:	0728      	lsls	r0, r5, #28
 8008f26:	d5c1      	bpl.n	8008eac <_strtod_l+0x84>
 8008f28:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008f2c:	e7be      	b.n	8008eac <_strtod_l+0x84>
 8008f2e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008f32:	e7f7      	b.n	8008f24 <_strtod_l+0xfc>
 8008f34:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008f38:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008f3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008f3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008f42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008f46:	e7ed      	b.n	8008f24 <_strtod_l+0xfc>
 8008f48:	f8df b184 	ldr.w	fp, [pc, #388]	; 80090d0 <_strtod_l+0x2a8>
 8008f4c:	f04f 0a00 	mov.w	sl, #0
 8008f50:	e7e8      	b.n	8008f24 <_strtod_l+0xfc>
 8008f52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008f56:	f04f 3aff 	mov.w	sl, #4294967295
 8008f5a:	e7e3      	b.n	8008f24 <_strtod_l+0xfc>
 8008f5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	921d      	str	r2, [sp, #116]	; 0x74
 8008f62:	785b      	ldrb	r3, [r3, #1]
 8008f64:	2b30      	cmp	r3, #48	; 0x30
 8008f66:	d0f9      	beq.n	8008f5c <_strtod_l+0x134>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d09f      	beq.n	8008eac <_strtod_l+0x84>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f04f 0900 	mov.w	r9, #0
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f76:	930a      	str	r3, [sp, #40]	; 0x28
 8008f78:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008f7c:	464f      	mov	r7, r9
 8008f7e:	220a      	movs	r2, #10
 8008f80:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008f82:	7806      	ldrb	r6, [r0, #0]
 8008f84:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f88:	b2d9      	uxtb	r1, r3
 8008f8a:	2909      	cmp	r1, #9
 8008f8c:	d92a      	bls.n	8008fe4 <_strtod_l+0x1bc>
 8008f8e:	9907      	ldr	r1, [sp, #28]
 8008f90:	462a      	mov	r2, r5
 8008f92:	f003 fceb 	bl	800c96c <strncmp>
 8008f96:	b398      	cbz	r0, 8009000 <_strtod_l+0x1d8>
 8008f98:	2000      	movs	r0, #0
 8008f9a:	4633      	mov	r3, r6
 8008f9c:	463d      	mov	r5, r7
 8008f9e:	9007      	str	r0, [sp, #28]
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	2b65      	cmp	r3, #101	; 0x65
 8008fa4:	d001      	beq.n	8008faa <_strtod_l+0x182>
 8008fa6:	2b45      	cmp	r3, #69	; 0x45
 8008fa8:	d118      	bne.n	8008fdc <_strtod_l+0x1b4>
 8008faa:	b91d      	cbnz	r5, 8008fb4 <_strtod_l+0x18c>
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	4303      	orrs	r3, r0
 8008fb0:	d098      	beq.n	8008ee4 <_strtod_l+0xbc>
 8008fb2:	2500      	movs	r5, #0
 8008fb4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008fb8:	f108 0301 	add.w	r3, r8, #1
 8008fbc:	931d      	str	r3, [sp, #116]	; 0x74
 8008fbe:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008fc2:	2b2b      	cmp	r3, #43	; 0x2b
 8008fc4:	d075      	beq.n	80090b2 <_strtod_l+0x28a>
 8008fc6:	2b2d      	cmp	r3, #45	; 0x2d
 8008fc8:	d07b      	beq.n	80090c2 <_strtod_l+0x29a>
 8008fca:	f04f 0c00 	mov.w	ip, #0
 8008fce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008fd2:	2909      	cmp	r1, #9
 8008fd4:	f240 8082 	bls.w	80090dc <_strtod_l+0x2b4>
 8008fd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008fdc:	2600      	movs	r6, #0
 8008fde:	e09d      	b.n	800911c <_strtod_l+0x2f4>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e7c4      	b.n	8008f6e <_strtod_l+0x146>
 8008fe4:	2f08      	cmp	r7, #8
 8008fe6:	bfd8      	it	le
 8008fe8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008fea:	f100 0001 	add.w	r0, r0, #1
 8008fee:	bfda      	itte	le
 8008ff0:	fb02 3301 	mlale	r3, r2, r1, r3
 8008ff4:	9309      	strle	r3, [sp, #36]	; 0x24
 8008ff6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008ffa:	3701      	adds	r7, #1
 8008ffc:	901d      	str	r0, [sp, #116]	; 0x74
 8008ffe:	e7bf      	b.n	8008f80 <_strtod_l+0x158>
 8009000:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009002:	195a      	adds	r2, r3, r5
 8009004:	921d      	str	r2, [sp, #116]	; 0x74
 8009006:	5d5b      	ldrb	r3, [r3, r5]
 8009008:	2f00      	cmp	r7, #0
 800900a:	d037      	beq.n	800907c <_strtod_l+0x254>
 800900c:	9007      	str	r0, [sp, #28]
 800900e:	463d      	mov	r5, r7
 8009010:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009014:	2a09      	cmp	r2, #9
 8009016:	d912      	bls.n	800903e <_strtod_l+0x216>
 8009018:	2201      	movs	r2, #1
 800901a:	e7c2      	b.n	8008fa2 <_strtod_l+0x17a>
 800901c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	921d      	str	r2, [sp, #116]	; 0x74
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	3001      	adds	r0, #1
 8009026:	2b30      	cmp	r3, #48	; 0x30
 8009028:	d0f8      	beq.n	800901c <_strtod_l+0x1f4>
 800902a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800902e:	2a08      	cmp	r2, #8
 8009030:	f200 84db 	bhi.w	80099ea <_strtod_l+0xbc2>
 8009034:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009036:	9007      	str	r0, [sp, #28]
 8009038:	2000      	movs	r0, #0
 800903a:	920a      	str	r2, [sp, #40]	; 0x28
 800903c:	4605      	mov	r5, r0
 800903e:	3b30      	subs	r3, #48	; 0x30
 8009040:	f100 0201 	add.w	r2, r0, #1
 8009044:	d014      	beq.n	8009070 <_strtod_l+0x248>
 8009046:	9907      	ldr	r1, [sp, #28]
 8009048:	4411      	add	r1, r2
 800904a:	9107      	str	r1, [sp, #28]
 800904c:	462a      	mov	r2, r5
 800904e:	eb00 0e05 	add.w	lr, r0, r5
 8009052:	210a      	movs	r1, #10
 8009054:	4572      	cmp	r2, lr
 8009056:	d113      	bne.n	8009080 <_strtod_l+0x258>
 8009058:	182a      	adds	r2, r5, r0
 800905a:	2a08      	cmp	r2, #8
 800905c:	f105 0501 	add.w	r5, r5, #1
 8009060:	4405      	add	r5, r0
 8009062:	dc1c      	bgt.n	800909e <_strtod_l+0x276>
 8009064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009066:	220a      	movs	r2, #10
 8009068:	fb02 3301 	mla	r3, r2, r1, r3
 800906c:	9309      	str	r3, [sp, #36]	; 0x24
 800906e:	2200      	movs	r2, #0
 8009070:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009072:	1c59      	adds	r1, r3, #1
 8009074:	911d      	str	r1, [sp, #116]	; 0x74
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	4610      	mov	r0, r2
 800907a:	e7c9      	b.n	8009010 <_strtod_l+0x1e8>
 800907c:	4638      	mov	r0, r7
 800907e:	e7d2      	b.n	8009026 <_strtod_l+0x1fe>
 8009080:	2a08      	cmp	r2, #8
 8009082:	dc04      	bgt.n	800908e <_strtod_l+0x266>
 8009084:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009086:	434e      	muls	r6, r1
 8009088:	9609      	str	r6, [sp, #36]	; 0x24
 800908a:	3201      	adds	r2, #1
 800908c:	e7e2      	b.n	8009054 <_strtod_l+0x22c>
 800908e:	f102 0c01 	add.w	ip, r2, #1
 8009092:	f1bc 0f10 	cmp.w	ip, #16
 8009096:	bfd8      	it	le
 8009098:	fb01 f909 	mulle.w	r9, r1, r9
 800909c:	e7f5      	b.n	800908a <_strtod_l+0x262>
 800909e:	2d10      	cmp	r5, #16
 80090a0:	bfdc      	itt	le
 80090a2:	220a      	movle	r2, #10
 80090a4:	fb02 3909 	mlale	r9, r2, r9, r3
 80090a8:	e7e1      	b.n	800906e <_strtod_l+0x246>
 80090aa:	2300      	movs	r3, #0
 80090ac:	9307      	str	r3, [sp, #28]
 80090ae:	2201      	movs	r2, #1
 80090b0:	e77c      	b.n	8008fac <_strtod_l+0x184>
 80090b2:	f04f 0c00 	mov.w	ip, #0
 80090b6:	f108 0302 	add.w	r3, r8, #2
 80090ba:	931d      	str	r3, [sp, #116]	; 0x74
 80090bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 80090c0:	e785      	b.n	8008fce <_strtod_l+0x1a6>
 80090c2:	f04f 0c01 	mov.w	ip, #1
 80090c6:	e7f6      	b.n	80090b6 <_strtod_l+0x28e>
 80090c8:	0800d42c 	.word	0x0800d42c
 80090cc:	0800d174 	.word	0x0800d174
 80090d0:	7ff00000 	.word	0x7ff00000
 80090d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090d6:	1c59      	adds	r1, r3, #1
 80090d8:	911d      	str	r1, [sp, #116]	; 0x74
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b30      	cmp	r3, #48	; 0x30
 80090de:	d0f9      	beq.n	80090d4 <_strtod_l+0x2ac>
 80090e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80090e4:	2908      	cmp	r1, #8
 80090e6:	f63f af79 	bhi.w	8008fdc <_strtod_l+0x1b4>
 80090ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80090ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090f0:	9308      	str	r3, [sp, #32]
 80090f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090f4:	1c59      	adds	r1, r3, #1
 80090f6:	911d      	str	r1, [sp, #116]	; 0x74
 80090f8:	785b      	ldrb	r3, [r3, #1]
 80090fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80090fe:	2e09      	cmp	r6, #9
 8009100:	d937      	bls.n	8009172 <_strtod_l+0x34a>
 8009102:	9e08      	ldr	r6, [sp, #32]
 8009104:	1b89      	subs	r1, r1, r6
 8009106:	2908      	cmp	r1, #8
 8009108:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800910c:	dc02      	bgt.n	8009114 <_strtod_l+0x2ec>
 800910e:	4576      	cmp	r6, lr
 8009110:	bfa8      	it	ge
 8009112:	4676      	movge	r6, lr
 8009114:	f1bc 0f00 	cmp.w	ip, #0
 8009118:	d000      	beq.n	800911c <_strtod_l+0x2f4>
 800911a:	4276      	negs	r6, r6
 800911c:	2d00      	cmp	r5, #0
 800911e:	d14f      	bne.n	80091c0 <_strtod_l+0x398>
 8009120:	9904      	ldr	r1, [sp, #16]
 8009122:	4301      	orrs	r1, r0
 8009124:	f47f aec2 	bne.w	8008eac <_strtod_l+0x84>
 8009128:	2a00      	cmp	r2, #0
 800912a:	f47f aedb 	bne.w	8008ee4 <_strtod_l+0xbc>
 800912e:	2b69      	cmp	r3, #105	; 0x69
 8009130:	d027      	beq.n	8009182 <_strtod_l+0x35a>
 8009132:	dc24      	bgt.n	800917e <_strtod_l+0x356>
 8009134:	2b49      	cmp	r3, #73	; 0x49
 8009136:	d024      	beq.n	8009182 <_strtod_l+0x35a>
 8009138:	2b4e      	cmp	r3, #78	; 0x4e
 800913a:	f47f aed3 	bne.w	8008ee4 <_strtod_l+0xbc>
 800913e:	499e      	ldr	r1, [pc, #632]	; (80093b8 <_strtod_l+0x590>)
 8009140:	a81d      	add	r0, sp, #116	; 0x74
 8009142:	f001 ff75 	bl	800b030 <__match>
 8009146:	2800      	cmp	r0, #0
 8009148:	f43f aecc 	beq.w	8008ee4 <_strtod_l+0xbc>
 800914c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	2b28      	cmp	r3, #40	; 0x28
 8009152:	d12d      	bne.n	80091b0 <_strtod_l+0x388>
 8009154:	4999      	ldr	r1, [pc, #612]	; (80093bc <_strtod_l+0x594>)
 8009156:	aa20      	add	r2, sp, #128	; 0x80
 8009158:	a81d      	add	r0, sp, #116	; 0x74
 800915a:	f001 ff7d 	bl	800b058 <__hexnan>
 800915e:	2805      	cmp	r0, #5
 8009160:	d126      	bne.n	80091b0 <_strtod_l+0x388>
 8009162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009164:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009168:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800916c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009170:	e69c      	b.n	8008eac <_strtod_l+0x84>
 8009172:	210a      	movs	r1, #10
 8009174:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009178:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800917c:	e7b9      	b.n	80090f2 <_strtod_l+0x2ca>
 800917e:	2b6e      	cmp	r3, #110	; 0x6e
 8009180:	e7db      	b.n	800913a <_strtod_l+0x312>
 8009182:	498f      	ldr	r1, [pc, #572]	; (80093c0 <_strtod_l+0x598>)
 8009184:	a81d      	add	r0, sp, #116	; 0x74
 8009186:	f001 ff53 	bl	800b030 <__match>
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f aeaa 	beq.w	8008ee4 <_strtod_l+0xbc>
 8009190:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009192:	498c      	ldr	r1, [pc, #560]	; (80093c4 <_strtod_l+0x59c>)
 8009194:	3b01      	subs	r3, #1
 8009196:	a81d      	add	r0, sp, #116	; 0x74
 8009198:	931d      	str	r3, [sp, #116]	; 0x74
 800919a:	f001 ff49 	bl	800b030 <__match>
 800919e:	b910      	cbnz	r0, 80091a6 <_strtod_l+0x37e>
 80091a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091a2:	3301      	adds	r3, #1
 80091a4:	931d      	str	r3, [sp, #116]	; 0x74
 80091a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80093d4 <_strtod_l+0x5ac>
 80091aa:	f04f 0a00 	mov.w	sl, #0
 80091ae:	e67d      	b.n	8008eac <_strtod_l+0x84>
 80091b0:	4885      	ldr	r0, [pc, #532]	; (80093c8 <_strtod_l+0x5a0>)
 80091b2:	f003 fb89 	bl	800c8c8 <nan>
 80091b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80091ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80091be:	e675      	b.n	8008eac <_strtod_l+0x84>
 80091c0:	9b07      	ldr	r3, [sp, #28]
 80091c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091c4:	1af3      	subs	r3, r6, r3
 80091c6:	2f00      	cmp	r7, #0
 80091c8:	bf08      	it	eq
 80091ca:	462f      	moveq	r7, r5
 80091cc:	2d10      	cmp	r5, #16
 80091ce:	9308      	str	r3, [sp, #32]
 80091d0:	46a8      	mov	r8, r5
 80091d2:	bfa8      	it	ge
 80091d4:	f04f 0810 	movge.w	r8, #16
 80091d8:	f7f7 f9c4 	bl	8000564 <__aeabi_ui2d>
 80091dc:	2d09      	cmp	r5, #9
 80091de:	4682      	mov	sl, r0
 80091e0:	468b      	mov	fp, r1
 80091e2:	dd13      	ble.n	800920c <_strtod_l+0x3e4>
 80091e4:	4b79      	ldr	r3, [pc, #484]	; (80093cc <_strtod_l+0x5a4>)
 80091e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80091ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80091ee:	f7f7 fa33 	bl	8000658 <__aeabi_dmul>
 80091f2:	4682      	mov	sl, r0
 80091f4:	4648      	mov	r0, r9
 80091f6:	468b      	mov	fp, r1
 80091f8:	f7f7 f9b4 	bl	8000564 <__aeabi_ui2d>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	4650      	mov	r0, sl
 8009202:	4659      	mov	r1, fp
 8009204:	f7f7 f872 	bl	80002ec <__adddf3>
 8009208:	4682      	mov	sl, r0
 800920a:	468b      	mov	fp, r1
 800920c:	2d0f      	cmp	r5, #15
 800920e:	dc38      	bgt.n	8009282 <_strtod_l+0x45a>
 8009210:	9b08      	ldr	r3, [sp, #32]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f43f ae4a 	beq.w	8008eac <_strtod_l+0x84>
 8009218:	dd24      	ble.n	8009264 <_strtod_l+0x43c>
 800921a:	2b16      	cmp	r3, #22
 800921c:	dc0b      	bgt.n	8009236 <_strtod_l+0x40e>
 800921e:	4d6b      	ldr	r5, [pc, #428]	; (80093cc <_strtod_l+0x5a4>)
 8009220:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009224:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	f7f7 fa14 	bl	8000658 <__aeabi_dmul>
 8009230:	4682      	mov	sl, r0
 8009232:	468b      	mov	fp, r1
 8009234:	e63a      	b.n	8008eac <_strtod_l+0x84>
 8009236:	9a08      	ldr	r2, [sp, #32]
 8009238:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800923c:	4293      	cmp	r3, r2
 800923e:	db20      	blt.n	8009282 <_strtod_l+0x45a>
 8009240:	4c62      	ldr	r4, [pc, #392]	; (80093cc <_strtod_l+0x5a4>)
 8009242:	f1c5 050f 	rsb	r5, r5, #15
 8009246:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800924a:	4652      	mov	r2, sl
 800924c:	465b      	mov	r3, fp
 800924e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009252:	f7f7 fa01 	bl	8000658 <__aeabi_dmul>
 8009256:	9b08      	ldr	r3, [sp, #32]
 8009258:	1b5d      	subs	r5, r3, r5
 800925a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800925e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009262:	e7e3      	b.n	800922c <_strtod_l+0x404>
 8009264:	9b08      	ldr	r3, [sp, #32]
 8009266:	3316      	adds	r3, #22
 8009268:	db0b      	blt.n	8009282 <_strtod_l+0x45a>
 800926a:	9b07      	ldr	r3, [sp, #28]
 800926c:	4a57      	ldr	r2, [pc, #348]	; (80093cc <_strtod_l+0x5a4>)
 800926e:	1b9e      	subs	r6, r3, r6
 8009270:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009274:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009278:	4650      	mov	r0, sl
 800927a:	4659      	mov	r1, fp
 800927c:	f7f7 fb16 	bl	80008ac <__aeabi_ddiv>
 8009280:	e7d6      	b.n	8009230 <_strtod_l+0x408>
 8009282:	9b08      	ldr	r3, [sp, #32]
 8009284:	eba5 0808 	sub.w	r8, r5, r8
 8009288:	4498      	add	r8, r3
 800928a:	f1b8 0f00 	cmp.w	r8, #0
 800928e:	dd71      	ble.n	8009374 <_strtod_l+0x54c>
 8009290:	f018 030f 	ands.w	r3, r8, #15
 8009294:	d00a      	beq.n	80092ac <_strtod_l+0x484>
 8009296:	494d      	ldr	r1, [pc, #308]	; (80093cc <_strtod_l+0x5a4>)
 8009298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800929c:	4652      	mov	r2, sl
 800929e:	465b      	mov	r3, fp
 80092a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092a4:	f7f7 f9d8 	bl	8000658 <__aeabi_dmul>
 80092a8:	4682      	mov	sl, r0
 80092aa:	468b      	mov	fp, r1
 80092ac:	f038 080f 	bics.w	r8, r8, #15
 80092b0:	d04d      	beq.n	800934e <_strtod_l+0x526>
 80092b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80092b6:	dd22      	ble.n	80092fe <_strtod_l+0x4d6>
 80092b8:	2500      	movs	r5, #0
 80092ba:	462e      	mov	r6, r5
 80092bc:	9509      	str	r5, [sp, #36]	; 0x24
 80092be:	9507      	str	r5, [sp, #28]
 80092c0:	2322      	movs	r3, #34	; 0x22
 80092c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80093d4 <_strtod_l+0x5ac>
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	f04f 0a00 	mov.w	sl, #0
 80092cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	f43f adec 	beq.w	8008eac <_strtod_l+0x84>
 80092d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80092d6:	4620      	mov	r0, r4
 80092d8:	f001 ffdc 	bl	800b294 <_Bfree>
 80092dc:	9907      	ldr	r1, [sp, #28]
 80092de:	4620      	mov	r0, r4
 80092e0:	f001 ffd8 	bl	800b294 <_Bfree>
 80092e4:	4631      	mov	r1, r6
 80092e6:	4620      	mov	r0, r4
 80092e8:	f001 ffd4 	bl	800b294 <_Bfree>
 80092ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092ee:	4620      	mov	r0, r4
 80092f0:	f001 ffd0 	bl	800b294 <_Bfree>
 80092f4:	4629      	mov	r1, r5
 80092f6:	4620      	mov	r0, r4
 80092f8:	f001 ffcc 	bl	800b294 <_Bfree>
 80092fc:	e5d6      	b.n	8008eac <_strtod_l+0x84>
 80092fe:	2300      	movs	r3, #0
 8009300:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009304:	4650      	mov	r0, sl
 8009306:	4659      	mov	r1, fp
 8009308:	4699      	mov	r9, r3
 800930a:	f1b8 0f01 	cmp.w	r8, #1
 800930e:	dc21      	bgt.n	8009354 <_strtod_l+0x52c>
 8009310:	b10b      	cbz	r3, 8009316 <_strtod_l+0x4ee>
 8009312:	4682      	mov	sl, r0
 8009314:	468b      	mov	fp, r1
 8009316:	4b2e      	ldr	r3, [pc, #184]	; (80093d0 <_strtod_l+0x5a8>)
 8009318:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800931c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009320:	4652      	mov	r2, sl
 8009322:	465b      	mov	r3, fp
 8009324:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009328:	f7f7 f996 	bl	8000658 <__aeabi_dmul>
 800932c:	4b29      	ldr	r3, [pc, #164]	; (80093d4 <_strtod_l+0x5ac>)
 800932e:	460a      	mov	r2, r1
 8009330:	400b      	ands	r3, r1
 8009332:	4929      	ldr	r1, [pc, #164]	; (80093d8 <_strtod_l+0x5b0>)
 8009334:	428b      	cmp	r3, r1
 8009336:	4682      	mov	sl, r0
 8009338:	d8be      	bhi.n	80092b8 <_strtod_l+0x490>
 800933a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800933e:	428b      	cmp	r3, r1
 8009340:	bf86      	itte	hi
 8009342:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80093dc <_strtod_l+0x5b4>
 8009346:	f04f 3aff 	movhi.w	sl, #4294967295
 800934a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800934e:	2300      	movs	r3, #0
 8009350:	9304      	str	r3, [sp, #16]
 8009352:	e081      	b.n	8009458 <_strtod_l+0x630>
 8009354:	f018 0f01 	tst.w	r8, #1
 8009358:	d007      	beq.n	800936a <_strtod_l+0x542>
 800935a:	4b1d      	ldr	r3, [pc, #116]	; (80093d0 <_strtod_l+0x5a8>)
 800935c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f7f7 f978 	bl	8000658 <__aeabi_dmul>
 8009368:	2301      	movs	r3, #1
 800936a:	f109 0901 	add.w	r9, r9, #1
 800936e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009372:	e7ca      	b.n	800930a <_strtod_l+0x4e2>
 8009374:	d0eb      	beq.n	800934e <_strtod_l+0x526>
 8009376:	f1c8 0800 	rsb	r8, r8, #0
 800937a:	f018 020f 	ands.w	r2, r8, #15
 800937e:	d00a      	beq.n	8009396 <_strtod_l+0x56e>
 8009380:	4b12      	ldr	r3, [pc, #72]	; (80093cc <_strtod_l+0x5a4>)
 8009382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009386:	4650      	mov	r0, sl
 8009388:	4659      	mov	r1, fp
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f7f7 fa8d 	bl	80008ac <__aeabi_ddiv>
 8009392:	4682      	mov	sl, r0
 8009394:	468b      	mov	fp, r1
 8009396:	ea5f 1828 	movs.w	r8, r8, asr #4
 800939a:	d0d8      	beq.n	800934e <_strtod_l+0x526>
 800939c:	f1b8 0f1f 	cmp.w	r8, #31
 80093a0:	dd1e      	ble.n	80093e0 <_strtod_l+0x5b8>
 80093a2:	2500      	movs	r5, #0
 80093a4:	462e      	mov	r6, r5
 80093a6:	9509      	str	r5, [sp, #36]	; 0x24
 80093a8:	9507      	str	r5, [sp, #28]
 80093aa:	2322      	movs	r3, #34	; 0x22
 80093ac:	f04f 0a00 	mov.w	sl, #0
 80093b0:	f04f 0b00 	mov.w	fp, #0
 80093b4:	6023      	str	r3, [r4, #0]
 80093b6:	e789      	b.n	80092cc <_strtod_l+0x4a4>
 80093b8:	0800d149 	.word	0x0800d149
 80093bc:	0800d188 	.word	0x0800d188
 80093c0:	0800d141 	.word	0x0800d141
 80093c4:	0800d2cc 	.word	0x0800d2cc
 80093c8:	0800d603 	.word	0x0800d603
 80093cc:	0800d4c8 	.word	0x0800d4c8
 80093d0:	0800d4a0 	.word	0x0800d4a0
 80093d4:	7ff00000 	.word	0x7ff00000
 80093d8:	7ca00000 	.word	0x7ca00000
 80093dc:	7fefffff 	.word	0x7fefffff
 80093e0:	f018 0310 	ands.w	r3, r8, #16
 80093e4:	bf18      	it	ne
 80093e6:	236a      	movne	r3, #106	; 0x6a
 80093e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80097a0 <_strtod_l+0x978>
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	4650      	mov	r0, sl
 80093f0:	4659      	mov	r1, fp
 80093f2:	2300      	movs	r3, #0
 80093f4:	f018 0f01 	tst.w	r8, #1
 80093f8:	d004      	beq.n	8009404 <_strtod_l+0x5dc>
 80093fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80093fe:	f7f7 f92b 	bl	8000658 <__aeabi_dmul>
 8009402:	2301      	movs	r3, #1
 8009404:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009408:	f109 0908 	add.w	r9, r9, #8
 800940c:	d1f2      	bne.n	80093f4 <_strtod_l+0x5cc>
 800940e:	b10b      	cbz	r3, 8009414 <_strtod_l+0x5ec>
 8009410:	4682      	mov	sl, r0
 8009412:	468b      	mov	fp, r1
 8009414:	9b04      	ldr	r3, [sp, #16]
 8009416:	b1bb      	cbz	r3, 8009448 <_strtod_l+0x620>
 8009418:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800941c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009420:	2b00      	cmp	r3, #0
 8009422:	4659      	mov	r1, fp
 8009424:	dd10      	ble.n	8009448 <_strtod_l+0x620>
 8009426:	2b1f      	cmp	r3, #31
 8009428:	f340 8128 	ble.w	800967c <_strtod_l+0x854>
 800942c:	2b34      	cmp	r3, #52	; 0x34
 800942e:	bfde      	ittt	le
 8009430:	3b20      	suble	r3, #32
 8009432:	f04f 32ff 	movle.w	r2, #4294967295
 8009436:	fa02 f303 	lslle.w	r3, r2, r3
 800943a:	f04f 0a00 	mov.w	sl, #0
 800943e:	bfcc      	ite	gt
 8009440:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009444:	ea03 0b01 	andle.w	fp, r3, r1
 8009448:	2200      	movs	r2, #0
 800944a:	2300      	movs	r3, #0
 800944c:	4650      	mov	r0, sl
 800944e:	4659      	mov	r1, fp
 8009450:	f7f7 fb6a 	bl	8000b28 <__aeabi_dcmpeq>
 8009454:	2800      	cmp	r0, #0
 8009456:	d1a4      	bne.n	80093a2 <_strtod_l+0x57a>
 8009458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800945e:	462b      	mov	r3, r5
 8009460:	463a      	mov	r2, r7
 8009462:	4620      	mov	r0, r4
 8009464:	f001 ff82 	bl	800b36c <__s2b>
 8009468:	9009      	str	r0, [sp, #36]	; 0x24
 800946a:	2800      	cmp	r0, #0
 800946c:	f43f af24 	beq.w	80092b8 <_strtod_l+0x490>
 8009470:	9b07      	ldr	r3, [sp, #28]
 8009472:	1b9e      	subs	r6, r3, r6
 8009474:	9b08      	ldr	r3, [sp, #32]
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb4      	ite	lt
 800947a:	4633      	movlt	r3, r6
 800947c:	2300      	movge	r3, #0
 800947e:	9310      	str	r3, [sp, #64]	; 0x40
 8009480:	9b08      	ldr	r3, [sp, #32]
 8009482:	2500      	movs	r5, #0
 8009484:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009488:	9318      	str	r3, [sp, #96]	; 0x60
 800948a:	462e      	mov	r6, r5
 800948c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948e:	4620      	mov	r0, r4
 8009490:	6859      	ldr	r1, [r3, #4]
 8009492:	f001 febf 	bl	800b214 <_Balloc>
 8009496:	9007      	str	r0, [sp, #28]
 8009498:	2800      	cmp	r0, #0
 800949a:	f43f af11 	beq.w	80092c0 <_strtod_l+0x498>
 800949e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	3202      	adds	r2, #2
 80094a4:	f103 010c 	add.w	r1, r3, #12
 80094a8:	0092      	lsls	r2, r2, #2
 80094aa:	300c      	adds	r0, #12
 80094ac:	f001 fea4 	bl	800b1f8 <memcpy>
 80094b0:	ec4b ab10 	vmov	d0, sl, fp
 80094b4:	aa20      	add	r2, sp, #128	; 0x80
 80094b6:	a91f      	add	r1, sp, #124	; 0x7c
 80094b8:	4620      	mov	r0, r4
 80094ba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80094be:	f002 fa91 	bl	800b9e4 <__d2b>
 80094c2:	901e      	str	r0, [sp, #120]	; 0x78
 80094c4:	2800      	cmp	r0, #0
 80094c6:	f43f aefb 	beq.w	80092c0 <_strtod_l+0x498>
 80094ca:	2101      	movs	r1, #1
 80094cc:	4620      	mov	r0, r4
 80094ce:	f001 ffe7 	bl	800b4a0 <__i2b>
 80094d2:	4606      	mov	r6, r0
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f aef3 	beq.w	80092c0 <_strtod_l+0x498>
 80094da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094dc:	9904      	ldr	r1, [sp, #16]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bfab      	itete	ge
 80094e2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80094e4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80094e6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80094e8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80094ec:	bfac      	ite	ge
 80094ee:	eb03 0902 	addge.w	r9, r3, r2
 80094f2:	1ad7      	sublt	r7, r2, r3
 80094f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80094f6:	eba3 0801 	sub.w	r8, r3, r1
 80094fa:	4490      	add	r8, r2
 80094fc:	4ba3      	ldr	r3, [pc, #652]	; (800978c <_strtod_l+0x964>)
 80094fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8009502:	4598      	cmp	r8, r3
 8009504:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009508:	f280 80cc 	bge.w	80096a4 <_strtod_l+0x87c>
 800950c:	eba3 0308 	sub.w	r3, r3, r8
 8009510:	2b1f      	cmp	r3, #31
 8009512:	eba2 0203 	sub.w	r2, r2, r3
 8009516:	f04f 0101 	mov.w	r1, #1
 800951a:	f300 80b6 	bgt.w	800968a <_strtod_l+0x862>
 800951e:	fa01 f303 	lsl.w	r3, r1, r3
 8009522:	9311      	str	r3, [sp, #68]	; 0x44
 8009524:	2300      	movs	r3, #0
 8009526:	930c      	str	r3, [sp, #48]	; 0x30
 8009528:	eb09 0802 	add.w	r8, r9, r2
 800952c:	9b04      	ldr	r3, [sp, #16]
 800952e:	45c1      	cmp	r9, r8
 8009530:	4417      	add	r7, r2
 8009532:	441f      	add	r7, r3
 8009534:	464b      	mov	r3, r9
 8009536:	bfa8      	it	ge
 8009538:	4643      	movge	r3, r8
 800953a:	42bb      	cmp	r3, r7
 800953c:	bfa8      	it	ge
 800953e:	463b      	movge	r3, r7
 8009540:	2b00      	cmp	r3, #0
 8009542:	bfc2      	ittt	gt
 8009544:	eba8 0803 	subgt.w	r8, r8, r3
 8009548:	1aff      	subgt	r7, r7, r3
 800954a:	eba9 0903 	subgt.w	r9, r9, r3
 800954e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	dd17      	ble.n	8009584 <_strtod_l+0x75c>
 8009554:	4631      	mov	r1, r6
 8009556:	461a      	mov	r2, r3
 8009558:	4620      	mov	r0, r4
 800955a:	f002 f85d 	bl	800b618 <__pow5mult>
 800955e:	4606      	mov	r6, r0
 8009560:	2800      	cmp	r0, #0
 8009562:	f43f aead 	beq.w	80092c0 <_strtod_l+0x498>
 8009566:	4601      	mov	r1, r0
 8009568:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800956a:	4620      	mov	r0, r4
 800956c:	f001 ffae 	bl	800b4cc <__multiply>
 8009570:	900f      	str	r0, [sp, #60]	; 0x3c
 8009572:	2800      	cmp	r0, #0
 8009574:	f43f aea4 	beq.w	80092c0 <_strtod_l+0x498>
 8009578:	991e      	ldr	r1, [sp, #120]	; 0x78
 800957a:	4620      	mov	r0, r4
 800957c:	f001 fe8a 	bl	800b294 <_Bfree>
 8009580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009582:	931e      	str	r3, [sp, #120]	; 0x78
 8009584:	f1b8 0f00 	cmp.w	r8, #0
 8009588:	f300 8091 	bgt.w	80096ae <_strtod_l+0x886>
 800958c:	9b08      	ldr	r3, [sp, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	dd08      	ble.n	80095a4 <_strtod_l+0x77c>
 8009592:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009594:	9907      	ldr	r1, [sp, #28]
 8009596:	4620      	mov	r0, r4
 8009598:	f002 f83e 	bl	800b618 <__pow5mult>
 800959c:	9007      	str	r0, [sp, #28]
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f ae8e 	beq.w	80092c0 <_strtod_l+0x498>
 80095a4:	2f00      	cmp	r7, #0
 80095a6:	dd08      	ble.n	80095ba <_strtod_l+0x792>
 80095a8:	9907      	ldr	r1, [sp, #28]
 80095aa:	463a      	mov	r2, r7
 80095ac:	4620      	mov	r0, r4
 80095ae:	f002 f88d 	bl	800b6cc <__lshift>
 80095b2:	9007      	str	r0, [sp, #28]
 80095b4:	2800      	cmp	r0, #0
 80095b6:	f43f ae83 	beq.w	80092c0 <_strtod_l+0x498>
 80095ba:	f1b9 0f00 	cmp.w	r9, #0
 80095be:	dd08      	ble.n	80095d2 <_strtod_l+0x7aa>
 80095c0:	4631      	mov	r1, r6
 80095c2:	464a      	mov	r2, r9
 80095c4:	4620      	mov	r0, r4
 80095c6:	f002 f881 	bl	800b6cc <__lshift>
 80095ca:	4606      	mov	r6, r0
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f43f ae77 	beq.w	80092c0 <_strtod_l+0x498>
 80095d2:	9a07      	ldr	r2, [sp, #28]
 80095d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80095d6:	4620      	mov	r0, r4
 80095d8:	f002 f900 	bl	800b7dc <__mdiff>
 80095dc:	4605      	mov	r5, r0
 80095de:	2800      	cmp	r0, #0
 80095e0:	f43f ae6e 	beq.w	80092c0 <_strtod_l+0x498>
 80095e4:	68c3      	ldr	r3, [r0, #12]
 80095e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80095e8:	2300      	movs	r3, #0
 80095ea:	60c3      	str	r3, [r0, #12]
 80095ec:	4631      	mov	r1, r6
 80095ee:	f002 f8d9 	bl	800b7a4 <__mcmp>
 80095f2:	2800      	cmp	r0, #0
 80095f4:	da65      	bge.n	80096c2 <_strtod_l+0x89a>
 80095f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095f8:	ea53 030a 	orrs.w	r3, r3, sl
 80095fc:	f040 8087 	bne.w	800970e <_strtod_l+0x8e6>
 8009600:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009604:	2b00      	cmp	r3, #0
 8009606:	f040 8082 	bne.w	800970e <_strtod_l+0x8e6>
 800960a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800960e:	0d1b      	lsrs	r3, r3, #20
 8009610:	051b      	lsls	r3, r3, #20
 8009612:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009616:	d97a      	bls.n	800970e <_strtod_l+0x8e6>
 8009618:	696b      	ldr	r3, [r5, #20]
 800961a:	b913      	cbnz	r3, 8009622 <_strtod_l+0x7fa>
 800961c:	692b      	ldr	r3, [r5, #16]
 800961e:	2b01      	cmp	r3, #1
 8009620:	dd75      	ble.n	800970e <_strtod_l+0x8e6>
 8009622:	4629      	mov	r1, r5
 8009624:	2201      	movs	r2, #1
 8009626:	4620      	mov	r0, r4
 8009628:	f002 f850 	bl	800b6cc <__lshift>
 800962c:	4631      	mov	r1, r6
 800962e:	4605      	mov	r5, r0
 8009630:	f002 f8b8 	bl	800b7a4 <__mcmp>
 8009634:	2800      	cmp	r0, #0
 8009636:	dd6a      	ble.n	800970e <_strtod_l+0x8e6>
 8009638:	9904      	ldr	r1, [sp, #16]
 800963a:	4a55      	ldr	r2, [pc, #340]	; (8009790 <_strtod_l+0x968>)
 800963c:	465b      	mov	r3, fp
 800963e:	2900      	cmp	r1, #0
 8009640:	f000 8085 	beq.w	800974e <_strtod_l+0x926>
 8009644:	ea02 010b 	and.w	r1, r2, fp
 8009648:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800964c:	dc7f      	bgt.n	800974e <_strtod_l+0x926>
 800964e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009652:	f77f aeaa 	ble.w	80093aa <_strtod_l+0x582>
 8009656:	4a4f      	ldr	r2, [pc, #316]	; (8009794 <_strtod_l+0x96c>)
 8009658:	2300      	movs	r3, #0
 800965a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800965e:	4650      	mov	r0, sl
 8009660:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009664:	4659      	mov	r1, fp
 8009666:	f7f6 fff7 	bl	8000658 <__aeabi_dmul>
 800966a:	460b      	mov	r3, r1
 800966c:	4303      	orrs	r3, r0
 800966e:	bf08      	it	eq
 8009670:	2322      	moveq	r3, #34	; 0x22
 8009672:	4682      	mov	sl, r0
 8009674:	468b      	mov	fp, r1
 8009676:	bf08      	it	eq
 8009678:	6023      	streq	r3, [r4, #0]
 800967a:	e62b      	b.n	80092d4 <_strtod_l+0x4ac>
 800967c:	f04f 32ff 	mov.w	r2, #4294967295
 8009680:	fa02 f303 	lsl.w	r3, r2, r3
 8009684:	ea03 0a0a 	and.w	sl, r3, sl
 8009688:	e6de      	b.n	8009448 <_strtod_l+0x620>
 800968a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800968e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009692:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009696:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800969a:	fa01 f308 	lsl.w	r3, r1, r8
 800969e:	930c      	str	r3, [sp, #48]	; 0x30
 80096a0:	9111      	str	r1, [sp, #68]	; 0x44
 80096a2:	e741      	b.n	8009528 <_strtod_l+0x700>
 80096a4:	2300      	movs	r3, #0
 80096a6:	930c      	str	r3, [sp, #48]	; 0x30
 80096a8:	2301      	movs	r3, #1
 80096aa:	9311      	str	r3, [sp, #68]	; 0x44
 80096ac:	e73c      	b.n	8009528 <_strtod_l+0x700>
 80096ae:	991e      	ldr	r1, [sp, #120]	; 0x78
 80096b0:	4642      	mov	r2, r8
 80096b2:	4620      	mov	r0, r4
 80096b4:	f002 f80a 	bl	800b6cc <__lshift>
 80096b8:	901e      	str	r0, [sp, #120]	; 0x78
 80096ba:	2800      	cmp	r0, #0
 80096bc:	f47f af66 	bne.w	800958c <_strtod_l+0x764>
 80096c0:	e5fe      	b.n	80092c0 <_strtod_l+0x498>
 80096c2:	465f      	mov	r7, fp
 80096c4:	d16e      	bne.n	80097a4 <_strtod_l+0x97c>
 80096c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096cc:	b342      	cbz	r2, 8009720 <_strtod_l+0x8f8>
 80096ce:	4a32      	ldr	r2, [pc, #200]	; (8009798 <_strtod_l+0x970>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d128      	bne.n	8009726 <_strtod_l+0x8fe>
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	4650      	mov	r0, sl
 80096d8:	b1eb      	cbz	r3, 8009716 <_strtod_l+0x8ee>
 80096da:	4a2d      	ldr	r2, [pc, #180]	; (8009790 <_strtod_l+0x968>)
 80096dc:	403a      	ands	r2, r7
 80096de:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80096e2:	f04f 31ff 	mov.w	r1, #4294967295
 80096e6:	d819      	bhi.n	800971c <_strtod_l+0x8f4>
 80096e8:	0d12      	lsrs	r2, r2, #20
 80096ea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80096ee:	fa01 f303 	lsl.w	r3, r1, r3
 80096f2:	4298      	cmp	r0, r3
 80096f4:	d117      	bne.n	8009726 <_strtod_l+0x8fe>
 80096f6:	4b29      	ldr	r3, [pc, #164]	; (800979c <_strtod_l+0x974>)
 80096f8:	429f      	cmp	r7, r3
 80096fa:	d102      	bne.n	8009702 <_strtod_l+0x8da>
 80096fc:	3001      	adds	r0, #1
 80096fe:	f43f addf 	beq.w	80092c0 <_strtod_l+0x498>
 8009702:	4b23      	ldr	r3, [pc, #140]	; (8009790 <_strtod_l+0x968>)
 8009704:	403b      	ands	r3, r7
 8009706:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800970a:	f04f 0a00 	mov.w	sl, #0
 800970e:	9b04      	ldr	r3, [sp, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1a0      	bne.n	8009656 <_strtod_l+0x82e>
 8009714:	e5de      	b.n	80092d4 <_strtod_l+0x4ac>
 8009716:	f04f 33ff 	mov.w	r3, #4294967295
 800971a:	e7ea      	b.n	80096f2 <_strtod_l+0x8ca>
 800971c:	460b      	mov	r3, r1
 800971e:	e7e8      	b.n	80096f2 <_strtod_l+0x8ca>
 8009720:	ea53 030a 	orrs.w	r3, r3, sl
 8009724:	d088      	beq.n	8009638 <_strtod_l+0x810>
 8009726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009728:	b1db      	cbz	r3, 8009762 <_strtod_l+0x93a>
 800972a:	423b      	tst	r3, r7
 800972c:	d0ef      	beq.n	800970e <_strtod_l+0x8e6>
 800972e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009730:	9a04      	ldr	r2, [sp, #16]
 8009732:	4650      	mov	r0, sl
 8009734:	4659      	mov	r1, fp
 8009736:	b1c3      	cbz	r3, 800976a <_strtod_l+0x942>
 8009738:	f7ff fb57 	bl	8008dea <sulp>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009744:	f7f6 fdd2 	bl	80002ec <__adddf3>
 8009748:	4682      	mov	sl, r0
 800974a:	468b      	mov	fp, r1
 800974c:	e7df      	b.n	800970e <_strtod_l+0x8e6>
 800974e:	4013      	ands	r3, r2
 8009750:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009754:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009758:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800975c:	f04f 3aff 	mov.w	sl, #4294967295
 8009760:	e7d5      	b.n	800970e <_strtod_l+0x8e6>
 8009762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009764:	ea13 0f0a 	tst.w	r3, sl
 8009768:	e7e0      	b.n	800972c <_strtod_l+0x904>
 800976a:	f7ff fb3e 	bl	8008dea <sulp>
 800976e:	4602      	mov	r2, r0
 8009770:	460b      	mov	r3, r1
 8009772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009776:	f7f6 fdb7 	bl	80002e8 <__aeabi_dsub>
 800977a:	2200      	movs	r2, #0
 800977c:	2300      	movs	r3, #0
 800977e:	4682      	mov	sl, r0
 8009780:	468b      	mov	fp, r1
 8009782:	f7f7 f9d1 	bl	8000b28 <__aeabi_dcmpeq>
 8009786:	2800      	cmp	r0, #0
 8009788:	d0c1      	beq.n	800970e <_strtod_l+0x8e6>
 800978a:	e60e      	b.n	80093aa <_strtod_l+0x582>
 800978c:	fffffc02 	.word	0xfffffc02
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	39500000 	.word	0x39500000
 8009798:	000fffff 	.word	0x000fffff
 800979c:	7fefffff 	.word	0x7fefffff
 80097a0:	0800d1a0 	.word	0x0800d1a0
 80097a4:	4631      	mov	r1, r6
 80097a6:	4628      	mov	r0, r5
 80097a8:	f002 f978 	bl	800ba9c <__ratio>
 80097ac:	ec59 8b10 	vmov	r8, r9, d0
 80097b0:	ee10 0a10 	vmov	r0, s0
 80097b4:	2200      	movs	r2, #0
 80097b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7f7 f9c8 	bl	8000b50 <__aeabi_dcmple>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d07c      	beq.n	80098be <_strtod_l+0xa96>
 80097c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d04c      	beq.n	8009864 <_strtod_l+0xa3c>
 80097ca:	4b95      	ldr	r3, [pc, #596]	; (8009a20 <_strtod_l+0xbf8>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009a20 <_strtod_l+0xbf8>
 80097d6:	f04f 0800 	mov.w	r8, #0
 80097da:	4b92      	ldr	r3, [pc, #584]	; (8009a24 <_strtod_l+0xbfc>)
 80097dc:	403b      	ands	r3, r7
 80097de:	9311      	str	r3, [sp, #68]	; 0x44
 80097e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097e2:	4b91      	ldr	r3, [pc, #580]	; (8009a28 <_strtod_l+0xc00>)
 80097e4:	429a      	cmp	r2, r3
 80097e6:	f040 80b2 	bne.w	800994e <_strtod_l+0xb26>
 80097ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097f2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80097f6:	ec4b ab10 	vmov	d0, sl, fp
 80097fa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80097fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009802:	f002 f873 	bl	800b8ec <__ulp>
 8009806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800980a:	ec53 2b10 	vmov	r2, r3, d0
 800980e:	f7f6 ff23 	bl	8000658 <__aeabi_dmul>
 8009812:	4652      	mov	r2, sl
 8009814:	465b      	mov	r3, fp
 8009816:	f7f6 fd69 	bl	80002ec <__adddf3>
 800981a:	460b      	mov	r3, r1
 800981c:	4981      	ldr	r1, [pc, #516]	; (8009a24 <_strtod_l+0xbfc>)
 800981e:	4a83      	ldr	r2, [pc, #524]	; (8009a2c <_strtod_l+0xc04>)
 8009820:	4019      	ands	r1, r3
 8009822:	4291      	cmp	r1, r2
 8009824:	4682      	mov	sl, r0
 8009826:	d95e      	bls.n	80098e6 <_strtod_l+0xabe>
 8009828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800982a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800982e:	4293      	cmp	r3, r2
 8009830:	d103      	bne.n	800983a <_strtod_l+0xa12>
 8009832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009834:	3301      	adds	r3, #1
 8009836:	f43f ad43 	beq.w	80092c0 <_strtod_l+0x498>
 800983a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009a38 <_strtod_l+0xc10>
 800983e:	f04f 3aff 	mov.w	sl, #4294967295
 8009842:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009844:	4620      	mov	r0, r4
 8009846:	f001 fd25 	bl	800b294 <_Bfree>
 800984a:	9907      	ldr	r1, [sp, #28]
 800984c:	4620      	mov	r0, r4
 800984e:	f001 fd21 	bl	800b294 <_Bfree>
 8009852:	4631      	mov	r1, r6
 8009854:	4620      	mov	r0, r4
 8009856:	f001 fd1d 	bl	800b294 <_Bfree>
 800985a:	4629      	mov	r1, r5
 800985c:	4620      	mov	r0, r4
 800985e:	f001 fd19 	bl	800b294 <_Bfree>
 8009862:	e613      	b.n	800948c <_strtod_l+0x664>
 8009864:	f1ba 0f00 	cmp.w	sl, #0
 8009868:	d11b      	bne.n	80098a2 <_strtod_l+0xa7a>
 800986a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800986e:	b9f3      	cbnz	r3, 80098ae <_strtod_l+0xa86>
 8009870:	4b6b      	ldr	r3, [pc, #428]	; (8009a20 <_strtod_l+0xbf8>)
 8009872:	2200      	movs	r2, #0
 8009874:	4640      	mov	r0, r8
 8009876:	4649      	mov	r1, r9
 8009878:	f7f7 f960 	bl	8000b3c <__aeabi_dcmplt>
 800987c:	b9d0      	cbnz	r0, 80098b4 <_strtod_l+0xa8c>
 800987e:	4640      	mov	r0, r8
 8009880:	4649      	mov	r1, r9
 8009882:	4b6b      	ldr	r3, [pc, #428]	; (8009a30 <_strtod_l+0xc08>)
 8009884:	2200      	movs	r2, #0
 8009886:	f7f6 fee7 	bl	8000658 <__aeabi_dmul>
 800988a:	4680      	mov	r8, r0
 800988c:	4689      	mov	r9, r1
 800988e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009892:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009896:	931b      	str	r3, [sp, #108]	; 0x6c
 8009898:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800989c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80098a0:	e79b      	b.n	80097da <_strtod_l+0x9b2>
 80098a2:	f1ba 0f01 	cmp.w	sl, #1
 80098a6:	d102      	bne.n	80098ae <_strtod_l+0xa86>
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	f43f ad7e 	beq.w	80093aa <_strtod_l+0x582>
 80098ae:	4b61      	ldr	r3, [pc, #388]	; (8009a34 <_strtod_l+0xc0c>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	e78c      	b.n	80097ce <_strtod_l+0x9a6>
 80098b4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009a30 <_strtod_l+0xc08>
 80098b8:	f04f 0800 	mov.w	r8, #0
 80098bc:	e7e7      	b.n	800988e <_strtod_l+0xa66>
 80098be:	4b5c      	ldr	r3, [pc, #368]	; (8009a30 <_strtod_l+0xc08>)
 80098c0:	4640      	mov	r0, r8
 80098c2:	4649      	mov	r1, r9
 80098c4:	2200      	movs	r2, #0
 80098c6:	f7f6 fec7 	bl	8000658 <__aeabi_dmul>
 80098ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098cc:	4680      	mov	r8, r0
 80098ce:	4689      	mov	r9, r1
 80098d0:	b933      	cbnz	r3, 80098e0 <_strtod_l+0xab8>
 80098d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098d6:	9012      	str	r0, [sp, #72]	; 0x48
 80098d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80098da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80098de:	e7dd      	b.n	800989c <_strtod_l+0xa74>
 80098e0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80098e4:	e7f9      	b.n	80098da <_strtod_l+0xab2>
 80098e6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80098ea:	9b04      	ldr	r3, [sp, #16]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1a8      	bne.n	8009842 <_strtod_l+0xa1a>
 80098f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80098f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098f6:	0d1b      	lsrs	r3, r3, #20
 80098f8:	051b      	lsls	r3, r3, #20
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d1a1      	bne.n	8009842 <_strtod_l+0xa1a>
 80098fe:	4640      	mov	r0, r8
 8009900:	4649      	mov	r1, r9
 8009902:	f7f7 fa09 	bl	8000d18 <__aeabi_d2lz>
 8009906:	f7f6 fe79 	bl	80005fc <__aeabi_l2d>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f6 fce9 	bl	80002e8 <__aeabi_dsub>
 8009916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800991c:	ea43 030a 	orr.w	r3, r3, sl
 8009920:	4313      	orrs	r3, r2
 8009922:	4680      	mov	r8, r0
 8009924:	4689      	mov	r9, r1
 8009926:	d053      	beq.n	80099d0 <_strtod_l+0xba8>
 8009928:	a335      	add	r3, pc, #212	; (adr r3, 8009a00 <_strtod_l+0xbd8>)
 800992a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992e:	f7f7 f905 	bl	8000b3c <__aeabi_dcmplt>
 8009932:	2800      	cmp	r0, #0
 8009934:	f47f acce 	bne.w	80092d4 <_strtod_l+0x4ac>
 8009938:	a333      	add	r3, pc, #204	; (adr r3, 8009a08 <_strtod_l+0xbe0>)
 800993a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993e:	4640      	mov	r0, r8
 8009940:	4649      	mov	r1, r9
 8009942:	f7f7 f919 	bl	8000b78 <__aeabi_dcmpgt>
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f af7b 	beq.w	8009842 <_strtod_l+0xa1a>
 800994c:	e4c2      	b.n	80092d4 <_strtod_l+0x4ac>
 800994e:	9b04      	ldr	r3, [sp, #16]
 8009950:	b333      	cbz	r3, 80099a0 <_strtod_l+0xb78>
 8009952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009954:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009958:	d822      	bhi.n	80099a0 <_strtod_l+0xb78>
 800995a:	a32d      	add	r3, pc, #180	; (adr r3, 8009a10 <_strtod_l+0xbe8>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	4640      	mov	r0, r8
 8009962:	4649      	mov	r1, r9
 8009964:	f7f7 f8f4 	bl	8000b50 <__aeabi_dcmple>
 8009968:	b1a0      	cbz	r0, 8009994 <_strtod_l+0xb6c>
 800996a:	4649      	mov	r1, r9
 800996c:	4640      	mov	r0, r8
 800996e:	f7f7 f94b 	bl	8000c08 <__aeabi_d2uiz>
 8009972:	2801      	cmp	r0, #1
 8009974:	bf38      	it	cc
 8009976:	2001      	movcc	r0, #1
 8009978:	f7f6 fdf4 	bl	8000564 <__aeabi_ui2d>
 800997c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800997e:	4680      	mov	r8, r0
 8009980:	4689      	mov	r9, r1
 8009982:	bb13      	cbnz	r3, 80099ca <_strtod_l+0xba2>
 8009984:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009988:	9014      	str	r0, [sp, #80]	; 0x50
 800998a:	9315      	str	r3, [sp, #84]	; 0x54
 800998c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009990:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009996:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009998:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800999c:	1a9b      	subs	r3, r3, r2
 800999e:	930d      	str	r3, [sp, #52]	; 0x34
 80099a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099a4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80099a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099ac:	f001 ff9e 	bl	800b8ec <__ulp>
 80099b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099b4:	ec53 2b10 	vmov	r2, r3, d0
 80099b8:	f7f6 fe4e 	bl	8000658 <__aeabi_dmul>
 80099bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80099c0:	f7f6 fc94 	bl	80002ec <__adddf3>
 80099c4:	4682      	mov	sl, r0
 80099c6:	468b      	mov	fp, r1
 80099c8:	e78f      	b.n	80098ea <_strtod_l+0xac2>
 80099ca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80099ce:	e7dd      	b.n	800998c <_strtod_l+0xb64>
 80099d0:	a311      	add	r3, pc, #68	; (adr r3, 8009a18 <_strtod_l+0xbf0>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f7 f8b1 	bl	8000b3c <__aeabi_dcmplt>
 80099da:	e7b4      	b.n	8009946 <_strtod_l+0xb1e>
 80099dc:	2300      	movs	r3, #0
 80099de:	930e      	str	r3, [sp, #56]	; 0x38
 80099e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80099e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	f7ff ba65 	b.w	8008eb4 <_strtod_l+0x8c>
 80099ea:	2b65      	cmp	r3, #101	; 0x65
 80099ec:	f43f ab5d 	beq.w	80090aa <_strtod_l+0x282>
 80099f0:	2b45      	cmp	r3, #69	; 0x45
 80099f2:	f43f ab5a 	beq.w	80090aa <_strtod_l+0x282>
 80099f6:	2201      	movs	r2, #1
 80099f8:	f7ff bb92 	b.w	8009120 <_strtod_l+0x2f8>
 80099fc:	f3af 8000 	nop.w
 8009a00:	94a03595 	.word	0x94a03595
 8009a04:	3fdfffff 	.word	0x3fdfffff
 8009a08:	35afe535 	.word	0x35afe535
 8009a0c:	3fe00000 	.word	0x3fe00000
 8009a10:	ffc00000 	.word	0xffc00000
 8009a14:	41dfffff 	.word	0x41dfffff
 8009a18:	94a03595 	.word	0x94a03595
 8009a1c:	3fcfffff 	.word	0x3fcfffff
 8009a20:	3ff00000 	.word	0x3ff00000
 8009a24:	7ff00000 	.word	0x7ff00000
 8009a28:	7fe00000 	.word	0x7fe00000
 8009a2c:	7c9fffff 	.word	0x7c9fffff
 8009a30:	3fe00000 	.word	0x3fe00000
 8009a34:	bff00000 	.word	0xbff00000
 8009a38:	7fefffff 	.word	0x7fefffff

08009a3c <_strtod_r>:
 8009a3c:	4b01      	ldr	r3, [pc, #4]	; (8009a44 <_strtod_r+0x8>)
 8009a3e:	f7ff b9f3 	b.w	8008e28 <_strtod_l>
 8009a42:	bf00      	nop
 8009a44:	200000dc 	.word	0x200000dc

08009a48 <_strtol_l.isra.0>:
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a4e:	d001      	beq.n	8009a54 <_strtol_l.isra.0+0xc>
 8009a50:	2b24      	cmp	r3, #36	; 0x24
 8009a52:	d906      	bls.n	8009a62 <_strtol_l.isra.0+0x1a>
 8009a54:	f7fe fa6e 	bl	8007f34 <__errno>
 8009a58:	2316      	movs	r3, #22
 8009a5a:	6003      	str	r3, [r0, #0]
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a62:	4f3a      	ldr	r7, [pc, #232]	; (8009b4c <_strtol_l.isra.0+0x104>)
 8009a64:	468e      	mov	lr, r1
 8009a66:	4676      	mov	r6, lr
 8009a68:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009a6c:	5de5      	ldrb	r5, [r4, r7]
 8009a6e:	f015 0508 	ands.w	r5, r5, #8
 8009a72:	d1f8      	bne.n	8009a66 <_strtol_l.isra.0+0x1e>
 8009a74:	2c2d      	cmp	r4, #45	; 0x2d
 8009a76:	d134      	bne.n	8009ae2 <_strtol_l.isra.0+0x9a>
 8009a78:	f89e 4000 	ldrb.w	r4, [lr]
 8009a7c:	f04f 0801 	mov.w	r8, #1
 8009a80:	f106 0e02 	add.w	lr, r6, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d05c      	beq.n	8009b42 <_strtol_l.isra.0+0xfa>
 8009a88:	2b10      	cmp	r3, #16
 8009a8a:	d10c      	bne.n	8009aa6 <_strtol_l.isra.0+0x5e>
 8009a8c:	2c30      	cmp	r4, #48	; 0x30
 8009a8e:	d10a      	bne.n	8009aa6 <_strtol_l.isra.0+0x5e>
 8009a90:	f89e 4000 	ldrb.w	r4, [lr]
 8009a94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a98:	2c58      	cmp	r4, #88	; 0x58
 8009a9a:	d14d      	bne.n	8009b38 <_strtol_l.isra.0+0xf0>
 8009a9c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	f10e 0e02 	add.w	lr, lr, #2
 8009aa6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009aaa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009aae:	2600      	movs	r6, #0
 8009ab0:	fbbc f9f3 	udiv	r9, ip, r3
 8009ab4:	4635      	mov	r5, r6
 8009ab6:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009abe:	2f09      	cmp	r7, #9
 8009ac0:	d818      	bhi.n	8009af4 <_strtol_l.isra.0+0xac>
 8009ac2:	463c      	mov	r4, r7
 8009ac4:	42a3      	cmp	r3, r4
 8009ac6:	dd24      	ble.n	8009b12 <_strtol_l.isra.0+0xca>
 8009ac8:	2e00      	cmp	r6, #0
 8009aca:	db1f      	blt.n	8009b0c <_strtol_l.isra.0+0xc4>
 8009acc:	45a9      	cmp	r9, r5
 8009ace:	d31d      	bcc.n	8009b0c <_strtol_l.isra.0+0xc4>
 8009ad0:	d101      	bne.n	8009ad6 <_strtol_l.isra.0+0x8e>
 8009ad2:	45a2      	cmp	sl, r4
 8009ad4:	db1a      	blt.n	8009b0c <_strtol_l.isra.0+0xc4>
 8009ad6:	fb05 4503 	mla	r5, r5, r3, r4
 8009ada:	2601      	movs	r6, #1
 8009adc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009ae0:	e7eb      	b.n	8009aba <_strtol_l.isra.0+0x72>
 8009ae2:	2c2b      	cmp	r4, #43	; 0x2b
 8009ae4:	bf08      	it	eq
 8009ae6:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009aea:	46a8      	mov	r8, r5
 8009aec:	bf08      	it	eq
 8009aee:	f106 0e02 	addeq.w	lr, r6, #2
 8009af2:	e7c7      	b.n	8009a84 <_strtol_l.isra.0+0x3c>
 8009af4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009af8:	2f19      	cmp	r7, #25
 8009afa:	d801      	bhi.n	8009b00 <_strtol_l.isra.0+0xb8>
 8009afc:	3c37      	subs	r4, #55	; 0x37
 8009afe:	e7e1      	b.n	8009ac4 <_strtol_l.isra.0+0x7c>
 8009b00:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009b04:	2f19      	cmp	r7, #25
 8009b06:	d804      	bhi.n	8009b12 <_strtol_l.isra.0+0xca>
 8009b08:	3c57      	subs	r4, #87	; 0x57
 8009b0a:	e7db      	b.n	8009ac4 <_strtol_l.isra.0+0x7c>
 8009b0c:	f04f 36ff 	mov.w	r6, #4294967295
 8009b10:	e7e4      	b.n	8009adc <_strtol_l.isra.0+0x94>
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	da05      	bge.n	8009b22 <_strtol_l.isra.0+0xda>
 8009b16:	2322      	movs	r3, #34	; 0x22
 8009b18:	6003      	str	r3, [r0, #0]
 8009b1a:	4665      	mov	r5, ip
 8009b1c:	b942      	cbnz	r2, 8009b30 <_strtol_l.isra.0+0xe8>
 8009b1e:	4628      	mov	r0, r5
 8009b20:	e79d      	b.n	8009a5e <_strtol_l.isra.0+0x16>
 8009b22:	f1b8 0f00 	cmp.w	r8, #0
 8009b26:	d000      	beq.n	8009b2a <_strtol_l.isra.0+0xe2>
 8009b28:	426d      	negs	r5, r5
 8009b2a:	2a00      	cmp	r2, #0
 8009b2c:	d0f7      	beq.n	8009b1e <_strtol_l.isra.0+0xd6>
 8009b2e:	b10e      	cbz	r6, 8009b34 <_strtol_l.isra.0+0xec>
 8009b30:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009b34:	6011      	str	r1, [r2, #0]
 8009b36:	e7f2      	b.n	8009b1e <_strtol_l.isra.0+0xd6>
 8009b38:	2430      	movs	r4, #48	; 0x30
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1b3      	bne.n	8009aa6 <_strtol_l.isra.0+0x5e>
 8009b3e:	2308      	movs	r3, #8
 8009b40:	e7b1      	b.n	8009aa6 <_strtol_l.isra.0+0x5e>
 8009b42:	2c30      	cmp	r4, #48	; 0x30
 8009b44:	d0a4      	beq.n	8009a90 <_strtol_l.isra.0+0x48>
 8009b46:	230a      	movs	r3, #10
 8009b48:	e7ad      	b.n	8009aa6 <_strtol_l.isra.0+0x5e>
 8009b4a:	bf00      	nop
 8009b4c:	0800d1c9 	.word	0x0800d1c9

08009b50 <_strtol_r>:
 8009b50:	f7ff bf7a 	b.w	8009a48 <_strtol_l.isra.0>

08009b54 <_vsiprintf_r>:
 8009b54:	b500      	push	{lr}
 8009b56:	b09b      	sub	sp, #108	; 0x6c
 8009b58:	9100      	str	r1, [sp, #0]
 8009b5a:	9104      	str	r1, [sp, #16]
 8009b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b60:	9105      	str	r1, [sp, #20]
 8009b62:	9102      	str	r1, [sp, #8]
 8009b64:	4905      	ldr	r1, [pc, #20]	; (8009b7c <_vsiprintf_r+0x28>)
 8009b66:	9103      	str	r1, [sp, #12]
 8009b68:	4669      	mov	r1, sp
 8009b6a:	f002 f923 	bl	800bdb4 <_svfiprintf_r>
 8009b6e:	9b00      	ldr	r3, [sp, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]
 8009b74:	b01b      	add	sp, #108	; 0x6c
 8009b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b7a:	bf00      	nop
 8009b7c:	ffff0208 	.word	0xffff0208

08009b80 <vsiprintf>:
 8009b80:	4613      	mov	r3, r2
 8009b82:	460a      	mov	r2, r1
 8009b84:	4601      	mov	r1, r0
 8009b86:	4802      	ldr	r0, [pc, #8]	; (8009b90 <vsiprintf+0x10>)
 8009b88:	6800      	ldr	r0, [r0, #0]
 8009b8a:	f7ff bfe3 	b.w	8009b54 <_vsiprintf_r>
 8009b8e:	bf00      	nop
 8009b90:	20000074 	.word	0x20000074

08009b94 <_write_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4d07      	ldr	r5, [pc, #28]	; (8009bb4 <_write_r+0x20>)
 8009b98:	4604      	mov	r4, r0
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	4611      	mov	r1, r2
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	f7f8 fa83 	bl	80020ae <_write>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	d102      	bne.n	8009bb2 <_write_r+0x1e>
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	b103      	cbz	r3, 8009bb2 <_write_r+0x1e>
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	bd38      	pop	{r3, r4, r5, pc}
 8009bb4:	20000960 	.word	0x20000960

08009bb8 <_close_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d06      	ldr	r5, [pc, #24]	; (8009bd4 <_close_r+0x1c>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	602b      	str	r3, [r5, #0]
 8009bc4:	f7f8 fa8f 	bl	80020e6 <_close>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_close_r+0x1a>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_close_r+0x1a>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20000960 	.word	0x20000960

08009bd8 <quorem>:
 8009bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	6903      	ldr	r3, [r0, #16]
 8009bde:	690c      	ldr	r4, [r1, #16]
 8009be0:	42a3      	cmp	r3, r4
 8009be2:	4607      	mov	r7, r0
 8009be4:	f2c0 8081 	blt.w	8009cea <quorem+0x112>
 8009be8:	3c01      	subs	r4, #1
 8009bea:	f101 0814 	add.w	r8, r1, #20
 8009bee:	f100 0514 	add.w	r5, r0, #20
 8009bf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009bfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c00:	3301      	adds	r3, #1
 8009c02:	429a      	cmp	r2, r3
 8009c04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c10:	d331      	bcc.n	8009c76 <quorem+0x9e>
 8009c12:	f04f 0e00 	mov.w	lr, #0
 8009c16:	4640      	mov	r0, r8
 8009c18:	46ac      	mov	ip, r5
 8009c1a:	46f2      	mov	sl, lr
 8009c1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c20:	b293      	uxth	r3, r2
 8009c22:	fb06 e303 	mla	r3, r6, r3, lr
 8009c26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	ebaa 0303 	sub.w	r3, sl, r3
 8009c30:	0c12      	lsrs	r2, r2, #16
 8009c32:	f8dc a000 	ldr.w	sl, [ip]
 8009c36:	fb06 e202 	mla	r2, r6, r2, lr
 8009c3a:	fa13 f38a 	uxtah	r3, r3, sl
 8009c3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009c42:	fa1f fa82 	uxth.w	sl, r2
 8009c46:	f8dc 2000 	ldr.w	r2, [ip]
 8009c4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009c4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c58:	4581      	cmp	r9, r0
 8009c5a:	f84c 3b04 	str.w	r3, [ip], #4
 8009c5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c62:	d2db      	bcs.n	8009c1c <quorem+0x44>
 8009c64:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c68:	b92b      	cbnz	r3, 8009c76 <quorem+0x9e>
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	3b04      	subs	r3, #4
 8009c6e:	429d      	cmp	r5, r3
 8009c70:	461a      	mov	r2, r3
 8009c72:	d32e      	bcc.n	8009cd2 <quorem+0xfa>
 8009c74:	613c      	str	r4, [r7, #16]
 8009c76:	4638      	mov	r0, r7
 8009c78:	f001 fd94 	bl	800b7a4 <__mcmp>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	db24      	blt.n	8009cca <quorem+0xf2>
 8009c80:	3601      	adds	r6, #1
 8009c82:	4628      	mov	r0, r5
 8009c84:	f04f 0c00 	mov.w	ip, #0
 8009c88:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c8c:	f8d0 e000 	ldr.w	lr, [r0]
 8009c90:	b293      	uxth	r3, r2
 8009c92:	ebac 0303 	sub.w	r3, ip, r3
 8009c96:	0c12      	lsrs	r2, r2, #16
 8009c98:	fa13 f38e 	uxtah	r3, r3, lr
 8009c9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009caa:	45c1      	cmp	r9, r8
 8009cac:	f840 3b04 	str.w	r3, [r0], #4
 8009cb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009cb4:	d2e8      	bcs.n	8009c88 <quorem+0xb0>
 8009cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cbe:	b922      	cbnz	r2, 8009cca <quorem+0xf2>
 8009cc0:	3b04      	subs	r3, #4
 8009cc2:	429d      	cmp	r5, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	d30a      	bcc.n	8009cde <quorem+0x106>
 8009cc8:	613c      	str	r4, [r7, #16]
 8009cca:	4630      	mov	r0, r6
 8009ccc:	b003      	add	sp, #12
 8009cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd2:	6812      	ldr	r2, [r2, #0]
 8009cd4:	3b04      	subs	r3, #4
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	d1cc      	bne.n	8009c74 <quorem+0x9c>
 8009cda:	3c01      	subs	r4, #1
 8009cdc:	e7c7      	b.n	8009c6e <quorem+0x96>
 8009cde:	6812      	ldr	r2, [r2, #0]
 8009ce0:	3b04      	subs	r3, #4
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	d1f0      	bne.n	8009cc8 <quorem+0xf0>
 8009ce6:	3c01      	subs	r4, #1
 8009ce8:	e7eb      	b.n	8009cc2 <quorem+0xea>
 8009cea:	2000      	movs	r0, #0
 8009cec:	e7ee      	b.n	8009ccc <quorem+0xf4>
	...

08009cf0 <_dtoa_r>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	ed2d 8b02 	vpush	{d8}
 8009cf8:	ec57 6b10 	vmov	r6, r7, d0
 8009cfc:	b095      	sub	sp, #84	; 0x54
 8009cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d04:	9105      	str	r1, [sp, #20]
 8009d06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d10:	b975      	cbnz	r5, 8009d30 <_dtoa_r+0x40>
 8009d12:	2010      	movs	r0, #16
 8009d14:	f001 fa56 	bl	800b1c4 <malloc>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	6260      	str	r0, [r4, #36]	; 0x24
 8009d1c:	b920      	cbnz	r0, 8009d28 <_dtoa_r+0x38>
 8009d1e:	4bb2      	ldr	r3, [pc, #712]	; (8009fe8 <_dtoa_r+0x2f8>)
 8009d20:	21ea      	movs	r1, #234	; 0xea
 8009d22:	48b2      	ldr	r0, [pc, #712]	; (8009fec <_dtoa_r+0x2fc>)
 8009d24:	f002 ffba 	bl	800cc9c <__assert_func>
 8009d28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d2c:	6005      	str	r5, [r0, #0]
 8009d2e:	60c5      	str	r5, [r0, #12]
 8009d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	b151      	cbz	r1, 8009d4c <_dtoa_r+0x5c>
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	604a      	str	r2, [r1, #4]
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4093      	lsls	r3, r2
 8009d3e:	608b      	str	r3, [r1, #8]
 8009d40:	4620      	mov	r0, r4
 8009d42:	f001 faa7 	bl	800b294 <_Bfree>
 8009d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	1e3b      	subs	r3, r7, #0
 8009d4e:	bfb9      	ittee	lt
 8009d50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d54:	9303      	strlt	r3, [sp, #12]
 8009d56:	2300      	movge	r3, #0
 8009d58:	f8c8 3000 	strge.w	r3, [r8]
 8009d5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009d60:	4ba3      	ldr	r3, [pc, #652]	; (8009ff0 <_dtoa_r+0x300>)
 8009d62:	bfbc      	itt	lt
 8009d64:	2201      	movlt	r2, #1
 8009d66:	f8c8 2000 	strlt.w	r2, [r8]
 8009d6a:	ea33 0309 	bics.w	r3, r3, r9
 8009d6e:	d11b      	bne.n	8009da8 <_dtoa_r+0xb8>
 8009d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d72:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d7c:	4333      	orrs	r3, r6
 8009d7e:	f000 857a 	beq.w	800a876 <_dtoa_r+0xb86>
 8009d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d84:	b963      	cbnz	r3, 8009da0 <_dtoa_r+0xb0>
 8009d86:	4b9b      	ldr	r3, [pc, #620]	; (8009ff4 <_dtoa_r+0x304>)
 8009d88:	e024      	b.n	8009dd4 <_dtoa_r+0xe4>
 8009d8a:	4b9b      	ldr	r3, [pc, #620]	; (8009ff8 <_dtoa_r+0x308>)
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	3308      	adds	r3, #8
 8009d90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	9800      	ldr	r0, [sp, #0]
 8009d96:	b015      	add	sp, #84	; 0x54
 8009d98:	ecbd 8b02 	vpop	{d8}
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	4b94      	ldr	r3, [pc, #592]	; (8009ff4 <_dtoa_r+0x304>)
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	3303      	adds	r3, #3
 8009da6:	e7f3      	b.n	8009d90 <_dtoa_r+0xa0>
 8009da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dac:	2200      	movs	r2, #0
 8009dae:	ec51 0b17 	vmov	r0, r1, d7
 8009db2:	2300      	movs	r3, #0
 8009db4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009db8:	f7f6 feb6 	bl	8000b28 <__aeabi_dcmpeq>
 8009dbc:	4680      	mov	r8, r0
 8009dbe:	b158      	cbz	r0, 8009dd8 <_dtoa_r+0xe8>
 8009dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 8551 	beq.w	800a870 <_dtoa_r+0xb80>
 8009dce:	488b      	ldr	r0, [pc, #556]	; (8009ffc <_dtoa_r+0x30c>)
 8009dd0:	6018      	str	r0, [r3, #0]
 8009dd2:	1e43      	subs	r3, r0, #1
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	e7dd      	b.n	8009d94 <_dtoa_r+0xa4>
 8009dd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009ddc:	aa12      	add	r2, sp, #72	; 0x48
 8009dde:	a913      	add	r1, sp, #76	; 0x4c
 8009de0:	4620      	mov	r0, r4
 8009de2:	f001 fdff 	bl	800b9e4 <__d2b>
 8009de6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dea:	4683      	mov	fp, r0
 8009dec:	2d00      	cmp	r5, #0
 8009dee:	d07c      	beq.n	8009eea <_dtoa_r+0x1fa>
 8009df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009df2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dfa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009dfe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e0a:	4b7d      	ldr	r3, [pc, #500]	; (800a000 <_dtoa_r+0x310>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	f7f6 fa69 	bl	80002e8 <__aeabi_dsub>
 8009e16:	a36e      	add	r3, pc, #440	; (adr r3, 8009fd0 <_dtoa_r+0x2e0>)
 8009e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1c:	f7f6 fc1c 	bl	8000658 <__aeabi_dmul>
 8009e20:	a36d      	add	r3, pc, #436	; (adr r3, 8009fd8 <_dtoa_r+0x2e8>)
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f7f6 fa61 	bl	80002ec <__adddf3>
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	460f      	mov	r7, r1
 8009e30:	f7f6 fba8 	bl	8000584 <__aeabi_i2d>
 8009e34:	a36a      	add	r3, pc, #424	; (adr r3, 8009fe0 <_dtoa_r+0x2f0>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fc0d 	bl	8000658 <__aeabi_dmul>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4630      	mov	r0, r6
 8009e44:	4639      	mov	r1, r7
 8009e46:	f7f6 fa51 	bl	80002ec <__adddf3>
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	460f      	mov	r7, r1
 8009e4e:	f7f6 feb3 	bl	8000bb8 <__aeabi_d2iz>
 8009e52:	2200      	movs	r2, #0
 8009e54:	4682      	mov	sl, r0
 8009e56:	2300      	movs	r3, #0
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 fe6e 	bl	8000b3c <__aeabi_dcmplt>
 8009e60:	b148      	cbz	r0, 8009e76 <_dtoa_r+0x186>
 8009e62:	4650      	mov	r0, sl
 8009e64:	f7f6 fb8e 	bl	8000584 <__aeabi_i2d>
 8009e68:	4632      	mov	r2, r6
 8009e6a:	463b      	mov	r3, r7
 8009e6c:	f7f6 fe5c 	bl	8000b28 <__aeabi_dcmpeq>
 8009e70:	b908      	cbnz	r0, 8009e76 <_dtoa_r+0x186>
 8009e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e76:	f1ba 0f16 	cmp.w	sl, #22
 8009e7a:	d854      	bhi.n	8009f26 <_dtoa_r+0x236>
 8009e7c:	4b61      	ldr	r3, [pc, #388]	; (800a004 <_dtoa_r+0x314>)
 8009e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e8a:	f7f6 fe57 	bl	8000b3c <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d04b      	beq.n	8009f2a <_dtoa_r+0x23a>
 8009e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e96:	2300      	movs	r3, #0
 8009e98:	930e      	str	r3, [sp, #56]	; 0x38
 8009e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e9c:	1b5d      	subs	r5, r3, r5
 8009e9e:	1e6b      	subs	r3, r5, #1
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	bf43      	ittte	mi
 8009ea4:	2300      	movmi	r3, #0
 8009ea6:	f1c5 0801 	rsbmi	r8, r5, #1
 8009eaa:	9304      	strmi	r3, [sp, #16]
 8009eac:	f04f 0800 	movpl.w	r8, #0
 8009eb0:	f1ba 0f00 	cmp.w	sl, #0
 8009eb4:	db3b      	blt.n	8009f2e <_dtoa_r+0x23e>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009ebc:	4453      	add	r3, sl
 8009ebe:	9304      	str	r3, [sp, #16]
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	9306      	str	r3, [sp, #24]
 8009ec4:	9b05      	ldr	r3, [sp, #20]
 8009ec6:	2b09      	cmp	r3, #9
 8009ec8:	d869      	bhi.n	8009f9e <_dtoa_r+0x2ae>
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	bfc4      	itt	gt
 8009ece:	3b04      	subgt	r3, #4
 8009ed0:	9305      	strgt	r3, [sp, #20]
 8009ed2:	9b05      	ldr	r3, [sp, #20]
 8009ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ed8:	bfcc      	ite	gt
 8009eda:	2500      	movgt	r5, #0
 8009edc:	2501      	movle	r5, #1
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d869      	bhi.n	8009fb6 <_dtoa_r+0x2c6>
 8009ee2:	e8df f003 	tbb	[pc, r3]
 8009ee6:	4e2c      	.short	0x4e2c
 8009ee8:	5a4c      	.short	0x5a4c
 8009eea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009eee:	441d      	add	r5, r3
 8009ef0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ef4:	2b20      	cmp	r3, #32
 8009ef6:	bfc1      	itttt	gt
 8009ef8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009efc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009f00:	fa09 f303 	lslgt.w	r3, r9, r3
 8009f04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f08:	bfda      	itte	le
 8009f0a:	f1c3 0320 	rsble	r3, r3, #32
 8009f0e:	fa06 f003 	lslle.w	r0, r6, r3
 8009f12:	4318      	orrgt	r0, r3
 8009f14:	f7f6 fb26 	bl	8000564 <__aeabi_ui2d>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	4606      	mov	r6, r0
 8009f1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009f20:	3d01      	subs	r5, #1
 8009f22:	9310      	str	r3, [sp, #64]	; 0x40
 8009f24:	e771      	b.n	8009e0a <_dtoa_r+0x11a>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e7b6      	b.n	8009e98 <_dtoa_r+0x1a8>
 8009f2a:	900e      	str	r0, [sp, #56]	; 0x38
 8009f2c:	e7b5      	b.n	8009e9a <_dtoa_r+0x1aa>
 8009f2e:	f1ca 0300 	rsb	r3, sl, #0
 8009f32:	9306      	str	r3, [sp, #24]
 8009f34:	2300      	movs	r3, #0
 8009f36:	eba8 080a 	sub.w	r8, r8, sl
 8009f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f3c:	e7c2      	b.n	8009ec4 <_dtoa_r+0x1d4>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9308      	str	r3, [sp, #32]
 8009f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dc39      	bgt.n	8009fbc <_dtoa_r+0x2cc>
 8009f48:	f04f 0901 	mov.w	r9, #1
 8009f4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f50:	464b      	mov	r3, r9
 8009f52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009f56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009f58:	2200      	movs	r2, #0
 8009f5a:	6042      	str	r2, [r0, #4]
 8009f5c:	2204      	movs	r2, #4
 8009f5e:	f102 0614 	add.w	r6, r2, #20
 8009f62:	429e      	cmp	r6, r3
 8009f64:	6841      	ldr	r1, [r0, #4]
 8009f66:	d92f      	bls.n	8009fc8 <_dtoa_r+0x2d8>
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f001 f953 	bl	800b214 <_Balloc>
 8009f6e:	9000      	str	r0, [sp, #0]
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d14b      	bne.n	800a00c <_dtoa_r+0x31c>
 8009f74:	4b24      	ldr	r3, [pc, #144]	; (800a008 <_dtoa_r+0x318>)
 8009f76:	4602      	mov	r2, r0
 8009f78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f7c:	e6d1      	b.n	8009d22 <_dtoa_r+0x32>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e7de      	b.n	8009f40 <_dtoa_r+0x250>
 8009f82:	2300      	movs	r3, #0
 8009f84:	9308      	str	r3, [sp, #32]
 8009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f88:	eb0a 0903 	add.w	r9, sl, r3
 8009f8c:	f109 0301 	add.w	r3, r9, #1
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	bfb8      	it	lt
 8009f96:	2301      	movlt	r3, #1
 8009f98:	e7dd      	b.n	8009f56 <_dtoa_r+0x266>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e7f2      	b.n	8009f84 <_dtoa_r+0x294>
 8009f9e:	2501      	movs	r5, #1
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	9508      	str	r5, [sp, #32]
 8009fa6:	f04f 39ff 	mov.w	r9, #4294967295
 8009faa:	2200      	movs	r2, #0
 8009fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fb0:	2312      	movs	r3, #18
 8009fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fb4:	e7cf      	b.n	8009f56 <_dtoa_r+0x266>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	9308      	str	r3, [sp, #32]
 8009fba:	e7f4      	b.n	8009fa6 <_dtoa_r+0x2b6>
 8009fbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009fc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	e7c6      	b.n	8009f56 <_dtoa_r+0x266>
 8009fc8:	3101      	adds	r1, #1
 8009fca:	6041      	str	r1, [r0, #4]
 8009fcc:	0052      	lsls	r2, r2, #1
 8009fce:	e7c6      	b.n	8009f5e <_dtoa_r+0x26e>
 8009fd0:	636f4361 	.word	0x636f4361
 8009fd4:	3fd287a7 	.word	0x3fd287a7
 8009fd8:	8b60c8b3 	.word	0x8b60c8b3
 8009fdc:	3fc68a28 	.word	0x3fc68a28
 8009fe0:	509f79fb 	.word	0x509f79fb
 8009fe4:	3fd34413 	.word	0x3fd34413
 8009fe8:	0800d2d6 	.word	0x0800d2d6
 8009fec:	0800d2ed 	.word	0x0800d2ed
 8009ff0:	7ff00000 	.word	0x7ff00000
 8009ff4:	0800d2d2 	.word	0x0800d2d2
 8009ff8:	0800d2c9 	.word	0x0800d2c9
 8009ffc:	0800d5b2 	.word	0x0800d5b2
 800a000:	3ff80000 	.word	0x3ff80000
 800a004:	0800d4c8 	.word	0x0800d4c8
 800a008:	0800d34c 	.word	0x0800d34c
 800a00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a00e:	9a00      	ldr	r2, [sp, #0]
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	9b01      	ldr	r3, [sp, #4]
 800a014:	2b0e      	cmp	r3, #14
 800a016:	f200 80ad 	bhi.w	800a174 <_dtoa_r+0x484>
 800a01a:	2d00      	cmp	r5, #0
 800a01c:	f000 80aa 	beq.w	800a174 <_dtoa_r+0x484>
 800a020:	f1ba 0f00 	cmp.w	sl, #0
 800a024:	dd36      	ble.n	800a094 <_dtoa_r+0x3a4>
 800a026:	4ac3      	ldr	r2, [pc, #780]	; (800a334 <_dtoa_r+0x644>)
 800a028:	f00a 030f 	and.w	r3, sl, #15
 800a02c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a030:	ed93 7b00 	vldr	d7, [r3]
 800a034:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a038:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a03c:	eeb0 8a47 	vmov.f32	s16, s14
 800a040:	eef0 8a67 	vmov.f32	s17, s15
 800a044:	d016      	beq.n	800a074 <_dtoa_r+0x384>
 800a046:	4bbc      	ldr	r3, [pc, #752]	; (800a338 <_dtoa_r+0x648>)
 800a048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a050:	f7f6 fc2c 	bl	80008ac <__aeabi_ddiv>
 800a054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a058:	f007 070f 	and.w	r7, r7, #15
 800a05c:	2503      	movs	r5, #3
 800a05e:	4eb6      	ldr	r6, [pc, #728]	; (800a338 <_dtoa_r+0x648>)
 800a060:	b957      	cbnz	r7, 800a078 <_dtoa_r+0x388>
 800a062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a066:	ec53 2b18 	vmov	r2, r3, d8
 800a06a:	f7f6 fc1f 	bl	80008ac <__aeabi_ddiv>
 800a06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a072:	e029      	b.n	800a0c8 <_dtoa_r+0x3d8>
 800a074:	2502      	movs	r5, #2
 800a076:	e7f2      	b.n	800a05e <_dtoa_r+0x36e>
 800a078:	07f9      	lsls	r1, r7, #31
 800a07a:	d508      	bpl.n	800a08e <_dtoa_r+0x39e>
 800a07c:	ec51 0b18 	vmov	r0, r1, d8
 800a080:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a084:	f7f6 fae8 	bl	8000658 <__aeabi_dmul>
 800a088:	ec41 0b18 	vmov	d8, r0, r1
 800a08c:	3501      	adds	r5, #1
 800a08e:	107f      	asrs	r7, r7, #1
 800a090:	3608      	adds	r6, #8
 800a092:	e7e5      	b.n	800a060 <_dtoa_r+0x370>
 800a094:	f000 80a6 	beq.w	800a1e4 <_dtoa_r+0x4f4>
 800a098:	f1ca 0600 	rsb	r6, sl, #0
 800a09c:	4ba5      	ldr	r3, [pc, #660]	; (800a334 <_dtoa_r+0x644>)
 800a09e:	4fa6      	ldr	r7, [pc, #664]	; (800a338 <_dtoa_r+0x648>)
 800a0a0:	f006 020f 	and.w	r2, r6, #15
 800a0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0b0:	f7f6 fad2 	bl	8000658 <__aeabi_dmul>
 800a0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0b8:	1136      	asrs	r6, r6, #4
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2502      	movs	r5, #2
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	f040 8085 	bne.w	800a1ce <_dtoa_r+0x4de>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d1d2      	bne.n	800a06e <_dtoa_r+0x37e>
 800a0c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 808c 	beq.w	800a1e8 <_dtoa_r+0x4f8>
 800a0d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0d4:	4b99      	ldr	r3, [pc, #612]	; (800a33c <_dtoa_r+0x64c>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 fd2e 	bl	8000b3c <__aeabi_dcmplt>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	f000 8081 	beq.w	800a1e8 <_dtoa_r+0x4f8>
 800a0e6:	9b01      	ldr	r3, [sp, #4]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d07d      	beq.n	800a1e8 <_dtoa_r+0x4f8>
 800a0ec:	f1b9 0f00 	cmp.w	r9, #0
 800a0f0:	dd3c      	ble.n	800a16c <_dtoa_r+0x47c>
 800a0f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a0f6:	9307      	str	r3, [sp, #28]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4b91      	ldr	r3, [pc, #580]	; (800a340 <_dtoa_r+0x650>)
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	4639      	mov	r1, r7
 800a100:	f7f6 faaa 	bl	8000658 <__aeabi_dmul>
 800a104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a108:	3501      	adds	r5, #1
 800a10a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a10e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a112:	4628      	mov	r0, r5
 800a114:	f7f6 fa36 	bl	8000584 <__aeabi_i2d>
 800a118:	4632      	mov	r2, r6
 800a11a:	463b      	mov	r3, r7
 800a11c:	f7f6 fa9c 	bl	8000658 <__aeabi_dmul>
 800a120:	4b88      	ldr	r3, [pc, #544]	; (800a344 <_dtoa_r+0x654>)
 800a122:	2200      	movs	r2, #0
 800a124:	f7f6 f8e2 	bl	80002ec <__adddf3>
 800a128:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a12c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a130:	9303      	str	r3, [sp, #12]
 800a132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a134:	2b00      	cmp	r3, #0
 800a136:	d15c      	bne.n	800a1f2 <_dtoa_r+0x502>
 800a138:	4b83      	ldr	r3, [pc, #524]	; (800a348 <_dtoa_r+0x658>)
 800a13a:	2200      	movs	r2, #0
 800a13c:	4630      	mov	r0, r6
 800a13e:	4639      	mov	r1, r7
 800a140:	f7f6 f8d2 	bl	80002e8 <__aeabi_dsub>
 800a144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a148:	4606      	mov	r6, r0
 800a14a:	460f      	mov	r7, r1
 800a14c:	f7f6 fd14 	bl	8000b78 <__aeabi_dcmpgt>
 800a150:	2800      	cmp	r0, #0
 800a152:	f040 8296 	bne.w	800a682 <_dtoa_r+0x992>
 800a156:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a15a:	4630      	mov	r0, r6
 800a15c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a160:	4639      	mov	r1, r7
 800a162:	f7f6 fceb 	bl	8000b3c <__aeabi_dcmplt>
 800a166:	2800      	cmp	r0, #0
 800a168:	f040 8288 	bne.w	800a67c <_dtoa_r+0x98c>
 800a16c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a176:	2b00      	cmp	r3, #0
 800a178:	f2c0 8158 	blt.w	800a42c <_dtoa_r+0x73c>
 800a17c:	f1ba 0f0e 	cmp.w	sl, #14
 800a180:	f300 8154 	bgt.w	800a42c <_dtoa_r+0x73c>
 800a184:	4b6b      	ldr	r3, [pc, #428]	; (800a334 <_dtoa_r+0x644>)
 800a186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a18a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	2b00      	cmp	r3, #0
 800a192:	f280 80e3 	bge.w	800a35c <_dtoa_r+0x66c>
 800a196:	9b01      	ldr	r3, [sp, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f300 80df 	bgt.w	800a35c <_dtoa_r+0x66c>
 800a19e:	f040 826d 	bne.w	800a67c <_dtoa_r+0x98c>
 800a1a2:	4b69      	ldr	r3, [pc, #420]	; (800a348 <_dtoa_r+0x658>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	f7f6 fa55 	bl	8000658 <__aeabi_dmul>
 800a1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1b2:	f7f6 fcd7 	bl	8000b64 <__aeabi_dcmpge>
 800a1b6:	9e01      	ldr	r6, [sp, #4]
 800a1b8:	4637      	mov	r7, r6
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f040 8243 	bne.w	800a646 <_dtoa_r+0x956>
 800a1c0:	9d00      	ldr	r5, [sp, #0]
 800a1c2:	2331      	movs	r3, #49	; 0x31
 800a1c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a1c8:	f10a 0a01 	add.w	sl, sl, #1
 800a1cc:	e23f      	b.n	800a64e <_dtoa_r+0x95e>
 800a1ce:	07f2      	lsls	r2, r6, #31
 800a1d0:	d505      	bpl.n	800a1de <_dtoa_r+0x4ee>
 800a1d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d6:	f7f6 fa3f 	bl	8000658 <__aeabi_dmul>
 800a1da:	3501      	adds	r5, #1
 800a1dc:	2301      	movs	r3, #1
 800a1de:	1076      	asrs	r6, r6, #1
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	e76c      	b.n	800a0be <_dtoa_r+0x3ce>
 800a1e4:	2502      	movs	r5, #2
 800a1e6:	e76f      	b.n	800a0c8 <_dtoa_r+0x3d8>
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800a1ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a1f0:	e78d      	b.n	800a10e <_dtoa_r+0x41e>
 800a1f2:	9900      	ldr	r1, [sp, #0]
 800a1f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a1f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1f8:	4b4e      	ldr	r3, [pc, #312]	; (800a334 <_dtoa_r+0x644>)
 800a1fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1fe:	4401      	add	r1, r0
 800a200:	9102      	str	r1, [sp, #8]
 800a202:	9908      	ldr	r1, [sp, #32]
 800a204:	eeb0 8a47 	vmov.f32	s16, s14
 800a208:	eef0 8a67 	vmov.f32	s17, s15
 800a20c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a214:	2900      	cmp	r1, #0
 800a216:	d045      	beq.n	800a2a4 <_dtoa_r+0x5b4>
 800a218:	494c      	ldr	r1, [pc, #304]	; (800a34c <_dtoa_r+0x65c>)
 800a21a:	2000      	movs	r0, #0
 800a21c:	f7f6 fb46 	bl	80008ac <__aeabi_ddiv>
 800a220:	ec53 2b18 	vmov	r2, r3, d8
 800a224:	f7f6 f860 	bl	80002e8 <__aeabi_dsub>
 800a228:	9d00      	ldr	r5, [sp, #0]
 800a22a:	ec41 0b18 	vmov	d8, r0, r1
 800a22e:	4639      	mov	r1, r7
 800a230:	4630      	mov	r0, r6
 800a232:	f7f6 fcc1 	bl	8000bb8 <__aeabi_d2iz>
 800a236:	900c      	str	r0, [sp, #48]	; 0x30
 800a238:	f7f6 f9a4 	bl	8000584 <__aeabi_i2d>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 f850 	bl	80002e8 <__aeabi_dsub>
 800a248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a24a:	3330      	adds	r3, #48	; 0x30
 800a24c:	f805 3b01 	strb.w	r3, [r5], #1
 800a250:	ec53 2b18 	vmov	r2, r3, d8
 800a254:	4606      	mov	r6, r0
 800a256:	460f      	mov	r7, r1
 800a258:	f7f6 fc70 	bl	8000b3c <__aeabi_dcmplt>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	d165      	bne.n	800a32c <_dtoa_r+0x63c>
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	4935      	ldr	r1, [pc, #212]	; (800a33c <_dtoa_r+0x64c>)
 800a266:	2000      	movs	r0, #0
 800a268:	f7f6 f83e 	bl	80002e8 <__aeabi_dsub>
 800a26c:	ec53 2b18 	vmov	r2, r3, d8
 800a270:	f7f6 fc64 	bl	8000b3c <__aeabi_dcmplt>
 800a274:	2800      	cmp	r0, #0
 800a276:	f040 80b9 	bne.w	800a3ec <_dtoa_r+0x6fc>
 800a27a:	9b02      	ldr	r3, [sp, #8]
 800a27c:	429d      	cmp	r5, r3
 800a27e:	f43f af75 	beq.w	800a16c <_dtoa_r+0x47c>
 800a282:	4b2f      	ldr	r3, [pc, #188]	; (800a340 <_dtoa_r+0x650>)
 800a284:	ec51 0b18 	vmov	r0, r1, d8
 800a288:	2200      	movs	r2, #0
 800a28a:	f7f6 f9e5 	bl	8000658 <__aeabi_dmul>
 800a28e:	4b2c      	ldr	r3, [pc, #176]	; (800a340 <_dtoa_r+0x650>)
 800a290:	ec41 0b18 	vmov	d8, r0, r1
 800a294:	2200      	movs	r2, #0
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 f9dd 	bl	8000658 <__aeabi_dmul>
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	e7c4      	b.n	800a22e <_dtoa_r+0x53e>
 800a2a4:	ec51 0b17 	vmov	r0, r1, d7
 800a2a8:	f7f6 f9d6 	bl	8000658 <__aeabi_dmul>
 800a2ac:	9b02      	ldr	r3, [sp, #8]
 800a2ae:	9d00      	ldr	r5, [sp, #0]
 800a2b0:	930c      	str	r3, [sp, #48]	; 0x30
 800a2b2:	ec41 0b18 	vmov	d8, r0, r1
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f7f6 fc7d 	bl	8000bb8 <__aeabi_d2iz>
 800a2be:	9011      	str	r0, [sp, #68]	; 0x44
 800a2c0:	f7f6 f960 	bl	8000584 <__aeabi_i2d>
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f6 f80c 	bl	80002e8 <__aeabi_dsub>
 800a2d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2d2:	3330      	adds	r3, #48	; 0x30
 800a2d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	429d      	cmp	r5, r3
 800a2dc:	4606      	mov	r6, r0
 800a2de:	460f      	mov	r7, r1
 800a2e0:	f04f 0200 	mov.w	r2, #0
 800a2e4:	d134      	bne.n	800a350 <_dtoa_r+0x660>
 800a2e6:	4b19      	ldr	r3, [pc, #100]	; (800a34c <_dtoa_r+0x65c>)
 800a2e8:	ec51 0b18 	vmov	r0, r1, d8
 800a2ec:	f7f5 fffe 	bl	80002ec <__adddf3>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	4639      	mov	r1, r7
 800a2f8:	f7f6 fc3e 	bl	8000b78 <__aeabi_dcmpgt>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d175      	bne.n	800a3ec <_dtoa_r+0x6fc>
 800a300:	ec53 2b18 	vmov	r2, r3, d8
 800a304:	4911      	ldr	r1, [pc, #68]	; (800a34c <_dtoa_r+0x65c>)
 800a306:	2000      	movs	r0, #0
 800a308:	f7f5 ffee 	bl	80002e8 <__aeabi_dsub>
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	f7f6 fc12 	bl	8000b3c <__aeabi_dcmplt>
 800a318:	2800      	cmp	r0, #0
 800a31a:	f43f af27 	beq.w	800a16c <_dtoa_r+0x47c>
 800a31e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a320:	1e6b      	subs	r3, r5, #1
 800a322:	930c      	str	r3, [sp, #48]	; 0x30
 800a324:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a328:	2b30      	cmp	r3, #48	; 0x30
 800a32a:	d0f8      	beq.n	800a31e <_dtoa_r+0x62e>
 800a32c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a330:	e04a      	b.n	800a3c8 <_dtoa_r+0x6d8>
 800a332:	bf00      	nop
 800a334:	0800d4c8 	.word	0x0800d4c8
 800a338:	0800d4a0 	.word	0x0800d4a0
 800a33c:	3ff00000 	.word	0x3ff00000
 800a340:	40240000 	.word	0x40240000
 800a344:	401c0000 	.word	0x401c0000
 800a348:	40140000 	.word	0x40140000
 800a34c:	3fe00000 	.word	0x3fe00000
 800a350:	4baf      	ldr	r3, [pc, #700]	; (800a610 <_dtoa_r+0x920>)
 800a352:	f7f6 f981 	bl	8000658 <__aeabi_dmul>
 800a356:	4606      	mov	r6, r0
 800a358:	460f      	mov	r7, r1
 800a35a:	e7ac      	b.n	800a2b6 <_dtoa_r+0x5c6>
 800a35c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a360:	9d00      	ldr	r5, [sp, #0]
 800a362:	4642      	mov	r2, r8
 800a364:	464b      	mov	r3, r9
 800a366:	4630      	mov	r0, r6
 800a368:	4639      	mov	r1, r7
 800a36a:	f7f6 fa9f 	bl	80008ac <__aeabi_ddiv>
 800a36e:	f7f6 fc23 	bl	8000bb8 <__aeabi_d2iz>
 800a372:	9002      	str	r0, [sp, #8]
 800a374:	f7f6 f906 	bl	8000584 <__aeabi_i2d>
 800a378:	4642      	mov	r2, r8
 800a37a:	464b      	mov	r3, r9
 800a37c:	f7f6 f96c 	bl	8000658 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f5 ffae 	bl	80002e8 <__aeabi_dsub>
 800a38c:	9e02      	ldr	r6, [sp, #8]
 800a38e:	9f01      	ldr	r7, [sp, #4]
 800a390:	3630      	adds	r6, #48	; 0x30
 800a392:	f805 6b01 	strb.w	r6, [r5], #1
 800a396:	9e00      	ldr	r6, [sp, #0]
 800a398:	1bae      	subs	r6, r5, r6
 800a39a:	42b7      	cmp	r7, r6
 800a39c:	4602      	mov	r2, r0
 800a39e:	460b      	mov	r3, r1
 800a3a0:	d137      	bne.n	800a412 <_dtoa_r+0x722>
 800a3a2:	f7f5 ffa3 	bl	80002ec <__adddf3>
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	f7f6 fbe3 	bl	8000b78 <__aeabi_dcmpgt>
 800a3b2:	b9c8      	cbnz	r0, 800a3e8 <_dtoa_r+0x6f8>
 800a3b4:	4642      	mov	r2, r8
 800a3b6:	464b      	mov	r3, r9
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	4639      	mov	r1, r7
 800a3bc:	f7f6 fbb4 	bl	8000b28 <__aeabi_dcmpeq>
 800a3c0:	b110      	cbz	r0, 800a3c8 <_dtoa_r+0x6d8>
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	07d9      	lsls	r1, r3, #31
 800a3c6:	d40f      	bmi.n	800a3e8 <_dtoa_r+0x6f8>
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	4659      	mov	r1, fp
 800a3cc:	f000 ff62 	bl	800b294 <_Bfree>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	702b      	strb	r3, [r5, #0]
 800a3d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3d6:	f10a 0001 	add.w	r0, sl, #1
 800a3da:	6018      	str	r0, [r3, #0]
 800a3dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f43f acd8 	beq.w	8009d94 <_dtoa_r+0xa4>
 800a3e4:	601d      	str	r5, [r3, #0]
 800a3e6:	e4d5      	b.n	8009d94 <_dtoa_r+0xa4>
 800a3e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a3ec:	462b      	mov	r3, r5
 800a3ee:	461d      	mov	r5, r3
 800a3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3f4:	2a39      	cmp	r2, #57	; 0x39
 800a3f6:	d108      	bne.n	800a40a <_dtoa_r+0x71a>
 800a3f8:	9a00      	ldr	r2, [sp, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d1f7      	bne.n	800a3ee <_dtoa_r+0x6fe>
 800a3fe:	9a07      	ldr	r2, [sp, #28]
 800a400:	9900      	ldr	r1, [sp, #0]
 800a402:	3201      	adds	r2, #1
 800a404:	9207      	str	r2, [sp, #28]
 800a406:	2230      	movs	r2, #48	; 0x30
 800a408:	700a      	strb	r2, [r1, #0]
 800a40a:	781a      	ldrb	r2, [r3, #0]
 800a40c:	3201      	adds	r2, #1
 800a40e:	701a      	strb	r2, [r3, #0]
 800a410:	e78c      	b.n	800a32c <_dtoa_r+0x63c>
 800a412:	4b7f      	ldr	r3, [pc, #508]	; (800a610 <_dtoa_r+0x920>)
 800a414:	2200      	movs	r2, #0
 800a416:	f7f6 f91f 	bl	8000658 <__aeabi_dmul>
 800a41a:	2200      	movs	r2, #0
 800a41c:	2300      	movs	r3, #0
 800a41e:	4606      	mov	r6, r0
 800a420:	460f      	mov	r7, r1
 800a422:	f7f6 fb81 	bl	8000b28 <__aeabi_dcmpeq>
 800a426:	2800      	cmp	r0, #0
 800a428:	d09b      	beq.n	800a362 <_dtoa_r+0x672>
 800a42a:	e7cd      	b.n	800a3c8 <_dtoa_r+0x6d8>
 800a42c:	9a08      	ldr	r2, [sp, #32]
 800a42e:	2a00      	cmp	r2, #0
 800a430:	f000 80c4 	beq.w	800a5bc <_dtoa_r+0x8cc>
 800a434:	9a05      	ldr	r2, [sp, #20]
 800a436:	2a01      	cmp	r2, #1
 800a438:	f300 80a8 	bgt.w	800a58c <_dtoa_r+0x89c>
 800a43c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a43e:	2a00      	cmp	r2, #0
 800a440:	f000 80a0 	beq.w	800a584 <_dtoa_r+0x894>
 800a444:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a448:	9e06      	ldr	r6, [sp, #24]
 800a44a:	4645      	mov	r5, r8
 800a44c:	9a04      	ldr	r2, [sp, #16]
 800a44e:	2101      	movs	r1, #1
 800a450:	441a      	add	r2, r3
 800a452:	4620      	mov	r0, r4
 800a454:	4498      	add	r8, r3
 800a456:	9204      	str	r2, [sp, #16]
 800a458:	f001 f822 	bl	800b4a0 <__i2b>
 800a45c:	4607      	mov	r7, r0
 800a45e:	2d00      	cmp	r5, #0
 800a460:	dd0b      	ble.n	800a47a <_dtoa_r+0x78a>
 800a462:	9b04      	ldr	r3, [sp, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	dd08      	ble.n	800a47a <_dtoa_r+0x78a>
 800a468:	42ab      	cmp	r3, r5
 800a46a:	9a04      	ldr	r2, [sp, #16]
 800a46c:	bfa8      	it	ge
 800a46e:	462b      	movge	r3, r5
 800a470:	eba8 0803 	sub.w	r8, r8, r3
 800a474:	1aed      	subs	r5, r5, r3
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	9b06      	ldr	r3, [sp, #24]
 800a47c:	b1fb      	cbz	r3, 800a4be <_dtoa_r+0x7ce>
 800a47e:	9b08      	ldr	r3, [sp, #32]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 809f 	beq.w	800a5c4 <_dtoa_r+0x8d4>
 800a486:	2e00      	cmp	r6, #0
 800a488:	dd11      	ble.n	800a4ae <_dtoa_r+0x7be>
 800a48a:	4639      	mov	r1, r7
 800a48c:	4632      	mov	r2, r6
 800a48e:	4620      	mov	r0, r4
 800a490:	f001 f8c2 	bl	800b618 <__pow5mult>
 800a494:	465a      	mov	r2, fp
 800a496:	4601      	mov	r1, r0
 800a498:	4607      	mov	r7, r0
 800a49a:	4620      	mov	r0, r4
 800a49c:	f001 f816 	bl	800b4cc <__multiply>
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	9007      	str	r0, [sp, #28]
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f000 fef5 	bl	800b294 <_Bfree>
 800a4aa:	9b07      	ldr	r3, [sp, #28]
 800a4ac:	469b      	mov	fp, r3
 800a4ae:	9b06      	ldr	r3, [sp, #24]
 800a4b0:	1b9a      	subs	r2, r3, r6
 800a4b2:	d004      	beq.n	800a4be <_dtoa_r+0x7ce>
 800a4b4:	4659      	mov	r1, fp
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f001 f8ae 	bl	800b618 <__pow5mult>
 800a4bc:	4683      	mov	fp, r0
 800a4be:	2101      	movs	r1, #1
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 ffed 	bl	800b4a0 <__i2b>
 800a4c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	dd7c      	ble.n	800a5c8 <_dtoa_r+0x8d8>
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	4601      	mov	r1, r0
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	f001 f8a0 	bl	800b618 <__pow5mult>
 800a4d8:	9b05      	ldr	r3, [sp, #20]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	4606      	mov	r6, r0
 800a4de:	dd76      	ble.n	800a5ce <_dtoa_r+0x8de>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9306      	str	r3, [sp, #24]
 800a4e4:	6933      	ldr	r3, [r6, #16]
 800a4e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a4ea:	6918      	ldr	r0, [r3, #16]
 800a4ec:	f000 ff88 	bl	800b400 <__hi0bits>
 800a4f0:	f1c0 0020 	rsb	r0, r0, #32
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	4418      	add	r0, r3
 800a4f8:	f010 001f 	ands.w	r0, r0, #31
 800a4fc:	f000 8086 	beq.w	800a60c <_dtoa_r+0x91c>
 800a500:	f1c0 0320 	rsb	r3, r0, #32
 800a504:	2b04      	cmp	r3, #4
 800a506:	dd7f      	ble.n	800a608 <_dtoa_r+0x918>
 800a508:	f1c0 001c 	rsb	r0, r0, #28
 800a50c:	9b04      	ldr	r3, [sp, #16]
 800a50e:	4403      	add	r3, r0
 800a510:	4480      	add	r8, r0
 800a512:	4405      	add	r5, r0
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	f1b8 0f00 	cmp.w	r8, #0
 800a51a:	dd05      	ble.n	800a528 <_dtoa_r+0x838>
 800a51c:	4659      	mov	r1, fp
 800a51e:	4642      	mov	r2, r8
 800a520:	4620      	mov	r0, r4
 800a522:	f001 f8d3 	bl	800b6cc <__lshift>
 800a526:	4683      	mov	fp, r0
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dd05      	ble.n	800a53a <_dtoa_r+0x84a>
 800a52e:	4631      	mov	r1, r6
 800a530:	461a      	mov	r2, r3
 800a532:	4620      	mov	r0, r4
 800a534:	f001 f8ca 	bl	800b6cc <__lshift>
 800a538:	4606      	mov	r6, r0
 800a53a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d069      	beq.n	800a614 <_dtoa_r+0x924>
 800a540:	4631      	mov	r1, r6
 800a542:	4658      	mov	r0, fp
 800a544:	f001 f92e 	bl	800b7a4 <__mcmp>
 800a548:	2800      	cmp	r0, #0
 800a54a:	da63      	bge.n	800a614 <_dtoa_r+0x924>
 800a54c:	2300      	movs	r3, #0
 800a54e:	4659      	mov	r1, fp
 800a550:	220a      	movs	r2, #10
 800a552:	4620      	mov	r0, r4
 800a554:	f000 fec0 	bl	800b2d8 <__multadd>
 800a558:	9b08      	ldr	r3, [sp, #32]
 800a55a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a55e:	4683      	mov	fp, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	f000 818f 	beq.w	800a884 <_dtoa_r+0xb94>
 800a566:	4639      	mov	r1, r7
 800a568:	2300      	movs	r3, #0
 800a56a:	220a      	movs	r2, #10
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 feb3 	bl	800b2d8 <__multadd>
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	4607      	mov	r7, r0
 800a578:	f300 808e 	bgt.w	800a698 <_dtoa_r+0x9a8>
 800a57c:	9b05      	ldr	r3, [sp, #20]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	dc50      	bgt.n	800a624 <_dtoa_r+0x934>
 800a582:	e089      	b.n	800a698 <_dtoa_r+0x9a8>
 800a584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a58a:	e75d      	b.n	800a448 <_dtoa_r+0x758>
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	1e5e      	subs	r6, r3, #1
 800a590:	9b06      	ldr	r3, [sp, #24]
 800a592:	42b3      	cmp	r3, r6
 800a594:	bfbf      	itttt	lt
 800a596:	9b06      	ldrlt	r3, [sp, #24]
 800a598:	9606      	strlt	r6, [sp, #24]
 800a59a:	1af2      	sublt	r2, r6, r3
 800a59c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a59e:	bfb6      	itet	lt
 800a5a0:	189b      	addlt	r3, r3, r2
 800a5a2:	1b9e      	subge	r6, r3, r6
 800a5a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a5a6:	9b01      	ldr	r3, [sp, #4]
 800a5a8:	bfb8      	it	lt
 800a5aa:	2600      	movlt	r6, #0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bfb5      	itete	lt
 800a5b0:	eba8 0503 	sublt.w	r5, r8, r3
 800a5b4:	9b01      	ldrge	r3, [sp, #4]
 800a5b6:	2300      	movlt	r3, #0
 800a5b8:	4645      	movge	r5, r8
 800a5ba:	e747      	b.n	800a44c <_dtoa_r+0x75c>
 800a5bc:	9e06      	ldr	r6, [sp, #24]
 800a5be:	9f08      	ldr	r7, [sp, #32]
 800a5c0:	4645      	mov	r5, r8
 800a5c2:	e74c      	b.n	800a45e <_dtoa_r+0x76e>
 800a5c4:	9a06      	ldr	r2, [sp, #24]
 800a5c6:	e775      	b.n	800a4b4 <_dtoa_r+0x7c4>
 800a5c8:	9b05      	ldr	r3, [sp, #20]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	dc18      	bgt.n	800a600 <_dtoa_r+0x910>
 800a5ce:	9b02      	ldr	r3, [sp, #8]
 800a5d0:	b9b3      	cbnz	r3, 800a600 <_dtoa_r+0x910>
 800a5d2:	9b03      	ldr	r3, [sp, #12]
 800a5d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5d8:	b9a3      	cbnz	r3, 800a604 <_dtoa_r+0x914>
 800a5da:	9b03      	ldr	r3, [sp, #12]
 800a5dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5e0:	0d1b      	lsrs	r3, r3, #20
 800a5e2:	051b      	lsls	r3, r3, #20
 800a5e4:	b12b      	cbz	r3, 800a5f2 <_dtoa_r+0x902>
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	9304      	str	r3, [sp, #16]
 800a5ec:	f108 0801 	add.w	r8, r8, #1
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	9306      	str	r3, [sp, #24]
 800a5f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f47f af74 	bne.w	800a4e4 <_dtoa_r+0x7f4>
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	e779      	b.n	800a4f4 <_dtoa_r+0x804>
 800a600:	2300      	movs	r3, #0
 800a602:	e7f6      	b.n	800a5f2 <_dtoa_r+0x902>
 800a604:	9b02      	ldr	r3, [sp, #8]
 800a606:	e7f4      	b.n	800a5f2 <_dtoa_r+0x902>
 800a608:	d085      	beq.n	800a516 <_dtoa_r+0x826>
 800a60a:	4618      	mov	r0, r3
 800a60c:	301c      	adds	r0, #28
 800a60e:	e77d      	b.n	800a50c <_dtoa_r+0x81c>
 800a610:	40240000 	.word	0x40240000
 800a614:	9b01      	ldr	r3, [sp, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	dc38      	bgt.n	800a68c <_dtoa_r+0x99c>
 800a61a:	9b05      	ldr	r3, [sp, #20]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	dd35      	ble.n	800a68c <_dtoa_r+0x99c>
 800a620:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a624:	f1b9 0f00 	cmp.w	r9, #0
 800a628:	d10d      	bne.n	800a646 <_dtoa_r+0x956>
 800a62a:	4631      	mov	r1, r6
 800a62c:	464b      	mov	r3, r9
 800a62e:	2205      	movs	r2, #5
 800a630:	4620      	mov	r0, r4
 800a632:	f000 fe51 	bl	800b2d8 <__multadd>
 800a636:	4601      	mov	r1, r0
 800a638:	4606      	mov	r6, r0
 800a63a:	4658      	mov	r0, fp
 800a63c:	f001 f8b2 	bl	800b7a4 <__mcmp>
 800a640:	2800      	cmp	r0, #0
 800a642:	f73f adbd 	bgt.w	800a1c0 <_dtoa_r+0x4d0>
 800a646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a648:	9d00      	ldr	r5, [sp, #0]
 800a64a:	ea6f 0a03 	mvn.w	sl, r3
 800a64e:	f04f 0800 	mov.w	r8, #0
 800a652:	4631      	mov	r1, r6
 800a654:	4620      	mov	r0, r4
 800a656:	f000 fe1d 	bl	800b294 <_Bfree>
 800a65a:	2f00      	cmp	r7, #0
 800a65c:	f43f aeb4 	beq.w	800a3c8 <_dtoa_r+0x6d8>
 800a660:	f1b8 0f00 	cmp.w	r8, #0
 800a664:	d005      	beq.n	800a672 <_dtoa_r+0x982>
 800a666:	45b8      	cmp	r8, r7
 800a668:	d003      	beq.n	800a672 <_dtoa_r+0x982>
 800a66a:	4641      	mov	r1, r8
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fe11 	bl	800b294 <_Bfree>
 800a672:	4639      	mov	r1, r7
 800a674:	4620      	mov	r0, r4
 800a676:	f000 fe0d 	bl	800b294 <_Bfree>
 800a67a:	e6a5      	b.n	800a3c8 <_dtoa_r+0x6d8>
 800a67c:	2600      	movs	r6, #0
 800a67e:	4637      	mov	r7, r6
 800a680:	e7e1      	b.n	800a646 <_dtoa_r+0x956>
 800a682:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a684:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a688:	4637      	mov	r7, r6
 800a68a:	e599      	b.n	800a1c0 <_dtoa_r+0x4d0>
 800a68c:	9b08      	ldr	r3, [sp, #32]
 800a68e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 80fd 	beq.w	800a892 <_dtoa_r+0xba2>
 800a698:	2d00      	cmp	r5, #0
 800a69a:	dd05      	ble.n	800a6a8 <_dtoa_r+0x9b8>
 800a69c:	4639      	mov	r1, r7
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f001 f813 	bl	800b6cc <__lshift>
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	9b06      	ldr	r3, [sp, #24]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d05c      	beq.n	800a768 <_dtoa_r+0xa78>
 800a6ae:	6879      	ldr	r1, [r7, #4]
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 fdaf 	bl	800b214 <_Balloc>
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	b928      	cbnz	r0, 800a6c6 <_dtoa_r+0x9d6>
 800a6ba:	4b80      	ldr	r3, [pc, #512]	; (800a8bc <_dtoa_r+0xbcc>)
 800a6bc:	4602      	mov	r2, r0
 800a6be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a6c2:	f7ff bb2e 	b.w	8009d22 <_dtoa_r+0x32>
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	3202      	adds	r2, #2
 800a6ca:	0092      	lsls	r2, r2, #2
 800a6cc:	f107 010c 	add.w	r1, r7, #12
 800a6d0:	300c      	adds	r0, #12
 800a6d2:	f000 fd91 	bl	800b1f8 <memcpy>
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	4629      	mov	r1, r5
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fff6 	bl	800b6cc <__lshift>
 800a6e0:	9b00      	ldr	r3, [sp, #0]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	9301      	str	r3, [sp, #4]
 800a6e6:	9b00      	ldr	r3, [sp, #0]
 800a6e8:	444b      	add	r3, r9
 800a6ea:	9307      	str	r3, [sp, #28]
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	46b8      	mov	r8, r7
 800a6f4:	9306      	str	r3, [sp, #24]
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	9b01      	ldr	r3, [sp, #4]
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	4658      	mov	r0, fp
 800a700:	9302      	str	r3, [sp, #8]
 800a702:	f7ff fa69 	bl	8009bd8 <quorem>
 800a706:	4603      	mov	r3, r0
 800a708:	3330      	adds	r3, #48	; 0x30
 800a70a:	9004      	str	r0, [sp, #16]
 800a70c:	4641      	mov	r1, r8
 800a70e:	4658      	mov	r0, fp
 800a710:	9308      	str	r3, [sp, #32]
 800a712:	f001 f847 	bl	800b7a4 <__mcmp>
 800a716:	463a      	mov	r2, r7
 800a718:	4681      	mov	r9, r0
 800a71a:	4631      	mov	r1, r6
 800a71c:	4620      	mov	r0, r4
 800a71e:	f001 f85d 	bl	800b7dc <__mdiff>
 800a722:	68c2      	ldr	r2, [r0, #12]
 800a724:	9b08      	ldr	r3, [sp, #32]
 800a726:	4605      	mov	r5, r0
 800a728:	bb02      	cbnz	r2, 800a76c <_dtoa_r+0xa7c>
 800a72a:	4601      	mov	r1, r0
 800a72c:	4658      	mov	r0, fp
 800a72e:	f001 f839 	bl	800b7a4 <__mcmp>
 800a732:	9b08      	ldr	r3, [sp, #32]
 800a734:	4602      	mov	r2, r0
 800a736:	4629      	mov	r1, r5
 800a738:	4620      	mov	r0, r4
 800a73a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a73e:	f000 fda9 	bl	800b294 <_Bfree>
 800a742:	9b05      	ldr	r3, [sp, #20]
 800a744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a746:	9d01      	ldr	r5, [sp, #4]
 800a748:	ea43 0102 	orr.w	r1, r3, r2
 800a74c:	9b06      	ldr	r3, [sp, #24]
 800a74e:	430b      	orrs	r3, r1
 800a750:	9b08      	ldr	r3, [sp, #32]
 800a752:	d10d      	bne.n	800a770 <_dtoa_r+0xa80>
 800a754:	2b39      	cmp	r3, #57	; 0x39
 800a756:	d029      	beq.n	800a7ac <_dtoa_r+0xabc>
 800a758:	f1b9 0f00 	cmp.w	r9, #0
 800a75c:	dd01      	ble.n	800a762 <_dtoa_r+0xa72>
 800a75e:	9b04      	ldr	r3, [sp, #16]
 800a760:	3331      	adds	r3, #49	; 0x31
 800a762:	9a02      	ldr	r2, [sp, #8]
 800a764:	7013      	strb	r3, [r2, #0]
 800a766:	e774      	b.n	800a652 <_dtoa_r+0x962>
 800a768:	4638      	mov	r0, r7
 800a76a:	e7b9      	b.n	800a6e0 <_dtoa_r+0x9f0>
 800a76c:	2201      	movs	r2, #1
 800a76e:	e7e2      	b.n	800a736 <_dtoa_r+0xa46>
 800a770:	f1b9 0f00 	cmp.w	r9, #0
 800a774:	db06      	blt.n	800a784 <_dtoa_r+0xa94>
 800a776:	9905      	ldr	r1, [sp, #20]
 800a778:	ea41 0909 	orr.w	r9, r1, r9
 800a77c:	9906      	ldr	r1, [sp, #24]
 800a77e:	ea59 0101 	orrs.w	r1, r9, r1
 800a782:	d120      	bne.n	800a7c6 <_dtoa_r+0xad6>
 800a784:	2a00      	cmp	r2, #0
 800a786:	ddec      	ble.n	800a762 <_dtoa_r+0xa72>
 800a788:	4659      	mov	r1, fp
 800a78a:	2201      	movs	r2, #1
 800a78c:	4620      	mov	r0, r4
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	f000 ff9c 	bl	800b6cc <__lshift>
 800a794:	4631      	mov	r1, r6
 800a796:	4683      	mov	fp, r0
 800a798:	f001 f804 	bl	800b7a4 <__mcmp>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	9b01      	ldr	r3, [sp, #4]
 800a7a0:	dc02      	bgt.n	800a7a8 <_dtoa_r+0xab8>
 800a7a2:	d1de      	bne.n	800a762 <_dtoa_r+0xa72>
 800a7a4:	07da      	lsls	r2, r3, #31
 800a7a6:	d5dc      	bpl.n	800a762 <_dtoa_r+0xa72>
 800a7a8:	2b39      	cmp	r3, #57	; 0x39
 800a7aa:	d1d8      	bne.n	800a75e <_dtoa_r+0xa6e>
 800a7ac:	9a02      	ldr	r2, [sp, #8]
 800a7ae:	2339      	movs	r3, #57	; 0x39
 800a7b0:	7013      	strb	r3, [r2, #0]
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	461d      	mov	r5, r3
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7bc:	2a39      	cmp	r2, #57	; 0x39
 800a7be:	d050      	beq.n	800a862 <_dtoa_r+0xb72>
 800a7c0:	3201      	adds	r2, #1
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	e745      	b.n	800a652 <_dtoa_r+0x962>
 800a7c6:	2a00      	cmp	r2, #0
 800a7c8:	dd03      	ble.n	800a7d2 <_dtoa_r+0xae2>
 800a7ca:	2b39      	cmp	r3, #57	; 0x39
 800a7cc:	d0ee      	beq.n	800a7ac <_dtoa_r+0xabc>
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	e7c7      	b.n	800a762 <_dtoa_r+0xa72>
 800a7d2:	9a01      	ldr	r2, [sp, #4]
 800a7d4:	9907      	ldr	r1, [sp, #28]
 800a7d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a7da:	428a      	cmp	r2, r1
 800a7dc:	d02a      	beq.n	800a834 <_dtoa_r+0xb44>
 800a7de:	4659      	mov	r1, fp
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	220a      	movs	r2, #10
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fd77 	bl	800b2d8 <__multadd>
 800a7ea:	45b8      	cmp	r8, r7
 800a7ec:	4683      	mov	fp, r0
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	f04f 020a 	mov.w	r2, #10
 800a7f6:	4641      	mov	r1, r8
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	d107      	bne.n	800a80c <_dtoa_r+0xb1c>
 800a7fc:	f000 fd6c 	bl	800b2d8 <__multadd>
 800a800:	4680      	mov	r8, r0
 800a802:	4607      	mov	r7, r0
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	3301      	adds	r3, #1
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	e775      	b.n	800a6f8 <_dtoa_r+0xa08>
 800a80c:	f000 fd64 	bl	800b2d8 <__multadd>
 800a810:	4639      	mov	r1, r7
 800a812:	4680      	mov	r8, r0
 800a814:	2300      	movs	r3, #0
 800a816:	220a      	movs	r2, #10
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fd5d 	bl	800b2d8 <__multadd>
 800a81e:	4607      	mov	r7, r0
 800a820:	e7f0      	b.n	800a804 <_dtoa_r+0xb14>
 800a822:	f1b9 0f00 	cmp.w	r9, #0
 800a826:	9a00      	ldr	r2, [sp, #0]
 800a828:	bfcc      	ite	gt
 800a82a:	464d      	movgt	r5, r9
 800a82c:	2501      	movle	r5, #1
 800a82e:	4415      	add	r5, r2
 800a830:	f04f 0800 	mov.w	r8, #0
 800a834:	4659      	mov	r1, fp
 800a836:	2201      	movs	r2, #1
 800a838:	4620      	mov	r0, r4
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	f000 ff46 	bl	800b6cc <__lshift>
 800a840:	4631      	mov	r1, r6
 800a842:	4683      	mov	fp, r0
 800a844:	f000 ffae 	bl	800b7a4 <__mcmp>
 800a848:	2800      	cmp	r0, #0
 800a84a:	dcb2      	bgt.n	800a7b2 <_dtoa_r+0xac2>
 800a84c:	d102      	bne.n	800a854 <_dtoa_r+0xb64>
 800a84e:	9b01      	ldr	r3, [sp, #4]
 800a850:	07db      	lsls	r3, r3, #31
 800a852:	d4ae      	bmi.n	800a7b2 <_dtoa_r+0xac2>
 800a854:	462b      	mov	r3, r5
 800a856:	461d      	mov	r5, r3
 800a858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85c:	2a30      	cmp	r2, #48	; 0x30
 800a85e:	d0fa      	beq.n	800a856 <_dtoa_r+0xb66>
 800a860:	e6f7      	b.n	800a652 <_dtoa_r+0x962>
 800a862:	9a00      	ldr	r2, [sp, #0]
 800a864:	429a      	cmp	r2, r3
 800a866:	d1a5      	bne.n	800a7b4 <_dtoa_r+0xac4>
 800a868:	f10a 0a01 	add.w	sl, sl, #1
 800a86c:	2331      	movs	r3, #49	; 0x31
 800a86e:	e779      	b.n	800a764 <_dtoa_r+0xa74>
 800a870:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <_dtoa_r+0xbd0>)
 800a872:	f7ff baaf 	b.w	8009dd4 <_dtoa_r+0xe4>
 800a876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f47f aa86 	bne.w	8009d8a <_dtoa_r+0x9a>
 800a87e:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <_dtoa_r+0xbd4>)
 800a880:	f7ff baa8 	b.w	8009dd4 <_dtoa_r+0xe4>
 800a884:	f1b9 0f00 	cmp.w	r9, #0
 800a888:	dc03      	bgt.n	800a892 <_dtoa_r+0xba2>
 800a88a:	9b05      	ldr	r3, [sp, #20]
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	f73f aec9 	bgt.w	800a624 <_dtoa_r+0x934>
 800a892:	9d00      	ldr	r5, [sp, #0]
 800a894:	4631      	mov	r1, r6
 800a896:	4658      	mov	r0, fp
 800a898:	f7ff f99e 	bl	8009bd8 <quorem>
 800a89c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a8a0:	f805 3b01 	strb.w	r3, [r5], #1
 800a8a4:	9a00      	ldr	r2, [sp, #0]
 800a8a6:	1aaa      	subs	r2, r5, r2
 800a8a8:	4591      	cmp	r9, r2
 800a8aa:	ddba      	ble.n	800a822 <_dtoa_r+0xb32>
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	220a      	movs	r2, #10
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 fd10 	bl	800b2d8 <__multadd>
 800a8b8:	4683      	mov	fp, r0
 800a8ba:	e7eb      	b.n	800a894 <_dtoa_r+0xba4>
 800a8bc:	0800d34c 	.word	0x0800d34c
 800a8c0:	0800d5b1 	.word	0x0800d5b1
 800a8c4:	0800d2c9 	.word	0x0800d2c9

0800a8c8 <std>:
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	4604      	mov	r4, r0
 800a8ce:	e9c0 3300 	strd	r3, r3, [r0]
 800a8d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8d6:	6083      	str	r3, [r0, #8]
 800a8d8:	8181      	strh	r1, [r0, #12]
 800a8da:	6643      	str	r3, [r0, #100]	; 0x64
 800a8dc:	81c2      	strh	r2, [r0, #14]
 800a8de:	6183      	str	r3, [r0, #24]
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	2208      	movs	r2, #8
 800a8e4:	305c      	adds	r0, #92	; 0x5c
 800a8e6:	f7fd fb4f 	bl	8007f88 <memset>
 800a8ea:	4b05      	ldr	r3, [pc, #20]	; (800a900 <std+0x38>)
 800a8ec:	6263      	str	r3, [r4, #36]	; 0x24
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <std+0x3c>)
 800a8f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <std+0x40>)
 800a8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8f6:	4b05      	ldr	r3, [pc, #20]	; (800a90c <std+0x44>)
 800a8f8:	6224      	str	r4, [r4, #32]
 800a8fa:	6323      	str	r3, [r4, #48]	; 0x30
 800a8fc:	bd10      	pop	{r4, pc}
 800a8fe:	bf00      	nop
 800a900:	08008d61 	.word	0x08008d61
 800a904:	08008d87 	.word	0x08008d87
 800a908:	08008dbf 	.word	0x08008dbf
 800a90c:	08008de3 	.word	0x08008de3

0800a910 <_cleanup_r>:
 800a910:	4901      	ldr	r1, [pc, #4]	; (800a918 <_cleanup_r+0x8>)
 800a912:	f000 b8af 	b.w	800aa74 <_fwalk_reent>
 800a916:	bf00      	nop
 800a918:	0800cde5 	.word	0x0800cde5

0800a91c <__sfmoreglue>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	1e4a      	subs	r2, r1, #1
 800a920:	2568      	movs	r5, #104	; 0x68
 800a922:	4355      	muls	r5, r2
 800a924:	460e      	mov	r6, r1
 800a926:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a92a:	f001 f98d 	bl	800bc48 <_malloc_r>
 800a92e:	4604      	mov	r4, r0
 800a930:	b140      	cbz	r0, 800a944 <__sfmoreglue+0x28>
 800a932:	2100      	movs	r1, #0
 800a934:	e9c0 1600 	strd	r1, r6, [r0]
 800a938:	300c      	adds	r0, #12
 800a93a:	60a0      	str	r0, [r4, #8]
 800a93c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a940:	f7fd fb22 	bl	8007f88 <memset>
 800a944:	4620      	mov	r0, r4
 800a946:	bd70      	pop	{r4, r5, r6, pc}

0800a948 <__sfp_lock_acquire>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__sfp_lock_acquire+0x8>)
 800a94a:	f000 bc26 	b.w	800b19a <__retarget_lock_acquire_recursive>
 800a94e:	bf00      	nop
 800a950:	2000095c 	.word	0x2000095c

0800a954 <__sfp_lock_release>:
 800a954:	4801      	ldr	r0, [pc, #4]	; (800a95c <__sfp_lock_release+0x8>)
 800a956:	f000 bc21 	b.w	800b19c <__retarget_lock_release_recursive>
 800a95a:	bf00      	nop
 800a95c:	2000095c 	.word	0x2000095c

0800a960 <__sinit_lock_acquire>:
 800a960:	4801      	ldr	r0, [pc, #4]	; (800a968 <__sinit_lock_acquire+0x8>)
 800a962:	f000 bc1a 	b.w	800b19a <__retarget_lock_acquire_recursive>
 800a966:	bf00      	nop
 800a968:	20000957 	.word	0x20000957

0800a96c <__sinit_lock_release>:
 800a96c:	4801      	ldr	r0, [pc, #4]	; (800a974 <__sinit_lock_release+0x8>)
 800a96e:	f000 bc15 	b.w	800b19c <__retarget_lock_release_recursive>
 800a972:	bf00      	nop
 800a974:	20000957 	.word	0x20000957

0800a978 <__sinit>:
 800a978:	b510      	push	{r4, lr}
 800a97a:	4604      	mov	r4, r0
 800a97c:	f7ff fff0 	bl	800a960 <__sinit_lock_acquire>
 800a980:	69a3      	ldr	r3, [r4, #24]
 800a982:	b11b      	cbz	r3, 800a98c <__sinit+0x14>
 800a984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a988:	f7ff bff0 	b.w	800a96c <__sinit_lock_release>
 800a98c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a990:	6523      	str	r3, [r4, #80]	; 0x50
 800a992:	4b13      	ldr	r3, [pc, #76]	; (800a9e0 <__sinit+0x68>)
 800a994:	4a13      	ldr	r2, [pc, #76]	; (800a9e4 <__sinit+0x6c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	62a2      	str	r2, [r4, #40]	; 0x28
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	bf04      	itt	eq
 800a99e:	2301      	moveq	r3, #1
 800a9a0:	61a3      	streq	r3, [r4, #24]
 800a9a2:	4620      	mov	r0, r4
 800a9a4:	f000 f820 	bl	800a9e8 <__sfp>
 800a9a8:	6060      	str	r0, [r4, #4]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 f81c 	bl	800a9e8 <__sfp>
 800a9b0:	60a0      	str	r0, [r4, #8]
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f000 f818 	bl	800a9e8 <__sfp>
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	60e0      	str	r0, [r4, #12]
 800a9bc:	2104      	movs	r1, #4
 800a9be:	6860      	ldr	r0, [r4, #4]
 800a9c0:	f7ff ff82 	bl	800a8c8 <std>
 800a9c4:	68a0      	ldr	r0, [r4, #8]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	2109      	movs	r1, #9
 800a9ca:	f7ff ff7d 	bl	800a8c8 <std>
 800a9ce:	68e0      	ldr	r0, [r4, #12]
 800a9d0:	2202      	movs	r2, #2
 800a9d2:	2112      	movs	r1, #18
 800a9d4:	f7ff ff78 	bl	800a8c8 <std>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	61a3      	str	r3, [r4, #24]
 800a9dc:	e7d2      	b.n	800a984 <__sinit+0xc>
 800a9de:	bf00      	nop
 800a9e0:	0800d138 	.word	0x0800d138
 800a9e4:	0800a911 	.word	0x0800a911

0800a9e8 <__sfp>:
 800a9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ea:	4607      	mov	r7, r0
 800a9ec:	f7ff ffac 	bl	800a948 <__sfp_lock_acquire>
 800a9f0:	4b1e      	ldr	r3, [pc, #120]	; (800aa6c <__sfp+0x84>)
 800a9f2:	681e      	ldr	r6, [r3, #0]
 800a9f4:	69b3      	ldr	r3, [r6, #24]
 800a9f6:	b913      	cbnz	r3, 800a9fe <__sfp+0x16>
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f7ff ffbd 	bl	800a978 <__sinit>
 800a9fe:	3648      	adds	r6, #72	; 0x48
 800aa00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	d503      	bpl.n	800aa10 <__sfp+0x28>
 800aa08:	6833      	ldr	r3, [r6, #0]
 800aa0a:	b30b      	cbz	r3, 800aa50 <__sfp+0x68>
 800aa0c:	6836      	ldr	r6, [r6, #0]
 800aa0e:	e7f7      	b.n	800aa00 <__sfp+0x18>
 800aa10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa14:	b9d5      	cbnz	r5, 800aa4c <__sfp+0x64>
 800aa16:	4b16      	ldr	r3, [pc, #88]	; (800aa70 <__sfp+0x88>)
 800aa18:	60e3      	str	r3, [r4, #12]
 800aa1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa1e:	6665      	str	r5, [r4, #100]	; 0x64
 800aa20:	f000 fbba 	bl	800b198 <__retarget_lock_init_recursive>
 800aa24:	f7ff ff96 	bl	800a954 <__sfp_lock_release>
 800aa28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa30:	6025      	str	r5, [r4, #0]
 800aa32:	61a5      	str	r5, [r4, #24]
 800aa34:	2208      	movs	r2, #8
 800aa36:	4629      	mov	r1, r5
 800aa38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa3c:	f7fd faa4 	bl	8007f88 <memset>
 800aa40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa48:	4620      	mov	r0, r4
 800aa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4c:	3468      	adds	r4, #104	; 0x68
 800aa4e:	e7d9      	b.n	800aa04 <__sfp+0x1c>
 800aa50:	2104      	movs	r1, #4
 800aa52:	4638      	mov	r0, r7
 800aa54:	f7ff ff62 	bl	800a91c <__sfmoreglue>
 800aa58:	4604      	mov	r4, r0
 800aa5a:	6030      	str	r0, [r6, #0]
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d1d5      	bne.n	800aa0c <__sfp+0x24>
 800aa60:	f7ff ff78 	bl	800a954 <__sfp_lock_release>
 800aa64:	230c      	movs	r3, #12
 800aa66:	603b      	str	r3, [r7, #0]
 800aa68:	e7ee      	b.n	800aa48 <__sfp+0x60>
 800aa6a:	bf00      	nop
 800aa6c:	0800d138 	.word	0x0800d138
 800aa70:	ffff0001 	.word	0xffff0001

0800aa74 <_fwalk_reent>:
 800aa74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa78:	4606      	mov	r6, r0
 800aa7a:	4688      	mov	r8, r1
 800aa7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aa80:	2700      	movs	r7, #0
 800aa82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa86:	f1b9 0901 	subs.w	r9, r9, #1
 800aa8a:	d505      	bpl.n	800aa98 <_fwalk_reent+0x24>
 800aa8c:	6824      	ldr	r4, [r4, #0]
 800aa8e:	2c00      	cmp	r4, #0
 800aa90:	d1f7      	bne.n	800aa82 <_fwalk_reent+0xe>
 800aa92:	4638      	mov	r0, r7
 800aa94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa98:	89ab      	ldrh	r3, [r5, #12]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d907      	bls.n	800aaae <_fwalk_reent+0x3a>
 800aa9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	d003      	beq.n	800aaae <_fwalk_reent+0x3a>
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	47c0      	blx	r8
 800aaac:	4307      	orrs	r7, r0
 800aaae:	3568      	adds	r5, #104	; 0x68
 800aab0:	e7e9      	b.n	800aa86 <_fwalk_reent+0x12>

0800aab2 <rshift>:
 800aab2:	6903      	ldr	r3, [r0, #16]
 800aab4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aabc:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aac0:	f100 0414 	add.w	r4, r0, #20
 800aac4:	dd45      	ble.n	800ab52 <rshift+0xa0>
 800aac6:	f011 011f 	ands.w	r1, r1, #31
 800aaca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aace:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aad2:	d10c      	bne.n	800aaee <rshift+0x3c>
 800aad4:	f100 0710 	add.w	r7, r0, #16
 800aad8:	4629      	mov	r1, r5
 800aada:	42b1      	cmp	r1, r6
 800aadc:	d334      	bcc.n	800ab48 <rshift+0x96>
 800aade:	1a9b      	subs	r3, r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	1eea      	subs	r2, r5, #3
 800aae4:	4296      	cmp	r6, r2
 800aae6:	bf38      	it	cc
 800aae8:	2300      	movcc	r3, #0
 800aaea:	4423      	add	r3, r4
 800aaec:	e015      	b.n	800ab1a <rshift+0x68>
 800aaee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aaf2:	f1c1 0820 	rsb	r8, r1, #32
 800aaf6:	40cf      	lsrs	r7, r1
 800aaf8:	f105 0e04 	add.w	lr, r5, #4
 800aafc:	46a1      	mov	r9, r4
 800aafe:	4576      	cmp	r6, lr
 800ab00:	46f4      	mov	ip, lr
 800ab02:	d815      	bhi.n	800ab30 <rshift+0x7e>
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	009a      	lsls	r2, r3, #2
 800ab08:	3a04      	subs	r2, #4
 800ab0a:	3501      	adds	r5, #1
 800ab0c:	42ae      	cmp	r6, r5
 800ab0e:	bf38      	it	cc
 800ab10:	2200      	movcc	r2, #0
 800ab12:	18a3      	adds	r3, r4, r2
 800ab14:	50a7      	str	r7, [r4, r2]
 800ab16:	b107      	cbz	r7, 800ab1a <rshift+0x68>
 800ab18:	3304      	adds	r3, #4
 800ab1a:	1b1a      	subs	r2, r3, r4
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab22:	bf08      	it	eq
 800ab24:	2300      	moveq	r3, #0
 800ab26:	6102      	str	r2, [r0, #16]
 800ab28:	bf08      	it	eq
 800ab2a:	6143      	streq	r3, [r0, #20]
 800ab2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab30:	f8dc c000 	ldr.w	ip, [ip]
 800ab34:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab38:	ea4c 0707 	orr.w	r7, ip, r7
 800ab3c:	f849 7b04 	str.w	r7, [r9], #4
 800ab40:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab44:	40cf      	lsrs	r7, r1
 800ab46:	e7da      	b.n	800aafe <rshift+0x4c>
 800ab48:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab4c:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab50:	e7c3      	b.n	800aada <rshift+0x28>
 800ab52:	4623      	mov	r3, r4
 800ab54:	e7e1      	b.n	800ab1a <rshift+0x68>

0800ab56 <__hexdig_fun>:
 800ab56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab5a:	2b09      	cmp	r3, #9
 800ab5c:	d802      	bhi.n	800ab64 <__hexdig_fun+0xe>
 800ab5e:	3820      	subs	r0, #32
 800ab60:	b2c0      	uxtb	r0, r0
 800ab62:	4770      	bx	lr
 800ab64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab68:	2b05      	cmp	r3, #5
 800ab6a:	d801      	bhi.n	800ab70 <__hexdig_fun+0x1a>
 800ab6c:	3847      	subs	r0, #71	; 0x47
 800ab6e:	e7f7      	b.n	800ab60 <__hexdig_fun+0xa>
 800ab70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab74:	2b05      	cmp	r3, #5
 800ab76:	d801      	bhi.n	800ab7c <__hexdig_fun+0x26>
 800ab78:	3827      	subs	r0, #39	; 0x27
 800ab7a:	e7f1      	b.n	800ab60 <__hexdig_fun+0xa>
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	4770      	bx	lr

0800ab80 <__gethex>:
 800ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab84:	ed2d 8b02 	vpush	{d8}
 800ab88:	b089      	sub	sp, #36	; 0x24
 800ab8a:	ee08 0a10 	vmov	s16, r0
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	4bbc      	ldr	r3, [pc, #752]	; (800ae84 <__gethex+0x304>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	9301      	str	r3, [sp, #4]
 800ab96:	4618      	mov	r0, r3
 800ab98:	468b      	mov	fp, r1
 800ab9a:	4690      	mov	r8, r2
 800ab9c:	f7f5 fb42 	bl	8000224 <strlen>
 800aba0:	9b01      	ldr	r3, [sp, #4]
 800aba2:	f8db 2000 	ldr.w	r2, [fp]
 800aba6:	4403      	add	r3, r0
 800aba8:	4682      	mov	sl, r0
 800abaa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	1c93      	adds	r3, r2, #2
 800abb2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abb6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abba:	32fe      	adds	r2, #254	; 0xfe
 800abbc:	18d1      	adds	r1, r2, r3
 800abbe:	461f      	mov	r7, r3
 800abc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abc4:	9100      	str	r1, [sp, #0]
 800abc6:	2830      	cmp	r0, #48	; 0x30
 800abc8:	d0f8      	beq.n	800abbc <__gethex+0x3c>
 800abca:	f7ff ffc4 	bl	800ab56 <__hexdig_fun>
 800abce:	4604      	mov	r4, r0
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d13a      	bne.n	800ac4a <__gethex+0xca>
 800abd4:	9901      	ldr	r1, [sp, #4]
 800abd6:	4652      	mov	r2, sl
 800abd8:	4638      	mov	r0, r7
 800abda:	f001 fec7 	bl	800c96c <strncmp>
 800abde:	4605      	mov	r5, r0
 800abe0:	2800      	cmp	r0, #0
 800abe2:	d168      	bne.n	800acb6 <__gethex+0x136>
 800abe4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800abe8:	eb07 060a 	add.w	r6, r7, sl
 800abec:	f7ff ffb3 	bl	800ab56 <__hexdig_fun>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d062      	beq.n	800acba <__gethex+0x13a>
 800abf4:	4633      	mov	r3, r6
 800abf6:	7818      	ldrb	r0, [r3, #0]
 800abf8:	2830      	cmp	r0, #48	; 0x30
 800abfa:	461f      	mov	r7, r3
 800abfc:	f103 0301 	add.w	r3, r3, #1
 800ac00:	d0f9      	beq.n	800abf6 <__gethex+0x76>
 800ac02:	f7ff ffa8 	bl	800ab56 <__hexdig_fun>
 800ac06:	2301      	movs	r3, #1
 800ac08:	fab0 f480 	clz	r4, r0
 800ac0c:	0964      	lsrs	r4, r4, #5
 800ac0e:	4635      	mov	r5, r6
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	463a      	mov	r2, r7
 800ac14:	4616      	mov	r6, r2
 800ac16:	3201      	adds	r2, #1
 800ac18:	7830      	ldrb	r0, [r6, #0]
 800ac1a:	f7ff ff9c 	bl	800ab56 <__hexdig_fun>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d1f8      	bne.n	800ac14 <__gethex+0x94>
 800ac22:	9901      	ldr	r1, [sp, #4]
 800ac24:	4652      	mov	r2, sl
 800ac26:	4630      	mov	r0, r6
 800ac28:	f001 fea0 	bl	800c96c <strncmp>
 800ac2c:	b980      	cbnz	r0, 800ac50 <__gethex+0xd0>
 800ac2e:	b94d      	cbnz	r5, 800ac44 <__gethex+0xc4>
 800ac30:	eb06 050a 	add.w	r5, r6, sl
 800ac34:	462a      	mov	r2, r5
 800ac36:	4616      	mov	r6, r2
 800ac38:	3201      	adds	r2, #1
 800ac3a:	7830      	ldrb	r0, [r6, #0]
 800ac3c:	f7ff ff8b 	bl	800ab56 <__hexdig_fun>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d1f8      	bne.n	800ac36 <__gethex+0xb6>
 800ac44:	1bad      	subs	r5, r5, r6
 800ac46:	00ad      	lsls	r5, r5, #2
 800ac48:	e004      	b.n	800ac54 <__gethex+0xd4>
 800ac4a:	2400      	movs	r4, #0
 800ac4c:	4625      	mov	r5, r4
 800ac4e:	e7e0      	b.n	800ac12 <__gethex+0x92>
 800ac50:	2d00      	cmp	r5, #0
 800ac52:	d1f7      	bne.n	800ac44 <__gethex+0xc4>
 800ac54:	7833      	ldrb	r3, [r6, #0]
 800ac56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac5a:	2b50      	cmp	r3, #80	; 0x50
 800ac5c:	d13b      	bne.n	800acd6 <__gethex+0x156>
 800ac5e:	7873      	ldrb	r3, [r6, #1]
 800ac60:	2b2b      	cmp	r3, #43	; 0x2b
 800ac62:	d02c      	beq.n	800acbe <__gethex+0x13e>
 800ac64:	2b2d      	cmp	r3, #45	; 0x2d
 800ac66:	d02e      	beq.n	800acc6 <__gethex+0x146>
 800ac68:	1c71      	adds	r1, r6, #1
 800ac6a:	f04f 0900 	mov.w	r9, #0
 800ac6e:	7808      	ldrb	r0, [r1, #0]
 800ac70:	f7ff ff71 	bl	800ab56 <__hexdig_fun>
 800ac74:	1e43      	subs	r3, r0, #1
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b18      	cmp	r3, #24
 800ac7a:	d82c      	bhi.n	800acd6 <__gethex+0x156>
 800ac7c:	f1a0 0210 	sub.w	r2, r0, #16
 800ac80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac84:	f7ff ff67 	bl	800ab56 <__hexdig_fun>
 800ac88:	1e43      	subs	r3, r0, #1
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b18      	cmp	r3, #24
 800ac8e:	d91d      	bls.n	800accc <__gethex+0x14c>
 800ac90:	f1b9 0f00 	cmp.w	r9, #0
 800ac94:	d000      	beq.n	800ac98 <__gethex+0x118>
 800ac96:	4252      	negs	r2, r2
 800ac98:	4415      	add	r5, r2
 800ac9a:	f8cb 1000 	str.w	r1, [fp]
 800ac9e:	b1e4      	cbz	r4, 800acda <__gethex+0x15a>
 800aca0:	9b00      	ldr	r3, [sp, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	bf14      	ite	ne
 800aca6:	2700      	movne	r7, #0
 800aca8:	2706      	moveq	r7, #6
 800acaa:	4638      	mov	r0, r7
 800acac:	b009      	add	sp, #36	; 0x24
 800acae:	ecbd 8b02 	vpop	{d8}
 800acb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acb6:	463e      	mov	r6, r7
 800acb8:	4625      	mov	r5, r4
 800acba:	2401      	movs	r4, #1
 800acbc:	e7ca      	b.n	800ac54 <__gethex+0xd4>
 800acbe:	f04f 0900 	mov.w	r9, #0
 800acc2:	1cb1      	adds	r1, r6, #2
 800acc4:	e7d3      	b.n	800ac6e <__gethex+0xee>
 800acc6:	f04f 0901 	mov.w	r9, #1
 800acca:	e7fa      	b.n	800acc2 <__gethex+0x142>
 800accc:	230a      	movs	r3, #10
 800acce:	fb03 0202 	mla	r2, r3, r2, r0
 800acd2:	3a10      	subs	r2, #16
 800acd4:	e7d4      	b.n	800ac80 <__gethex+0x100>
 800acd6:	4631      	mov	r1, r6
 800acd8:	e7df      	b.n	800ac9a <__gethex+0x11a>
 800acda:	1bf3      	subs	r3, r6, r7
 800acdc:	3b01      	subs	r3, #1
 800acde:	4621      	mov	r1, r4
 800ace0:	2b07      	cmp	r3, #7
 800ace2:	dc0b      	bgt.n	800acfc <__gethex+0x17c>
 800ace4:	ee18 0a10 	vmov	r0, s16
 800ace8:	f000 fa94 	bl	800b214 <_Balloc>
 800acec:	4604      	mov	r4, r0
 800acee:	b940      	cbnz	r0, 800ad02 <__gethex+0x182>
 800acf0:	4b65      	ldr	r3, [pc, #404]	; (800ae88 <__gethex+0x308>)
 800acf2:	4602      	mov	r2, r0
 800acf4:	21de      	movs	r1, #222	; 0xde
 800acf6:	4865      	ldr	r0, [pc, #404]	; (800ae8c <__gethex+0x30c>)
 800acf8:	f001 ffd0 	bl	800cc9c <__assert_func>
 800acfc:	3101      	adds	r1, #1
 800acfe:	105b      	asrs	r3, r3, #1
 800ad00:	e7ee      	b.n	800ace0 <__gethex+0x160>
 800ad02:	f100 0914 	add.w	r9, r0, #20
 800ad06:	f04f 0b00 	mov.w	fp, #0
 800ad0a:	f1ca 0301 	rsb	r3, sl, #1
 800ad0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad12:	f8cd b000 	str.w	fp, [sp]
 800ad16:	9306      	str	r3, [sp, #24]
 800ad18:	42b7      	cmp	r7, r6
 800ad1a:	d340      	bcc.n	800ad9e <__gethex+0x21e>
 800ad1c:	9802      	ldr	r0, [sp, #8]
 800ad1e:	9b00      	ldr	r3, [sp, #0]
 800ad20:	f840 3b04 	str.w	r3, [r0], #4
 800ad24:	eba0 0009 	sub.w	r0, r0, r9
 800ad28:	1080      	asrs	r0, r0, #2
 800ad2a:	0146      	lsls	r6, r0, #5
 800ad2c:	6120      	str	r0, [r4, #16]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fb66 	bl	800b400 <__hi0bits>
 800ad34:	1a30      	subs	r0, r6, r0
 800ad36:	f8d8 6000 	ldr.w	r6, [r8]
 800ad3a:	42b0      	cmp	r0, r6
 800ad3c:	dd63      	ble.n	800ae06 <__gethex+0x286>
 800ad3e:	1b87      	subs	r7, r0, r6
 800ad40:	4639      	mov	r1, r7
 800ad42:	4620      	mov	r0, r4
 800ad44:	f000 ff00 	bl	800bb48 <__any_on>
 800ad48:	4682      	mov	sl, r0
 800ad4a:	b1a8      	cbz	r0, 800ad78 <__gethex+0x1f8>
 800ad4c:	1e7b      	subs	r3, r7, #1
 800ad4e:	1159      	asrs	r1, r3, #5
 800ad50:	f003 021f 	and.w	r2, r3, #31
 800ad54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad58:	f04f 0a01 	mov.w	sl, #1
 800ad5c:	fa0a f202 	lsl.w	r2, sl, r2
 800ad60:	420a      	tst	r2, r1
 800ad62:	d009      	beq.n	800ad78 <__gethex+0x1f8>
 800ad64:	4553      	cmp	r3, sl
 800ad66:	dd05      	ble.n	800ad74 <__gethex+0x1f4>
 800ad68:	1eb9      	subs	r1, r7, #2
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 feec 	bl	800bb48 <__any_on>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d145      	bne.n	800ae00 <__gethex+0x280>
 800ad74:	f04f 0a02 	mov.w	sl, #2
 800ad78:	4639      	mov	r1, r7
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f7ff fe99 	bl	800aab2 <rshift>
 800ad80:	443d      	add	r5, r7
 800ad82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad86:	42ab      	cmp	r3, r5
 800ad88:	da4c      	bge.n	800ae24 <__gethex+0x2a4>
 800ad8a:	ee18 0a10 	vmov	r0, s16
 800ad8e:	4621      	mov	r1, r4
 800ad90:	f000 fa80 	bl	800b294 <_Bfree>
 800ad94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad96:	2300      	movs	r3, #0
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	27a3      	movs	r7, #163	; 0xa3
 800ad9c:	e785      	b.n	800acaa <__gethex+0x12a>
 800ad9e:	1e73      	subs	r3, r6, #1
 800ada0:	9a05      	ldr	r2, [sp, #20]
 800ada2:	9303      	str	r3, [sp, #12]
 800ada4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d019      	beq.n	800ade0 <__gethex+0x260>
 800adac:	f1bb 0f20 	cmp.w	fp, #32
 800adb0:	d107      	bne.n	800adc2 <__gethex+0x242>
 800adb2:	9b02      	ldr	r3, [sp, #8]
 800adb4:	9a00      	ldr	r2, [sp, #0]
 800adb6:	f843 2b04 	str.w	r2, [r3], #4
 800adba:	9302      	str	r3, [sp, #8]
 800adbc:	2300      	movs	r3, #0
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	469b      	mov	fp, r3
 800adc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800adc6:	f7ff fec6 	bl	800ab56 <__hexdig_fun>
 800adca:	9b00      	ldr	r3, [sp, #0]
 800adcc:	f000 000f 	and.w	r0, r0, #15
 800add0:	fa00 f00b 	lsl.w	r0, r0, fp
 800add4:	4303      	orrs	r3, r0
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	f10b 0b04 	add.w	fp, fp, #4
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	e00d      	b.n	800adfc <__gethex+0x27c>
 800ade0:	9b03      	ldr	r3, [sp, #12]
 800ade2:	9a06      	ldr	r2, [sp, #24]
 800ade4:	4413      	add	r3, r2
 800ade6:	42bb      	cmp	r3, r7
 800ade8:	d3e0      	bcc.n	800adac <__gethex+0x22c>
 800adea:	4618      	mov	r0, r3
 800adec:	9901      	ldr	r1, [sp, #4]
 800adee:	9307      	str	r3, [sp, #28]
 800adf0:	4652      	mov	r2, sl
 800adf2:	f001 fdbb 	bl	800c96c <strncmp>
 800adf6:	9b07      	ldr	r3, [sp, #28]
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d1d7      	bne.n	800adac <__gethex+0x22c>
 800adfc:	461e      	mov	r6, r3
 800adfe:	e78b      	b.n	800ad18 <__gethex+0x198>
 800ae00:	f04f 0a03 	mov.w	sl, #3
 800ae04:	e7b8      	b.n	800ad78 <__gethex+0x1f8>
 800ae06:	da0a      	bge.n	800ae1e <__gethex+0x29e>
 800ae08:	1a37      	subs	r7, r6, r0
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	ee18 0a10 	vmov	r0, s16
 800ae10:	463a      	mov	r2, r7
 800ae12:	f000 fc5b 	bl	800b6cc <__lshift>
 800ae16:	1bed      	subs	r5, r5, r7
 800ae18:	4604      	mov	r4, r0
 800ae1a:	f100 0914 	add.w	r9, r0, #20
 800ae1e:	f04f 0a00 	mov.w	sl, #0
 800ae22:	e7ae      	b.n	800ad82 <__gethex+0x202>
 800ae24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae28:	42a8      	cmp	r0, r5
 800ae2a:	dd72      	ble.n	800af12 <__gethex+0x392>
 800ae2c:	1b45      	subs	r5, r0, r5
 800ae2e:	42ae      	cmp	r6, r5
 800ae30:	dc36      	bgt.n	800aea0 <__gethex+0x320>
 800ae32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d02a      	beq.n	800ae90 <__gethex+0x310>
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d02c      	beq.n	800ae98 <__gethex+0x318>
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d115      	bne.n	800ae6e <__gethex+0x2ee>
 800ae42:	42ae      	cmp	r6, r5
 800ae44:	d113      	bne.n	800ae6e <__gethex+0x2ee>
 800ae46:	2e01      	cmp	r6, #1
 800ae48:	d10b      	bne.n	800ae62 <__gethex+0x2e2>
 800ae4a:	9a04      	ldr	r2, [sp, #16]
 800ae4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	2301      	movs	r3, #1
 800ae54:	6123      	str	r3, [r4, #16]
 800ae56:	f8c9 3000 	str.w	r3, [r9]
 800ae5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae5c:	2762      	movs	r7, #98	; 0x62
 800ae5e:	601c      	str	r4, [r3, #0]
 800ae60:	e723      	b.n	800acaa <__gethex+0x12a>
 800ae62:	1e71      	subs	r1, r6, #1
 800ae64:	4620      	mov	r0, r4
 800ae66:	f000 fe6f 	bl	800bb48 <__any_on>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d1ed      	bne.n	800ae4a <__gethex+0x2ca>
 800ae6e:	ee18 0a10 	vmov	r0, s16
 800ae72:	4621      	mov	r1, r4
 800ae74:	f000 fa0e 	bl	800b294 <_Bfree>
 800ae78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	6013      	str	r3, [r2, #0]
 800ae7e:	2750      	movs	r7, #80	; 0x50
 800ae80:	e713      	b.n	800acaa <__gethex+0x12a>
 800ae82:	bf00      	nop
 800ae84:	0800d42c 	.word	0x0800d42c
 800ae88:	0800d34c 	.word	0x0800d34c
 800ae8c:	0800d3c0 	.word	0x0800d3c0
 800ae90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1eb      	bne.n	800ae6e <__gethex+0x2ee>
 800ae96:	e7d8      	b.n	800ae4a <__gethex+0x2ca>
 800ae98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1d5      	bne.n	800ae4a <__gethex+0x2ca>
 800ae9e:	e7e6      	b.n	800ae6e <__gethex+0x2ee>
 800aea0:	1e6f      	subs	r7, r5, #1
 800aea2:	f1ba 0f00 	cmp.w	sl, #0
 800aea6:	d131      	bne.n	800af0c <__gethex+0x38c>
 800aea8:	b127      	cbz	r7, 800aeb4 <__gethex+0x334>
 800aeaa:	4639      	mov	r1, r7
 800aeac:	4620      	mov	r0, r4
 800aeae:	f000 fe4b 	bl	800bb48 <__any_on>
 800aeb2:	4682      	mov	sl, r0
 800aeb4:	117b      	asrs	r3, r7, #5
 800aeb6:	2101      	movs	r1, #1
 800aeb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aebc:	f007 071f 	and.w	r7, r7, #31
 800aec0:	fa01 f707 	lsl.w	r7, r1, r7
 800aec4:	421f      	tst	r7, r3
 800aec6:	4629      	mov	r1, r5
 800aec8:	4620      	mov	r0, r4
 800aeca:	bf18      	it	ne
 800aecc:	f04a 0a02 	orrne.w	sl, sl, #2
 800aed0:	1b76      	subs	r6, r6, r5
 800aed2:	f7ff fdee 	bl	800aab2 <rshift>
 800aed6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aeda:	2702      	movs	r7, #2
 800aedc:	f1ba 0f00 	cmp.w	sl, #0
 800aee0:	d048      	beq.n	800af74 <__gethex+0x3f4>
 800aee2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d015      	beq.n	800af16 <__gethex+0x396>
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d017      	beq.n	800af1e <__gethex+0x39e>
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d109      	bne.n	800af06 <__gethex+0x386>
 800aef2:	f01a 0f02 	tst.w	sl, #2
 800aef6:	d006      	beq.n	800af06 <__gethex+0x386>
 800aef8:	f8d9 0000 	ldr.w	r0, [r9]
 800aefc:	ea4a 0a00 	orr.w	sl, sl, r0
 800af00:	f01a 0f01 	tst.w	sl, #1
 800af04:	d10e      	bne.n	800af24 <__gethex+0x3a4>
 800af06:	f047 0710 	orr.w	r7, r7, #16
 800af0a:	e033      	b.n	800af74 <__gethex+0x3f4>
 800af0c:	f04f 0a01 	mov.w	sl, #1
 800af10:	e7d0      	b.n	800aeb4 <__gethex+0x334>
 800af12:	2701      	movs	r7, #1
 800af14:	e7e2      	b.n	800aedc <__gethex+0x35c>
 800af16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af18:	f1c3 0301 	rsb	r3, r3, #1
 800af1c:	9315      	str	r3, [sp, #84]	; 0x54
 800af1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af20:	2b00      	cmp	r3, #0
 800af22:	d0f0      	beq.n	800af06 <__gethex+0x386>
 800af24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af28:	f104 0314 	add.w	r3, r4, #20
 800af2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af34:	f04f 0c00 	mov.w	ip, #0
 800af38:	4618      	mov	r0, r3
 800af3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af42:	d01c      	beq.n	800af7e <__gethex+0x3fe>
 800af44:	3201      	adds	r2, #1
 800af46:	6002      	str	r2, [r0, #0]
 800af48:	2f02      	cmp	r7, #2
 800af4a:	f104 0314 	add.w	r3, r4, #20
 800af4e:	d13f      	bne.n	800afd0 <__gethex+0x450>
 800af50:	f8d8 2000 	ldr.w	r2, [r8]
 800af54:	3a01      	subs	r2, #1
 800af56:	42b2      	cmp	r2, r6
 800af58:	d10a      	bne.n	800af70 <__gethex+0x3f0>
 800af5a:	1171      	asrs	r1, r6, #5
 800af5c:	2201      	movs	r2, #1
 800af5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af62:	f006 061f 	and.w	r6, r6, #31
 800af66:	fa02 f606 	lsl.w	r6, r2, r6
 800af6a:	421e      	tst	r6, r3
 800af6c:	bf18      	it	ne
 800af6e:	4617      	movne	r7, r2
 800af70:	f047 0720 	orr.w	r7, r7, #32
 800af74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af76:	601c      	str	r4, [r3, #0]
 800af78:	9b04      	ldr	r3, [sp, #16]
 800af7a:	601d      	str	r5, [r3, #0]
 800af7c:	e695      	b.n	800acaa <__gethex+0x12a>
 800af7e:	4299      	cmp	r1, r3
 800af80:	f843 cc04 	str.w	ip, [r3, #-4]
 800af84:	d8d8      	bhi.n	800af38 <__gethex+0x3b8>
 800af86:	68a3      	ldr	r3, [r4, #8]
 800af88:	459b      	cmp	fp, r3
 800af8a:	db19      	blt.n	800afc0 <__gethex+0x440>
 800af8c:	6861      	ldr	r1, [r4, #4]
 800af8e:	ee18 0a10 	vmov	r0, s16
 800af92:	3101      	adds	r1, #1
 800af94:	f000 f93e 	bl	800b214 <_Balloc>
 800af98:	4681      	mov	r9, r0
 800af9a:	b918      	cbnz	r0, 800afa4 <__gethex+0x424>
 800af9c:	4b1a      	ldr	r3, [pc, #104]	; (800b008 <__gethex+0x488>)
 800af9e:	4602      	mov	r2, r0
 800afa0:	2184      	movs	r1, #132	; 0x84
 800afa2:	e6a8      	b.n	800acf6 <__gethex+0x176>
 800afa4:	6922      	ldr	r2, [r4, #16]
 800afa6:	3202      	adds	r2, #2
 800afa8:	f104 010c 	add.w	r1, r4, #12
 800afac:	0092      	lsls	r2, r2, #2
 800afae:	300c      	adds	r0, #12
 800afb0:	f000 f922 	bl	800b1f8 <memcpy>
 800afb4:	4621      	mov	r1, r4
 800afb6:	ee18 0a10 	vmov	r0, s16
 800afba:	f000 f96b 	bl	800b294 <_Bfree>
 800afbe:	464c      	mov	r4, r9
 800afc0:	6923      	ldr	r3, [r4, #16]
 800afc2:	1c5a      	adds	r2, r3, #1
 800afc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afc8:	6122      	str	r2, [r4, #16]
 800afca:	2201      	movs	r2, #1
 800afcc:	615a      	str	r2, [r3, #20]
 800afce:	e7bb      	b.n	800af48 <__gethex+0x3c8>
 800afd0:	6922      	ldr	r2, [r4, #16]
 800afd2:	455a      	cmp	r2, fp
 800afd4:	dd0b      	ble.n	800afee <__gethex+0x46e>
 800afd6:	2101      	movs	r1, #1
 800afd8:	4620      	mov	r0, r4
 800afda:	f7ff fd6a 	bl	800aab2 <rshift>
 800afde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afe2:	3501      	adds	r5, #1
 800afe4:	42ab      	cmp	r3, r5
 800afe6:	f6ff aed0 	blt.w	800ad8a <__gethex+0x20a>
 800afea:	2701      	movs	r7, #1
 800afec:	e7c0      	b.n	800af70 <__gethex+0x3f0>
 800afee:	f016 061f 	ands.w	r6, r6, #31
 800aff2:	d0fa      	beq.n	800afea <__gethex+0x46a>
 800aff4:	449a      	add	sl, r3
 800aff6:	f1c6 0620 	rsb	r6, r6, #32
 800affa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800affe:	f000 f9ff 	bl	800b400 <__hi0bits>
 800b002:	42b0      	cmp	r0, r6
 800b004:	dbe7      	blt.n	800afd6 <__gethex+0x456>
 800b006:	e7f0      	b.n	800afea <__gethex+0x46a>
 800b008:	0800d34c 	.word	0x0800d34c

0800b00c <L_shift>:
 800b00c:	f1c2 0208 	rsb	r2, r2, #8
 800b010:	0092      	lsls	r2, r2, #2
 800b012:	b570      	push	{r4, r5, r6, lr}
 800b014:	f1c2 0620 	rsb	r6, r2, #32
 800b018:	6843      	ldr	r3, [r0, #4]
 800b01a:	6804      	ldr	r4, [r0, #0]
 800b01c:	fa03 f506 	lsl.w	r5, r3, r6
 800b020:	432c      	orrs	r4, r5
 800b022:	40d3      	lsrs	r3, r2
 800b024:	6004      	str	r4, [r0, #0]
 800b026:	f840 3f04 	str.w	r3, [r0, #4]!
 800b02a:	4288      	cmp	r0, r1
 800b02c:	d3f4      	bcc.n	800b018 <L_shift+0xc>
 800b02e:	bd70      	pop	{r4, r5, r6, pc}

0800b030 <__match>:
 800b030:	b530      	push	{r4, r5, lr}
 800b032:	6803      	ldr	r3, [r0, #0]
 800b034:	3301      	adds	r3, #1
 800b036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03a:	b914      	cbnz	r4, 800b042 <__match+0x12>
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	2001      	movs	r0, #1
 800b040:	bd30      	pop	{r4, r5, pc}
 800b042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b046:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b04a:	2d19      	cmp	r5, #25
 800b04c:	bf98      	it	ls
 800b04e:	3220      	addls	r2, #32
 800b050:	42a2      	cmp	r2, r4
 800b052:	d0f0      	beq.n	800b036 <__match+0x6>
 800b054:	2000      	movs	r0, #0
 800b056:	e7f3      	b.n	800b040 <__match+0x10>

0800b058 <__hexnan>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	680b      	ldr	r3, [r1, #0]
 800b05e:	6801      	ldr	r1, [r0, #0]
 800b060:	115e      	asrs	r6, r3, #5
 800b062:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b066:	f013 031f 	ands.w	r3, r3, #31
 800b06a:	b087      	sub	sp, #28
 800b06c:	bf18      	it	ne
 800b06e:	3604      	addne	r6, #4
 800b070:	2500      	movs	r5, #0
 800b072:	1f37      	subs	r7, r6, #4
 800b074:	4682      	mov	sl, r0
 800b076:	4690      	mov	r8, r2
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b07e:	46b9      	mov	r9, r7
 800b080:	463c      	mov	r4, r7
 800b082:	9502      	str	r5, [sp, #8]
 800b084:	46ab      	mov	fp, r5
 800b086:	784a      	ldrb	r2, [r1, #1]
 800b088:	1c4b      	adds	r3, r1, #1
 800b08a:	9303      	str	r3, [sp, #12]
 800b08c:	b342      	cbz	r2, 800b0e0 <__hexnan+0x88>
 800b08e:	4610      	mov	r0, r2
 800b090:	9105      	str	r1, [sp, #20]
 800b092:	9204      	str	r2, [sp, #16]
 800b094:	f7ff fd5f 	bl	800ab56 <__hexdig_fun>
 800b098:	2800      	cmp	r0, #0
 800b09a:	d14f      	bne.n	800b13c <__hexnan+0xe4>
 800b09c:	9a04      	ldr	r2, [sp, #16]
 800b09e:	9905      	ldr	r1, [sp, #20]
 800b0a0:	2a20      	cmp	r2, #32
 800b0a2:	d818      	bhi.n	800b0d6 <__hexnan+0x7e>
 800b0a4:	9b02      	ldr	r3, [sp, #8]
 800b0a6:	459b      	cmp	fp, r3
 800b0a8:	dd13      	ble.n	800b0d2 <__hexnan+0x7a>
 800b0aa:	454c      	cmp	r4, r9
 800b0ac:	d206      	bcs.n	800b0bc <__hexnan+0x64>
 800b0ae:	2d07      	cmp	r5, #7
 800b0b0:	dc04      	bgt.n	800b0bc <__hexnan+0x64>
 800b0b2:	462a      	mov	r2, r5
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f7ff ffa8 	bl	800b00c <L_shift>
 800b0bc:	4544      	cmp	r4, r8
 800b0be:	d950      	bls.n	800b162 <__hexnan+0x10a>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f1a4 0904 	sub.w	r9, r4, #4
 800b0c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0ca:	f8cd b008 	str.w	fp, [sp, #8]
 800b0ce:	464c      	mov	r4, r9
 800b0d0:	461d      	mov	r5, r3
 800b0d2:	9903      	ldr	r1, [sp, #12]
 800b0d4:	e7d7      	b.n	800b086 <__hexnan+0x2e>
 800b0d6:	2a29      	cmp	r2, #41	; 0x29
 800b0d8:	d156      	bne.n	800b188 <__hexnan+0x130>
 800b0da:	3102      	adds	r1, #2
 800b0dc:	f8ca 1000 	str.w	r1, [sl]
 800b0e0:	f1bb 0f00 	cmp.w	fp, #0
 800b0e4:	d050      	beq.n	800b188 <__hexnan+0x130>
 800b0e6:	454c      	cmp	r4, r9
 800b0e8:	d206      	bcs.n	800b0f8 <__hexnan+0xa0>
 800b0ea:	2d07      	cmp	r5, #7
 800b0ec:	dc04      	bgt.n	800b0f8 <__hexnan+0xa0>
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f7ff ff8a 	bl	800b00c <L_shift>
 800b0f8:	4544      	cmp	r4, r8
 800b0fa:	d934      	bls.n	800b166 <__hexnan+0x10e>
 800b0fc:	f1a8 0204 	sub.w	r2, r8, #4
 800b100:	4623      	mov	r3, r4
 800b102:	f853 1b04 	ldr.w	r1, [r3], #4
 800b106:	f842 1f04 	str.w	r1, [r2, #4]!
 800b10a:	429f      	cmp	r7, r3
 800b10c:	d2f9      	bcs.n	800b102 <__hexnan+0xaa>
 800b10e:	1b3b      	subs	r3, r7, r4
 800b110:	f023 0303 	bic.w	r3, r3, #3
 800b114:	3304      	adds	r3, #4
 800b116:	3401      	adds	r4, #1
 800b118:	3e03      	subs	r6, #3
 800b11a:	42b4      	cmp	r4, r6
 800b11c:	bf88      	it	hi
 800b11e:	2304      	movhi	r3, #4
 800b120:	4443      	add	r3, r8
 800b122:	2200      	movs	r2, #0
 800b124:	f843 2b04 	str.w	r2, [r3], #4
 800b128:	429f      	cmp	r7, r3
 800b12a:	d2fb      	bcs.n	800b124 <__hexnan+0xcc>
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	b91b      	cbnz	r3, 800b138 <__hexnan+0xe0>
 800b130:	4547      	cmp	r7, r8
 800b132:	d127      	bne.n	800b184 <__hexnan+0x12c>
 800b134:	2301      	movs	r3, #1
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	2005      	movs	r0, #5
 800b13a:	e026      	b.n	800b18a <__hexnan+0x132>
 800b13c:	3501      	adds	r5, #1
 800b13e:	2d08      	cmp	r5, #8
 800b140:	f10b 0b01 	add.w	fp, fp, #1
 800b144:	dd06      	ble.n	800b154 <__hexnan+0xfc>
 800b146:	4544      	cmp	r4, r8
 800b148:	d9c3      	bls.n	800b0d2 <__hexnan+0x7a>
 800b14a:	2300      	movs	r3, #0
 800b14c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b150:	2501      	movs	r5, #1
 800b152:	3c04      	subs	r4, #4
 800b154:	6822      	ldr	r2, [r4, #0]
 800b156:	f000 000f 	and.w	r0, r0, #15
 800b15a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	e7b7      	b.n	800b0d2 <__hexnan+0x7a>
 800b162:	2508      	movs	r5, #8
 800b164:	e7b5      	b.n	800b0d2 <__hexnan+0x7a>
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d0df      	beq.n	800b12c <__hexnan+0xd4>
 800b16c:	f04f 32ff 	mov.w	r2, #4294967295
 800b170:	f1c3 0320 	rsb	r3, r3, #32
 800b174:	fa22 f303 	lsr.w	r3, r2, r3
 800b178:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b17c:	401a      	ands	r2, r3
 800b17e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b182:	e7d3      	b.n	800b12c <__hexnan+0xd4>
 800b184:	3f04      	subs	r7, #4
 800b186:	e7d1      	b.n	800b12c <__hexnan+0xd4>
 800b188:	2004      	movs	r0, #4
 800b18a:	b007      	add	sp, #28
 800b18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b190 <_localeconv_r>:
 800b190:	4800      	ldr	r0, [pc, #0]	; (800b194 <_localeconv_r+0x4>)
 800b192:	4770      	bx	lr
 800b194:	200001cc 	.word	0x200001cc

0800b198 <__retarget_lock_init_recursive>:
 800b198:	4770      	bx	lr

0800b19a <__retarget_lock_acquire_recursive>:
 800b19a:	4770      	bx	lr

0800b19c <__retarget_lock_release_recursive>:
 800b19c:	4770      	bx	lr
	...

0800b1a0 <_lseek_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d07      	ldr	r5, [pc, #28]	; (800b1c0 <_lseek_r+0x20>)
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	602a      	str	r2, [r5, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f7f6 ffc0 	bl	8002134 <_lseek>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_lseek_r+0x1e>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_lseek_r+0x1e>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	20000960 	.word	0x20000960

0800b1c4 <malloc>:
 800b1c4:	4b02      	ldr	r3, [pc, #8]	; (800b1d0 <malloc+0xc>)
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	f000 bd3d 	b.w	800bc48 <_malloc_r>
 800b1ce:	bf00      	nop
 800b1d0:	20000074 	.word	0x20000074

0800b1d4 <__ascii_mbtowc>:
 800b1d4:	b082      	sub	sp, #8
 800b1d6:	b901      	cbnz	r1, 800b1da <__ascii_mbtowc+0x6>
 800b1d8:	a901      	add	r1, sp, #4
 800b1da:	b142      	cbz	r2, 800b1ee <__ascii_mbtowc+0x1a>
 800b1dc:	b14b      	cbz	r3, 800b1f2 <__ascii_mbtowc+0x1e>
 800b1de:	7813      	ldrb	r3, [r2, #0]
 800b1e0:	600b      	str	r3, [r1, #0]
 800b1e2:	7812      	ldrb	r2, [r2, #0]
 800b1e4:	1e10      	subs	r0, r2, #0
 800b1e6:	bf18      	it	ne
 800b1e8:	2001      	movne	r0, #1
 800b1ea:	b002      	add	sp, #8
 800b1ec:	4770      	bx	lr
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	e7fb      	b.n	800b1ea <__ascii_mbtowc+0x16>
 800b1f2:	f06f 0001 	mvn.w	r0, #1
 800b1f6:	e7f8      	b.n	800b1ea <__ascii_mbtowc+0x16>

0800b1f8 <memcpy>:
 800b1f8:	440a      	add	r2, r1
 800b1fa:	4291      	cmp	r1, r2
 800b1fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b200:	d100      	bne.n	800b204 <memcpy+0xc>
 800b202:	4770      	bx	lr
 800b204:	b510      	push	{r4, lr}
 800b206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b20e:	4291      	cmp	r1, r2
 800b210:	d1f9      	bne.n	800b206 <memcpy+0xe>
 800b212:	bd10      	pop	{r4, pc}

0800b214 <_Balloc>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	b976      	cbnz	r6, 800b23c <_Balloc+0x28>
 800b21e:	2010      	movs	r0, #16
 800b220:	f7ff ffd0 	bl	800b1c4 <malloc>
 800b224:	4602      	mov	r2, r0
 800b226:	6260      	str	r0, [r4, #36]	; 0x24
 800b228:	b920      	cbnz	r0, 800b234 <_Balloc+0x20>
 800b22a:	4b18      	ldr	r3, [pc, #96]	; (800b28c <_Balloc+0x78>)
 800b22c:	4818      	ldr	r0, [pc, #96]	; (800b290 <_Balloc+0x7c>)
 800b22e:	2166      	movs	r1, #102	; 0x66
 800b230:	f001 fd34 	bl	800cc9c <__assert_func>
 800b234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b238:	6006      	str	r6, [r0, #0]
 800b23a:	60c6      	str	r6, [r0, #12]
 800b23c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b23e:	68f3      	ldr	r3, [r6, #12]
 800b240:	b183      	cbz	r3, 800b264 <_Balloc+0x50>
 800b242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b24a:	b9b8      	cbnz	r0, 800b27c <_Balloc+0x68>
 800b24c:	2101      	movs	r1, #1
 800b24e:	fa01 f605 	lsl.w	r6, r1, r5
 800b252:	1d72      	adds	r2, r6, #5
 800b254:	0092      	lsls	r2, r2, #2
 800b256:	4620      	mov	r0, r4
 800b258:	f000 fc97 	bl	800bb8a <_calloc_r>
 800b25c:	b160      	cbz	r0, 800b278 <_Balloc+0x64>
 800b25e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b262:	e00e      	b.n	800b282 <_Balloc+0x6e>
 800b264:	2221      	movs	r2, #33	; 0x21
 800b266:	2104      	movs	r1, #4
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fc8e 	bl	800bb8a <_calloc_r>
 800b26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b270:	60f0      	str	r0, [r6, #12]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e4      	bne.n	800b242 <_Balloc+0x2e>
 800b278:	2000      	movs	r0, #0
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	6802      	ldr	r2, [r0, #0]
 800b27e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b282:	2300      	movs	r3, #0
 800b284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b288:	e7f7      	b.n	800b27a <_Balloc+0x66>
 800b28a:	bf00      	nop
 800b28c:	0800d2d6 	.word	0x0800d2d6
 800b290:	0800d440 	.word	0x0800d440

0800b294 <_Bfree>:
 800b294:	b570      	push	{r4, r5, r6, lr}
 800b296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	b976      	cbnz	r6, 800b2bc <_Bfree+0x28>
 800b29e:	2010      	movs	r0, #16
 800b2a0:	f7ff ff90 	bl	800b1c4 <malloc>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	6268      	str	r0, [r5, #36]	; 0x24
 800b2a8:	b920      	cbnz	r0, 800b2b4 <_Bfree+0x20>
 800b2aa:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <_Bfree+0x3c>)
 800b2ac:	4809      	ldr	r0, [pc, #36]	; (800b2d4 <_Bfree+0x40>)
 800b2ae:	218a      	movs	r1, #138	; 0x8a
 800b2b0:	f001 fcf4 	bl	800cc9c <__assert_func>
 800b2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b8:	6006      	str	r6, [r0, #0]
 800b2ba:	60c6      	str	r6, [r0, #12]
 800b2bc:	b13c      	cbz	r4, 800b2ce <_Bfree+0x3a>
 800b2be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2c0:	6862      	ldr	r2, [r4, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2c8:	6021      	str	r1, [r4, #0]
 800b2ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	0800d2d6 	.word	0x0800d2d6
 800b2d4:	0800d440 	.word	0x0800d440

0800b2d8 <__multadd>:
 800b2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	690e      	ldr	r6, [r1, #16]
 800b2de:	4607      	mov	r7, r0
 800b2e0:	4698      	mov	r8, r3
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	f101 0014 	add.w	r0, r1, #20
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6805      	ldr	r5, [r0, #0]
 800b2ec:	b2a9      	uxth	r1, r5
 800b2ee:	fb02 8101 	mla	r1, r2, r1, r8
 800b2f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b2f6:	0c2d      	lsrs	r5, r5, #16
 800b2f8:	fb02 c505 	mla	r5, r2, r5, ip
 800b2fc:	b289      	uxth	r1, r1
 800b2fe:	3301      	adds	r3, #1
 800b300:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b304:	429e      	cmp	r6, r3
 800b306:	f840 1b04 	str.w	r1, [r0], #4
 800b30a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b30e:	dcec      	bgt.n	800b2ea <__multadd+0x12>
 800b310:	f1b8 0f00 	cmp.w	r8, #0
 800b314:	d022      	beq.n	800b35c <__multadd+0x84>
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	42b3      	cmp	r3, r6
 800b31a:	dc19      	bgt.n	800b350 <__multadd+0x78>
 800b31c:	6861      	ldr	r1, [r4, #4]
 800b31e:	4638      	mov	r0, r7
 800b320:	3101      	adds	r1, #1
 800b322:	f7ff ff77 	bl	800b214 <_Balloc>
 800b326:	4605      	mov	r5, r0
 800b328:	b928      	cbnz	r0, 800b336 <__multadd+0x5e>
 800b32a:	4602      	mov	r2, r0
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <__multadd+0x8c>)
 800b32e:	480e      	ldr	r0, [pc, #56]	; (800b368 <__multadd+0x90>)
 800b330:	21b5      	movs	r1, #181	; 0xb5
 800b332:	f001 fcb3 	bl	800cc9c <__assert_func>
 800b336:	6922      	ldr	r2, [r4, #16]
 800b338:	3202      	adds	r2, #2
 800b33a:	f104 010c 	add.w	r1, r4, #12
 800b33e:	0092      	lsls	r2, r2, #2
 800b340:	300c      	adds	r0, #12
 800b342:	f7ff ff59 	bl	800b1f8 <memcpy>
 800b346:	4621      	mov	r1, r4
 800b348:	4638      	mov	r0, r7
 800b34a:	f7ff ffa3 	bl	800b294 <_Bfree>
 800b34e:	462c      	mov	r4, r5
 800b350:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b354:	3601      	adds	r6, #1
 800b356:	f8c3 8014 	str.w	r8, [r3, #20]
 800b35a:	6126      	str	r6, [r4, #16]
 800b35c:	4620      	mov	r0, r4
 800b35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b362:	bf00      	nop
 800b364:	0800d34c 	.word	0x0800d34c
 800b368:	0800d440 	.word	0x0800d440

0800b36c <__s2b>:
 800b36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b370:	460c      	mov	r4, r1
 800b372:	4615      	mov	r5, r2
 800b374:	461f      	mov	r7, r3
 800b376:	2209      	movs	r2, #9
 800b378:	3308      	adds	r3, #8
 800b37a:	4606      	mov	r6, r0
 800b37c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b380:	2100      	movs	r1, #0
 800b382:	2201      	movs	r2, #1
 800b384:	429a      	cmp	r2, r3
 800b386:	db09      	blt.n	800b39c <__s2b+0x30>
 800b388:	4630      	mov	r0, r6
 800b38a:	f7ff ff43 	bl	800b214 <_Balloc>
 800b38e:	b940      	cbnz	r0, 800b3a2 <__s2b+0x36>
 800b390:	4602      	mov	r2, r0
 800b392:	4b19      	ldr	r3, [pc, #100]	; (800b3f8 <__s2b+0x8c>)
 800b394:	4819      	ldr	r0, [pc, #100]	; (800b3fc <__s2b+0x90>)
 800b396:	21ce      	movs	r1, #206	; 0xce
 800b398:	f001 fc80 	bl	800cc9c <__assert_func>
 800b39c:	0052      	lsls	r2, r2, #1
 800b39e:	3101      	adds	r1, #1
 800b3a0:	e7f0      	b.n	800b384 <__s2b+0x18>
 800b3a2:	9b08      	ldr	r3, [sp, #32]
 800b3a4:	6143      	str	r3, [r0, #20]
 800b3a6:	2d09      	cmp	r5, #9
 800b3a8:	f04f 0301 	mov.w	r3, #1
 800b3ac:	6103      	str	r3, [r0, #16]
 800b3ae:	dd16      	ble.n	800b3de <__s2b+0x72>
 800b3b0:	f104 0909 	add.w	r9, r4, #9
 800b3b4:	46c8      	mov	r8, r9
 800b3b6:	442c      	add	r4, r5
 800b3b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b3bc:	4601      	mov	r1, r0
 800b3be:	3b30      	subs	r3, #48	; 0x30
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7ff ff88 	bl	800b2d8 <__multadd>
 800b3c8:	45a0      	cmp	r8, r4
 800b3ca:	d1f5      	bne.n	800b3b8 <__s2b+0x4c>
 800b3cc:	f1a5 0408 	sub.w	r4, r5, #8
 800b3d0:	444c      	add	r4, r9
 800b3d2:	1b2d      	subs	r5, r5, r4
 800b3d4:	1963      	adds	r3, r4, r5
 800b3d6:	42bb      	cmp	r3, r7
 800b3d8:	db04      	blt.n	800b3e4 <__s2b+0x78>
 800b3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3de:	340a      	adds	r4, #10
 800b3e0:	2509      	movs	r5, #9
 800b3e2:	e7f6      	b.n	800b3d2 <__s2b+0x66>
 800b3e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	3b30      	subs	r3, #48	; 0x30
 800b3ec:	220a      	movs	r2, #10
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7ff ff72 	bl	800b2d8 <__multadd>
 800b3f4:	e7ee      	b.n	800b3d4 <__s2b+0x68>
 800b3f6:	bf00      	nop
 800b3f8:	0800d34c 	.word	0x0800d34c
 800b3fc:	0800d440 	.word	0x0800d440

0800b400 <__hi0bits>:
 800b400:	0c03      	lsrs	r3, r0, #16
 800b402:	041b      	lsls	r3, r3, #16
 800b404:	b9d3      	cbnz	r3, 800b43c <__hi0bits+0x3c>
 800b406:	0400      	lsls	r0, r0, #16
 800b408:	2310      	movs	r3, #16
 800b40a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b40e:	bf04      	itt	eq
 800b410:	0200      	lsleq	r0, r0, #8
 800b412:	3308      	addeq	r3, #8
 800b414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b418:	bf04      	itt	eq
 800b41a:	0100      	lsleq	r0, r0, #4
 800b41c:	3304      	addeq	r3, #4
 800b41e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b422:	bf04      	itt	eq
 800b424:	0080      	lsleq	r0, r0, #2
 800b426:	3302      	addeq	r3, #2
 800b428:	2800      	cmp	r0, #0
 800b42a:	db05      	blt.n	800b438 <__hi0bits+0x38>
 800b42c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b430:	f103 0301 	add.w	r3, r3, #1
 800b434:	bf08      	it	eq
 800b436:	2320      	moveq	r3, #32
 800b438:	4618      	mov	r0, r3
 800b43a:	4770      	bx	lr
 800b43c:	2300      	movs	r3, #0
 800b43e:	e7e4      	b.n	800b40a <__hi0bits+0xa>

0800b440 <__lo0bits>:
 800b440:	6803      	ldr	r3, [r0, #0]
 800b442:	f013 0207 	ands.w	r2, r3, #7
 800b446:	4601      	mov	r1, r0
 800b448:	d00b      	beq.n	800b462 <__lo0bits+0x22>
 800b44a:	07da      	lsls	r2, r3, #31
 800b44c:	d424      	bmi.n	800b498 <__lo0bits+0x58>
 800b44e:	0798      	lsls	r0, r3, #30
 800b450:	bf49      	itett	mi
 800b452:	085b      	lsrmi	r3, r3, #1
 800b454:	089b      	lsrpl	r3, r3, #2
 800b456:	2001      	movmi	r0, #1
 800b458:	600b      	strmi	r3, [r1, #0]
 800b45a:	bf5c      	itt	pl
 800b45c:	600b      	strpl	r3, [r1, #0]
 800b45e:	2002      	movpl	r0, #2
 800b460:	4770      	bx	lr
 800b462:	b298      	uxth	r0, r3
 800b464:	b9b0      	cbnz	r0, 800b494 <__lo0bits+0x54>
 800b466:	0c1b      	lsrs	r3, r3, #16
 800b468:	2010      	movs	r0, #16
 800b46a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b46e:	bf04      	itt	eq
 800b470:	0a1b      	lsreq	r3, r3, #8
 800b472:	3008      	addeq	r0, #8
 800b474:	071a      	lsls	r2, r3, #28
 800b476:	bf04      	itt	eq
 800b478:	091b      	lsreq	r3, r3, #4
 800b47a:	3004      	addeq	r0, #4
 800b47c:	079a      	lsls	r2, r3, #30
 800b47e:	bf04      	itt	eq
 800b480:	089b      	lsreq	r3, r3, #2
 800b482:	3002      	addeq	r0, #2
 800b484:	07da      	lsls	r2, r3, #31
 800b486:	d403      	bmi.n	800b490 <__lo0bits+0x50>
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	f100 0001 	add.w	r0, r0, #1
 800b48e:	d005      	beq.n	800b49c <__lo0bits+0x5c>
 800b490:	600b      	str	r3, [r1, #0]
 800b492:	4770      	bx	lr
 800b494:	4610      	mov	r0, r2
 800b496:	e7e8      	b.n	800b46a <__lo0bits+0x2a>
 800b498:	2000      	movs	r0, #0
 800b49a:	4770      	bx	lr
 800b49c:	2020      	movs	r0, #32
 800b49e:	4770      	bx	lr

0800b4a0 <__i2b>:
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	f7ff feb5 	bl	800b214 <_Balloc>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	b928      	cbnz	r0, 800b4ba <__i2b+0x1a>
 800b4ae:	4b05      	ldr	r3, [pc, #20]	; (800b4c4 <__i2b+0x24>)
 800b4b0:	4805      	ldr	r0, [pc, #20]	; (800b4c8 <__i2b+0x28>)
 800b4b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b4b6:	f001 fbf1 	bl	800cc9c <__assert_func>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	6144      	str	r4, [r0, #20]
 800b4be:	6103      	str	r3, [r0, #16]
 800b4c0:	bd10      	pop	{r4, pc}
 800b4c2:	bf00      	nop
 800b4c4:	0800d34c 	.word	0x0800d34c
 800b4c8:	0800d440 	.word	0x0800d440

0800b4cc <__multiply>:
 800b4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	690a      	ldr	r2, [r1, #16]
 800b4d4:	6923      	ldr	r3, [r4, #16]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	bfb8      	it	lt
 800b4da:	460b      	movlt	r3, r1
 800b4dc:	460d      	mov	r5, r1
 800b4de:	bfbc      	itt	lt
 800b4e0:	4625      	movlt	r5, r4
 800b4e2:	461c      	movlt	r4, r3
 800b4e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b4e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4ec:	68ab      	ldr	r3, [r5, #8]
 800b4ee:	6869      	ldr	r1, [r5, #4]
 800b4f0:	eb0a 0709 	add.w	r7, sl, r9
 800b4f4:	42bb      	cmp	r3, r7
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	bfb8      	it	lt
 800b4fa:	3101      	addlt	r1, #1
 800b4fc:	f7ff fe8a 	bl	800b214 <_Balloc>
 800b500:	b930      	cbnz	r0, 800b510 <__multiply+0x44>
 800b502:	4602      	mov	r2, r0
 800b504:	4b42      	ldr	r3, [pc, #264]	; (800b610 <__multiply+0x144>)
 800b506:	4843      	ldr	r0, [pc, #268]	; (800b614 <__multiply+0x148>)
 800b508:	f240 115d 	movw	r1, #349	; 0x15d
 800b50c:	f001 fbc6 	bl	800cc9c <__assert_func>
 800b510:	f100 0614 	add.w	r6, r0, #20
 800b514:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b518:	4633      	mov	r3, r6
 800b51a:	2200      	movs	r2, #0
 800b51c:	4543      	cmp	r3, r8
 800b51e:	d31e      	bcc.n	800b55e <__multiply+0x92>
 800b520:	f105 0c14 	add.w	ip, r5, #20
 800b524:	f104 0314 	add.w	r3, r4, #20
 800b528:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b52c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b530:	9202      	str	r2, [sp, #8]
 800b532:	ebac 0205 	sub.w	r2, ip, r5
 800b536:	3a15      	subs	r2, #21
 800b538:	f022 0203 	bic.w	r2, r2, #3
 800b53c:	3204      	adds	r2, #4
 800b53e:	f105 0115 	add.w	r1, r5, #21
 800b542:	458c      	cmp	ip, r1
 800b544:	bf38      	it	cc
 800b546:	2204      	movcc	r2, #4
 800b548:	9201      	str	r2, [sp, #4]
 800b54a:	9a02      	ldr	r2, [sp, #8]
 800b54c:	9303      	str	r3, [sp, #12]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d808      	bhi.n	800b564 <__multiply+0x98>
 800b552:	2f00      	cmp	r7, #0
 800b554:	dc55      	bgt.n	800b602 <__multiply+0x136>
 800b556:	6107      	str	r7, [r0, #16]
 800b558:	b005      	add	sp, #20
 800b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55e:	f843 2b04 	str.w	r2, [r3], #4
 800b562:	e7db      	b.n	800b51c <__multiply+0x50>
 800b564:	f8b3 a000 	ldrh.w	sl, [r3]
 800b568:	f1ba 0f00 	cmp.w	sl, #0
 800b56c:	d020      	beq.n	800b5b0 <__multiply+0xe4>
 800b56e:	f105 0e14 	add.w	lr, r5, #20
 800b572:	46b1      	mov	r9, r6
 800b574:	2200      	movs	r2, #0
 800b576:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b57a:	f8d9 b000 	ldr.w	fp, [r9]
 800b57e:	b2a1      	uxth	r1, r4
 800b580:	fa1f fb8b 	uxth.w	fp, fp
 800b584:	fb0a b101 	mla	r1, sl, r1, fp
 800b588:	4411      	add	r1, r2
 800b58a:	f8d9 2000 	ldr.w	r2, [r9]
 800b58e:	0c24      	lsrs	r4, r4, #16
 800b590:	0c12      	lsrs	r2, r2, #16
 800b592:	fb0a 2404 	mla	r4, sl, r4, r2
 800b596:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b59a:	b289      	uxth	r1, r1
 800b59c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b5a0:	45f4      	cmp	ip, lr
 800b5a2:	f849 1b04 	str.w	r1, [r9], #4
 800b5a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b5aa:	d8e4      	bhi.n	800b576 <__multiply+0xaa>
 800b5ac:	9901      	ldr	r1, [sp, #4]
 800b5ae:	5072      	str	r2, [r6, r1]
 800b5b0:	9a03      	ldr	r2, [sp, #12]
 800b5b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	f1b9 0f00 	cmp.w	r9, #0
 800b5bc:	d01f      	beq.n	800b5fe <__multiply+0x132>
 800b5be:	6834      	ldr	r4, [r6, #0]
 800b5c0:	f105 0114 	add.w	r1, r5, #20
 800b5c4:	46b6      	mov	lr, r6
 800b5c6:	f04f 0a00 	mov.w	sl, #0
 800b5ca:	880a      	ldrh	r2, [r1, #0]
 800b5cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b5d0:	fb09 b202 	mla	r2, r9, r2, fp
 800b5d4:	4492      	add	sl, r2
 800b5d6:	b2a4      	uxth	r4, r4
 800b5d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b5dc:	f84e 4b04 	str.w	r4, [lr], #4
 800b5e0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b5e4:	f8be 2000 	ldrh.w	r2, [lr]
 800b5e8:	0c24      	lsrs	r4, r4, #16
 800b5ea:	fb09 2404 	mla	r4, r9, r4, r2
 800b5ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b5f2:	458c      	cmp	ip, r1
 800b5f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b5f8:	d8e7      	bhi.n	800b5ca <__multiply+0xfe>
 800b5fa:	9a01      	ldr	r2, [sp, #4]
 800b5fc:	50b4      	str	r4, [r6, r2]
 800b5fe:	3604      	adds	r6, #4
 800b600:	e7a3      	b.n	800b54a <__multiply+0x7e>
 800b602:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1a5      	bne.n	800b556 <__multiply+0x8a>
 800b60a:	3f01      	subs	r7, #1
 800b60c:	e7a1      	b.n	800b552 <__multiply+0x86>
 800b60e:	bf00      	nop
 800b610:	0800d34c 	.word	0x0800d34c
 800b614:	0800d440 	.word	0x0800d440

0800b618 <__pow5mult>:
 800b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b61c:	4615      	mov	r5, r2
 800b61e:	f012 0203 	ands.w	r2, r2, #3
 800b622:	4606      	mov	r6, r0
 800b624:	460f      	mov	r7, r1
 800b626:	d007      	beq.n	800b638 <__pow5mult+0x20>
 800b628:	4c25      	ldr	r4, [pc, #148]	; (800b6c0 <__pow5mult+0xa8>)
 800b62a:	3a01      	subs	r2, #1
 800b62c:	2300      	movs	r3, #0
 800b62e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b632:	f7ff fe51 	bl	800b2d8 <__multadd>
 800b636:	4607      	mov	r7, r0
 800b638:	10ad      	asrs	r5, r5, #2
 800b63a:	d03d      	beq.n	800b6b8 <__pow5mult+0xa0>
 800b63c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b63e:	b97c      	cbnz	r4, 800b660 <__pow5mult+0x48>
 800b640:	2010      	movs	r0, #16
 800b642:	f7ff fdbf 	bl	800b1c4 <malloc>
 800b646:	4602      	mov	r2, r0
 800b648:	6270      	str	r0, [r6, #36]	; 0x24
 800b64a:	b928      	cbnz	r0, 800b658 <__pow5mult+0x40>
 800b64c:	4b1d      	ldr	r3, [pc, #116]	; (800b6c4 <__pow5mult+0xac>)
 800b64e:	481e      	ldr	r0, [pc, #120]	; (800b6c8 <__pow5mult+0xb0>)
 800b650:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b654:	f001 fb22 	bl	800cc9c <__assert_func>
 800b658:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b65c:	6004      	str	r4, [r0, #0]
 800b65e:	60c4      	str	r4, [r0, #12]
 800b660:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b664:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b668:	b94c      	cbnz	r4, 800b67e <__pow5mult+0x66>
 800b66a:	f240 2171 	movw	r1, #625	; 0x271
 800b66e:	4630      	mov	r0, r6
 800b670:	f7ff ff16 	bl	800b4a0 <__i2b>
 800b674:	2300      	movs	r3, #0
 800b676:	f8c8 0008 	str.w	r0, [r8, #8]
 800b67a:	4604      	mov	r4, r0
 800b67c:	6003      	str	r3, [r0, #0]
 800b67e:	f04f 0900 	mov.w	r9, #0
 800b682:	07eb      	lsls	r3, r5, #31
 800b684:	d50a      	bpl.n	800b69c <__pow5mult+0x84>
 800b686:	4639      	mov	r1, r7
 800b688:	4622      	mov	r2, r4
 800b68a:	4630      	mov	r0, r6
 800b68c:	f7ff ff1e 	bl	800b4cc <__multiply>
 800b690:	4639      	mov	r1, r7
 800b692:	4680      	mov	r8, r0
 800b694:	4630      	mov	r0, r6
 800b696:	f7ff fdfd 	bl	800b294 <_Bfree>
 800b69a:	4647      	mov	r7, r8
 800b69c:	106d      	asrs	r5, r5, #1
 800b69e:	d00b      	beq.n	800b6b8 <__pow5mult+0xa0>
 800b6a0:	6820      	ldr	r0, [r4, #0]
 800b6a2:	b938      	cbnz	r0, 800b6b4 <__pow5mult+0x9c>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f7ff ff0f 	bl	800b4cc <__multiply>
 800b6ae:	6020      	str	r0, [r4, #0]
 800b6b0:	f8c0 9000 	str.w	r9, [r0]
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	e7e4      	b.n	800b682 <__pow5mult+0x6a>
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	bf00      	nop
 800b6c0:	0800d590 	.word	0x0800d590
 800b6c4:	0800d2d6 	.word	0x0800d2d6
 800b6c8:	0800d440 	.word	0x0800d440

0800b6cc <__lshift>:
 800b6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d0:	460c      	mov	r4, r1
 800b6d2:	6849      	ldr	r1, [r1, #4]
 800b6d4:	6923      	ldr	r3, [r4, #16]
 800b6d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6da:	68a3      	ldr	r3, [r4, #8]
 800b6dc:	4607      	mov	r7, r0
 800b6de:	4691      	mov	r9, r2
 800b6e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6e4:	f108 0601 	add.w	r6, r8, #1
 800b6e8:	42b3      	cmp	r3, r6
 800b6ea:	db0b      	blt.n	800b704 <__lshift+0x38>
 800b6ec:	4638      	mov	r0, r7
 800b6ee:	f7ff fd91 	bl	800b214 <_Balloc>
 800b6f2:	4605      	mov	r5, r0
 800b6f4:	b948      	cbnz	r0, 800b70a <__lshift+0x3e>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	4b28      	ldr	r3, [pc, #160]	; (800b79c <__lshift+0xd0>)
 800b6fa:	4829      	ldr	r0, [pc, #164]	; (800b7a0 <__lshift+0xd4>)
 800b6fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b700:	f001 facc 	bl	800cc9c <__assert_func>
 800b704:	3101      	adds	r1, #1
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	e7ee      	b.n	800b6e8 <__lshift+0x1c>
 800b70a:	2300      	movs	r3, #0
 800b70c:	f100 0114 	add.w	r1, r0, #20
 800b710:	f100 0210 	add.w	r2, r0, #16
 800b714:	4618      	mov	r0, r3
 800b716:	4553      	cmp	r3, sl
 800b718:	db33      	blt.n	800b782 <__lshift+0xb6>
 800b71a:	6920      	ldr	r0, [r4, #16]
 800b71c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b720:	f104 0314 	add.w	r3, r4, #20
 800b724:	f019 091f 	ands.w	r9, r9, #31
 800b728:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b72c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b730:	d02b      	beq.n	800b78a <__lshift+0xbe>
 800b732:	f1c9 0e20 	rsb	lr, r9, #32
 800b736:	468a      	mov	sl, r1
 800b738:	2200      	movs	r2, #0
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	fa00 f009 	lsl.w	r0, r0, r9
 800b740:	4302      	orrs	r2, r0
 800b742:	f84a 2b04 	str.w	r2, [sl], #4
 800b746:	f853 2b04 	ldr.w	r2, [r3], #4
 800b74a:	459c      	cmp	ip, r3
 800b74c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b750:	d8f3      	bhi.n	800b73a <__lshift+0x6e>
 800b752:	ebac 0304 	sub.w	r3, ip, r4
 800b756:	3b15      	subs	r3, #21
 800b758:	f023 0303 	bic.w	r3, r3, #3
 800b75c:	3304      	adds	r3, #4
 800b75e:	f104 0015 	add.w	r0, r4, #21
 800b762:	4584      	cmp	ip, r0
 800b764:	bf38      	it	cc
 800b766:	2304      	movcc	r3, #4
 800b768:	50ca      	str	r2, [r1, r3]
 800b76a:	b10a      	cbz	r2, 800b770 <__lshift+0xa4>
 800b76c:	f108 0602 	add.w	r6, r8, #2
 800b770:	3e01      	subs	r6, #1
 800b772:	4638      	mov	r0, r7
 800b774:	612e      	str	r6, [r5, #16]
 800b776:	4621      	mov	r1, r4
 800b778:	f7ff fd8c 	bl	800b294 <_Bfree>
 800b77c:	4628      	mov	r0, r5
 800b77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b782:	f842 0f04 	str.w	r0, [r2, #4]!
 800b786:	3301      	adds	r3, #1
 800b788:	e7c5      	b.n	800b716 <__lshift+0x4a>
 800b78a:	3904      	subs	r1, #4
 800b78c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b790:	f841 2f04 	str.w	r2, [r1, #4]!
 800b794:	459c      	cmp	ip, r3
 800b796:	d8f9      	bhi.n	800b78c <__lshift+0xc0>
 800b798:	e7ea      	b.n	800b770 <__lshift+0xa4>
 800b79a:	bf00      	nop
 800b79c:	0800d34c 	.word	0x0800d34c
 800b7a0:	0800d440 	.word	0x0800d440

0800b7a4 <__mcmp>:
 800b7a4:	b530      	push	{r4, r5, lr}
 800b7a6:	6902      	ldr	r2, [r0, #16]
 800b7a8:	690c      	ldr	r4, [r1, #16]
 800b7aa:	1b12      	subs	r2, r2, r4
 800b7ac:	d10e      	bne.n	800b7cc <__mcmp+0x28>
 800b7ae:	f100 0314 	add.w	r3, r0, #20
 800b7b2:	3114      	adds	r1, #20
 800b7b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b7b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7c4:	42a5      	cmp	r5, r4
 800b7c6:	d003      	beq.n	800b7d0 <__mcmp+0x2c>
 800b7c8:	d305      	bcc.n	800b7d6 <__mcmp+0x32>
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	4610      	mov	r0, r2
 800b7ce:	bd30      	pop	{r4, r5, pc}
 800b7d0:	4283      	cmp	r3, r0
 800b7d2:	d3f3      	bcc.n	800b7bc <__mcmp+0x18>
 800b7d4:	e7fa      	b.n	800b7cc <__mcmp+0x28>
 800b7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7da:	e7f7      	b.n	800b7cc <__mcmp+0x28>

0800b7dc <__mdiff>:
 800b7dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	460c      	mov	r4, r1
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4617      	mov	r7, r2
 800b7ea:	f7ff ffdb 	bl	800b7a4 <__mcmp>
 800b7ee:	1e05      	subs	r5, r0, #0
 800b7f0:	d110      	bne.n	800b814 <__mdiff+0x38>
 800b7f2:	4629      	mov	r1, r5
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7ff fd0d 	bl	800b214 <_Balloc>
 800b7fa:	b930      	cbnz	r0, 800b80a <__mdiff+0x2e>
 800b7fc:	4b39      	ldr	r3, [pc, #228]	; (800b8e4 <__mdiff+0x108>)
 800b7fe:	4602      	mov	r2, r0
 800b800:	f240 2132 	movw	r1, #562	; 0x232
 800b804:	4838      	ldr	r0, [pc, #224]	; (800b8e8 <__mdiff+0x10c>)
 800b806:	f001 fa49 	bl	800cc9c <__assert_func>
 800b80a:	2301      	movs	r3, #1
 800b80c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b810:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	bfa4      	itt	ge
 800b816:	463b      	movge	r3, r7
 800b818:	4627      	movge	r7, r4
 800b81a:	4630      	mov	r0, r6
 800b81c:	6879      	ldr	r1, [r7, #4]
 800b81e:	bfa6      	itte	ge
 800b820:	461c      	movge	r4, r3
 800b822:	2500      	movge	r5, #0
 800b824:	2501      	movlt	r5, #1
 800b826:	f7ff fcf5 	bl	800b214 <_Balloc>
 800b82a:	b920      	cbnz	r0, 800b836 <__mdiff+0x5a>
 800b82c:	4b2d      	ldr	r3, [pc, #180]	; (800b8e4 <__mdiff+0x108>)
 800b82e:	4602      	mov	r2, r0
 800b830:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b834:	e7e6      	b.n	800b804 <__mdiff+0x28>
 800b836:	693e      	ldr	r6, [r7, #16]
 800b838:	60c5      	str	r5, [r0, #12]
 800b83a:	6925      	ldr	r5, [r4, #16]
 800b83c:	f107 0114 	add.w	r1, r7, #20
 800b840:	f104 0914 	add.w	r9, r4, #20
 800b844:	f100 0e14 	add.w	lr, r0, #20
 800b848:	f107 0210 	add.w	r2, r7, #16
 800b84c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b850:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b854:	46f2      	mov	sl, lr
 800b856:	2700      	movs	r7, #0
 800b858:	f859 3b04 	ldr.w	r3, [r9], #4
 800b85c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b860:	fa1f f883 	uxth.w	r8, r3
 800b864:	fa17 f78b 	uxtah	r7, r7, fp
 800b868:	0c1b      	lsrs	r3, r3, #16
 800b86a:	eba7 0808 	sub.w	r8, r7, r8
 800b86e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b872:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b876:	fa1f f888 	uxth.w	r8, r8
 800b87a:	141f      	asrs	r7, r3, #16
 800b87c:	454d      	cmp	r5, r9
 800b87e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b882:	f84a 3b04 	str.w	r3, [sl], #4
 800b886:	d8e7      	bhi.n	800b858 <__mdiff+0x7c>
 800b888:	1b2b      	subs	r3, r5, r4
 800b88a:	3b15      	subs	r3, #21
 800b88c:	f023 0303 	bic.w	r3, r3, #3
 800b890:	3304      	adds	r3, #4
 800b892:	3415      	adds	r4, #21
 800b894:	42a5      	cmp	r5, r4
 800b896:	bf38      	it	cc
 800b898:	2304      	movcc	r3, #4
 800b89a:	4419      	add	r1, r3
 800b89c:	4473      	add	r3, lr
 800b89e:	469e      	mov	lr, r3
 800b8a0:	460d      	mov	r5, r1
 800b8a2:	4565      	cmp	r5, ip
 800b8a4:	d30e      	bcc.n	800b8c4 <__mdiff+0xe8>
 800b8a6:	f10c 0203 	add.w	r2, ip, #3
 800b8aa:	1a52      	subs	r2, r2, r1
 800b8ac:	f022 0203 	bic.w	r2, r2, #3
 800b8b0:	3903      	subs	r1, #3
 800b8b2:	458c      	cmp	ip, r1
 800b8b4:	bf38      	it	cc
 800b8b6:	2200      	movcc	r2, #0
 800b8b8:	441a      	add	r2, r3
 800b8ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b8be:	b17b      	cbz	r3, 800b8e0 <__mdiff+0x104>
 800b8c0:	6106      	str	r6, [r0, #16]
 800b8c2:	e7a5      	b.n	800b810 <__mdiff+0x34>
 800b8c4:	f855 8b04 	ldr.w	r8, [r5], #4
 800b8c8:	fa17 f488 	uxtah	r4, r7, r8
 800b8cc:	1422      	asrs	r2, r4, #16
 800b8ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b8d2:	b2a4      	uxth	r4, r4
 800b8d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b8d8:	f84e 4b04 	str.w	r4, [lr], #4
 800b8dc:	1417      	asrs	r7, r2, #16
 800b8de:	e7e0      	b.n	800b8a2 <__mdiff+0xc6>
 800b8e0:	3e01      	subs	r6, #1
 800b8e2:	e7ea      	b.n	800b8ba <__mdiff+0xde>
 800b8e4:	0800d34c 	.word	0x0800d34c
 800b8e8:	0800d440 	.word	0x0800d440

0800b8ec <__ulp>:
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	ed8d 0b00 	vstr	d0, [sp]
 800b8f2:	9b01      	ldr	r3, [sp, #4]
 800b8f4:	4912      	ldr	r1, [pc, #72]	; (800b940 <__ulp+0x54>)
 800b8f6:	4019      	ands	r1, r3
 800b8f8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b8fc:	2900      	cmp	r1, #0
 800b8fe:	dd05      	ble.n	800b90c <__ulp+0x20>
 800b900:	2200      	movs	r2, #0
 800b902:	460b      	mov	r3, r1
 800b904:	ec43 2b10 	vmov	d0, r2, r3
 800b908:	b002      	add	sp, #8
 800b90a:	4770      	bx	lr
 800b90c:	4249      	negs	r1, r1
 800b90e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b912:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b916:	f04f 0200 	mov.w	r2, #0
 800b91a:	f04f 0300 	mov.w	r3, #0
 800b91e:	da04      	bge.n	800b92a <__ulp+0x3e>
 800b920:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b924:	fa41 f300 	asr.w	r3, r1, r0
 800b928:	e7ec      	b.n	800b904 <__ulp+0x18>
 800b92a:	f1a0 0114 	sub.w	r1, r0, #20
 800b92e:	291e      	cmp	r1, #30
 800b930:	bfda      	itte	le
 800b932:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b936:	fa20 f101 	lsrle.w	r1, r0, r1
 800b93a:	2101      	movgt	r1, #1
 800b93c:	460a      	mov	r2, r1
 800b93e:	e7e1      	b.n	800b904 <__ulp+0x18>
 800b940:	7ff00000 	.word	0x7ff00000

0800b944 <__b2d>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	6905      	ldr	r5, [r0, #16]
 800b948:	f100 0714 	add.w	r7, r0, #20
 800b94c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b950:	1f2e      	subs	r6, r5, #4
 800b952:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff fd52 	bl	800b400 <__hi0bits>
 800b95c:	f1c0 0320 	rsb	r3, r0, #32
 800b960:	280a      	cmp	r0, #10
 800b962:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b9e0 <__b2d+0x9c>
 800b966:	600b      	str	r3, [r1, #0]
 800b968:	dc14      	bgt.n	800b994 <__b2d+0x50>
 800b96a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b96e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b972:	42b7      	cmp	r7, r6
 800b974:	ea41 030c 	orr.w	r3, r1, ip
 800b978:	bf34      	ite	cc
 800b97a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b97e:	2100      	movcs	r1, #0
 800b980:	3015      	adds	r0, #21
 800b982:	fa04 f000 	lsl.w	r0, r4, r0
 800b986:	fa21 f10e 	lsr.w	r1, r1, lr
 800b98a:	ea40 0201 	orr.w	r2, r0, r1
 800b98e:	ec43 2b10 	vmov	d0, r2, r3
 800b992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b994:	42b7      	cmp	r7, r6
 800b996:	bf3a      	itte	cc
 800b998:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b99c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b9a0:	2100      	movcs	r1, #0
 800b9a2:	380b      	subs	r0, #11
 800b9a4:	d017      	beq.n	800b9d6 <__b2d+0x92>
 800b9a6:	f1c0 0c20 	rsb	ip, r0, #32
 800b9aa:	fa04 f500 	lsl.w	r5, r4, r0
 800b9ae:	42be      	cmp	r6, r7
 800b9b0:	fa21 f40c 	lsr.w	r4, r1, ip
 800b9b4:	ea45 0504 	orr.w	r5, r5, r4
 800b9b8:	bf8c      	ite	hi
 800b9ba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b9be:	2400      	movls	r4, #0
 800b9c0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b9c4:	fa01 f000 	lsl.w	r0, r1, r0
 800b9c8:	fa24 f40c 	lsr.w	r4, r4, ip
 800b9cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b9d0:	ea40 0204 	orr.w	r2, r0, r4
 800b9d4:	e7db      	b.n	800b98e <__b2d+0x4a>
 800b9d6:	ea44 030c 	orr.w	r3, r4, ip
 800b9da:	460a      	mov	r2, r1
 800b9dc:	e7d7      	b.n	800b98e <__b2d+0x4a>
 800b9de:	bf00      	nop
 800b9e0:	3ff00000 	.word	0x3ff00000

0800b9e4 <__d2b>:
 800b9e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9e8:	4689      	mov	r9, r1
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	ec57 6b10 	vmov	r6, r7, d0
 800b9f0:	4690      	mov	r8, r2
 800b9f2:	f7ff fc0f 	bl	800b214 <_Balloc>
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	b930      	cbnz	r0, 800ba08 <__d2b+0x24>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	4b25      	ldr	r3, [pc, #148]	; (800ba94 <__d2b+0xb0>)
 800b9fe:	4826      	ldr	r0, [pc, #152]	; (800ba98 <__d2b+0xb4>)
 800ba00:	f240 310a 	movw	r1, #778	; 0x30a
 800ba04:	f001 f94a 	bl	800cc9c <__assert_func>
 800ba08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba10:	bb35      	cbnz	r5, 800ba60 <__d2b+0x7c>
 800ba12:	2e00      	cmp	r6, #0
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	d028      	beq.n	800ba6a <__d2b+0x86>
 800ba18:	4668      	mov	r0, sp
 800ba1a:	9600      	str	r6, [sp, #0]
 800ba1c:	f7ff fd10 	bl	800b440 <__lo0bits>
 800ba20:	9900      	ldr	r1, [sp, #0]
 800ba22:	b300      	cbz	r0, 800ba66 <__d2b+0x82>
 800ba24:	9a01      	ldr	r2, [sp, #4]
 800ba26:	f1c0 0320 	rsb	r3, r0, #32
 800ba2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	40c2      	lsrs	r2, r0
 800ba32:	6163      	str	r3, [r4, #20]
 800ba34:	9201      	str	r2, [sp, #4]
 800ba36:	9b01      	ldr	r3, [sp, #4]
 800ba38:	61a3      	str	r3, [r4, #24]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	bf14      	ite	ne
 800ba3e:	2202      	movne	r2, #2
 800ba40:	2201      	moveq	r2, #1
 800ba42:	6122      	str	r2, [r4, #16]
 800ba44:	b1d5      	cbz	r5, 800ba7c <__d2b+0x98>
 800ba46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba4a:	4405      	add	r5, r0
 800ba4c:	f8c9 5000 	str.w	r5, [r9]
 800ba50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba54:	f8c8 0000 	str.w	r0, [r8]
 800ba58:	4620      	mov	r0, r4
 800ba5a:	b003      	add	sp, #12
 800ba5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba64:	e7d5      	b.n	800ba12 <__d2b+0x2e>
 800ba66:	6161      	str	r1, [r4, #20]
 800ba68:	e7e5      	b.n	800ba36 <__d2b+0x52>
 800ba6a:	a801      	add	r0, sp, #4
 800ba6c:	f7ff fce8 	bl	800b440 <__lo0bits>
 800ba70:	9b01      	ldr	r3, [sp, #4]
 800ba72:	6163      	str	r3, [r4, #20]
 800ba74:	2201      	movs	r2, #1
 800ba76:	6122      	str	r2, [r4, #16]
 800ba78:	3020      	adds	r0, #32
 800ba7a:	e7e3      	b.n	800ba44 <__d2b+0x60>
 800ba7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba84:	f8c9 0000 	str.w	r0, [r9]
 800ba88:	6918      	ldr	r0, [r3, #16]
 800ba8a:	f7ff fcb9 	bl	800b400 <__hi0bits>
 800ba8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba92:	e7df      	b.n	800ba54 <__d2b+0x70>
 800ba94:	0800d34c 	.word	0x0800d34c
 800ba98:	0800d440 	.word	0x0800d440

0800ba9c <__ratio>:
 800ba9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	4688      	mov	r8, r1
 800baa2:	4669      	mov	r1, sp
 800baa4:	4681      	mov	r9, r0
 800baa6:	f7ff ff4d 	bl	800b944 <__b2d>
 800baaa:	a901      	add	r1, sp, #4
 800baac:	4640      	mov	r0, r8
 800baae:	ec55 4b10 	vmov	r4, r5, d0
 800bab2:	f7ff ff47 	bl	800b944 <__b2d>
 800bab6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800baba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800babe:	eba3 0c02 	sub.w	ip, r3, r2
 800bac2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bac6:	1a9b      	subs	r3, r3, r2
 800bac8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bacc:	ec51 0b10 	vmov	r0, r1, d0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bfd6      	itet	le
 800bad4:	460a      	movle	r2, r1
 800bad6:	462a      	movgt	r2, r5
 800bad8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800badc:	468b      	mov	fp, r1
 800bade:	462f      	mov	r7, r5
 800bae0:	bfd4      	ite	le
 800bae2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bae6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800baea:	4620      	mov	r0, r4
 800baec:	ee10 2a10 	vmov	r2, s0
 800baf0:	465b      	mov	r3, fp
 800baf2:	4639      	mov	r1, r7
 800baf4:	f7f4 feda 	bl	80008ac <__aeabi_ddiv>
 800baf8:	ec41 0b10 	vmov	d0, r0, r1
 800bafc:	b003      	add	sp, #12
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb02 <__copybits>:
 800bb02:	3901      	subs	r1, #1
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	1149      	asrs	r1, r1, #5
 800bb08:	6914      	ldr	r4, [r2, #16]
 800bb0a:	3101      	adds	r1, #1
 800bb0c:	f102 0314 	add.w	r3, r2, #20
 800bb10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb18:	1f05      	subs	r5, r0, #4
 800bb1a:	42a3      	cmp	r3, r4
 800bb1c:	d30c      	bcc.n	800bb38 <__copybits+0x36>
 800bb1e:	1aa3      	subs	r3, r4, r2
 800bb20:	3b11      	subs	r3, #17
 800bb22:	f023 0303 	bic.w	r3, r3, #3
 800bb26:	3211      	adds	r2, #17
 800bb28:	42a2      	cmp	r2, r4
 800bb2a:	bf88      	it	hi
 800bb2c:	2300      	movhi	r3, #0
 800bb2e:	4418      	add	r0, r3
 800bb30:	2300      	movs	r3, #0
 800bb32:	4288      	cmp	r0, r1
 800bb34:	d305      	bcc.n	800bb42 <__copybits+0x40>
 800bb36:	bd70      	pop	{r4, r5, r6, pc}
 800bb38:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb3c:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb40:	e7eb      	b.n	800bb1a <__copybits+0x18>
 800bb42:	f840 3b04 	str.w	r3, [r0], #4
 800bb46:	e7f4      	b.n	800bb32 <__copybits+0x30>

0800bb48 <__any_on>:
 800bb48:	f100 0214 	add.w	r2, r0, #20
 800bb4c:	6900      	ldr	r0, [r0, #16]
 800bb4e:	114b      	asrs	r3, r1, #5
 800bb50:	4298      	cmp	r0, r3
 800bb52:	b510      	push	{r4, lr}
 800bb54:	db11      	blt.n	800bb7a <__any_on+0x32>
 800bb56:	dd0a      	ble.n	800bb6e <__any_on+0x26>
 800bb58:	f011 011f 	ands.w	r1, r1, #31
 800bb5c:	d007      	beq.n	800bb6e <__any_on+0x26>
 800bb5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb62:	fa24 f001 	lsr.w	r0, r4, r1
 800bb66:	fa00 f101 	lsl.w	r1, r0, r1
 800bb6a:	428c      	cmp	r4, r1
 800bb6c:	d10b      	bne.n	800bb86 <__any_on+0x3e>
 800bb6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d803      	bhi.n	800bb7e <__any_on+0x36>
 800bb76:	2000      	movs	r0, #0
 800bb78:	bd10      	pop	{r4, pc}
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	e7f7      	b.n	800bb6e <__any_on+0x26>
 800bb7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb82:	2900      	cmp	r1, #0
 800bb84:	d0f5      	beq.n	800bb72 <__any_on+0x2a>
 800bb86:	2001      	movs	r0, #1
 800bb88:	e7f6      	b.n	800bb78 <__any_on+0x30>

0800bb8a <_calloc_r>:
 800bb8a:	b513      	push	{r0, r1, r4, lr}
 800bb8c:	434a      	muls	r2, r1
 800bb8e:	4611      	mov	r1, r2
 800bb90:	9201      	str	r2, [sp, #4]
 800bb92:	f000 f859 	bl	800bc48 <_malloc_r>
 800bb96:	4604      	mov	r4, r0
 800bb98:	b118      	cbz	r0, 800bba2 <_calloc_r+0x18>
 800bb9a:	9a01      	ldr	r2, [sp, #4]
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	f7fc f9f3 	bl	8007f88 <memset>
 800bba2:	4620      	mov	r0, r4
 800bba4:	b002      	add	sp, #8
 800bba6:	bd10      	pop	{r4, pc}

0800bba8 <_free_r>:
 800bba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbaa:	2900      	cmp	r1, #0
 800bbac:	d048      	beq.n	800bc40 <_free_r+0x98>
 800bbae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbb2:	9001      	str	r0, [sp, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f1a1 0404 	sub.w	r4, r1, #4
 800bbba:	bfb8      	it	lt
 800bbbc:	18e4      	addlt	r4, r4, r3
 800bbbe:	f001 f9dd 	bl	800cf7c <__malloc_lock>
 800bbc2:	4a20      	ldr	r2, [pc, #128]	; (800bc44 <_free_r+0x9c>)
 800bbc4:	9801      	ldr	r0, [sp, #4]
 800bbc6:	6813      	ldr	r3, [r2, #0]
 800bbc8:	4615      	mov	r5, r2
 800bbca:	b933      	cbnz	r3, 800bbda <_free_r+0x32>
 800bbcc:	6063      	str	r3, [r4, #4]
 800bbce:	6014      	str	r4, [r2, #0]
 800bbd0:	b003      	add	sp, #12
 800bbd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbd6:	f001 b9d7 	b.w	800cf88 <__malloc_unlock>
 800bbda:	42a3      	cmp	r3, r4
 800bbdc:	d90b      	bls.n	800bbf6 <_free_r+0x4e>
 800bbde:	6821      	ldr	r1, [r4, #0]
 800bbe0:	1862      	adds	r2, r4, r1
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	bf04      	itt	eq
 800bbe6:	681a      	ldreq	r2, [r3, #0]
 800bbe8:	685b      	ldreq	r3, [r3, #4]
 800bbea:	6063      	str	r3, [r4, #4]
 800bbec:	bf04      	itt	eq
 800bbee:	1852      	addeq	r2, r2, r1
 800bbf0:	6022      	streq	r2, [r4, #0]
 800bbf2:	602c      	str	r4, [r5, #0]
 800bbf4:	e7ec      	b.n	800bbd0 <_free_r+0x28>
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	b10b      	cbz	r3, 800bc00 <_free_r+0x58>
 800bbfc:	42a3      	cmp	r3, r4
 800bbfe:	d9fa      	bls.n	800bbf6 <_free_r+0x4e>
 800bc00:	6811      	ldr	r1, [r2, #0]
 800bc02:	1855      	adds	r5, r2, r1
 800bc04:	42a5      	cmp	r5, r4
 800bc06:	d10b      	bne.n	800bc20 <_free_r+0x78>
 800bc08:	6824      	ldr	r4, [r4, #0]
 800bc0a:	4421      	add	r1, r4
 800bc0c:	1854      	adds	r4, r2, r1
 800bc0e:	42a3      	cmp	r3, r4
 800bc10:	6011      	str	r1, [r2, #0]
 800bc12:	d1dd      	bne.n	800bbd0 <_free_r+0x28>
 800bc14:	681c      	ldr	r4, [r3, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	6053      	str	r3, [r2, #4]
 800bc1a:	4421      	add	r1, r4
 800bc1c:	6011      	str	r1, [r2, #0]
 800bc1e:	e7d7      	b.n	800bbd0 <_free_r+0x28>
 800bc20:	d902      	bls.n	800bc28 <_free_r+0x80>
 800bc22:	230c      	movs	r3, #12
 800bc24:	6003      	str	r3, [r0, #0]
 800bc26:	e7d3      	b.n	800bbd0 <_free_r+0x28>
 800bc28:	6825      	ldr	r5, [r4, #0]
 800bc2a:	1961      	adds	r1, r4, r5
 800bc2c:	428b      	cmp	r3, r1
 800bc2e:	bf04      	itt	eq
 800bc30:	6819      	ldreq	r1, [r3, #0]
 800bc32:	685b      	ldreq	r3, [r3, #4]
 800bc34:	6063      	str	r3, [r4, #4]
 800bc36:	bf04      	itt	eq
 800bc38:	1949      	addeq	r1, r1, r5
 800bc3a:	6021      	streq	r1, [r4, #0]
 800bc3c:	6054      	str	r4, [r2, #4]
 800bc3e:	e7c7      	b.n	800bbd0 <_free_r+0x28>
 800bc40:	b003      	add	sp, #12
 800bc42:	bd30      	pop	{r4, r5, pc}
 800bc44:	200002dc 	.word	0x200002dc

0800bc48 <_malloc_r>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	1ccd      	adds	r5, r1, #3
 800bc4c:	f025 0503 	bic.w	r5, r5, #3
 800bc50:	3508      	adds	r5, #8
 800bc52:	2d0c      	cmp	r5, #12
 800bc54:	bf38      	it	cc
 800bc56:	250c      	movcc	r5, #12
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	db01      	blt.n	800bc62 <_malloc_r+0x1a>
 800bc5e:	42a9      	cmp	r1, r5
 800bc60:	d903      	bls.n	800bc6a <_malloc_r+0x22>
 800bc62:	230c      	movs	r3, #12
 800bc64:	6033      	str	r3, [r6, #0]
 800bc66:	2000      	movs	r0, #0
 800bc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc6a:	f001 f987 	bl	800cf7c <__malloc_lock>
 800bc6e:	4921      	ldr	r1, [pc, #132]	; (800bcf4 <_malloc_r+0xac>)
 800bc70:	680a      	ldr	r2, [r1, #0]
 800bc72:	4614      	mov	r4, r2
 800bc74:	b99c      	cbnz	r4, 800bc9e <_malloc_r+0x56>
 800bc76:	4f20      	ldr	r7, [pc, #128]	; (800bcf8 <_malloc_r+0xb0>)
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	b923      	cbnz	r3, 800bc86 <_malloc_r+0x3e>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f000 fe2a 	bl	800c8d8 <_sbrk_r>
 800bc84:	6038      	str	r0, [r7, #0]
 800bc86:	4629      	mov	r1, r5
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f000 fe25 	bl	800c8d8 <_sbrk_r>
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	d123      	bne.n	800bcda <_malloc_r+0x92>
 800bc92:	230c      	movs	r3, #12
 800bc94:	6033      	str	r3, [r6, #0]
 800bc96:	4630      	mov	r0, r6
 800bc98:	f001 f976 	bl	800cf88 <__malloc_unlock>
 800bc9c:	e7e3      	b.n	800bc66 <_malloc_r+0x1e>
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	1b5b      	subs	r3, r3, r5
 800bca2:	d417      	bmi.n	800bcd4 <_malloc_r+0x8c>
 800bca4:	2b0b      	cmp	r3, #11
 800bca6:	d903      	bls.n	800bcb0 <_malloc_r+0x68>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	441c      	add	r4, r3
 800bcac:	6025      	str	r5, [r4, #0]
 800bcae:	e004      	b.n	800bcba <_malloc_r+0x72>
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	42a2      	cmp	r2, r4
 800bcb4:	bf0c      	ite	eq
 800bcb6:	600b      	streq	r3, [r1, #0]
 800bcb8:	6053      	strne	r3, [r2, #4]
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f001 f964 	bl	800cf88 <__malloc_unlock>
 800bcc0:	f104 000b 	add.w	r0, r4, #11
 800bcc4:	1d23      	adds	r3, r4, #4
 800bcc6:	f020 0007 	bic.w	r0, r0, #7
 800bcca:	1ac2      	subs	r2, r0, r3
 800bccc:	d0cc      	beq.n	800bc68 <_malloc_r+0x20>
 800bcce:	1a1b      	subs	r3, r3, r0
 800bcd0:	50a3      	str	r3, [r4, r2]
 800bcd2:	e7c9      	b.n	800bc68 <_malloc_r+0x20>
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	6864      	ldr	r4, [r4, #4]
 800bcd8:	e7cc      	b.n	800bc74 <_malloc_r+0x2c>
 800bcda:	1cc4      	adds	r4, r0, #3
 800bcdc:	f024 0403 	bic.w	r4, r4, #3
 800bce0:	42a0      	cmp	r0, r4
 800bce2:	d0e3      	beq.n	800bcac <_malloc_r+0x64>
 800bce4:	1a21      	subs	r1, r4, r0
 800bce6:	4630      	mov	r0, r6
 800bce8:	f000 fdf6 	bl	800c8d8 <_sbrk_r>
 800bcec:	3001      	adds	r0, #1
 800bcee:	d1dd      	bne.n	800bcac <_malloc_r+0x64>
 800bcf0:	e7cf      	b.n	800bc92 <_malloc_r+0x4a>
 800bcf2:	bf00      	nop
 800bcf4:	200002dc 	.word	0x200002dc
 800bcf8:	200002e0 	.word	0x200002e0

0800bcfc <__ssputs_r>:
 800bcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	688e      	ldr	r6, [r1, #8]
 800bd02:	429e      	cmp	r6, r3
 800bd04:	4682      	mov	sl, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	4690      	mov	r8, r2
 800bd0a:	461f      	mov	r7, r3
 800bd0c:	d838      	bhi.n	800bd80 <__ssputs_r+0x84>
 800bd0e:	898a      	ldrh	r2, [r1, #12]
 800bd10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd14:	d032      	beq.n	800bd7c <__ssputs_r+0x80>
 800bd16:	6825      	ldr	r5, [r4, #0]
 800bd18:	6909      	ldr	r1, [r1, #16]
 800bd1a:	eba5 0901 	sub.w	r9, r5, r1
 800bd1e:	6965      	ldr	r5, [r4, #20]
 800bd20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd28:	3301      	adds	r3, #1
 800bd2a:	444b      	add	r3, r9
 800bd2c:	106d      	asrs	r5, r5, #1
 800bd2e:	429d      	cmp	r5, r3
 800bd30:	bf38      	it	cc
 800bd32:	461d      	movcc	r5, r3
 800bd34:	0553      	lsls	r3, r2, #21
 800bd36:	d531      	bpl.n	800bd9c <__ssputs_r+0xa0>
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7ff ff85 	bl	800bc48 <_malloc_r>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	b950      	cbnz	r0, 800bd58 <__ssputs_r+0x5c>
 800bd42:	230c      	movs	r3, #12
 800bd44:	f8ca 3000 	str.w	r3, [sl]
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd4e:	81a3      	strh	r3, [r4, #12]
 800bd50:	f04f 30ff 	mov.w	r0, #4294967295
 800bd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd58:	6921      	ldr	r1, [r4, #16]
 800bd5a:	464a      	mov	r2, r9
 800bd5c:	f7ff fa4c 	bl	800b1f8 <memcpy>
 800bd60:	89a3      	ldrh	r3, [r4, #12]
 800bd62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	6126      	str	r6, [r4, #16]
 800bd6e:	6165      	str	r5, [r4, #20]
 800bd70:	444e      	add	r6, r9
 800bd72:	eba5 0509 	sub.w	r5, r5, r9
 800bd76:	6026      	str	r6, [r4, #0]
 800bd78:	60a5      	str	r5, [r4, #8]
 800bd7a:	463e      	mov	r6, r7
 800bd7c:	42be      	cmp	r6, r7
 800bd7e:	d900      	bls.n	800bd82 <__ssputs_r+0x86>
 800bd80:	463e      	mov	r6, r7
 800bd82:	4632      	mov	r2, r6
 800bd84:	6820      	ldr	r0, [r4, #0]
 800bd86:	4641      	mov	r1, r8
 800bd88:	f001 f8de 	bl	800cf48 <memmove>
 800bd8c:	68a3      	ldr	r3, [r4, #8]
 800bd8e:	6822      	ldr	r2, [r4, #0]
 800bd90:	1b9b      	subs	r3, r3, r6
 800bd92:	4432      	add	r2, r6
 800bd94:	60a3      	str	r3, [r4, #8]
 800bd96:	6022      	str	r2, [r4, #0]
 800bd98:	2000      	movs	r0, #0
 800bd9a:	e7db      	b.n	800bd54 <__ssputs_r+0x58>
 800bd9c:	462a      	mov	r2, r5
 800bd9e:	f001 f8f9 	bl	800cf94 <_realloc_r>
 800bda2:	4606      	mov	r6, r0
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d1e1      	bne.n	800bd6c <__ssputs_r+0x70>
 800bda8:	6921      	ldr	r1, [r4, #16]
 800bdaa:	4650      	mov	r0, sl
 800bdac:	f7ff fefc 	bl	800bba8 <_free_r>
 800bdb0:	e7c7      	b.n	800bd42 <__ssputs_r+0x46>
	...

0800bdb4 <_svfiprintf_r>:
 800bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	4698      	mov	r8, r3
 800bdba:	898b      	ldrh	r3, [r1, #12]
 800bdbc:	061b      	lsls	r3, r3, #24
 800bdbe:	b09d      	sub	sp, #116	; 0x74
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	460d      	mov	r5, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	d50e      	bpl.n	800bde6 <_svfiprintf_r+0x32>
 800bdc8:	690b      	ldr	r3, [r1, #16]
 800bdca:	b963      	cbnz	r3, 800bde6 <_svfiprintf_r+0x32>
 800bdcc:	2140      	movs	r1, #64	; 0x40
 800bdce:	f7ff ff3b 	bl	800bc48 <_malloc_r>
 800bdd2:	6028      	str	r0, [r5, #0]
 800bdd4:	6128      	str	r0, [r5, #16]
 800bdd6:	b920      	cbnz	r0, 800bde2 <_svfiprintf_r+0x2e>
 800bdd8:	230c      	movs	r3, #12
 800bdda:	603b      	str	r3, [r7, #0]
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	e0d1      	b.n	800bf86 <_svfiprintf_r+0x1d2>
 800bde2:	2340      	movs	r3, #64	; 0x40
 800bde4:	616b      	str	r3, [r5, #20]
 800bde6:	2300      	movs	r3, #0
 800bde8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdea:	2320      	movs	r3, #32
 800bdec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdf4:	2330      	movs	r3, #48	; 0x30
 800bdf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bfa0 <_svfiprintf_r+0x1ec>
 800bdfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdfe:	f04f 0901 	mov.w	r9, #1
 800be02:	4623      	mov	r3, r4
 800be04:	469a      	mov	sl, r3
 800be06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be0a:	b10a      	cbz	r2, 800be10 <_svfiprintf_r+0x5c>
 800be0c:	2a25      	cmp	r2, #37	; 0x25
 800be0e:	d1f9      	bne.n	800be04 <_svfiprintf_r+0x50>
 800be10:	ebba 0b04 	subs.w	fp, sl, r4
 800be14:	d00b      	beq.n	800be2e <_svfiprintf_r+0x7a>
 800be16:	465b      	mov	r3, fp
 800be18:	4622      	mov	r2, r4
 800be1a:	4629      	mov	r1, r5
 800be1c:	4638      	mov	r0, r7
 800be1e:	f7ff ff6d 	bl	800bcfc <__ssputs_r>
 800be22:	3001      	adds	r0, #1
 800be24:	f000 80aa 	beq.w	800bf7c <_svfiprintf_r+0x1c8>
 800be28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be2a:	445a      	add	r2, fp
 800be2c:	9209      	str	r2, [sp, #36]	; 0x24
 800be2e:	f89a 3000 	ldrb.w	r3, [sl]
 800be32:	2b00      	cmp	r3, #0
 800be34:	f000 80a2 	beq.w	800bf7c <_svfiprintf_r+0x1c8>
 800be38:	2300      	movs	r3, #0
 800be3a:	f04f 32ff 	mov.w	r2, #4294967295
 800be3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be42:	f10a 0a01 	add.w	sl, sl, #1
 800be46:	9304      	str	r3, [sp, #16]
 800be48:	9307      	str	r3, [sp, #28]
 800be4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be4e:	931a      	str	r3, [sp, #104]	; 0x68
 800be50:	4654      	mov	r4, sl
 800be52:	2205      	movs	r2, #5
 800be54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be58:	4851      	ldr	r0, [pc, #324]	; (800bfa0 <_svfiprintf_r+0x1ec>)
 800be5a:	f7f4 f9f1 	bl	8000240 <memchr>
 800be5e:	9a04      	ldr	r2, [sp, #16]
 800be60:	b9d8      	cbnz	r0, 800be9a <_svfiprintf_r+0xe6>
 800be62:	06d0      	lsls	r0, r2, #27
 800be64:	bf44      	itt	mi
 800be66:	2320      	movmi	r3, #32
 800be68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be6c:	0711      	lsls	r1, r2, #28
 800be6e:	bf44      	itt	mi
 800be70:	232b      	movmi	r3, #43	; 0x2b
 800be72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be76:	f89a 3000 	ldrb.w	r3, [sl]
 800be7a:	2b2a      	cmp	r3, #42	; 0x2a
 800be7c:	d015      	beq.n	800beaa <_svfiprintf_r+0xf6>
 800be7e:	9a07      	ldr	r2, [sp, #28]
 800be80:	4654      	mov	r4, sl
 800be82:	2000      	movs	r0, #0
 800be84:	f04f 0c0a 	mov.w	ip, #10
 800be88:	4621      	mov	r1, r4
 800be8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be8e:	3b30      	subs	r3, #48	; 0x30
 800be90:	2b09      	cmp	r3, #9
 800be92:	d94e      	bls.n	800bf32 <_svfiprintf_r+0x17e>
 800be94:	b1b0      	cbz	r0, 800bec4 <_svfiprintf_r+0x110>
 800be96:	9207      	str	r2, [sp, #28]
 800be98:	e014      	b.n	800bec4 <_svfiprintf_r+0x110>
 800be9a:	eba0 0308 	sub.w	r3, r0, r8
 800be9e:	fa09 f303 	lsl.w	r3, r9, r3
 800bea2:	4313      	orrs	r3, r2
 800bea4:	9304      	str	r3, [sp, #16]
 800bea6:	46a2      	mov	sl, r4
 800bea8:	e7d2      	b.n	800be50 <_svfiprintf_r+0x9c>
 800beaa:	9b03      	ldr	r3, [sp, #12]
 800beac:	1d19      	adds	r1, r3, #4
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	9103      	str	r1, [sp, #12]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	bfbb      	ittet	lt
 800beb6:	425b      	neglt	r3, r3
 800beb8:	f042 0202 	orrlt.w	r2, r2, #2
 800bebc:	9307      	strge	r3, [sp, #28]
 800bebe:	9307      	strlt	r3, [sp, #28]
 800bec0:	bfb8      	it	lt
 800bec2:	9204      	strlt	r2, [sp, #16]
 800bec4:	7823      	ldrb	r3, [r4, #0]
 800bec6:	2b2e      	cmp	r3, #46	; 0x2e
 800bec8:	d10c      	bne.n	800bee4 <_svfiprintf_r+0x130>
 800beca:	7863      	ldrb	r3, [r4, #1]
 800becc:	2b2a      	cmp	r3, #42	; 0x2a
 800bece:	d135      	bne.n	800bf3c <_svfiprintf_r+0x188>
 800bed0:	9b03      	ldr	r3, [sp, #12]
 800bed2:	1d1a      	adds	r2, r3, #4
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	9203      	str	r2, [sp, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	bfb8      	it	lt
 800bedc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bee0:	3402      	adds	r4, #2
 800bee2:	9305      	str	r3, [sp, #20]
 800bee4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bfb0 <_svfiprintf_r+0x1fc>
 800bee8:	7821      	ldrb	r1, [r4, #0]
 800beea:	2203      	movs	r2, #3
 800beec:	4650      	mov	r0, sl
 800beee:	f7f4 f9a7 	bl	8000240 <memchr>
 800bef2:	b140      	cbz	r0, 800bf06 <_svfiprintf_r+0x152>
 800bef4:	2340      	movs	r3, #64	; 0x40
 800bef6:	eba0 000a 	sub.w	r0, r0, sl
 800befa:	fa03 f000 	lsl.w	r0, r3, r0
 800befe:	9b04      	ldr	r3, [sp, #16]
 800bf00:	4303      	orrs	r3, r0
 800bf02:	3401      	adds	r4, #1
 800bf04:	9304      	str	r3, [sp, #16]
 800bf06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf0a:	4826      	ldr	r0, [pc, #152]	; (800bfa4 <_svfiprintf_r+0x1f0>)
 800bf0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf10:	2206      	movs	r2, #6
 800bf12:	f7f4 f995 	bl	8000240 <memchr>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d038      	beq.n	800bf8c <_svfiprintf_r+0x1d8>
 800bf1a:	4b23      	ldr	r3, [pc, #140]	; (800bfa8 <_svfiprintf_r+0x1f4>)
 800bf1c:	bb1b      	cbnz	r3, 800bf66 <_svfiprintf_r+0x1b2>
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	3307      	adds	r3, #7
 800bf22:	f023 0307 	bic.w	r3, r3, #7
 800bf26:	3308      	adds	r3, #8
 800bf28:	9303      	str	r3, [sp, #12]
 800bf2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2c:	4433      	add	r3, r6
 800bf2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf30:	e767      	b.n	800be02 <_svfiprintf_r+0x4e>
 800bf32:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf36:	460c      	mov	r4, r1
 800bf38:	2001      	movs	r0, #1
 800bf3a:	e7a5      	b.n	800be88 <_svfiprintf_r+0xd4>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	3401      	adds	r4, #1
 800bf40:	9305      	str	r3, [sp, #20]
 800bf42:	4619      	mov	r1, r3
 800bf44:	f04f 0c0a 	mov.w	ip, #10
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf4e:	3a30      	subs	r2, #48	; 0x30
 800bf50:	2a09      	cmp	r2, #9
 800bf52:	d903      	bls.n	800bf5c <_svfiprintf_r+0x1a8>
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d0c5      	beq.n	800bee4 <_svfiprintf_r+0x130>
 800bf58:	9105      	str	r1, [sp, #20]
 800bf5a:	e7c3      	b.n	800bee4 <_svfiprintf_r+0x130>
 800bf5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf60:	4604      	mov	r4, r0
 800bf62:	2301      	movs	r3, #1
 800bf64:	e7f0      	b.n	800bf48 <_svfiprintf_r+0x194>
 800bf66:	ab03      	add	r3, sp, #12
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	462a      	mov	r2, r5
 800bf6c:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <_svfiprintf_r+0x1f8>)
 800bf6e:	a904      	add	r1, sp, #16
 800bf70:	4638      	mov	r0, r7
 800bf72:	f7fc f8b1 	bl	80080d8 <_printf_float>
 800bf76:	1c42      	adds	r2, r0, #1
 800bf78:	4606      	mov	r6, r0
 800bf7a:	d1d6      	bne.n	800bf2a <_svfiprintf_r+0x176>
 800bf7c:	89ab      	ldrh	r3, [r5, #12]
 800bf7e:	065b      	lsls	r3, r3, #25
 800bf80:	f53f af2c 	bmi.w	800bddc <_svfiprintf_r+0x28>
 800bf84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf86:	b01d      	add	sp, #116	; 0x74
 800bf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8c:	ab03      	add	r3, sp, #12
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	462a      	mov	r2, r5
 800bf92:	4b06      	ldr	r3, [pc, #24]	; (800bfac <_svfiprintf_r+0x1f8>)
 800bf94:	a904      	add	r1, sp, #16
 800bf96:	4638      	mov	r0, r7
 800bf98:	f7fc fb42 	bl	8008620 <_printf_i>
 800bf9c:	e7eb      	b.n	800bf76 <_svfiprintf_r+0x1c2>
 800bf9e:	bf00      	nop
 800bfa0:	0800d59c 	.word	0x0800d59c
 800bfa4:	0800d5a6 	.word	0x0800d5a6
 800bfa8:	080080d9 	.word	0x080080d9
 800bfac:	0800bcfd 	.word	0x0800bcfd
 800bfb0:	0800d5a2 	.word	0x0800d5a2

0800bfb4 <_sungetc_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	1c4b      	adds	r3, r1, #1
 800bfb8:	4614      	mov	r4, r2
 800bfba:	d103      	bne.n	800bfc4 <_sungetc_r+0x10>
 800bfbc:	f04f 35ff 	mov.w	r5, #4294967295
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	bd38      	pop	{r3, r4, r5, pc}
 800bfc4:	8993      	ldrh	r3, [r2, #12]
 800bfc6:	f023 0320 	bic.w	r3, r3, #32
 800bfca:	8193      	strh	r3, [r2, #12]
 800bfcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfce:	6852      	ldr	r2, [r2, #4]
 800bfd0:	b2cd      	uxtb	r5, r1
 800bfd2:	b18b      	cbz	r3, 800bff8 <_sungetc_r+0x44>
 800bfd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	dd08      	ble.n	800bfec <_sungetc_r+0x38>
 800bfda:	6823      	ldr	r3, [r4, #0]
 800bfdc:	1e5a      	subs	r2, r3, #1
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bfe4:	6863      	ldr	r3, [r4, #4]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	6063      	str	r3, [r4, #4]
 800bfea:	e7e9      	b.n	800bfc0 <_sungetc_r+0xc>
 800bfec:	4621      	mov	r1, r4
 800bfee:	f000 fd4d 	bl	800ca8c <__submore>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0f1      	beq.n	800bfda <_sungetc_r+0x26>
 800bff6:	e7e1      	b.n	800bfbc <_sungetc_r+0x8>
 800bff8:	6921      	ldr	r1, [r4, #16]
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	b151      	cbz	r1, 800c014 <_sungetc_r+0x60>
 800bffe:	4299      	cmp	r1, r3
 800c000:	d208      	bcs.n	800c014 <_sungetc_r+0x60>
 800c002:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c006:	42a9      	cmp	r1, r5
 800c008:	d104      	bne.n	800c014 <_sungetc_r+0x60>
 800c00a:	3b01      	subs	r3, #1
 800c00c:	3201      	adds	r2, #1
 800c00e:	6023      	str	r3, [r4, #0]
 800c010:	6062      	str	r2, [r4, #4]
 800c012:	e7d5      	b.n	800bfc0 <_sungetc_r+0xc>
 800c014:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c01c:	6363      	str	r3, [r4, #52]	; 0x34
 800c01e:	2303      	movs	r3, #3
 800c020:	63a3      	str	r3, [r4, #56]	; 0x38
 800c022:	4623      	mov	r3, r4
 800c024:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c028:	6023      	str	r3, [r4, #0]
 800c02a:	2301      	movs	r3, #1
 800c02c:	e7dc      	b.n	800bfe8 <_sungetc_r+0x34>

0800c02e <__ssrefill_r>:
 800c02e:	b510      	push	{r4, lr}
 800c030:	460c      	mov	r4, r1
 800c032:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c034:	b169      	cbz	r1, 800c052 <__ssrefill_r+0x24>
 800c036:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c03a:	4299      	cmp	r1, r3
 800c03c:	d001      	beq.n	800c042 <__ssrefill_r+0x14>
 800c03e:	f7ff fdb3 	bl	800bba8 <_free_r>
 800c042:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c044:	6063      	str	r3, [r4, #4]
 800c046:	2000      	movs	r0, #0
 800c048:	6360      	str	r0, [r4, #52]	; 0x34
 800c04a:	b113      	cbz	r3, 800c052 <__ssrefill_r+0x24>
 800c04c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c04e:	6023      	str	r3, [r4, #0]
 800c050:	bd10      	pop	{r4, pc}
 800c052:	6923      	ldr	r3, [r4, #16]
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	2300      	movs	r3, #0
 800c058:	6063      	str	r3, [r4, #4]
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f043 0320 	orr.w	r3, r3, #32
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	f04f 30ff 	mov.w	r0, #4294967295
 800c066:	e7f3      	b.n	800c050 <__ssrefill_r+0x22>

0800c068 <__ssvfiscanf_r>:
 800c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	460c      	mov	r4, r1
 800c06e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800c072:	2100      	movs	r1, #0
 800c074:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c078:	49b2      	ldr	r1, [pc, #712]	; (800c344 <__ssvfiscanf_r+0x2dc>)
 800c07a:	91a0      	str	r1, [sp, #640]	; 0x280
 800c07c:	f10d 0804 	add.w	r8, sp, #4
 800c080:	49b1      	ldr	r1, [pc, #708]	; (800c348 <__ssvfiscanf_r+0x2e0>)
 800c082:	4fb2      	ldr	r7, [pc, #712]	; (800c34c <__ssvfiscanf_r+0x2e4>)
 800c084:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800c350 <__ssvfiscanf_r+0x2e8>
 800c088:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c08c:	4606      	mov	r6, r0
 800c08e:	91a1      	str	r1, [sp, #644]	; 0x284
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	f892 a000 	ldrb.w	sl, [r2]
 800c096:	f1ba 0f00 	cmp.w	sl, #0
 800c09a:	f000 8151 	beq.w	800c340 <__ssvfiscanf_r+0x2d8>
 800c09e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800c0a2:	f013 0308 	ands.w	r3, r3, #8
 800c0a6:	f102 0501 	add.w	r5, r2, #1
 800c0aa:	d019      	beq.n	800c0e0 <__ssvfiscanf_r+0x78>
 800c0ac:	6863      	ldr	r3, [r4, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dd0f      	ble.n	800c0d2 <__ssvfiscanf_r+0x6a>
 800c0b2:	6823      	ldr	r3, [r4, #0]
 800c0b4:	781a      	ldrb	r2, [r3, #0]
 800c0b6:	5cba      	ldrb	r2, [r7, r2]
 800c0b8:	0712      	lsls	r2, r2, #28
 800c0ba:	d401      	bmi.n	800c0c0 <__ssvfiscanf_r+0x58>
 800c0bc:	462a      	mov	r2, r5
 800c0be:	e7e8      	b.n	800c092 <__ssvfiscanf_r+0x2a>
 800c0c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c0c2:	3201      	adds	r2, #1
 800c0c4:	9245      	str	r2, [sp, #276]	; 0x114
 800c0c6:	6862      	ldr	r2, [r4, #4]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	3a01      	subs	r2, #1
 800c0cc:	6062      	str	r2, [r4, #4]
 800c0ce:	6023      	str	r3, [r4, #0]
 800c0d0:	e7ec      	b.n	800c0ac <__ssvfiscanf_r+0x44>
 800c0d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c0d4:	4621      	mov	r1, r4
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	4798      	blx	r3
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d0e9      	beq.n	800c0b2 <__ssvfiscanf_r+0x4a>
 800c0de:	e7ed      	b.n	800c0bc <__ssvfiscanf_r+0x54>
 800c0e0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800c0e4:	f040 8083 	bne.w	800c1ee <__ssvfiscanf_r+0x186>
 800c0e8:	9341      	str	r3, [sp, #260]	; 0x104
 800c0ea:	9343      	str	r3, [sp, #268]	; 0x10c
 800c0ec:	7853      	ldrb	r3, [r2, #1]
 800c0ee:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f0:	bf02      	ittt	eq
 800c0f2:	2310      	moveq	r3, #16
 800c0f4:	1c95      	addeq	r5, r2, #2
 800c0f6:	9341      	streq	r3, [sp, #260]	; 0x104
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	46ab      	mov	fp, r5
 800c0fc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800c100:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c104:	2b09      	cmp	r3, #9
 800c106:	d91d      	bls.n	800c144 <__ssvfiscanf_r+0xdc>
 800c108:	4891      	ldr	r0, [pc, #580]	; (800c350 <__ssvfiscanf_r+0x2e8>)
 800c10a:	2203      	movs	r2, #3
 800c10c:	f7f4 f898 	bl	8000240 <memchr>
 800c110:	b140      	cbz	r0, 800c124 <__ssvfiscanf_r+0xbc>
 800c112:	2301      	movs	r3, #1
 800c114:	eba0 0009 	sub.w	r0, r0, r9
 800c118:	fa03 f000 	lsl.w	r0, r3, r0
 800c11c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c11e:	4318      	orrs	r0, r3
 800c120:	9041      	str	r0, [sp, #260]	; 0x104
 800c122:	465d      	mov	r5, fp
 800c124:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c128:	2b78      	cmp	r3, #120	; 0x78
 800c12a:	d806      	bhi.n	800c13a <__ssvfiscanf_r+0xd2>
 800c12c:	2b57      	cmp	r3, #87	; 0x57
 800c12e:	d810      	bhi.n	800c152 <__ssvfiscanf_r+0xea>
 800c130:	2b25      	cmp	r3, #37	; 0x25
 800c132:	d05c      	beq.n	800c1ee <__ssvfiscanf_r+0x186>
 800c134:	d856      	bhi.n	800c1e4 <__ssvfiscanf_r+0x17c>
 800c136:	2b00      	cmp	r3, #0
 800c138:	d074      	beq.n	800c224 <__ssvfiscanf_r+0x1bc>
 800c13a:	2303      	movs	r3, #3
 800c13c:	9347      	str	r3, [sp, #284]	; 0x11c
 800c13e:	230a      	movs	r3, #10
 800c140:	9342      	str	r3, [sp, #264]	; 0x108
 800c142:	e081      	b.n	800c248 <__ssvfiscanf_r+0x1e0>
 800c144:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c146:	fb02 1303 	mla	r3, r2, r3, r1
 800c14a:	3b30      	subs	r3, #48	; 0x30
 800c14c:	9343      	str	r3, [sp, #268]	; 0x10c
 800c14e:	465d      	mov	r5, fp
 800c150:	e7d3      	b.n	800c0fa <__ssvfiscanf_r+0x92>
 800c152:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c156:	2a20      	cmp	r2, #32
 800c158:	d8ef      	bhi.n	800c13a <__ssvfiscanf_r+0xd2>
 800c15a:	a101      	add	r1, pc, #4	; (adr r1, 800c160 <__ssvfiscanf_r+0xf8>)
 800c15c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c160:	0800c233 	.word	0x0800c233
 800c164:	0800c13b 	.word	0x0800c13b
 800c168:	0800c13b 	.word	0x0800c13b
 800c16c:	0800c291 	.word	0x0800c291
 800c170:	0800c13b 	.word	0x0800c13b
 800c174:	0800c13b 	.word	0x0800c13b
 800c178:	0800c13b 	.word	0x0800c13b
 800c17c:	0800c13b 	.word	0x0800c13b
 800c180:	0800c13b 	.word	0x0800c13b
 800c184:	0800c13b 	.word	0x0800c13b
 800c188:	0800c13b 	.word	0x0800c13b
 800c18c:	0800c2a7 	.word	0x0800c2a7
 800c190:	0800c27d 	.word	0x0800c27d
 800c194:	0800c1eb 	.word	0x0800c1eb
 800c198:	0800c1eb 	.word	0x0800c1eb
 800c19c:	0800c1eb 	.word	0x0800c1eb
 800c1a0:	0800c13b 	.word	0x0800c13b
 800c1a4:	0800c281 	.word	0x0800c281
 800c1a8:	0800c13b 	.word	0x0800c13b
 800c1ac:	0800c13b 	.word	0x0800c13b
 800c1b0:	0800c13b 	.word	0x0800c13b
 800c1b4:	0800c13b 	.word	0x0800c13b
 800c1b8:	0800c2b7 	.word	0x0800c2b7
 800c1bc:	0800c289 	.word	0x0800c289
 800c1c0:	0800c22b 	.word	0x0800c22b
 800c1c4:	0800c13b 	.word	0x0800c13b
 800c1c8:	0800c13b 	.word	0x0800c13b
 800c1cc:	0800c2b3 	.word	0x0800c2b3
 800c1d0:	0800c13b 	.word	0x0800c13b
 800c1d4:	0800c27d 	.word	0x0800c27d
 800c1d8:	0800c13b 	.word	0x0800c13b
 800c1dc:	0800c13b 	.word	0x0800c13b
 800c1e0:	0800c233 	.word	0x0800c233
 800c1e4:	3b45      	subs	r3, #69	; 0x45
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d8a7      	bhi.n	800c13a <__ssvfiscanf_r+0xd2>
 800c1ea:	2305      	movs	r3, #5
 800c1ec:	e02b      	b.n	800c246 <__ssvfiscanf_r+0x1de>
 800c1ee:	6863      	ldr	r3, [r4, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	dd0d      	ble.n	800c210 <__ssvfiscanf_r+0x1a8>
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	781a      	ldrb	r2, [r3, #0]
 800c1f8:	4552      	cmp	r2, sl
 800c1fa:	f040 80a1 	bne.w	800c340 <__ssvfiscanf_r+0x2d8>
 800c1fe:	3301      	adds	r3, #1
 800c200:	6862      	ldr	r2, [r4, #4]
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c206:	3a01      	subs	r2, #1
 800c208:	3301      	adds	r3, #1
 800c20a:	6062      	str	r2, [r4, #4]
 800c20c:	9345      	str	r3, [sp, #276]	; 0x114
 800c20e:	e755      	b.n	800c0bc <__ssvfiscanf_r+0x54>
 800c210:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c212:	4621      	mov	r1, r4
 800c214:	4630      	mov	r0, r6
 800c216:	4798      	blx	r3
 800c218:	2800      	cmp	r0, #0
 800c21a:	d0eb      	beq.n	800c1f4 <__ssvfiscanf_r+0x18c>
 800c21c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c21e:	2800      	cmp	r0, #0
 800c220:	f040 8084 	bne.w	800c32c <__ssvfiscanf_r+0x2c4>
 800c224:	f04f 30ff 	mov.w	r0, #4294967295
 800c228:	e086      	b.n	800c338 <__ssvfiscanf_r+0x2d0>
 800c22a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c22c:	f042 0220 	orr.w	r2, r2, #32
 800c230:	9241      	str	r2, [sp, #260]	; 0x104
 800c232:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c238:	9241      	str	r2, [sp, #260]	; 0x104
 800c23a:	2210      	movs	r2, #16
 800c23c:	2b6f      	cmp	r3, #111	; 0x6f
 800c23e:	9242      	str	r2, [sp, #264]	; 0x108
 800c240:	bf34      	ite	cc
 800c242:	2303      	movcc	r3, #3
 800c244:	2304      	movcs	r3, #4
 800c246:	9347      	str	r3, [sp, #284]	; 0x11c
 800c248:	6863      	ldr	r3, [r4, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dd41      	ble.n	800c2d2 <__ssvfiscanf_r+0x26a>
 800c24e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c250:	0659      	lsls	r1, r3, #25
 800c252:	d404      	bmi.n	800c25e <__ssvfiscanf_r+0x1f6>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	781a      	ldrb	r2, [r3, #0]
 800c258:	5cba      	ldrb	r2, [r7, r2]
 800c25a:	0712      	lsls	r2, r2, #28
 800c25c:	d440      	bmi.n	800c2e0 <__ssvfiscanf_r+0x278>
 800c25e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c260:	2b02      	cmp	r3, #2
 800c262:	dc4f      	bgt.n	800c304 <__ssvfiscanf_r+0x29c>
 800c264:	466b      	mov	r3, sp
 800c266:	4622      	mov	r2, r4
 800c268:	a941      	add	r1, sp, #260	; 0x104
 800c26a:	4630      	mov	r0, r6
 800c26c:	f000 f9ce 	bl	800c60c <_scanf_chars>
 800c270:	2801      	cmp	r0, #1
 800c272:	d065      	beq.n	800c340 <__ssvfiscanf_r+0x2d8>
 800c274:	2802      	cmp	r0, #2
 800c276:	f47f af21 	bne.w	800c0bc <__ssvfiscanf_r+0x54>
 800c27a:	e7cf      	b.n	800c21c <__ssvfiscanf_r+0x1b4>
 800c27c:	220a      	movs	r2, #10
 800c27e:	e7dd      	b.n	800c23c <__ssvfiscanf_r+0x1d4>
 800c280:	2300      	movs	r3, #0
 800c282:	9342      	str	r3, [sp, #264]	; 0x108
 800c284:	2303      	movs	r3, #3
 800c286:	e7de      	b.n	800c246 <__ssvfiscanf_r+0x1de>
 800c288:	2308      	movs	r3, #8
 800c28a:	9342      	str	r3, [sp, #264]	; 0x108
 800c28c:	2304      	movs	r3, #4
 800c28e:	e7da      	b.n	800c246 <__ssvfiscanf_r+0x1de>
 800c290:	4629      	mov	r1, r5
 800c292:	4640      	mov	r0, r8
 800c294:	f000 fb30 	bl	800c8f8 <__sccl>
 800c298:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c29a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c29e:	9341      	str	r3, [sp, #260]	; 0x104
 800c2a0:	4605      	mov	r5, r0
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e7cf      	b.n	800c246 <__ssvfiscanf_r+0x1de>
 800c2a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ac:	9341      	str	r3, [sp, #260]	; 0x104
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e7c9      	b.n	800c246 <__ssvfiscanf_r+0x1de>
 800c2b2:	2302      	movs	r3, #2
 800c2b4:	e7c7      	b.n	800c246 <__ssvfiscanf_r+0x1de>
 800c2b6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c2b8:	06c3      	lsls	r3, r0, #27
 800c2ba:	f53f aeff 	bmi.w	800c0bc <__ssvfiscanf_r+0x54>
 800c2be:	9b00      	ldr	r3, [sp, #0]
 800c2c0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2c2:	1d19      	adds	r1, r3, #4
 800c2c4:	9100      	str	r1, [sp, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	07c0      	lsls	r0, r0, #31
 800c2ca:	bf4c      	ite	mi
 800c2cc:	801a      	strhmi	r2, [r3, #0]
 800c2ce:	601a      	strpl	r2, [r3, #0]
 800c2d0:	e6f4      	b.n	800c0bc <__ssvfiscanf_r+0x54>
 800c2d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4630      	mov	r0, r6
 800c2d8:	4798      	blx	r3
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	d0b7      	beq.n	800c24e <__ssvfiscanf_r+0x1e6>
 800c2de:	e79d      	b.n	800c21c <__ssvfiscanf_r+0x1b4>
 800c2e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c2e2:	3201      	adds	r2, #1
 800c2e4:	9245      	str	r2, [sp, #276]	; 0x114
 800c2e6:	6862      	ldr	r2, [r4, #4]
 800c2e8:	3a01      	subs	r2, #1
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	6062      	str	r2, [r4, #4]
 800c2ee:	dd02      	ble.n	800c2f6 <__ssvfiscanf_r+0x28e>
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	e7ae      	b.n	800c254 <__ssvfiscanf_r+0x1ec>
 800c2f6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c2f8:	4621      	mov	r1, r4
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4798      	blx	r3
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d0a8      	beq.n	800c254 <__ssvfiscanf_r+0x1ec>
 800c302:	e78b      	b.n	800c21c <__ssvfiscanf_r+0x1b4>
 800c304:	2b04      	cmp	r3, #4
 800c306:	dc06      	bgt.n	800c316 <__ssvfiscanf_r+0x2ae>
 800c308:	466b      	mov	r3, sp
 800c30a:	4622      	mov	r2, r4
 800c30c:	a941      	add	r1, sp, #260	; 0x104
 800c30e:	4630      	mov	r0, r6
 800c310:	f000 f9d4 	bl	800c6bc <_scanf_i>
 800c314:	e7ac      	b.n	800c270 <__ssvfiscanf_r+0x208>
 800c316:	4b0f      	ldr	r3, [pc, #60]	; (800c354 <__ssvfiscanf_r+0x2ec>)
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f43f aecf 	beq.w	800c0bc <__ssvfiscanf_r+0x54>
 800c31e:	466b      	mov	r3, sp
 800c320:	4622      	mov	r2, r4
 800c322:	a941      	add	r1, sp, #260	; 0x104
 800c324:	4630      	mov	r0, r6
 800c326:	f7fc faa1 	bl	800886c <_scanf_float>
 800c32a:	e7a1      	b.n	800c270 <__ssvfiscanf_r+0x208>
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c332:	bf18      	it	ne
 800c334:	f04f 30ff 	movne.w	r0, #4294967295
 800c338:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c340:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c342:	e7f9      	b.n	800c338 <__ssvfiscanf_r+0x2d0>
 800c344:	0800bfb5 	.word	0x0800bfb5
 800c348:	0800c02f 	.word	0x0800c02f
 800c34c:	0800d1c9 	.word	0x0800d1c9
 800c350:	0800d5a2 	.word	0x0800d5a2
 800c354:	0800886d 	.word	0x0800886d

0800c358 <__sfputc_r>:
 800c358:	6893      	ldr	r3, [r2, #8]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	b410      	push	{r4}
 800c360:	6093      	str	r3, [r2, #8]
 800c362:	da08      	bge.n	800c376 <__sfputc_r+0x1e>
 800c364:	6994      	ldr	r4, [r2, #24]
 800c366:	42a3      	cmp	r3, r4
 800c368:	db01      	blt.n	800c36e <__sfputc_r+0x16>
 800c36a:	290a      	cmp	r1, #10
 800c36c:	d103      	bne.n	800c376 <__sfputc_r+0x1e>
 800c36e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c372:	f000 bbc5 	b.w	800cb00 <__swbuf_r>
 800c376:	6813      	ldr	r3, [r2, #0]
 800c378:	1c58      	adds	r0, r3, #1
 800c37a:	6010      	str	r0, [r2, #0]
 800c37c:	7019      	strb	r1, [r3, #0]
 800c37e:	4608      	mov	r0, r1
 800c380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <__sfputs_r>:
 800c386:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c388:	4606      	mov	r6, r0
 800c38a:	460f      	mov	r7, r1
 800c38c:	4614      	mov	r4, r2
 800c38e:	18d5      	adds	r5, r2, r3
 800c390:	42ac      	cmp	r4, r5
 800c392:	d101      	bne.n	800c398 <__sfputs_r+0x12>
 800c394:	2000      	movs	r0, #0
 800c396:	e007      	b.n	800c3a8 <__sfputs_r+0x22>
 800c398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c39c:	463a      	mov	r2, r7
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f7ff ffda 	bl	800c358 <__sfputc_r>
 800c3a4:	1c43      	adds	r3, r0, #1
 800c3a6:	d1f3      	bne.n	800c390 <__sfputs_r+0xa>
 800c3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3ac <_vfiprintf_r>:
 800c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b0:	460d      	mov	r5, r1
 800c3b2:	b09d      	sub	sp, #116	; 0x74
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	4698      	mov	r8, r3
 800c3b8:	4606      	mov	r6, r0
 800c3ba:	b118      	cbz	r0, 800c3c4 <_vfiprintf_r+0x18>
 800c3bc:	6983      	ldr	r3, [r0, #24]
 800c3be:	b90b      	cbnz	r3, 800c3c4 <_vfiprintf_r+0x18>
 800c3c0:	f7fe fada 	bl	800a978 <__sinit>
 800c3c4:	4b89      	ldr	r3, [pc, #548]	; (800c5ec <_vfiprintf_r+0x240>)
 800c3c6:	429d      	cmp	r5, r3
 800c3c8:	d11b      	bne.n	800c402 <_vfiprintf_r+0x56>
 800c3ca:	6875      	ldr	r5, [r6, #4]
 800c3cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3ce:	07d9      	lsls	r1, r3, #31
 800c3d0:	d405      	bmi.n	800c3de <_vfiprintf_r+0x32>
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	059a      	lsls	r2, r3, #22
 800c3d6:	d402      	bmi.n	800c3de <_vfiprintf_r+0x32>
 800c3d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3da:	f7fe fede 	bl	800b19a <__retarget_lock_acquire_recursive>
 800c3de:	89ab      	ldrh	r3, [r5, #12]
 800c3e0:	071b      	lsls	r3, r3, #28
 800c3e2:	d501      	bpl.n	800c3e8 <_vfiprintf_r+0x3c>
 800c3e4:	692b      	ldr	r3, [r5, #16]
 800c3e6:	b9eb      	cbnz	r3, 800c424 <_vfiprintf_r+0x78>
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f000 fbe8 	bl	800cbc0 <__swsetup_r>
 800c3f0:	b1c0      	cbz	r0, 800c424 <_vfiprintf_r+0x78>
 800c3f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3f4:	07dc      	lsls	r4, r3, #31
 800c3f6:	d50e      	bpl.n	800c416 <_vfiprintf_r+0x6a>
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	b01d      	add	sp, #116	; 0x74
 800c3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c402:	4b7b      	ldr	r3, [pc, #492]	; (800c5f0 <_vfiprintf_r+0x244>)
 800c404:	429d      	cmp	r5, r3
 800c406:	d101      	bne.n	800c40c <_vfiprintf_r+0x60>
 800c408:	68b5      	ldr	r5, [r6, #8]
 800c40a:	e7df      	b.n	800c3cc <_vfiprintf_r+0x20>
 800c40c:	4b79      	ldr	r3, [pc, #484]	; (800c5f4 <_vfiprintf_r+0x248>)
 800c40e:	429d      	cmp	r5, r3
 800c410:	bf08      	it	eq
 800c412:	68f5      	ldreq	r5, [r6, #12]
 800c414:	e7da      	b.n	800c3cc <_vfiprintf_r+0x20>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	0598      	lsls	r0, r3, #22
 800c41a:	d4ed      	bmi.n	800c3f8 <_vfiprintf_r+0x4c>
 800c41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c41e:	f7fe febd 	bl	800b19c <__retarget_lock_release_recursive>
 800c422:	e7e9      	b.n	800c3f8 <_vfiprintf_r+0x4c>
 800c424:	2300      	movs	r3, #0
 800c426:	9309      	str	r3, [sp, #36]	; 0x24
 800c428:	2320      	movs	r3, #32
 800c42a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c42e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c432:	2330      	movs	r3, #48	; 0x30
 800c434:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c5f8 <_vfiprintf_r+0x24c>
 800c438:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c43c:	f04f 0901 	mov.w	r9, #1
 800c440:	4623      	mov	r3, r4
 800c442:	469a      	mov	sl, r3
 800c444:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c448:	b10a      	cbz	r2, 800c44e <_vfiprintf_r+0xa2>
 800c44a:	2a25      	cmp	r2, #37	; 0x25
 800c44c:	d1f9      	bne.n	800c442 <_vfiprintf_r+0x96>
 800c44e:	ebba 0b04 	subs.w	fp, sl, r4
 800c452:	d00b      	beq.n	800c46c <_vfiprintf_r+0xc0>
 800c454:	465b      	mov	r3, fp
 800c456:	4622      	mov	r2, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	4630      	mov	r0, r6
 800c45c:	f7ff ff93 	bl	800c386 <__sfputs_r>
 800c460:	3001      	adds	r0, #1
 800c462:	f000 80aa 	beq.w	800c5ba <_vfiprintf_r+0x20e>
 800c466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c468:	445a      	add	r2, fp
 800c46a:	9209      	str	r2, [sp, #36]	; 0x24
 800c46c:	f89a 3000 	ldrb.w	r3, [sl]
 800c470:	2b00      	cmp	r3, #0
 800c472:	f000 80a2 	beq.w	800c5ba <_vfiprintf_r+0x20e>
 800c476:	2300      	movs	r3, #0
 800c478:	f04f 32ff 	mov.w	r2, #4294967295
 800c47c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c480:	f10a 0a01 	add.w	sl, sl, #1
 800c484:	9304      	str	r3, [sp, #16]
 800c486:	9307      	str	r3, [sp, #28]
 800c488:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c48c:	931a      	str	r3, [sp, #104]	; 0x68
 800c48e:	4654      	mov	r4, sl
 800c490:	2205      	movs	r2, #5
 800c492:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c496:	4858      	ldr	r0, [pc, #352]	; (800c5f8 <_vfiprintf_r+0x24c>)
 800c498:	f7f3 fed2 	bl	8000240 <memchr>
 800c49c:	9a04      	ldr	r2, [sp, #16]
 800c49e:	b9d8      	cbnz	r0, 800c4d8 <_vfiprintf_r+0x12c>
 800c4a0:	06d1      	lsls	r1, r2, #27
 800c4a2:	bf44      	itt	mi
 800c4a4:	2320      	movmi	r3, #32
 800c4a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4aa:	0713      	lsls	r3, r2, #28
 800c4ac:	bf44      	itt	mi
 800c4ae:	232b      	movmi	r3, #43	; 0x2b
 800c4b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4ba:	d015      	beq.n	800c4e8 <_vfiprintf_r+0x13c>
 800c4bc:	9a07      	ldr	r2, [sp, #28]
 800c4be:	4654      	mov	r4, sl
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	f04f 0c0a 	mov.w	ip, #10
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4cc:	3b30      	subs	r3, #48	; 0x30
 800c4ce:	2b09      	cmp	r3, #9
 800c4d0:	d94e      	bls.n	800c570 <_vfiprintf_r+0x1c4>
 800c4d2:	b1b0      	cbz	r0, 800c502 <_vfiprintf_r+0x156>
 800c4d4:	9207      	str	r2, [sp, #28]
 800c4d6:	e014      	b.n	800c502 <_vfiprintf_r+0x156>
 800c4d8:	eba0 0308 	sub.w	r3, r0, r8
 800c4dc:	fa09 f303 	lsl.w	r3, r9, r3
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	9304      	str	r3, [sp, #16]
 800c4e4:	46a2      	mov	sl, r4
 800c4e6:	e7d2      	b.n	800c48e <_vfiprintf_r+0xe2>
 800c4e8:	9b03      	ldr	r3, [sp, #12]
 800c4ea:	1d19      	adds	r1, r3, #4
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	9103      	str	r1, [sp, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	bfbb      	ittet	lt
 800c4f4:	425b      	neglt	r3, r3
 800c4f6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4fa:	9307      	strge	r3, [sp, #28]
 800c4fc:	9307      	strlt	r3, [sp, #28]
 800c4fe:	bfb8      	it	lt
 800c500:	9204      	strlt	r2, [sp, #16]
 800c502:	7823      	ldrb	r3, [r4, #0]
 800c504:	2b2e      	cmp	r3, #46	; 0x2e
 800c506:	d10c      	bne.n	800c522 <_vfiprintf_r+0x176>
 800c508:	7863      	ldrb	r3, [r4, #1]
 800c50a:	2b2a      	cmp	r3, #42	; 0x2a
 800c50c:	d135      	bne.n	800c57a <_vfiprintf_r+0x1ce>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	1d1a      	adds	r2, r3, #4
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	9203      	str	r2, [sp, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	bfb8      	it	lt
 800c51a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c51e:	3402      	adds	r4, #2
 800c520:	9305      	str	r3, [sp, #20]
 800c522:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c608 <_vfiprintf_r+0x25c>
 800c526:	7821      	ldrb	r1, [r4, #0]
 800c528:	2203      	movs	r2, #3
 800c52a:	4650      	mov	r0, sl
 800c52c:	f7f3 fe88 	bl	8000240 <memchr>
 800c530:	b140      	cbz	r0, 800c544 <_vfiprintf_r+0x198>
 800c532:	2340      	movs	r3, #64	; 0x40
 800c534:	eba0 000a 	sub.w	r0, r0, sl
 800c538:	fa03 f000 	lsl.w	r0, r3, r0
 800c53c:	9b04      	ldr	r3, [sp, #16]
 800c53e:	4303      	orrs	r3, r0
 800c540:	3401      	adds	r4, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c548:	482c      	ldr	r0, [pc, #176]	; (800c5fc <_vfiprintf_r+0x250>)
 800c54a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c54e:	2206      	movs	r2, #6
 800c550:	f7f3 fe76 	bl	8000240 <memchr>
 800c554:	2800      	cmp	r0, #0
 800c556:	d03f      	beq.n	800c5d8 <_vfiprintf_r+0x22c>
 800c558:	4b29      	ldr	r3, [pc, #164]	; (800c600 <_vfiprintf_r+0x254>)
 800c55a:	bb1b      	cbnz	r3, 800c5a4 <_vfiprintf_r+0x1f8>
 800c55c:	9b03      	ldr	r3, [sp, #12]
 800c55e:	3307      	adds	r3, #7
 800c560:	f023 0307 	bic.w	r3, r3, #7
 800c564:	3308      	adds	r3, #8
 800c566:	9303      	str	r3, [sp, #12]
 800c568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c56a:	443b      	add	r3, r7
 800c56c:	9309      	str	r3, [sp, #36]	; 0x24
 800c56e:	e767      	b.n	800c440 <_vfiprintf_r+0x94>
 800c570:	fb0c 3202 	mla	r2, ip, r2, r3
 800c574:	460c      	mov	r4, r1
 800c576:	2001      	movs	r0, #1
 800c578:	e7a5      	b.n	800c4c6 <_vfiprintf_r+0x11a>
 800c57a:	2300      	movs	r3, #0
 800c57c:	3401      	adds	r4, #1
 800c57e:	9305      	str	r3, [sp, #20]
 800c580:	4619      	mov	r1, r3
 800c582:	f04f 0c0a 	mov.w	ip, #10
 800c586:	4620      	mov	r0, r4
 800c588:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c58c:	3a30      	subs	r2, #48	; 0x30
 800c58e:	2a09      	cmp	r2, #9
 800c590:	d903      	bls.n	800c59a <_vfiprintf_r+0x1ee>
 800c592:	2b00      	cmp	r3, #0
 800c594:	d0c5      	beq.n	800c522 <_vfiprintf_r+0x176>
 800c596:	9105      	str	r1, [sp, #20]
 800c598:	e7c3      	b.n	800c522 <_vfiprintf_r+0x176>
 800c59a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c59e:	4604      	mov	r4, r0
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	e7f0      	b.n	800c586 <_vfiprintf_r+0x1da>
 800c5a4:	ab03      	add	r3, sp, #12
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	462a      	mov	r2, r5
 800c5aa:	4b16      	ldr	r3, [pc, #88]	; (800c604 <_vfiprintf_r+0x258>)
 800c5ac:	a904      	add	r1, sp, #16
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f7fb fd92 	bl	80080d8 <_printf_float>
 800c5b4:	4607      	mov	r7, r0
 800c5b6:	1c78      	adds	r0, r7, #1
 800c5b8:	d1d6      	bne.n	800c568 <_vfiprintf_r+0x1bc>
 800c5ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5bc:	07d9      	lsls	r1, r3, #31
 800c5be:	d405      	bmi.n	800c5cc <_vfiprintf_r+0x220>
 800c5c0:	89ab      	ldrh	r3, [r5, #12]
 800c5c2:	059a      	lsls	r2, r3, #22
 800c5c4:	d402      	bmi.n	800c5cc <_vfiprintf_r+0x220>
 800c5c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5c8:	f7fe fde8 	bl	800b19c <__retarget_lock_release_recursive>
 800c5cc:	89ab      	ldrh	r3, [r5, #12]
 800c5ce:	065b      	lsls	r3, r3, #25
 800c5d0:	f53f af12 	bmi.w	800c3f8 <_vfiprintf_r+0x4c>
 800c5d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5d6:	e711      	b.n	800c3fc <_vfiprintf_r+0x50>
 800c5d8:	ab03      	add	r3, sp, #12
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	462a      	mov	r2, r5
 800c5de:	4b09      	ldr	r3, [pc, #36]	; (800c604 <_vfiprintf_r+0x258>)
 800c5e0:	a904      	add	r1, sp, #16
 800c5e2:	4630      	mov	r0, r6
 800c5e4:	f7fc f81c 	bl	8008620 <_printf_i>
 800c5e8:	e7e4      	b.n	800c5b4 <_vfiprintf_r+0x208>
 800c5ea:	bf00      	nop
 800c5ec:	0800d380 	.word	0x0800d380
 800c5f0:	0800d3a0 	.word	0x0800d3a0
 800c5f4:	0800d360 	.word	0x0800d360
 800c5f8:	0800d59c 	.word	0x0800d59c
 800c5fc:	0800d5a6 	.word	0x0800d5a6
 800c600:	080080d9 	.word	0x080080d9
 800c604:	0800c387 	.word	0x0800c387
 800c608:	0800d5a2 	.word	0x0800d5a2

0800c60c <_scanf_chars>:
 800c60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c610:	4615      	mov	r5, r2
 800c612:	688a      	ldr	r2, [r1, #8]
 800c614:	4680      	mov	r8, r0
 800c616:	460c      	mov	r4, r1
 800c618:	b932      	cbnz	r2, 800c628 <_scanf_chars+0x1c>
 800c61a:	698a      	ldr	r2, [r1, #24]
 800c61c:	2a00      	cmp	r2, #0
 800c61e:	bf0c      	ite	eq
 800c620:	2201      	moveq	r2, #1
 800c622:	f04f 32ff 	movne.w	r2, #4294967295
 800c626:	608a      	str	r2, [r1, #8]
 800c628:	6822      	ldr	r2, [r4, #0]
 800c62a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c6b8 <_scanf_chars+0xac>
 800c62e:	06d1      	lsls	r1, r2, #27
 800c630:	bf5f      	itttt	pl
 800c632:	681a      	ldrpl	r2, [r3, #0]
 800c634:	1d11      	addpl	r1, r2, #4
 800c636:	6019      	strpl	r1, [r3, #0]
 800c638:	6816      	ldrpl	r6, [r2, #0]
 800c63a:	2700      	movs	r7, #0
 800c63c:	69a0      	ldr	r0, [r4, #24]
 800c63e:	b188      	cbz	r0, 800c664 <_scanf_chars+0x58>
 800c640:	2801      	cmp	r0, #1
 800c642:	d107      	bne.n	800c654 <_scanf_chars+0x48>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	781a      	ldrb	r2, [r3, #0]
 800c648:	6963      	ldr	r3, [r4, #20]
 800c64a:	5c9b      	ldrb	r3, [r3, r2]
 800c64c:	b953      	cbnz	r3, 800c664 <_scanf_chars+0x58>
 800c64e:	bb27      	cbnz	r7, 800c69a <_scanf_chars+0x8e>
 800c650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c654:	2802      	cmp	r0, #2
 800c656:	d120      	bne.n	800c69a <_scanf_chars+0x8e>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c660:	071b      	lsls	r3, r3, #28
 800c662:	d41a      	bmi.n	800c69a <_scanf_chars+0x8e>
 800c664:	6823      	ldr	r3, [r4, #0]
 800c666:	06da      	lsls	r2, r3, #27
 800c668:	bf5e      	ittt	pl
 800c66a:	682b      	ldrpl	r3, [r5, #0]
 800c66c:	781b      	ldrbpl	r3, [r3, #0]
 800c66e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c672:	682a      	ldr	r2, [r5, #0]
 800c674:	686b      	ldr	r3, [r5, #4]
 800c676:	3201      	adds	r2, #1
 800c678:	602a      	str	r2, [r5, #0]
 800c67a:	68a2      	ldr	r2, [r4, #8]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	3a01      	subs	r2, #1
 800c680:	606b      	str	r3, [r5, #4]
 800c682:	3701      	adds	r7, #1
 800c684:	60a2      	str	r2, [r4, #8]
 800c686:	b142      	cbz	r2, 800c69a <_scanf_chars+0x8e>
 800c688:	2b00      	cmp	r3, #0
 800c68a:	dcd7      	bgt.n	800c63c <_scanf_chars+0x30>
 800c68c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c690:	4629      	mov	r1, r5
 800c692:	4640      	mov	r0, r8
 800c694:	4798      	blx	r3
 800c696:	2800      	cmp	r0, #0
 800c698:	d0d0      	beq.n	800c63c <_scanf_chars+0x30>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	f013 0310 	ands.w	r3, r3, #16
 800c6a0:	d105      	bne.n	800c6ae <_scanf_chars+0xa2>
 800c6a2:	68e2      	ldr	r2, [r4, #12]
 800c6a4:	3201      	adds	r2, #1
 800c6a6:	60e2      	str	r2, [r4, #12]
 800c6a8:	69a2      	ldr	r2, [r4, #24]
 800c6aa:	b102      	cbz	r2, 800c6ae <_scanf_chars+0xa2>
 800c6ac:	7033      	strb	r3, [r6, #0]
 800c6ae:	6923      	ldr	r3, [r4, #16]
 800c6b0:	441f      	add	r7, r3
 800c6b2:	6127      	str	r7, [r4, #16]
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	e7cb      	b.n	800c650 <_scanf_chars+0x44>
 800c6b8:	0800d1c9 	.word	0x0800d1c9

0800c6bc <_scanf_i>:
 800c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c0:	4698      	mov	r8, r3
 800c6c2:	4b74      	ldr	r3, [pc, #464]	; (800c894 <_scanf_i+0x1d8>)
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	4682      	mov	sl, r0
 800c6c8:	4616      	mov	r6, r2
 800c6ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	ab03      	add	r3, sp, #12
 800c6d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c6d6:	4b70      	ldr	r3, [pc, #448]	; (800c898 <_scanf_i+0x1dc>)
 800c6d8:	69a1      	ldr	r1, [r4, #24]
 800c6da:	4a70      	ldr	r2, [pc, #448]	; (800c89c <_scanf_i+0x1e0>)
 800c6dc:	2903      	cmp	r1, #3
 800c6de:	bf18      	it	ne
 800c6e0:	461a      	movne	r2, r3
 800c6e2:	68a3      	ldr	r3, [r4, #8]
 800c6e4:	9201      	str	r2, [sp, #4]
 800c6e6:	1e5a      	subs	r2, r3, #1
 800c6e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c6ec:	bf88      	it	hi
 800c6ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c6f2:	4627      	mov	r7, r4
 800c6f4:	bf82      	ittt	hi
 800c6f6:	eb03 0905 	addhi.w	r9, r3, r5
 800c6fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6fe:	60a3      	strhi	r3, [r4, #8]
 800c700:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c704:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c708:	bf98      	it	ls
 800c70a:	f04f 0900 	movls.w	r9, #0
 800c70e:	6023      	str	r3, [r4, #0]
 800c710:	463d      	mov	r5, r7
 800c712:	f04f 0b00 	mov.w	fp, #0
 800c716:	6831      	ldr	r1, [r6, #0]
 800c718:	ab03      	add	r3, sp, #12
 800c71a:	7809      	ldrb	r1, [r1, #0]
 800c71c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c720:	2202      	movs	r2, #2
 800c722:	f7f3 fd8d 	bl	8000240 <memchr>
 800c726:	b328      	cbz	r0, 800c774 <_scanf_i+0xb8>
 800c728:	f1bb 0f01 	cmp.w	fp, #1
 800c72c:	d159      	bne.n	800c7e2 <_scanf_i+0x126>
 800c72e:	6862      	ldr	r2, [r4, #4]
 800c730:	b92a      	cbnz	r2, 800c73e <_scanf_i+0x82>
 800c732:	6822      	ldr	r2, [r4, #0]
 800c734:	2308      	movs	r3, #8
 800c736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c73a:	6063      	str	r3, [r4, #4]
 800c73c:	6022      	str	r2, [r4, #0]
 800c73e:	6822      	ldr	r2, [r4, #0]
 800c740:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c744:	6022      	str	r2, [r4, #0]
 800c746:	68a2      	ldr	r2, [r4, #8]
 800c748:	1e51      	subs	r1, r2, #1
 800c74a:	60a1      	str	r1, [r4, #8]
 800c74c:	b192      	cbz	r2, 800c774 <_scanf_i+0xb8>
 800c74e:	6832      	ldr	r2, [r6, #0]
 800c750:	1c51      	adds	r1, r2, #1
 800c752:	6031      	str	r1, [r6, #0]
 800c754:	7812      	ldrb	r2, [r2, #0]
 800c756:	f805 2b01 	strb.w	r2, [r5], #1
 800c75a:	6872      	ldr	r2, [r6, #4]
 800c75c:	3a01      	subs	r2, #1
 800c75e:	2a00      	cmp	r2, #0
 800c760:	6072      	str	r2, [r6, #4]
 800c762:	dc07      	bgt.n	800c774 <_scanf_i+0xb8>
 800c764:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c768:	4631      	mov	r1, r6
 800c76a:	4650      	mov	r0, sl
 800c76c:	4790      	blx	r2
 800c76e:	2800      	cmp	r0, #0
 800c770:	f040 8085 	bne.w	800c87e <_scanf_i+0x1c2>
 800c774:	f10b 0b01 	add.w	fp, fp, #1
 800c778:	f1bb 0f03 	cmp.w	fp, #3
 800c77c:	d1cb      	bne.n	800c716 <_scanf_i+0x5a>
 800c77e:	6863      	ldr	r3, [r4, #4]
 800c780:	b90b      	cbnz	r3, 800c786 <_scanf_i+0xca>
 800c782:	230a      	movs	r3, #10
 800c784:	6063      	str	r3, [r4, #4]
 800c786:	6863      	ldr	r3, [r4, #4]
 800c788:	4945      	ldr	r1, [pc, #276]	; (800c8a0 <_scanf_i+0x1e4>)
 800c78a:	6960      	ldr	r0, [r4, #20]
 800c78c:	1ac9      	subs	r1, r1, r3
 800c78e:	f000 f8b3 	bl	800c8f8 <__sccl>
 800c792:	f04f 0b00 	mov.w	fp, #0
 800c796:	68a3      	ldr	r3, [r4, #8]
 800c798:	6822      	ldr	r2, [r4, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d03d      	beq.n	800c81a <_scanf_i+0x15e>
 800c79e:	6831      	ldr	r1, [r6, #0]
 800c7a0:	6960      	ldr	r0, [r4, #20]
 800c7a2:	f891 c000 	ldrb.w	ip, [r1]
 800c7a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d035      	beq.n	800c81a <_scanf_i+0x15e>
 800c7ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c7b2:	d124      	bne.n	800c7fe <_scanf_i+0x142>
 800c7b4:	0510      	lsls	r0, r2, #20
 800c7b6:	d522      	bpl.n	800c7fe <_scanf_i+0x142>
 800c7b8:	f10b 0b01 	add.w	fp, fp, #1
 800c7bc:	f1b9 0f00 	cmp.w	r9, #0
 800c7c0:	d003      	beq.n	800c7ca <_scanf_i+0x10e>
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	f109 39ff 	add.w	r9, r9, #4294967295
 800c7c8:	60a3      	str	r3, [r4, #8]
 800c7ca:	6873      	ldr	r3, [r6, #4]
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	6073      	str	r3, [r6, #4]
 800c7d2:	dd1b      	ble.n	800c80c <_scanf_i+0x150>
 800c7d4:	6833      	ldr	r3, [r6, #0]
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	6033      	str	r3, [r6, #0]
 800c7da:	68a3      	ldr	r3, [r4, #8]
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	60a3      	str	r3, [r4, #8]
 800c7e0:	e7d9      	b.n	800c796 <_scanf_i+0xda>
 800c7e2:	f1bb 0f02 	cmp.w	fp, #2
 800c7e6:	d1ae      	bne.n	800c746 <_scanf_i+0x8a>
 800c7e8:	6822      	ldr	r2, [r4, #0]
 800c7ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c7ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c7f2:	d1bf      	bne.n	800c774 <_scanf_i+0xb8>
 800c7f4:	2310      	movs	r3, #16
 800c7f6:	6063      	str	r3, [r4, #4]
 800c7f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c7fc:	e7a2      	b.n	800c744 <_scanf_i+0x88>
 800c7fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c802:	6022      	str	r2, [r4, #0]
 800c804:	780b      	ldrb	r3, [r1, #0]
 800c806:	f805 3b01 	strb.w	r3, [r5], #1
 800c80a:	e7de      	b.n	800c7ca <_scanf_i+0x10e>
 800c80c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c810:	4631      	mov	r1, r6
 800c812:	4650      	mov	r0, sl
 800c814:	4798      	blx	r3
 800c816:	2800      	cmp	r0, #0
 800c818:	d0df      	beq.n	800c7da <_scanf_i+0x11e>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	05d9      	lsls	r1, r3, #23
 800c81e:	d50d      	bpl.n	800c83c <_scanf_i+0x180>
 800c820:	42bd      	cmp	r5, r7
 800c822:	d909      	bls.n	800c838 <_scanf_i+0x17c>
 800c824:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c82c:	4632      	mov	r2, r6
 800c82e:	4650      	mov	r0, sl
 800c830:	4798      	blx	r3
 800c832:	f105 39ff 	add.w	r9, r5, #4294967295
 800c836:	464d      	mov	r5, r9
 800c838:	42bd      	cmp	r5, r7
 800c83a:	d028      	beq.n	800c88e <_scanf_i+0x1d2>
 800c83c:	6822      	ldr	r2, [r4, #0]
 800c83e:	f012 0210 	ands.w	r2, r2, #16
 800c842:	d113      	bne.n	800c86c <_scanf_i+0x1b0>
 800c844:	702a      	strb	r2, [r5, #0]
 800c846:	6863      	ldr	r3, [r4, #4]
 800c848:	9e01      	ldr	r6, [sp, #4]
 800c84a:	4639      	mov	r1, r7
 800c84c:	4650      	mov	r0, sl
 800c84e:	47b0      	blx	r6
 800c850:	f8d8 3000 	ldr.w	r3, [r8]
 800c854:	6821      	ldr	r1, [r4, #0]
 800c856:	1d1a      	adds	r2, r3, #4
 800c858:	f8c8 2000 	str.w	r2, [r8]
 800c85c:	f011 0f20 	tst.w	r1, #32
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	d00f      	beq.n	800c884 <_scanf_i+0x1c8>
 800c864:	6018      	str	r0, [r3, #0]
 800c866:	68e3      	ldr	r3, [r4, #12]
 800c868:	3301      	adds	r3, #1
 800c86a:	60e3      	str	r3, [r4, #12]
 800c86c:	1bed      	subs	r5, r5, r7
 800c86e:	44ab      	add	fp, r5
 800c870:	6925      	ldr	r5, [r4, #16]
 800c872:	445d      	add	r5, fp
 800c874:	6125      	str	r5, [r4, #16]
 800c876:	2000      	movs	r0, #0
 800c878:	b007      	add	sp, #28
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	f04f 0b00 	mov.w	fp, #0
 800c882:	e7ca      	b.n	800c81a <_scanf_i+0x15e>
 800c884:	07ca      	lsls	r2, r1, #31
 800c886:	bf4c      	ite	mi
 800c888:	8018      	strhmi	r0, [r3, #0]
 800c88a:	6018      	strpl	r0, [r3, #0]
 800c88c:	e7eb      	b.n	800c866 <_scanf_i+0x1aa>
 800c88e:	2001      	movs	r0, #1
 800c890:	e7f2      	b.n	800c878 <_scanf_i+0x1bc>
 800c892:	bf00      	nop
 800c894:	0800d114 	.word	0x0800d114
 800c898:	0800ca89 	.word	0x0800ca89
 800c89c:	08009b51 	.word	0x08009b51
 800c8a0:	0800d5c6 	.word	0x0800d5c6

0800c8a4 <_read_r>:
 800c8a4:	b538      	push	{r3, r4, r5, lr}
 800c8a6:	4d07      	ldr	r5, [pc, #28]	; (800c8c4 <_read_r+0x20>)
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	4608      	mov	r0, r1
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	602a      	str	r2, [r5, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	f7f5 fbde 	bl	8002074 <_read>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_read_r+0x1e>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_read_r+0x1e>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20000960 	.word	0x20000960

0800c8c8 <nan>:
 800c8c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c8d0 <nan+0x8>
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	00000000 	.word	0x00000000
 800c8d4:	7ff80000 	.word	0x7ff80000

0800c8d8 <_sbrk_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d06      	ldr	r5, [pc, #24]	; (800c8f4 <_sbrk_r+0x1c>)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	602b      	str	r3, [r5, #0]
 800c8e4:	f7f5 fc34 	bl	8002150 <_sbrk>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_sbrk_r+0x1a>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_sbrk_r+0x1a>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	20000960 	.word	0x20000960

0800c8f8 <__sccl>:
 800c8f8:	b570      	push	{r4, r5, r6, lr}
 800c8fa:	780b      	ldrb	r3, [r1, #0]
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	2b5e      	cmp	r3, #94	; 0x5e
 800c900:	bf0b      	itete	eq
 800c902:	784b      	ldrbeq	r3, [r1, #1]
 800c904:	1c48      	addne	r0, r1, #1
 800c906:	1c88      	addeq	r0, r1, #2
 800c908:	2200      	movne	r2, #0
 800c90a:	bf08      	it	eq
 800c90c:	2201      	moveq	r2, #1
 800c90e:	1e61      	subs	r1, r4, #1
 800c910:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c914:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c918:	42a9      	cmp	r1, r5
 800c91a:	d1fb      	bne.n	800c914 <__sccl+0x1c>
 800c91c:	b90b      	cbnz	r3, 800c922 <__sccl+0x2a>
 800c91e:	3801      	subs	r0, #1
 800c920:	bd70      	pop	{r4, r5, r6, pc}
 800c922:	f082 0101 	eor.w	r1, r2, #1
 800c926:	54e1      	strb	r1, [r4, r3]
 800c928:	1c42      	adds	r2, r0, #1
 800c92a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c92e:	2d2d      	cmp	r5, #45	; 0x2d
 800c930:	f102 36ff 	add.w	r6, r2, #4294967295
 800c934:	4610      	mov	r0, r2
 800c936:	d006      	beq.n	800c946 <__sccl+0x4e>
 800c938:	2d5d      	cmp	r5, #93	; 0x5d
 800c93a:	d0f1      	beq.n	800c920 <__sccl+0x28>
 800c93c:	b90d      	cbnz	r5, 800c942 <__sccl+0x4a>
 800c93e:	4630      	mov	r0, r6
 800c940:	e7ee      	b.n	800c920 <__sccl+0x28>
 800c942:	462b      	mov	r3, r5
 800c944:	e7ef      	b.n	800c926 <__sccl+0x2e>
 800c946:	7816      	ldrb	r6, [r2, #0]
 800c948:	2e5d      	cmp	r6, #93	; 0x5d
 800c94a:	d0fa      	beq.n	800c942 <__sccl+0x4a>
 800c94c:	42b3      	cmp	r3, r6
 800c94e:	dcf8      	bgt.n	800c942 <__sccl+0x4a>
 800c950:	4618      	mov	r0, r3
 800c952:	3001      	adds	r0, #1
 800c954:	4286      	cmp	r6, r0
 800c956:	5421      	strb	r1, [r4, r0]
 800c958:	dcfb      	bgt.n	800c952 <__sccl+0x5a>
 800c95a:	43d8      	mvns	r0, r3
 800c95c:	4430      	add	r0, r6
 800c95e:	1c5d      	adds	r5, r3, #1
 800c960:	42b3      	cmp	r3, r6
 800c962:	bfa8      	it	ge
 800c964:	2000      	movge	r0, #0
 800c966:	182b      	adds	r3, r5, r0
 800c968:	3202      	adds	r2, #2
 800c96a:	e7de      	b.n	800c92a <__sccl+0x32>

0800c96c <strncmp>:
 800c96c:	b510      	push	{r4, lr}
 800c96e:	b16a      	cbz	r2, 800c98c <strncmp+0x20>
 800c970:	3901      	subs	r1, #1
 800c972:	1884      	adds	r4, r0, r2
 800c974:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c978:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d103      	bne.n	800c988 <strncmp+0x1c>
 800c980:	42a0      	cmp	r0, r4
 800c982:	d001      	beq.n	800c988 <strncmp+0x1c>
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1f5      	bne.n	800c974 <strncmp+0x8>
 800c988:	1a98      	subs	r0, r3, r2
 800c98a:	bd10      	pop	{r4, pc}
 800c98c:	4610      	mov	r0, r2
 800c98e:	e7fc      	b.n	800c98a <strncmp+0x1e>

0800c990 <_strtoul_l.isra.0>:
 800c990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c994:	4e3b      	ldr	r6, [pc, #236]	; (800ca84 <_strtoul_l.isra.0+0xf4>)
 800c996:	4686      	mov	lr, r0
 800c998:	468c      	mov	ip, r1
 800c99a:	4660      	mov	r0, ip
 800c99c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c9a0:	5da5      	ldrb	r5, [r4, r6]
 800c9a2:	f015 0508 	ands.w	r5, r5, #8
 800c9a6:	d1f8      	bne.n	800c99a <_strtoul_l.isra.0+0xa>
 800c9a8:	2c2d      	cmp	r4, #45	; 0x2d
 800c9aa:	d134      	bne.n	800ca16 <_strtoul_l.isra.0+0x86>
 800c9ac:	f89c 4000 	ldrb.w	r4, [ip]
 800c9b0:	f04f 0801 	mov.w	r8, #1
 800c9b4:	f100 0c02 	add.w	ip, r0, #2
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d05e      	beq.n	800ca7a <_strtoul_l.isra.0+0xea>
 800c9bc:	2b10      	cmp	r3, #16
 800c9be:	d10c      	bne.n	800c9da <_strtoul_l.isra.0+0x4a>
 800c9c0:	2c30      	cmp	r4, #48	; 0x30
 800c9c2:	d10a      	bne.n	800c9da <_strtoul_l.isra.0+0x4a>
 800c9c4:	f89c 0000 	ldrb.w	r0, [ip]
 800c9c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c9cc:	2858      	cmp	r0, #88	; 0x58
 800c9ce:	d14f      	bne.n	800ca70 <_strtoul_l.isra.0+0xe0>
 800c9d0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c9d4:	2310      	movs	r3, #16
 800c9d6:	f10c 0c02 	add.w	ip, ip, #2
 800c9da:	f04f 37ff 	mov.w	r7, #4294967295
 800c9de:	2500      	movs	r5, #0
 800c9e0:	fbb7 f7f3 	udiv	r7, r7, r3
 800c9e4:	fb03 f907 	mul.w	r9, r3, r7
 800c9e8:	ea6f 0909 	mvn.w	r9, r9
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c9f2:	2e09      	cmp	r6, #9
 800c9f4:	d818      	bhi.n	800ca28 <_strtoul_l.isra.0+0x98>
 800c9f6:	4634      	mov	r4, r6
 800c9f8:	42a3      	cmp	r3, r4
 800c9fa:	dd24      	ble.n	800ca46 <_strtoul_l.isra.0+0xb6>
 800c9fc:	2d00      	cmp	r5, #0
 800c9fe:	db1f      	blt.n	800ca40 <_strtoul_l.isra.0+0xb0>
 800ca00:	4287      	cmp	r7, r0
 800ca02:	d31d      	bcc.n	800ca40 <_strtoul_l.isra.0+0xb0>
 800ca04:	d101      	bne.n	800ca0a <_strtoul_l.isra.0+0x7a>
 800ca06:	45a1      	cmp	r9, r4
 800ca08:	db1a      	blt.n	800ca40 <_strtoul_l.isra.0+0xb0>
 800ca0a:	fb00 4003 	mla	r0, r0, r3, r4
 800ca0e:	2501      	movs	r5, #1
 800ca10:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ca14:	e7eb      	b.n	800c9ee <_strtoul_l.isra.0+0x5e>
 800ca16:	2c2b      	cmp	r4, #43	; 0x2b
 800ca18:	bf08      	it	eq
 800ca1a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ca1e:	46a8      	mov	r8, r5
 800ca20:	bf08      	it	eq
 800ca22:	f100 0c02 	addeq.w	ip, r0, #2
 800ca26:	e7c7      	b.n	800c9b8 <_strtoul_l.isra.0+0x28>
 800ca28:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ca2c:	2e19      	cmp	r6, #25
 800ca2e:	d801      	bhi.n	800ca34 <_strtoul_l.isra.0+0xa4>
 800ca30:	3c37      	subs	r4, #55	; 0x37
 800ca32:	e7e1      	b.n	800c9f8 <_strtoul_l.isra.0+0x68>
 800ca34:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ca38:	2e19      	cmp	r6, #25
 800ca3a:	d804      	bhi.n	800ca46 <_strtoul_l.isra.0+0xb6>
 800ca3c:	3c57      	subs	r4, #87	; 0x57
 800ca3e:	e7db      	b.n	800c9f8 <_strtoul_l.isra.0+0x68>
 800ca40:	f04f 35ff 	mov.w	r5, #4294967295
 800ca44:	e7e4      	b.n	800ca10 <_strtoul_l.isra.0+0x80>
 800ca46:	2d00      	cmp	r5, #0
 800ca48:	da07      	bge.n	800ca5a <_strtoul_l.isra.0+0xca>
 800ca4a:	2322      	movs	r3, #34	; 0x22
 800ca4c:	f8ce 3000 	str.w	r3, [lr]
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295
 800ca54:	b942      	cbnz	r2, 800ca68 <_strtoul_l.isra.0+0xd8>
 800ca56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca5a:	f1b8 0f00 	cmp.w	r8, #0
 800ca5e:	d000      	beq.n	800ca62 <_strtoul_l.isra.0+0xd2>
 800ca60:	4240      	negs	r0, r0
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	d0f7      	beq.n	800ca56 <_strtoul_l.isra.0+0xc6>
 800ca66:	b10d      	cbz	r5, 800ca6c <_strtoul_l.isra.0+0xdc>
 800ca68:	f10c 31ff 	add.w	r1, ip, #4294967295
 800ca6c:	6011      	str	r1, [r2, #0]
 800ca6e:	e7f2      	b.n	800ca56 <_strtoul_l.isra.0+0xc6>
 800ca70:	2430      	movs	r4, #48	; 0x30
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d1b1      	bne.n	800c9da <_strtoul_l.isra.0+0x4a>
 800ca76:	2308      	movs	r3, #8
 800ca78:	e7af      	b.n	800c9da <_strtoul_l.isra.0+0x4a>
 800ca7a:	2c30      	cmp	r4, #48	; 0x30
 800ca7c:	d0a2      	beq.n	800c9c4 <_strtoul_l.isra.0+0x34>
 800ca7e:	230a      	movs	r3, #10
 800ca80:	e7ab      	b.n	800c9da <_strtoul_l.isra.0+0x4a>
 800ca82:	bf00      	nop
 800ca84:	0800d1c9 	.word	0x0800d1c9

0800ca88 <_strtoul_r>:
 800ca88:	f7ff bf82 	b.w	800c990 <_strtoul_l.isra.0>

0800ca8c <__submore>:
 800ca8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca90:	460c      	mov	r4, r1
 800ca92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ca94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca98:	4299      	cmp	r1, r3
 800ca9a:	d11d      	bne.n	800cad8 <__submore+0x4c>
 800ca9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800caa0:	f7ff f8d2 	bl	800bc48 <_malloc_r>
 800caa4:	b918      	cbnz	r0, 800caae <__submore+0x22>
 800caa6:	f04f 30ff 	mov.w	r0, #4294967295
 800caaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab2:	63a3      	str	r3, [r4, #56]	; 0x38
 800cab4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cab8:	6360      	str	r0, [r4, #52]	; 0x34
 800caba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cabe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cac2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cac6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800caca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cace:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cad2:	6020      	str	r0, [r4, #0]
 800cad4:	2000      	movs	r0, #0
 800cad6:	e7e8      	b.n	800caaa <__submore+0x1e>
 800cad8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cada:	0077      	lsls	r7, r6, #1
 800cadc:	463a      	mov	r2, r7
 800cade:	f000 fa59 	bl	800cf94 <_realloc_r>
 800cae2:	4605      	mov	r5, r0
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d0de      	beq.n	800caa6 <__submore+0x1a>
 800cae8:	eb00 0806 	add.w	r8, r0, r6
 800caec:	4601      	mov	r1, r0
 800caee:	4632      	mov	r2, r6
 800caf0:	4640      	mov	r0, r8
 800caf2:	f7fe fb81 	bl	800b1f8 <memcpy>
 800caf6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cafa:	f8c4 8000 	str.w	r8, [r4]
 800cafe:	e7e9      	b.n	800cad4 <__submore+0x48>

0800cb00 <__swbuf_r>:
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb02:	460e      	mov	r6, r1
 800cb04:	4614      	mov	r4, r2
 800cb06:	4605      	mov	r5, r0
 800cb08:	b118      	cbz	r0, 800cb12 <__swbuf_r+0x12>
 800cb0a:	6983      	ldr	r3, [r0, #24]
 800cb0c:	b90b      	cbnz	r3, 800cb12 <__swbuf_r+0x12>
 800cb0e:	f7fd ff33 	bl	800a978 <__sinit>
 800cb12:	4b21      	ldr	r3, [pc, #132]	; (800cb98 <__swbuf_r+0x98>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	d12b      	bne.n	800cb70 <__swbuf_r+0x70>
 800cb18:	686c      	ldr	r4, [r5, #4]
 800cb1a:	69a3      	ldr	r3, [r4, #24]
 800cb1c:	60a3      	str	r3, [r4, #8]
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	071a      	lsls	r2, r3, #28
 800cb22:	d52f      	bpl.n	800cb84 <__swbuf_r+0x84>
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	b36b      	cbz	r3, 800cb84 <__swbuf_r+0x84>
 800cb28:	6923      	ldr	r3, [r4, #16]
 800cb2a:	6820      	ldr	r0, [r4, #0]
 800cb2c:	1ac0      	subs	r0, r0, r3
 800cb2e:	6963      	ldr	r3, [r4, #20]
 800cb30:	b2f6      	uxtb	r6, r6
 800cb32:	4283      	cmp	r3, r0
 800cb34:	4637      	mov	r7, r6
 800cb36:	dc04      	bgt.n	800cb42 <__swbuf_r+0x42>
 800cb38:	4621      	mov	r1, r4
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f000 f952 	bl	800cde4 <_fflush_r>
 800cb40:	bb30      	cbnz	r0, 800cb90 <__swbuf_r+0x90>
 800cb42:	68a3      	ldr	r3, [r4, #8]
 800cb44:	3b01      	subs	r3, #1
 800cb46:	60a3      	str	r3, [r4, #8]
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	1c5a      	adds	r2, r3, #1
 800cb4c:	6022      	str	r2, [r4, #0]
 800cb4e:	701e      	strb	r6, [r3, #0]
 800cb50:	6963      	ldr	r3, [r4, #20]
 800cb52:	3001      	adds	r0, #1
 800cb54:	4283      	cmp	r3, r0
 800cb56:	d004      	beq.n	800cb62 <__swbuf_r+0x62>
 800cb58:	89a3      	ldrh	r3, [r4, #12]
 800cb5a:	07db      	lsls	r3, r3, #31
 800cb5c:	d506      	bpl.n	800cb6c <__swbuf_r+0x6c>
 800cb5e:	2e0a      	cmp	r6, #10
 800cb60:	d104      	bne.n	800cb6c <__swbuf_r+0x6c>
 800cb62:	4621      	mov	r1, r4
 800cb64:	4628      	mov	r0, r5
 800cb66:	f000 f93d 	bl	800cde4 <_fflush_r>
 800cb6a:	b988      	cbnz	r0, 800cb90 <__swbuf_r+0x90>
 800cb6c:	4638      	mov	r0, r7
 800cb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb70:	4b0a      	ldr	r3, [pc, #40]	; (800cb9c <__swbuf_r+0x9c>)
 800cb72:	429c      	cmp	r4, r3
 800cb74:	d101      	bne.n	800cb7a <__swbuf_r+0x7a>
 800cb76:	68ac      	ldr	r4, [r5, #8]
 800cb78:	e7cf      	b.n	800cb1a <__swbuf_r+0x1a>
 800cb7a:	4b09      	ldr	r3, [pc, #36]	; (800cba0 <__swbuf_r+0xa0>)
 800cb7c:	429c      	cmp	r4, r3
 800cb7e:	bf08      	it	eq
 800cb80:	68ec      	ldreq	r4, [r5, #12]
 800cb82:	e7ca      	b.n	800cb1a <__swbuf_r+0x1a>
 800cb84:	4621      	mov	r1, r4
 800cb86:	4628      	mov	r0, r5
 800cb88:	f000 f81a 	bl	800cbc0 <__swsetup_r>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d0cb      	beq.n	800cb28 <__swbuf_r+0x28>
 800cb90:	f04f 37ff 	mov.w	r7, #4294967295
 800cb94:	e7ea      	b.n	800cb6c <__swbuf_r+0x6c>
 800cb96:	bf00      	nop
 800cb98:	0800d380 	.word	0x0800d380
 800cb9c:	0800d3a0 	.word	0x0800d3a0
 800cba0:	0800d360 	.word	0x0800d360

0800cba4 <__ascii_wctomb>:
 800cba4:	b149      	cbz	r1, 800cbba <__ascii_wctomb+0x16>
 800cba6:	2aff      	cmp	r2, #255	; 0xff
 800cba8:	bf85      	ittet	hi
 800cbaa:	238a      	movhi	r3, #138	; 0x8a
 800cbac:	6003      	strhi	r3, [r0, #0]
 800cbae:	700a      	strbls	r2, [r1, #0]
 800cbb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbb4:	bf98      	it	ls
 800cbb6:	2001      	movls	r0, #1
 800cbb8:	4770      	bx	lr
 800cbba:	4608      	mov	r0, r1
 800cbbc:	4770      	bx	lr
	...

0800cbc0 <__swsetup_r>:
 800cbc0:	4b32      	ldr	r3, [pc, #200]	; (800cc8c <__swsetup_r+0xcc>)
 800cbc2:	b570      	push	{r4, r5, r6, lr}
 800cbc4:	681d      	ldr	r5, [r3, #0]
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	460c      	mov	r4, r1
 800cbca:	b125      	cbz	r5, 800cbd6 <__swsetup_r+0x16>
 800cbcc:	69ab      	ldr	r3, [r5, #24]
 800cbce:	b913      	cbnz	r3, 800cbd6 <__swsetup_r+0x16>
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f7fd fed1 	bl	800a978 <__sinit>
 800cbd6:	4b2e      	ldr	r3, [pc, #184]	; (800cc90 <__swsetup_r+0xd0>)
 800cbd8:	429c      	cmp	r4, r3
 800cbda:	d10f      	bne.n	800cbfc <__swsetup_r+0x3c>
 800cbdc:	686c      	ldr	r4, [r5, #4]
 800cbde:	89a3      	ldrh	r3, [r4, #12]
 800cbe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbe4:	0719      	lsls	r1, r3, #28
 800cbe6:	d42c      	bmi.n	800cc42 <__swsetup_r+0x82>
 800cbe8:	06dd      	lsls	r5, r3, #27
 800cbea:	d411      	bmi.n	800cc10 <__swsetup_r+0x50>
 800cbec:	2309      	movs	r3, #9
 800cbee:	6033      	str	r3, [r6, #0]
 800cbf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbfa:	e03e      	b.n	800cc7a <__swsetup_r+0xba>
 800cbfc:	4b25      	ldr	r3, [pc, #148]	; (800cc94 <__swsetup_r+0xd4>)
 800cbfe:	429c      	cmp	r4, r3
 800cc00:	d101      	bne.n	800cc06 <__swsetup_r+0x46>
 800cc02:	68ac      	ldr	r4, [r5, #8]
 800cc04:	e7eb      	b.n	800cbde <__swsetup_r+0x1e>
 800cc06:	4b24      	ldr	r3, [pc, #144]	; (800cc98 <__swsetup_r+0xd8>)
 800cc08:	429c      	cmp	r4, r3
 800cc0a:	bf08      	it	eq
 800cc0c:	68ec      	ldreq	r4, [r5, #12]
 800cc0e:	e7e6      	b.n	800cbde <__swsetup_r+0x1e>
 800cc10:	0758      	lsls	r0, r3, #29
 800cc12:	d512      	bpl.n	800cc3a <__swsetup_r+0x7a>
 800cc14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc16:	b141      	cbz	r1, 800cc2a <__swsetup_r+0x6a>
 800cc18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc1c:	4299      	cmp	r1, r3
 800cc1e:	d002      	beq.n	800cc26 <__swsetup_r+0x66>
 800cc20:	4630      	mov	r0, r6
 800cc22:	f7fe ffc1 	bl	800bba8 <_free_r>
 800cc26:	2300      	movs	r3, #0
 800cc28:	6363      	str	r3, [r4, #52]	; 0x34
 800cc2a:	89a3      	ldrh	r3, [r4, #12]
 800cc2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc30:	81a3      	strh	r3, [r4, #12]
 800cc32:	2300      	movs	r3, #0
 800cc34:	6063      	str	r3, [r4, #4]
 800cc36:	6923      	ldr	r3, [r4, #16]
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	f043 0308 	orr.w	r3, r3, #8
 800cc40:	81a3      	strh	r3, [r4, #12]
 800cc42:	6923      	ldr	r3, [r4, #16]
 800cc44:	b94b      	cbnz	r3, 800cc5a <__swsetup_r+0x9a>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc50:	d003      	beq.n	800cc5a <__swsetup_r+0x9a>
 800cc52:	4621      	mov	r1, r4
 800cc54:	4630      	mov	r0, r6
 800cc56:	f000 f937 	bl	800cec8 <__smakebuf_r>
 800cc5a:	89a0      	ldrh	r0, [r4, #12]
 800cc5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc60:	f010 0301 	ands.w	r3, r0, #1
 800cc64:	d00a      	beq.n	800cc7c <__swsetup_r+0xbc>
 800cc66:	2300      	movs	r3, #0
 800cc68:	60a3      	str	r3, [r4, #8]
 800cc6a:	6963      	ldr	r3, [r4, #20]
 800cc6c:	425b      	negs	r3, r3
 800cc6e:	61a3      	str	r3, [r4, #24]
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	b943      	cbnz	r3, 800cc86 <__swsetup_r+0xc6>
 800cc74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc78:	d1ba      	bne.n	800cbf0 <__swsetup_r+0x30>
 800cc7a:	bd70      	pop	{r4, r5, r6, pc}
 800cc7c:	0781      	lsls	r1, r0, #30
 800cc7e:	bf58      	it	pl
 800cc80:	6963      	ldrpl	r3, [r4, #20]
 800cc82:	60a3      	str	r3, [r4, #8]
 800cc84:	e7f4      	b.n	800cc70 <__swsetup_r+0xb0>
 800cc86:	2000      	movs	r0, #0
 800cc88:	e7f7      	b.n	800cc7a <__swsetup_r+0xba>
 800cc8a:	bf00      	nop
 800cc8c:	20000074 	.word	0x20000074
 800cc90:	0800d380 	.word	0x0800d380
 800cc94:	0800d3a0 	.word	0x0800d3a0
 800cc98:	0800d360 	.word	0x0800d360

0800cc9c <__assert_func>:
 800cc9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc9e:	4614      	mov	r4, r2
 800cca0:	461a      	mov	r2, r3
 800cca2:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <__assert_func+0x2c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4605      	mov	r5, r0
 800cca8:	68d8      	ldr	r0, [r3, #12]
 800ccaa:	b14c      	cbz	r4, 800ccc0 <__assert_func+0x24>
 800ccac:	4b07      	ldr	r3, [pc, #28]	; (800cccc <__assert_func+0x30>)
 800ccae:	9100      	str	r1, [sp, #0]
 800ccb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ccb4:	4906      	ldr	r1, [pc, #24]	; (800ccd0 <__assert_func+0x34>)
 800ccb6:	462b      	mov	r3, r5
 800ccb8:	f000 f8d0 	bl	800ce5c <fiprintf>
 800ccbc:	f000 f990 	bl	800cfe0 <abort>
 800ccc0:	4b04      	ldr	r3, [pc, #16]	; (800ccd4 <__assert_func+0x38>)
 800ccc2:	461c      	mov	r4, r3
 800ccc4:	e7f3      	b.n	800ccae <__assert_func+0x12>
 800ccc6:	bf00      	nop
 800ccc8:	20000074 	.word	0x20000074
 800cccc:	0800d5c8 	.word	0x0800d5c8
 800ccd0:	0800d5d5 	.word	0x0800d5d5
 800ccd4:	0800d603 	.word	0x0800d603

0800ccd8 <__sflush_r>:
 800ccd8:	898a      	ldrh	r2, [r1, #12]
 800ccda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccde:	4605      	mov	r5, r0
 800cce0:	0710      	lsls	r0, r2, #28
 800cce2:	460c      	mov	r4, r1
 800cce4:	d458      	bmi.n	800cd98 <__sflush_r+0xc0>
 800cce6:	684b      	ldr	r3, [r1, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	dc05      	bgt.n	800ccf8 <__sflush_r+0x20>
 800ccec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	dc02      	bgt.n	800ccf8 <__sflush_r+0x20>
 800ccf2:	2000      	movs	r0, #0
 800ccf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccfa:	2e00      	cmp	r6, #0
 800ccfc:	d0f9      	beq.n	800ccf2 <__sflush_r+0x1a>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd04:	682f      	ldr	r7, [r5, #0]
 800cd06:	602b      	str	r3, [r5, #0]
 800cd08:	d032      	beq.n	800cd70 <__sflush_r+0x98>
 800cd0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd0c:	89a3      	ldrh	r3, [r4, #12]
 800cd0e:	075a      	lsls	r2, r3, #29
 800cd10:	d505      	bpl.n	800cd1e <__sflush_r+0x46>
 800cd12:	6863      	ldr	r3, [r4, #4]
 800cd14:	1ac0      	subs	r0, r0, r3
 800cd16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd18:	b10b      	cbz	r3, 800cd1e <__sflush_r+0x46>
 800cd1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd1c:	1ac0      	subs	r0, r0, r3
 800cd1e:	2300      	movs	r3, #0
 800cd20:	4602      	mov	r2, r0
 800cd22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd24:	6a21      	ldr	r1, [r4, #32]
 800cd26:	4628      	mov	r0, r5
 800cd28:	47b0      	blx	r6
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	d106      	bne.n	800cd3e <__sflush_r+0x66>
 800cd30:	6829      	ldr	r1, [r5, #0]
 800cd32:	291d      	cmp	r1, #29
 800cd34:	d82c      	bhi.n	800cd90 <__sflush_r+0xb8>
 800cd36:	4a2a      	ldr	r2, [pc, #168]	; (800cde0 <__sflush_r+0x108>)
 800cd38:	40ca      	lsrs	r2, r1
 800cd3a:	07d6      	lsls	r6, r2, #31
 800cd3c:	d528      	bpl.n	800cd90 <__sflush_r+0xb8>
 800cd3e:	2200      	movs	r2, #0
 800cd40:	6062      	str	r2, [r4, #4]
 800cd42:	04d9      	lsls	r1, r3, #19
 800cd44:	6922      	ldr	r2, [r4, #16]
 800cd46:	6022      	str	r2, [r4, #0]
 800cd48:	d504      	bpl.n	800cd54 <__sflush_r+0x7c>
 800cd4a:	1c42      	adds	r2, r0, #1
 800cd4c:	d101      	bne.n	800cd52 <__sflush_r+0x7a>
 800cd4e:	682b      	ldr	r3, [r5, #0]
 800cd50:	b903      	cbnz	r3, 800cd54 <__sflush_r+0x7c>
 800cd52:	6560      	str	r0, [r4, #84]	; 0x54
 800cd54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd56:	602f      	str	r7, [r5, #0]
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d0ca      	beq.n	800ccf2 <__sflush_r+0x1a>
 800cd5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd60:	4299      	cmp	r1, r3
 800cd62:	d002      	beq.n	800cd6a <__sflush_r+0x92>
 800cd64:	4628      	mov	r0, r5
 800cd66:	f7fe ff1f 	bl	800bba8 <_free_r>
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	6360      	str	r0, [r4, #52]	; 0x34
 800cd6e:	e7c1      	b.n	800ccf4 <__sflush_r+0x1c>
 800cd70:	6a21      	ldr	r1, [r4, #32]
 800cd72:	2301      	movs	r3, #1
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b0      	blx	r6
 800cd78:	1c41      	adds	r1, r0, #1
 800cd7a:	d1c7      	bne.n	800cd0c <__sflush_r+0x34>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0c4      	beq.n	800cd0c <__sflush_r+0x34>
 800cd82:	2b1d      	cmp	r3, #29
 800cd84:	d001      	beq.n	800cd8a <__sflush_r+0xb2>
 800cd86:	2b16      	cmp	r3, #22
 800cd88:	d101      	bne.n	800cd8e <__sflush_r+0xb6>
 800cd8a:	602f      	str	r7, [r5, #0]
 800cd8c:	e7b1      	b.n	800ccf2 <__sflush_r+0x1a>
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	e7ad      	b.n	800ccf4 <__sflush_r+0x1c>
 800cd98:	690f      	ldr	r7, [r1, #16]
 800cd9a:	2f00      	cmp	r7, #0
 800cd9c:	d0a9      	beq.n	800ccf2 <__sflush_r+0x1a>
 800cd9e:	0793      	lsls	r3, r2, #30
 800cda0:	680e      	ldr	r6, [r1, #0]
 800cda2:	bf08      	it	eq
 800cda4:	694b      	ldreq	r3, [r1, #20]
 800cda6:	600f      	str	r7, [r1, #0]
 800cda8:	bf18      	it	ne
 800cdaa:	2300      	movne	r3, #0
 800cdac:	eba6 0807 	sub.w	r8, r6, r7
 800cdb0:	608b      	str	r3, [r1, #8]
 800cdb2:	f1b8 0f00 	cmp.w	r8, #0
 800cdb6:	dd9c      	ble.n	800ccf2 <__sflush_r+0x1a>
 800cdb8:	6a21      	ldr	r1, [r4, #32]
 800cdba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdbc:	4643      	mov	r3, r8
 800cdbe:	463a      	mov	r2, r7
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	47b0      	blx	r6
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	dc06      	bgt.n	800cdd6 <__sflush_r+0xfe>
 800cdc8:	89a3      	ldrh	r3, [r4, #12]
 800cdca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdce:	81a3      	strh	r3, [r4, #12]
 800cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd4:	e78e      	b.n	800ccf4 <__sflush_r+0x1c>
 800cdd6:	4407      	add	r7, r0
 800cdd8:	eba8 0800 	sub.w	r8, r8, r0
 800cddc:	e7e9      	b.n	800cdb2 <__sflush_r+0xda>
 800cdde:	bf00      	nop
 800cde0:	20400001 	.word	0x20400001

0800cde4 <_fflush_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	690b      	ldr	r3, [r1, #16]
 800cde8:	4605      	mov	r5, r0
 800cdea:	460c      	mov	r4, r1
 800cdec:	b913      	cbnz	r3, 800cdf4 <_fflush_r+0x10>
 800cdee:	2500      	movs	r5, #0
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	bd38      	pop	{r3, r4, r5, pc}
 800cdf4:	b118      	cbz	r0, 800cdfe <_fflush_r+0x1a>
 800cdf6:	6983      	ldr	r3, [r0, #24]
 800cdf8:	b90b      	cbnz	r3, 800cdfe <_fflush_r+0x1a>
 800cdfa:	f7fd fdbd 	bl	800a978 <__sinit>
 800cdfe:	4b14      	ldr	r3, [pc, #80]	; (800ce50 <_fflush_r+0x6c>)
 800ce00:	429c      	cmp	r4, r3
 800ce02:	d11b      	bne.n	800ce3c <_fflush_r+0x58>
 800ce04:	686c      	ldr	r4, [r5, #4]
 800ce06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0ef      	beq.n	800cdee <_fflush_r+0xa>
 800ce0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce10:	07d0      	lsls	r0, r2, #31
 800ce12:	d404      	bmi.n	800ce1e <_fflush_r+0x3a>
 800ce14:	0599      	lsls	r1, r3, #22
 800ce16:	d402      	bmi.n	800ce1e <_fflush_r+0x3a>
 800ce18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce1a:	f7fe f9be 	bl	800b19a <__retarget_lock_acquire_recursive>
 800ce1e:	4628      	mov	r0, r5
 800ce20:	4621      	mov	r1, r4
 800ce22:	f7ff ff59 	bl	800ccd8 <__sflush_r>
 800ce26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce28:	07da      	lsls	r2, r3, #31
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	d4e0      	bmi.n	800cdf0 <_fflush_r+0xc>
 800ce2e:	89a3      	ldrh	r3, [r4, #12]
 800ce30:	059b      	lsls	r3, r3, #22
 800ce32:	d4dd      	bmi.n	800cdf0 <_fflush_r+0xc>
 800ce34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce36:	f7fe f9b1 	bl	800b19c <__retarget_lock_release_recursive>
 800ce3a:	e7d9      	b.n	800cdf0 <_fflush_r+0xc>
 800ce3c:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <_fflush_r+0x70>)
 800ce3e:	429c      	cmp	r4, r3
 800ce40:	d101      	bne.n	800ce46 <_fflush_r+0x62>
 800ce42:	68ac      	ldr	r4, [r5, #8]
 800ce44:	e7df      	b.n	800ce06 <_fflush_r+0x22>
 800ce46:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <_fflush_r+0x74>)
 800ce48:	429c      	cmp	r4, r3
 800ce4a:	bf08      	it	eq
 800ce4c:	68ec      	ldreq	r4, [r5, #12]
 800ce4e:	e7da      	b.n	800ce06 <_fflush_r+0x22>
 800ce50:	0800d380 	.word	0x0800d380
 800ce54:	0800d3a0 	.word	0x0800d3a0
 800ce58:	0800d360 	.word	0x0800d360

0800ce5c <fiprintf>:
 800ce5c:	b40e      	push	{r1, r2, r3}
 800ce5e:	b503      	push	{r0, r1, lr}
 800ce60:	4601      	mov	r1, r0
 800ce62:	ab03      	add	r3, sp, #12
 800ce64:	4805      	ldr	r0, [pc, #20]	; (800ce7c <fiprintf+0x20>)
 800ce66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce6a:	6800      	ldr	r0, [r0, #0]
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	f7ff fa9d 	bl	800c3ac <_vfiprintf_r>
 800ce72:	b002      	add	sp, #8
 800ce74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce78:	b003      	add	sp, #12
 800ce7a:	4770      	bx	lr
 800ce7c:	20000074 	.word	0x20000074

0800ce80 <__swhatbuf_r>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	460e      	mov	r6, r1
 800ce84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce88:	2900      	cmp	r1, #0
 800ce8a:	b096      	sub	sp, #88	; 0x58
 800ce8c:	4614      	mov	r4, r2
 800ce8e:	461d      	mov	r5, r3
 800ce90:	da07      	bge.n	800cea2 <__swhatbuf_r+0x22>
 800ce92:	2300      	movs	r3, #0
 800ce94:	602b      	str	r3, [r5, #0]
 800ce96:	89b3      	ldrh	r3, [r6, #12]
 800ce98:	061a      	lsls	r2, r3, #24
 800ce9a:	d410      	bmi.n	800cebe <__swhatbuf_r+0x3e>
 800ce9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cea0:	e00e      	b.n	800cec0 <__swhatbuf_r+0x40>
 800cea2:	466a      	mov	r2, sp
 800cea4:	f000 f8a4 	bl	800cff0 <_fstat_r>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	dbf2      	blt.n	800ce92 <__swhatbuf_r+0x12>
 800ceac:	9a01      	ldr	r2, [sp, #4]
 800ceae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ceb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ceb6:	425a      	negs	r2, r3
 800ceb8:	415a      	adcs	r2, r3
 800ceba:	602a      	str	r2, [r5, #0]
 800cebc:	e7ee      	b.n	800ce9c <__swhatbuf_r+0x1c>
 800cebe:	2340      	movs	r3, #64	; 0x40
 800cec0:	2000      	movs	r0, #0
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	b016      	add	sp, #88	; 0x58
 800cec6:	bd70      	pop	{r4, r5, r6, pc}

0800cec8 <__smakebuf_r>:
 800cec8:	898b      	ldrh	r3, [r1, #12]
 800ceca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cecc:	079d      	lsls	r5, r3, #30
 800cece:	4606      	mov	r6, r0
 800ced0:	460c      	mov	r4, r1
 800ced2:	d507      	bpl.n	800cee4 <__smakebuf_r+0x1c>
 800ced4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	6123      	str	r3, [r4, #16]
 800cedc:	2301      	movs	r3, #1
 800cede:	6163      	str	r3, [r4, #20]
 800cee0:	b002      	add	sp, #8
 800cee2:	bd70      	pop	{r4, r5, r6, pc}
 800cee4:	ab01      	add	r3, sp, #4
 800cee6:	466a      	mov	r2, sp
 800cee8:	f7ff ffca 	bl	800ce80 <__swhatbuf_r>
 800ceec:	9900      	ldr	r1, [sp, #0]
 800ceee:	4605      	mov	r5, r0
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7fe fea9 	bl	800bc48 <_malloc_r>
 800cef6:	b948      	cbnz	r0, 800cf0c <__smakebuf_r+0x44>
 800cef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefc:	059a      	lsls	r2, r3, #22
 800cefe:	d4ef      	bmi.n	800cee0 <__smakebuf_r+0x18>
 800cf00:	f023 0303 	bic.w	r3, r3, #3
 800cf04:	f043 0302 	orr.w	r3, r3, #2
 800cf08:	81a3      	strh	r3, [r4, #12]
 800cf0a:	e7e3      	b.n	800ced4 <__smakebuf_r+0xc>
 800cf0c:	4b0d      	ldr	r3, [pc, #52]	; (800cf44 <__smakebuf_r+0x7c>)
 800cf0e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	6020      	str	r0, [r4, #0]
 800cf14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf18:	81a3      	strh	r3, [r4, #12]
 800cf1a:	9b00      	ldr	r3, [sp, #0]
 800cf1c:	6163      	str	r3, [r4, #20]
 800cf1e:	9b01      	ldr	r3, [sp, #4]
 800cf20:	6120      	str	r0, [r4, #16]
 800cf22:	b15b      	cbz	r3, 800cf3c <__smakebuf_r+0x74>
 800cf24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f000 f873 	bl	800d014 <_isatty_r>
 800cf2e:	b128      	cbz	r0, 800cf3c <__smakebuf_r+0x74>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	f023 0303 	bic.w	r3, r3, #3
 800cf36:	f043 0301 	orr.w	r3, r3, #1
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	89a0      	ldrh	r0, [r4, #12]
 800cf3e:	4305      	orrs	r5, r0
 800cf40:	81a5      	strh	r5, [r4, #12]
 800cf42:	e7cd      	b.n	800cee0 <__smakebuf_r+0x18>
 800cf44:	0800a911 	.word	0x0800a911

0800cf48 <memmove>:
 800cf48:	4288      	cmp	r0, r1
 800cf4a:	b510      	push	{r4, lr}
 800cf4c:	eb01 0402 	add.w	r4, r1, r2
 800cf50:	d902      	bls.n	800cf58 <memmove+0x10>
 800cf52:	4284      	cmp	r4, r0
 800cf54:	4623      	mov	r3, r4
 800cf56:	d807      	bhi.n	800cf68 <memmove+0x20>
 800cf58:	1e43      	subs	r3, r0, #1
 800cf5a:	42a1      	cmp	r1, r4
 800cf5c:	d008      	beq.n	800cf70 <memmove+0x28>
 800cf5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf66:	e7f8      	b.n	800cf5a <memmove+0x12>
 800cf68:	4402      	add	r2, r0
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	428a      	cmp	r2, r1
 800cf6e:	d100      	bne.n	800cf72 <memmove+0x2a>
 800cf70:	bd10      	pop	{r4, pc}
 800cf72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf7a:	e7f7      	b.n	800cf6c <memmove+0x24>

0800cf7c <__malloc_lock>:
 800cf7c:	4801      	ldr	r0, [pc, #4]	; (800cf84 <__malloc_lock+0x8>)
 800cf7e:	f7fe b90c 	b.w	800b19a <__retarget_lock_acquire_recursive>
 800cf82:	bf00      	nop
 800cf84:	20000958 	.word	0x20000958

0800cf88 <__malloc_unlock>:
 800cf88:	4801      	ldr	r0, [pc, #4]	; (800cf90 <__malloc_unlock+0x8>)
 800cf8a:	f7fe b907 	b.w	800b19c <__retarget_lock_release_recursive>
 800cf8e:	bf00      	nop
 800cf90:	20000958 	.word	0x20000958

0800cf94 <_realloc_r>:
 800cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf96:	4607      	mov	r7, r0
 800cf98:	4614      	mov	r4, r2
 800cf9a:	460e      	mov	r6, r1
 800cf9c:	b921      	cbnz	r1, 800cfa8 <_realloc_r+0x14>
 800cf9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	f7fe be50 	b.w	800bc48 <_malloc_r>
 800cfa8:	b922      	cbnz	r2, 800cfb4 <_realloc_r+0x20>
 800cfaa:	f7fe fdfd 	bl	800bba8 <_free_r>
 800cfae:	4625      	mov	r5, r4
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfb4:	f000 f83e 	bl	800d034 <_malloc_usable_size_r>
 800cfb8:	42a0      	cmp	r0, r4
 800cfba:	d20f      	bcs.n	800cfdc <_realloc_r+0x48>
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4638      	mov	r0, r7
 800cfc0:	f7fe fe42 	bl	800bc48 <_malloc_r>
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d0f2      	beq.n	800cfb0 <_realloc_r+0x1c>
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4622      	mov	r2, r4
 800cfce:	f7fe f913 	bl	800b1f8 <memcpy>
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	f7fe fde7 	bl	800bba8 <_free_r>
 800cfda:	e7e9      	b.n	800cfb0 <_realloc_r+0x1c>
 800cfdc:	4635      	mov	r5, r6
 800cfde:	e7e7      	b.n	800cfb0 <_realloc_r+0x1c>

0800cfe0 <abort>:
 800cfe0:	b508      	push	{r3, lr}
 800cfe2:	2006      	movs	r0, #6
 800cfe4:	f000 f856 	bl	800d094 <raise>
 800cfe8:	2001      	movs	r0, #1
 800cfea:	f7f5 f839 	bl	8002060 <_exit>
	...

0800cff0 <_fstat_r>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4d07      	ldr	r5, [pc, #28]	; (800d010 <_fstat_r+0x20>)
 800cff4:	2300      	movs	r3, #0
 800cff6:	4604      	mov	r4, r0
 800cff8:	4608      	mov	r0, r1
 800cffa:	4611      	mov	r1, r2
 800cffc:	602b      	str	r3, [r5, #0]
 800cffe:	f7f5 f87e 	bl	80020fe <_fstat>
 800d002:	1c43      	adds	r3, r0, #1
 800d004:	d102      	bne.n	800d00c <_fstat_r+0x1c>
 800d006:	682b      	ldr	r3, [r5, #0]
 800d008:	b103      	cbz	r3, 800d00c <_fstat_r+0x1c>
 800d00a:	6023      	str	r3, [r4, #0]
 800d00c:	bd38      	pop	{r3, r4, r5, pc}
 800d00e:	bf00      	nop
 800d010:	20000960 	.word	0x20000960

0800d014 <_isatty_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	4d06      	ldr	r5, [pc, #24]	; (800d030 <_isatty_r+0x1c>)
 800d018:	2300      	movs	r3, #0
 800d01a:	4604      	mov	r4, r0
 800d01c:	4608      	mov	r0, r1
 800d01e:	602b      	str	r3, [r5, #0]
 800d020:	f7f5 f87d 	bl	800211e <_isatty>
 800d024:	1c43      	adds	r3, r0, #1
 800d026:	d102      	bne.n	800d02e <_isatty_r+0x1a>
 800d028:	682b      	ldr	r3, [r5, #0]
 800d02a:	b103      	cbz	r3, 800d02e <_isatty_r+0x1a>
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	20000960 	.word	0x20000960

0800d034 <_malloc_usable_size_r>:
 800d034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d038:	1f18      	subs	r0, r3, #4
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	bfbc      	itt	lt
 800d03e:	580b      	ldrlt	r3, [r1, r0]
 800d040:	18c0      	addlt	r0, r0, r3
 800d042:	4770      	bx	lr

0800d044 <_raise_r>:
 800d044:	291f      	cmp	r1, #31
 800d046:	b538      	push	{r3, r4, r5, lr}
 800d048:	4604      	mov	r4, r0
 800d04a:	460d      	mov	r5, r1
 800d04c:	d904      	bls.n	800d058 <_raise_r+0x14>
 800d04e:	2316      	movs	r3, #22
 800d050:	6003      	str	r3, [r0, #0]
 800d052:	f04f 30ff 	mov.w	r0, #4294967295
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d05a:	b112      	cbz	r2, 800d062 <_raise_r+0x1e>
 800d05c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d060:	b94b      	cbnz	r3, 800d076 <_raise_r+0x32>
 800d062:	4620      	mov	r0, r4
 800d064:	f000 f830 	bl	800d0c8 <_getpid_r>
 800d068:	462a      	mov	r2, r5
 800d06a:	4601      	mov	r1, r0
 800d06c:	4620      	mov	r0, r4
 800d06e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d072:	f000 b817 	b.w	800d0a4 <_kill_r>
 800d076:	2b01      	cmp	r3, #1
 800d078:	d00a      	beq.n	800d090 <_raise_r+0x4c>
 800d07a:	1c59      	adds	r1, r3, #1
 800d07c:	d103      	bne.n	800d086 <_raise_r+0x42>
 800d07e:	2316      	movs	r3, #22
 800d080:	6003      	str	r3, [r0, #0]
 800d082:	2001      	movs	r0, #1
 800d084:	e7e7      	b.n	800d056 <_raise_r+0x12>
 800d086:	2400      	movs	r4, #0
 800d088:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d08c:	4628      	mov	r0, r5
 800d08e:	4798      	blx	r3
 800d090:	2000      	movs	r0, #0
 800d092:	e7e0      	b.n	800d056 <_raise_r+0x12>

0800d094 <raise>:
 800d094:	4b02      	ldr	r3, [pc, #8]	; (800d0a0 <raise+0xc>)
 800d096:	4601      	mov	r1, r0
 800d098:	6818      	ldr	r0, [r3, #0]
 800d09a:	f7ff bfd3 	b.w	800d044 <_raise_r>
 800d09e:	bf00      	nop
 800d0a0:	20000074 	.word	0x20000074

0800d0a4 <_kill_r>:
 800d0a4:	b538      	push	{r3, r4, r5, lr}
 800d0a6:	4d07      	ldr	r5, [pc, #28]	; (800d0c4 <_kill_r+0x20>)
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	4604      	mov	r4, r0
 800d0ac:	4608      	mov	r0, r1
 800d0ae:	4611      	mov	r1, r2
 800d0b0:	602b      	str	r3, [r5, #0]
 800d0b2:	f7f4 ffc5 	bl	8002040 <_kill>
 800d0b6:	1c43      	adds	r3, r0, #1
 800d0b8:	d102      	bne.n	800d0c0 <_kill_r+0x1c>
 800d0ba:	682b      	ldr	r3, [r5, #0]
 800d0bc:	b103      	cbz	r3, 800d0c0 <_kill_r+0x1c>
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	bd38      	pop	{r3, r4, r5, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20000960 	.word	0x20000960

0800d0c8 <_getpid_r>:
 800d0c8:	f7f4 bfb2 	b.w	8002030 <_getpid>

0800d0cc <_init>:
 800d0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ce:	bf00      	nop
 800d0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0d2:	bc08      	pop	{r3}
 800d0d4:	469e      	mov	lr, r3
 800d0d6:	4770      	bx	lr

0800d0d8 <_fini>:
 800d0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0da:	bf00      	nop
 800d0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0de:	bc08      	pop	{r3}
 800d0e0:	469e      	mov	lr, r3
 800d0e2:	4770      	bx	lr
