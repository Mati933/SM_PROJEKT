
Pliss.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009668  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08009838  08009838  00019838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c7c  08009c7c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c7c  08009c7c  00019c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c84  08009c84  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c84  08009c84  00019c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c88  08009c88  00019c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08009c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  200001f8  08009e84  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  08009e84  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b203  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b08  00000000  00000000  0003b42b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0003ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  000404f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029be9  00000000  00000000  000418e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2c3  00000000  00000000  0006b4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9d34  00000000  00000000  00086794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001804c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006adc  00000000  00000000  0018051c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009820 	.word	0x08009820

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08009820 	.word	0x08009820

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <pid_init>:
 *  Created on: Nov 22, 2021
 *      Author: Ja
 */
#include "PID.h"
void pid_init(pid_str *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6178      	str	r0, [r7, #20]
 8000f88:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f8c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f90:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f94:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	68ba      	ldr	r2, [r7, #8]
 8000fb2:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	615a      	str	r2, [r3, #20]
}
 8000fba:	bf00      	nop
 8000fbc:	371c      	adds	r7, #28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <pid_calculate>:
{
	pid_data->total_error = 0;
	pid_data->previous_error = 0;
}
int pid_calculate(pid_str *pid_data, int setpoint, int process_variable)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 8000fd4:	68ba      	ldr	r2, [r7, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	441a      	add	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	ed93 7a03 	vldr	s14, [r3, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001016:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001044:	ed97 7a07 	vldr	s14, [r7, #28]
 8001048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	db08      	blt.n	8001064 <pid_calculate+0x9c>
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105e:	edc7 7a07 	vstr	s15, [r7, #28]
 8001062:	e016      	b.n	8001092 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	425b      	negs	r3, r3
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001072:	ed97 7a07 	vldr	s14, [r7, #28]
 8001076:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d808      	bhi.n	8001092 <pid_calculate+0xca>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	425b      	negs	r3, r3
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800108e:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	601a      	str	r2, [r3, #0]

	if((int)(p_term + i_term + d_term)<-1000)
 8001098:	ed97 7a05 	vldr	s14, [r7, #20]
 800109c:	edd7 7a07 	vldr	s15, [r7, #28]
 80010a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b0:	ee17 3a90 	vmov	r3, s15
 80010b4:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80010b8:	da01      	bge.n	80010be <pid_calculate+0xf6>
	{
		return (int)-1000;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <pid_calculate+0x120>)
 80010bc:	e00d      	b.n	80010da <pid_calculate+0x112>
	}
	else
	{
		return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 80010be:	ed97 7a05 	vldr	s14, [r7, #20]
 80010c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d6:	ee17 3a90 	vmov	r3, s15
	}



}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	fffffc18 	.word	0xfffffc18

080010ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <MX_ADC1_Init+0x98>)
 8001100:	4a21      	ldr	r2, [pc, #132]	; (8001188 <MX_ADC1_Init+0x9c>)
 8001102:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_ADC1_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_ADC1_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_ADC1_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_ADC1_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_ADC1_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_ADC1_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_ADC1_Init+0x98>)
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <MX_ADC1_Init+0xa0>)
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_ADC1_Init+0x98>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_ADC1_Init+0x98>)
 8001138:	2201      	movs	r2, #1
 800113a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_ADC1_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_ADC1_Init+0x98>)
 8001146:	2201      	movs	r2, #1
 8001148:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <MX_ADC1_Init+0x98>)
 800114c:	f000 ff8c 	bl	8002068 <HAL_ADC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001156:	f000 fb87 	bl	8001868 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115e:	2301      	movs	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_ADC1_Init+0x98>)
 800116c:	f001 f926 	bl	80023bc <HAL_ADC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001176:	f000 fb77 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000224 	.word	0x20000224
 8001188:	40012000 	.word	0x40012000
 800118c:	0f000001 	.word	0x0f000001

08001190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a15      	ldr	r2, [pc, #84]	; (8001204 <HAL_ADC_MspInit+0x74>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d123      	bne.n	80011fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_ADC_MspInit+0x78>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <HAL_ADC_MspInit+0x78>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_ADC_MspInit+0x78>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_ADC_MspInit+0x78>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_ADC_MspInit+0x78>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <HAL_ADC_MspInit+0x78>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011e2:	2301      	movs	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_ADC_MspInit+0x7c>)
 80011f6:	f001 fc37 	bl	8002a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40012000 	.word	0x40012000
 8001208:	40023800 	.word	0x40023800
 800120c:	40020000 	.word	0x40020000

08001210 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	791b      	ldrb	r3, [r3, #4]
 8001224:	b299      	uxth	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f107 020f 	add.w	r2, r7, #15
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	f001 fe89 	bl	8002f48 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8001236:	2310      	movs	r3, #16
 8001238:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	791b      	ldrb	r3, [r3, #4]
 8001242:	b299      	uxth	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f107 020f 	add.w	r2, r7, #15
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	f001 fe7a 	bl	8002f48 <HAL_I2C_Master_Transmit>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <BH1750_ReadLux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af02      	add	r7, sp, #8
 8001262:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6818      	ldr	r0, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	791b      	ldrb	r3, [r3, #4]
 800126c:	b299      	uxth	r1, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	f001 ff59 	bl	8003130 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // @see BH1750 technical note p. 10;
 800127e:	7b3b      	ldrb	r3, [r7, #12]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	7b7a      	ldrb	r2, [r7, #13]
 8001284:	4313      	orrs	r3, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f96c 	bl	8000564 <__aeabi_i2d>
 800128c:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <BH1750_ReadLux+0x58>)
 8001292:	f7ff fafb 	bl	800088c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f7ff fca3 	bl	8000be8 <__aeabi_d2f>
 80012a2:	4603      	mov	r3, r0
 80012a4:	ee07 3a90 	vmov	s15, r3
}
 80012a8:	eeb0 0a67 	vmov.f32	s0, s15
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	3ff33333 	.word	0x3ff33333

080012b8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
 80012cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <MX_GPIO_Init+0x1b4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a66      	ldr	r2, [pc, #408]	; (800146c <MX_GPIO_Init+0x1b4>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b64      	ldr	r3, [pc, #400]	; (800146c <MX_GPIO_Init+0x1b4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	4b61      	ldr	r3, [pc, #388]	; (800146c <MX_GPIO_Init+0x1b4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a60      	ldr	r2, [pc, #384]	; (800146c <MX_GPIO_Init+0x1b4>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b5e      	ldr	r3, [pc, #376]	; (800146c <MX_GPIO_Init+0x1b4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b5b      	ldr	r3, [pc, #364]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a5a      	ldr	r2, [pc, #360]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <MX_GPIO_Init+0x1b4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b55      	ldr	r3, [pc, #340]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a54      	ldr	r2, [pc, #336]	; (800146c <MX_GPIO_Init+0x1b4>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b52      	ldr	r3, [pc, #328]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	4b4f      	ldr	r3, [pc, #316]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a4e      	ldr	r2, [pc, #312]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <MX_GPIO_Init+0x1b4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a48      	ldr	r2, [pc, #288]	; (800146c <MX_GPIO_Init+0x1b4>)
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b46      	ldr	r3, [pc, #280]	; (800146c <MX_GPIO_Init+0x1b4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f244 0181 	movw	r1, #16513	; 0x4081
 8001364:	4842      	ldr	r0, [pc, #264]	; (8001470 <MX_GPIO_Init+0x1b8>)
 8001366:	f001 fd2b 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	4841      	ldr	r0, [pc, #260]	; (8001474 <MX_GPIO_Init+0x1bc>)
 8001370:	f001 fd26 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800137a:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <MX_GPIO_Init+0x1c0>)
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	483c      	ldr	r0, [pc, #240]	; (800147c <MX_GPIO_Init+0x1c4>)
 800138a:	f001 fb6d 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800138e:	2332      	movs	r3, #50	; 0x32
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800139e:	230b      	movs	r3, #11
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4834      	ldr	r0, [pc, #208]	; (800147c <MX_GPIO_Init+0x1c4>)
 80013aa:	f001 fb5d 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013ae:	2386      	movs	r3, #134	; 0x86
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013be:	230b      	movs	r3, #11
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	482d      	ldr	r0, [pc, #180]	; (8001480 <MX_GPIO_Init+0x1c8>)
 80013ca:	f001 fb4d 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	4822      	ldr	r0, [pc, #136]	; (8001470 <MX_GPIO_Init+0x1b8>)
 80013e8:	f001 fb3e 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013fe:	230b      	movs	r3, #11
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4819      	ldr	r0, [pc, #100]	; (8001470 <MX_GPIO_Init+0x1b8>)
 800140a:	f001 fb2d 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800140e:	2340      	movs	r3, #64	; 0x40
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4813      	ldr	r0, [pc, #76]	; (8001474 <MX_GPIO_Init+0x1bc>)
 8001426:	f001 fb1f 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	4619      	mov	r1, r3
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_GPIO_Init+0x1bc>)
 800143e:	f001 fb13 	bl	8002a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001442:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001454:	230b      	movs	r3, #11
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_GPIO_Init+0x1bc>)
 8001460:	f001 fb02 	bl	8002a68 <HAL_GPIO_Init>

}
 8001464:	bf00      	nop
 8001466:	3730      	adds	r7, #48	; 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40020400 	.word	0x40020400
 8001474:	40021800 	.word	0x40021800
 8001478:	10110000 	.word	0x10110000
 800147c:	40020800 	.word	0x40020800
 8001480:	40020000 	.word	0x40020000

08001484 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <MX_I2C1_Init+0x74>)
 800148a:	4a1c      	ldr	r2, [pc, #112]	; (80014fc <MX_I2C1_Init+0x78>)
 800148c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <MX_I2C1_Init+0x74>)
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <MX_I2C1_Init+0x7c>)
 8001492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_I2C1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_I2C1_Init+0x74>)
 800149c:	2201      	movs	r2, #1
 800149e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a0:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014be:	480e      	ldr	r0, [pc, #56]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014c0:	f001 fcb2 	bl	8002e28 <HAL_I2C_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ca:	f000 f9cd 	bl	8001868 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014d2:	f002 f903 	bl	80036dc <HAL_I2CEx_ConfigAnalogFilter>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014dc:	f000 f9c4 	bl	8001868 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e0:	2100      	movs	r1, #0
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_I2C1_Init+0x74>)
 80014e4:	f002 f945 	bl	8003772 <HAL_I2CEx_ConfigDigitalFilter>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f000 f9bb 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000026c 	.word	0x2000026c
 80014fc:	40005400 	.word	0x40005400
 8001500:	00808cd2 	.word	0x00808cd2

08001504 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_I2C_MspInit+0x7c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d128      	bne.n	8001578 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_I2C_MspInit+0x80>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a16      	ldr	r2, [pc, #88]	; (8001584 <HAL_I2C_MspInit+0x80>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <HAL_I2C_MspInit+0x80>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800153e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001550:	2304      	movs	r3, #4
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <HAL_I2C_MspInit+0x84>)
 800155c:	f001 fa84 	bl	8002a68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_I2C_MspInit+0x80>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_I2C_MspInit+0x80>)
 8001566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <HAL_I2C_MspInit+0x80>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	; 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40005400 	.word	0x40005400
 8001584:	40023800 	.word	0x40023800
 8001588:	40020400 	.word	0x40020400

0800158c <__io_putchar>:
float kp_init=4.38127169718089; //1.5
float ki_init=0.355762323613465; //0.5
float kd_init=0;
int anti_windup_limit_init=20;
int __io_putchar(int ch)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if(ch=='\n')
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b0a      	cmp	r3, #10
 8001598:	d109      	bne.n	80015ae <__io_putchar+0x22>
	{
		int ch2='\r';
 800159a:	230d      	movs	r3, #13
 800159c:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t*)&ch2, 1, HAL_MAX_DELAY);
 800159e:	f107 010c 	add.w	r1, r7, #12
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	2201      	movs	r2, #1
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <__io_putchar+0x3c>)
 80015aa:	f004 fd1f 	bl	8005fec <HAL_UART_Transmit>

	}
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80015ae:	1d39      	adds	r1, r7, #4
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	2201      	movs	r2, #1
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <__io_putchar+0x3c>)
 80015b8:	f004 fd18 	bl	8005fec <HAL_UART_Transmit>
	return ch;
 80015bc:	687b      	ldr	r3, [r7, #4]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000360 	.word	0x20000360

080015cc <HAL_TIM_PeriodElapsedCallback>:
		 	 }
}

//PID
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if (htim == &htim6)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a28      	ldr	r2, [pc, #160]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d149      	bne.n	8001670 <HAL_TIM_PeriodElapsedCallback+0xa4>
  {
	 //SP
	 HAL_ADC_Start(&hadc1);
 80015dc:	4827      	ldr	r0, [pc, #156]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015de:	f000 fd87 	bl	80020f0 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015e2:	f04f 31ff 	mov.w	r1, #4294967295
 80015e6:	4825      	ldr	r0, [pc, #148]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015e8:	f000 fe50 	bl	800228c <HAL_ADC_PollForConversion>
	 uint32_t adc=HAL_ADC_GetValue(&hadc1);
 80015ec:	4823      	ldr	r0, [pc, #140]	; (800167c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015ee:	f000 fed8 	bl	80023a2 <HAL_ADC_GetValue>
 80015f2:	60b8      	str	r0, [r7, #8]
	 value_SP=70*adc/4096;
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2246      	movs	r2, #70	; 0x46
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	0b1b      	lsrs	r3, r3, #12
 80015fe:	461a      	mov	r2, r3
 8001600:	4b1f      	ldr	r3, [pc, #124]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001602:	601a      	str	r2, [r3, #0]

	 //PV
	 value_PV=BH1750_ReadLux(&hbh1750_1);
 8001604:	481f      	ldr	r0, [pc, #124]	; (8001684 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001606:	f7ff fe29 	bl	800125c <BH1750_ReadLux>
 800160a:	eef0 7a40 	vmov.f32	s15, s0
 800160e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001612:	ee17 2a90 	vmov	r2, s15
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001618:	601a      	str	r2, [r3, #0]
	 printf("%d %d\n",value_PV,value_SP);
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	4819      	ldr	r0, [pc, #100]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001626:	f006 f87d 	bl	8007724 <iprintf>
	 value_U=pid_calculate(PID, value_SP, value_PV);
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001630:	6811      	ldr	r1, [r2, #0]
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fcc6 	bl	8000fc8 <pid_calculate>
 800163c:	4603      	mov	r3, r0
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001640:	6013      	str	r3, [r2, #0]
	 int PWM=__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1);
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	60fb      	str	r3, [r7, #12]
	 PWM=PWM+value_U;
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
	 if(PWM<0)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	da01      	bge.n	800165e <HAL_TIM_PeriodElapsedCallback+0x92>
	 {
		 PWM=0;
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
	 }
	 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, PWM);
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	635a      	str	r2, [r3, #52]	; 0x34
	// printf("SYGNAL STERUAJCY: %d\n",value_U);
	// printf("PWM: %d\n",PWM);
	 HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800166a:	480c      	ldr	r0, [pc, #48]	; (800169c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800166c:	f001 fbc1 	bl	8002df2 <HAL_GPIO_TogglePin>
  }
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000314 	.word	0x20000314
 800167c:	20000224 	.word	0x20000224
 8001680:	2000000c 	.word	0x2000000c
 8001684:	20000000 	.word	0x20000000
 8001688:	200002c4 	.word	0x200002c4
 800168c:	08009878 	.word	0x08009878
 8001690:	200002bc 	.word	0x200002bc
 8001694:	200002c0 	.word	0x200002c0
 8001698:	200002c8 	.word	0x200002c8
 800169c:	40020400 	.word	0x40020400

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a4:	f000 fc5f 	bl	8001f66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a8:	f000 f84c 	bl	8001744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ac:	f7ff fe04 	bl	80012b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016b0:	f000 fb32 	bl	8001d18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016b4:	f000 fba4 	bl	8001e00 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80016b8:	f7ff fee4 	bl	8001484 <MX_I2C1_Init>
  MX_TIM3_Init();
 80016bc:	f000 fa0a 	bl	8001ad4 <MX_TIM3_Init>
  MX_TIM6_Init();
 80016c0:	f000 fa80 	bl	8001bc4 <MX_TIM6_Init>
  MX_ADC1_Init();
 80016c4:	f7ff fd12 	bl	80010ec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hbh1750_1);
 80016c8:	4816      	ldr	r0, [pc, #88]	; (8001724 <main+0x84>)
 80016ca:	f7ff fda1 	bl	8001210 <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80016ce:	4816      	ldr	r0, [pc, #88]	; (8001728 <main+0x88>)
 80016d0:	f003 fae2 	bl	8004c98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80016d4:	4815      	ldr	r0, [pc, #84]	; (800172c <main+0x8c>)
 80016d6:	f003 fadf 	bl	8004c98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80016da:	2100      	movs	r1, #0
 80016dc:	4812      	ldr	r0, [pc, #72]	; (8001728 <main+0x88>)
 80016de:	f003 fbb5 	bl	8004e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80016e2:	2104      	movs	r1, #4
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <main+0x88>)
 80016e6:	f003 fbb1 	bl	8004e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80016ea:	2108      	movs	r1, #8
 80016ec:	480e      	ldr	r0, [pc, #56]	; (8001728 <main+0x88>)
 80016ee:	f003 fbad 	bl	8004e4c <HAL_TIM_PWM_Start>
  //pid
  pid_init(PID,kp_init,ki_init,kd_init,anti_windup_limit_init);
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <main+0x90>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a0f      	ldr	r2, [pc, #60]	; (8001734 <main+0x94>)
 80016f8:	edd2 7a00 	vldr	s15, [r2]
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <main+0x98>)
 80016fe:	ed92 7a00 	vldr	s14, [r2]
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <main+0x9c>)
 8001704:	edd2 6a00 	vldr	s13, [r2]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <main+0xa0>)
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	4611      	mov	r1, r2
 800170e:	eeb0 1a66 	vmov.f32	s2, s13
 8001712:	eef0 0a47 	vmov.f32	s1, s14
 8001716:	eeb0 0a67 	vmov.f32	s0, s15
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fc30 	bl	8000f80 <pid_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001720:	e7fe      	b.n	8001720 <main+0x80>
 8001722:	bf00      	nop
 8001724:	20000000 	.word	0x20000000
 8001728:	200002c8 	.word	0x200002c8
 800172c:	20000314 	.word	0x20000314
 8001730:	200002bc 	.word	0x200002bc
 8001734:	20000010 	.word	0x20000010
 8001738:	20000014 	.word	0x20000014
 800173c:	20000214 	.word	0x20000214
 8001740:	20000018 	.word	0x20000018

08001744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b0b4      	sub	sp, #208	; 0xd0
 8001748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800174a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800174e:	2230      	movs	r2, #48	; 0x30
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f005 fb74 	bl	8006e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001758:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	2284      	movs	r2, #132	; 0x84
 800176e:	2100      	movs	r1, #0
 8001770:	4618      	mov	r0, r3
 8001772:	f005 fb65 	bl	8006e40 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001776:	f002 f991 	bl	8003a9c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	4b38      	ldr	r3, [pc, #224]	; (800185c <SystemClock_Config+0x118>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a37      	ldr	r2, [pc, #220]	; (800185c <SystemClock_Config+0x118>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <SystemClock_Config+0x118>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001792:	4b33      	ldr	r3, [pc, #204]	; (8001860 <SystemClock_Config+0x11c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800179a:	4a31      	ldr	r2, [pc, #196]	; (8001860 <SystemClock_Config+0x11c>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <SystemClock_Config+0x11c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017ca:	2304      	movs	r3, #4
 80017cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017d0:	2348      	movs	r3, #72	; 0x48
 80017d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017dc:	2303      	movs	r3, #3
 80017de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 f968 	bl	8003abc <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80017f2:	f000 f839 	bl	8001868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fc:	2302      	movs	r3, #2
 80017fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001816:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800181a:	2102      	movs	r1, #2
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fbf1 	bl	8004004 <HAL_RCC_ClockConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001828:	f000 f81e 	bl	8001868 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <SystemClock_Config+0x120>)
 800182e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001830:	2300      	movs	r3, #0
 8001832:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001834:	2300      	movs	r3, #0
 8001836:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001838:	2300      	movs	r3, #0
 800183a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fde0 	bl	8004408 <HAL_RCCEx_PeriphCLKConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800184e:	f000 f80b 	bl	8001868 <Error_Handler>
  }
}
 8001852:	bf00      	nop
 8001854:	37d0      	adds	r7, #208	; 0xd0
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000
 8001864:	00204100 	.word	0x00204100

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800186c:	b672      	cpsid	i
}
 800186e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001870:	e7fe      	b.n	8001870 <Error_Handler+0x8>
	...

08001874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_MspInit+0x44>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <HAL_MspInit+0x44>)
 8001880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_MspInit+0x44>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_MspInit+0x44>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <HAL_MspInit+0x44>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_MspInit+0x44>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <NMI_Handler+0x4>

080018c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <MemManage_Handler+0x4>

080018ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler+0x4>

080018da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f000 fb6a 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM6_DAC_IRQHandler+0x10>)
 8001916:	f003 fb93 	bl	8005040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000314 	.word	0x20000314

08001924 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_kill>:

int _kill(int pid, int sig)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800193e:	f005 fa55 	bl	8006dec <__errno>
 8001942:	4603      	mov	r3, r0
 8001944:	2216      	movs	r2, #22
 8001946:	601a      	str	r2, [r3, #0]
	return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_exit>:

void _exit (int status)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ffe7 	bl	8001934 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001966:	e7fe      	b.n	8001966 <_exit+0x12>

08001968 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e00a      	b.n	8001990 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800197a:	f3af 8000 	nop.w
 800197e:	4601      	mov	r1, r0
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	60ba      	str	r2, [r7, #8]
 8001986:	b2ca      	uxtb	r2, r1
 8001988:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	3301      	adds	r3, #1
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	429a      	cmp	r2, r3
 8001996:	dbf0      	blt.n	800197a <_read+0x12>
	}

return len;
 8001998:	687b      	ldr	r3, [r7, #4]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e009      	b.n	80019c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff fde5 	bl	800158c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbf1      	blt.n	80019b4 <_write+0x12>
	}
	return len;
 80019d0:	687b      	ldr	r3, [r7, #4]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_close>:

int _close(int file)
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
	return -1;
 80019e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a02:	605a      	str	r2, [r3, #4]
	return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <_isatty>:

int _isatty(int file)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
	return 1;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
	return 0;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	; (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	; (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f005 f9ba 	bl	8006dec <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20050000 	.word	0x20050000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	20000218 	.word	0x20000218
 8001aac:	20000800 	.word	0x20000800

08001ab0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <SystemInit+0x20>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <SystemInit+0x20>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08e      	sub	sp, #56	; 0x38
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	f107 031c 	add.w	r3, r7, #28
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	60da      	str	r2, [r3, #12]
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	615a      	str	r2, [r3, #20]
 8001b04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b08:	4a2d      	ldr	r2, [pc, #180]	; (8001bc0 <MX_TIM3_Init+0xec>)
 8001b0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001b0c:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b0e:	2247      	movs	r2, #71	; 0x47
 8001b10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b2c:	4823      	ldr	r0, [pc, #140]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b2e:	f003 f85b 	bl	8004be8 <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b38:	f7ff fe96 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b46:	4619      	mov	r1, r3
 8001b48:	481c      	ldr	r0, [pc, #112]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b4a:	f003 fca9 	bl	80054a0 <HAL_TIM_ConfigClockSource>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b54:	f7ff fe88 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b58:	4818      	ldr	r0, [pc, #96]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b5a:	f003 f915 	bl	8004d88 <HAL_TIM_PWM_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b64:	f7ff fe80 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	4811      	ldr	r0, [pc, #68]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b78:	f004 f93e 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b82:	f7ff fe71 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b86:	2360      	movs	r3, #96	; 0x60
 8001b88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4807      	ldr	r0, [pc, #28]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001b9e:	f003 fb6f 	bl	8005280 <HAL_TIM_PWM_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ba8:	f7ff fe5e 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <MX_TIM3_Init+0xe8>)
 8001bae:	f000 f87b 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 8001bb2:	bf00      	nop
 8001bb4:	3738      	adds	r7, #56	; 0x38
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200002c8 	.word	0x200002c8
 8001bc0:	40000400 	.word	0x40000400

08001bc4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <MX_TIM6_Init+0x6c>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8001bda:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001bdc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001be0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001bea:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bf6:	480d      	ldr	r0, [pc, #52]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001bf8:	f002 fff6 	bl	8004be8 <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001c02:	f7ff fe31 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	4806      	ldr	r0, [pc, #24]	; (8001c2c <MX_TIM6_Init+0x68>)
 8001c14:	f004 f8f0 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c1e:	f7ff fe23 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000314 	.word	0x20000314
 8001c30:	40001000 	.word	0x40001000

08001c34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_TIM_Base_MspInit+0x68>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10c      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c5e:	e018      	b.n	8001c92 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM6)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_TIM_Base_MspInit+0x70>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d113      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c70:	f043 0310 	orr.w	r3, r3, #16
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_TIM_Base_MspInit+0x6c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2036      	movs	r0, #54	; 0x36
 8001c88:	f000 feb7 	bl	80029fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c8c:	2036      	movs	r0, #54	; 0x36
 8001c8e:	f000 fed0 	bl	8002a32 <HAL_NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40001000 	.word	0x40001000

08001ca8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a11      	ldr	r2, [pc, #68]	; (8001d0c <HAL_TIM_MspPostInit+0x64>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d11b      	bne.n	8001d02 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_TIM_MspPostInit+0x68>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_TIM_MspPostInit+0x68>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_TIM_MspPostInit+0x68>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ce2:	2340      	movs	r3, #64	; 0x40
 8001ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_TIM_MspPostInit+0x6c>)
 8001cfe:	f000 feb3 	bl	8002a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d02:	bf00      	nop
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000

08001d18 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d1e:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <MX_USART3_UART_Init+0x5c>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_USART3_UART_Init+0x58>)
 8001d5c:	f004 f8f8 	bl	8005f50 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d66:	f7ff fd7f 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000360 	.word	0x20000360
 8001d74:	40004800 	.word	0x40004800

08001d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <HAL_UART_MspInit+0x7c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d128      	bne.n	8001dec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_UART_MspInit+0x80>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <HAL_UART_MspInit+0x80>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_UART_MspInit+0x80>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_UART_MspInit+0x80>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a10      	ldr	r2, [pc, #64]	; (8001df8 <HAL_UART_MspInit+0x80>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_UART_MspInit+0x80>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001dca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <HAL_UART_MspInit+0x84>)
 8001de8:	f000 fe3e 	bl	8002a68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40004800 	.word	0x40004800
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020c00 	.word	0x40020c00

08001e00 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0e:	2206      	movs	r2, #6
 8001e10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e14:	2202      	movs	r2, #2
 8001e16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e18:	4b0f      	ldr	r3, [pc, #60]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e20:	2202      	movs	r2, #2
 8001e22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e42:	4805      	ldr	r0, [pc, #20]	; (8001e58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e44:	f001 fce1 	bl	800380a <HAL_PCD_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e4e:	f7ff fd0b 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200003e4 	.word	0x200003e4

08001e5c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e7c:	d141      	bne.n	8001f02 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e96:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ea8:	230a      	movs	r3, #10
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4817      	ldr	r0, [pc, #92]	; (8001f10 <HAL_PCD_MspInit+0xb4>)
 8001eb4:	f000 fdd8 	bl	8002a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4810      	ldr	r0, [pc, #64]	; (8001f10 <HAL_PCD_MspInit+0xb4>)
 8001ece:	f000 fdcb 	bl	8002a68 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001edc:	6353      	str	r3, [r2, #52]	; 0x34
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_PCD_MspInit+0xb0>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f02:	bf00      	nop
 8001f04:	3728      	adds	r7, #40	; 0x28
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020000 	.word	0x40020000

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f18:	480d      	ldr	r0, [pc, #52]	; (8001f50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f1a:	490e      	ldr	r1, [pc, #56]	; (8001f54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f30:	4c0b      	ldr	r4, [pc, #44]	; (8001f60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f3e:	f7ff fdb7 	bl	8001ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f42:	f004 ff59 	bl	8006df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7ff fbab 	bl	80016a0 <main>
  bx  lr    
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001f58:	08009c8c 	.word	0x08009c8c
  ldr r2, =_sbss
 8001f5c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001f60:	200007fc 	.word	0x200007fc

08001f64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC_IRQHandler>

08001f66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6a:	2003      	movs	r0, #3
 8001f6c:	f000 fd3a 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f000 f805 	bl	8001f80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f76:	f7ff fc7d 	bl	8001874 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_InitTick+0x54>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x58>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fd55 	bl	8002a4e <HAL_SYSTICK_Config>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00e      	b.n	8001fcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d80a      	bhi.n	8001fca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fbc:	f000 fd1d 	bl	80029fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc0:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <HAL_InitTick+0x5c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e000      	b.n	8001fcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000001c 	.word	0x2000001c
 8001fd8:	20000024 	.word	0x20000024
 8001fdc:	20000020 	.word	0x20000020

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000024 	.word	0x20000024
 8002004:	200007e8 	.word	0x200007e8

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	200007e8 	.word	0x200007e8

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000024 	.word	0x20000024

08002068 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e031      	b.n	80020e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff f882 	bl	8001190 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_ADC_Init+0x84>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 faca 	bl	8002650 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
 80020d2:	e001      	b.n	80020d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	ffffeefd 	.word	0xffffeefd

080020f0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_Start+0x1a>
 8002106:	2302      	movs	r3, #2
 8002108:	e0ad      	b.n	8002266 <HAL_ADC_Start+0x176>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d018      	beq.n	8002152 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002130:	4b50      	ldr	r3, [pc, #320]	; (8002274 <HAL_ADC_Start+0x184>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a50      	ldr	r2, [pc, #320]	; (8002278 <HAL_ADC_Start+0x188>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9a      	lsrs	r2, r3, #18
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002144:	e002      	b.n	800214c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b01      	subs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f9      	bne.n	8002146 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d175      	bne.n	800224c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002164:	4b45      	ldr	r3, [pc, #276]	; (800227c <HAL_ADC_Start+0x18c>)
 8002166:	4013      	ands	r3, r2
 8002168:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002186:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219a:	d106      	bne.n	80021aa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a0:	f023 0206 	bic.w	r2, r3, #6
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	645a      	str	r2, [r3, #68]	; 0x44
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021c0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80021c2:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_ADC_Start+0x190>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 031f 	and.w	r3, r3, #31
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10f      	bne.n	80021ee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d143      	bne.n	8002264 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	e03a      	b.n	8002264 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a24      	ldr	r2, [pc, #144]	; (8002284 <HAL_ADC_Start+0x194>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d10e      	bne.n	8002216 <HAL_ADC_Start+0x126>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d107      	bne.n	8002216 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002214:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_ADC_Start+0x190>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d120      	bne.n	8002264 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_ADC_Start+0x198>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d11b      	bne.n	8002264 <HAL_ADC_Start+0x174>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	e00b      	b.n	8002264 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f043 0210 	orr.w	r2, r3, #16
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225c:	f043 0201 	orr.w	r2, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2000001c 	.word	0x2000001c
 8002278:	431bde83 	.word	0x431bde83
 800227c:	fffff8fe 	.word	0xfffff8fe
 8002280:	40012300 	.word	0x40012300
 8002284:	40012000 	.word	0x40012000
 8002288:	40012200 	.word	0x40012200

0800228c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d113      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80022b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022b8:	d10b      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0220 	orr.w	r2, r3, #32
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e063      	b.n	800239a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80022d2:	f7ff fe99 	bl	8002008 <HAL_GetTick>
 80022d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d8:	e021      	b.n	800231e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d01d      	beq.n	800231e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_ADC_PollForConversion+0x6c>
 80022e8:	f7ff fe8e 	bl	8002008 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d212      	bcs.n	800231e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d00b      	beq.n	800231e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e03d      	b.n	800239a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d1d6      	bne.n	80022da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0212 	mvn.w	r2, #18
 8002334:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d123      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002354:	2b00      	cmp	r3, #0
 8002356:	d11f      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	f043 0201 	orr.w	r2, r3, #1
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x1c>
 80023d4:	2302      	movs	r3, #2
 80023d6:	e12a      	b.n	800262e <HAL_ADC_ConfigChannel+0x272>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b09      	cmp	r3, #9
 80023e6:	d93a      	bls.n	800245e <HAL_ADC_ConfigChannel+0xa2>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023f0:	d035      	beq.n	800245e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68d9      	ldr	r1, [r3, #12]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	461a      	mov	r2, r3
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	3b1e      	subs	r3, #30
 8002408:	2207      	movs	r2, #7
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	400a      	ands	r2, r1
 8002416:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a87      	ldr	r2, [pc, #540]	; (800263c <HAL_ADC_ConfigChannel+0x280>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d10a      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68d9      	ldr	r1, [r3, #12]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	061a      	lsls	r2, r3, #24
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002436:	e035      	b.n	80024a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68d9      	ldr	r1, [r3, #12]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	4603      	mov	r3, r0
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4403      	add	r3, r0
 8002450:	3b1e      	subs	r3, #30
 8002452:	409a      	lsls	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800245c:	e022      	b.n	80024a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	2207      	movs	r2, #7
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43da      	mvns	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	400a      	ands	r2, r1
 8002480:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6919      	ldr	r1, [r3, #16]
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	b29b      	uxth	r3, r3
 8002492:	4618      	mov	r0, r3
 8002494:	4603      	mov	r3, r0
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4403      	add	r3, r0
 800249a:	409a      	lsls	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b06      	cmp	r3, #6
 80024aa:	d824      	bhi.n	80024f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	3b05      	subs	r3, #5
 80024be:	221f      	movs	r2, #31
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43da      	mvns	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	400a      	ands	r2, r1
 80024cc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b05      	subs	r3, #5
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
 80024f4:	e04c      	b.n	8002590 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d824      	bhi.n	8002548 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b23      	subs	r3, #35	; 0x23
 8002510:	221f      	movs	r2, #31
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	400a      	ands	r2, r1
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	4618      	mov	r0, r3
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	fa00 f203 	lsl.w	r2, r0, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	631a      	str	r2, [r3, #48]	; 0x30
 8002546:	e023      	b.n	8002590 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	3b41      	subs	r3, #65	; 0x41
 800255a:	221f      	movs	r2, #31
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43da      	mvns	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	400a      	ands	r2, r1
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b41      	subs	r3, #65	; 0x41
 8002584:	fa00 f203 	lsl.w	r2, r0, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2a      	ldr	r2, [pc, #168]	; (8002640 <HAL_ADC_ConfigChannel+0x284>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10a      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1f4>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025a2:	d105      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80025a4:	4b27      	ldr	r3, [pc, #156]	; (8002644 <HAL_ADC_ConfigChannel+0x288>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_ADC_ConfigChannel+0x288>)
 80025aa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80025ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_ADC_ConfigChannel+0x284>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d109      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x212>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b12      	cmp	r3, #18
 80025c0:	d105      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025c2:	4b20      	ldr	r3, [pc, #128]	; (8002644 <HAL_ADC_ConfigChannel+0x288>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a1f      	ldr	r2, [pc, #124]	; (8002644 <HAL_ADC_ConfigChannel+0x288>)
 80025c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <HAL_ADC_ConfigChannel+0x284>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d125      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x268>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_ADC_ConfigChannel+0x280>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x22e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b11      	cmp	r3, #17
 80025e8:	d11c      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025ea:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_ADC_ConfigChannel+0x288>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HAL_ADC_ConfigChannel+0x288>)
 80025f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <HAL_ADC_ConfigChannel+0x280>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d111      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_ADC_ConfigChannel+0x28c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a11      	ldr	r2, [pc, #68]	; (800264c <HAL_ADC_ConfigChannel+0x290>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0c9a      	lsrs	r2, r3, #18
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002616:	e002      	b.n	800261e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3b01      	subs	r3, #1
 800261c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	10000012 	.word	0x10000012
 8002640:	40012000 	.word	0x40012000
 8002644:	40012300 	.word	0x40012300
 8002648:	2000001c 	.word	0x2000001c
 800264c:	431bde83 	.word	0x431bde83

08002650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002658:	4b78      	ldr	r3, [pc, #480]	; (800283c <ADC_Init+0x1ec>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4a77      	ldr	r2, [pc, #476]	; (800283c <ADC_Init+0x1ec>)
 800265e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002662:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002664:	4b75      	ldr	r3, [pc, #468]	; (800283c <ADC_Init+0x1ec>)
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4973      	ldr	r1, [pc, #460]	; (800283c <ADC_Init+0x1ec>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002680:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	021a      	lsls	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	4a58      	ldr	r2, [pc, #352]	; (8002840 <ADC_Init+0x1f0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002714:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6899      	ldr	r1, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e00f      	b.n	800274a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002748:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0202 	bic.w	r2, r2, #2
 8002758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6899      	ldr	r1, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	005a      	lsls	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002786:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002796:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	3b01      	subs	r3, #1
 80027a4:	035a      	lsls	r2, r3, #13
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	e007      	b.n	80027c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	3b01      	subs	r3, #1
 80027dc:	051a      	lsls	r2, r3, #20
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002802:	025a      	lsls	r2, r3, #9
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6899      	ldr	r1, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	029a      	lsls	r2, r3, #10
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	609a      	str	r2, [r3, #8]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40012300 	.word	0x40012300
 8002840:	0f000001 	.word	0x0f000001

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <__NVIC_SetPriorityGrouping+0x40>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 800286e:	4313      	orrs	r3, r2
 8002870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002872:	4a04      	ldr	r2, [pc, #16]	; (8002884 <__NVIC_SetPriorityGrouping+0x40>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	60d3      	str	r3, [r2, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	e000ed00 	.word	0xe000ed00
 8002888:	05fa0000 	.word	0x05fa0000

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0b      	blt.n	80028d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <__NVIC_EnableIRQ+0x38>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	; (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	; 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
         );
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff29 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a0c:	f7ff ff3e 	bl	800288c <__NVIC_GetPriorityGrouping>
 8002a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7ff ff8e 	bl	8002938 <NVIC_EncodePriority>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff5d 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a2a:	bf00      	nop
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	4603      	mov	r3, r0
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff31 	bl	80028a8 <__NVIC_EnableIRQ>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff ffa2 	bl	80029a0 <SysTick_Config>
 8002a5c:	4603      	mov	r3, r0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b089      	sub	sp, #36	; 0x24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e175      	b.n	8002d74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 8164 	bne.w	8002d6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d00b      	beq.n	8002ac6 <HAL_GPIO_Init+0x5e>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d007      	beq.n	8002ac6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aba:	2b11      	cmp	r3, #17
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b12      	cmp	r3, #18
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x100>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b12      	cmp	r3, #18
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80be 	beq.w	8002d6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	4a65      	ldr	r2, [pc, #404]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bfe:	4b63      	ldr	r3, [pc, #396]	; (8002d8c <HAL_GPIO_Init+0x324>)
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c0a:	4a61      	ldr	r2, [pc, #388]	; (8002d90 <HAL_GPIO_Init+0x328>)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_GPIO_Init+0x32c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d037      	beq.n	8002ca6 <HAL_GPIO_Init+0x23e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a57      	ldr	r2, [pc, #348]	; (8002d98 <HAL_GPIO_Init+0x330>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d031      	beq.n	8002ca2 <HAL_GPIO_Init+0x23a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a56      	ldr	r2, [pc, #344]	; (8002d9c <HAL_GPIO_Init+0x334>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d02b      	beq.n	8002c9e <HAL_GPIO_Init+0x236>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a55      	ldr	r2, [pc, #340]	; (8002da0 <HAL_GPIO_Init+0x338>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d025      	beq.n	8002c9a <HAL_GPIO_Init+0x232>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a54      	ldr	r2, [pc, #336]	; (8002da4 <HAL_GPIO_Init+0x33c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01f      	beq.n	8002c96 <HAL_GPIO_Init+0x22e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a53      	ldr	r2, [pc, #332]	; (8002da8 <HAL_GPIO_Init+0x340>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x22a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a52      	ldr	r2, [pc, #328]	; (8002dac <HAL_GPIO_Init+0x344>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a51      	ldr	r2, [pc, #324]	; (8002db0 <HAL_GPIO_Init+0x348>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x222>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a50      	ldr	r2, [pc, #320]	; (8002db4 <HAL_GPIO_Init+0x34c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x21e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4f      	ldr	r2, [pc, #316]	; (8002db8 <HAL_GPIO_Init+0x350>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x21a>
 8002c7e:	2309      	movs	r3, #9
 8002c80:	e012      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c82:	230a      	movs	r3, #10
 8002c84:	e010      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c86:	2308      	movs	r3, #8
 8002c88:	e00e      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e00c      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c8e:	2306      	movs	r3, #6
 8002c90:	e00a      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c92:	2305      	movs	r3, #5
 8002c94:	e008      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c96:	2304      	movs	r3, #4
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e004      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e002      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x240>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	f002 0203 	and.w	r2, r2, #3
 8002cae:	0092      	lsls	r2, r2, #2
 8002cb0:	4093      	lsls	r3, r2
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cb8:	4935      	ldr	r1, [pc, #212]	; (8002d90 <HAL_GPIO_Init+0x328>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cea:	4a34      	ldr	r2, [pc, #208]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d14:	4a29      	ldr	r2, [pc, #164]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d1a:	4b28      	ldr	r3, [pc, #160]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d44:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d68:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <HAL_GPIO_Init+0x354>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	f67f ae86 	bls.w	8002a88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3724      	adds	r7, #36	; 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020c00 	.word	0x40020c00
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40021400 	.word	0x40021400
 8002dac:	40021800 	.word	0x40021800
 8002db0:	40021c00 	.word	0x40021c00
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022400 	.word	0x40022400
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e04:	887a      	ldrh	r2, [r7, #2]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	041a      	lsls	r2, r3, #16
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	887b      	ldrh	r3, [r7, #2]
 8002e12:	400b      	ands	r3, r1
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	619a      	str	r2, [r3, #24]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07f      	b.n	8002f3a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fe fb58 	bl	8001504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d107      	bne.n	8002ea2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e006      	b.n	8002eb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d104      	bne.n	8002ec2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_I2C_Init+0x11c>)
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	ea42 0103 	orr.w	r1, r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	021a      	lsls	r2, r3, #8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69d9      	ldr	r1, [r3, #28]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	02008000 	.word	0x02008000

08002f48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	461a      	mov	r2, r3
 8002f54:	460b      	mov	r3, r1
 8002f56:	817b      	strh	r3, [r7, #10]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	f040 80da 	bne.w	800311e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_I2C_Master_Transmit+0x30>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e0d3      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1d8>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f80:	f7ff f842 	bl	8002008 <HAL_GetTick>
 8002f84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2319      	movs	r3, #25
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f9e6 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0be      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2221      	movs	r2, #33	; 0x21
 8002fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2210      	movs	r2, #16
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	893a      	ldrh	r2, [r7, #8]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2bff      	cmp	r3, #255	; 0xff
 8002fd2:	d90e      	bls.n	8002ff2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	22ff      	movs	r2, #255	; 0xff
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	4b51      	ldr	r3, [pc, #324]	; (8003128 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fb48 	bl	8003680 <I2C_TransferConfig>
 8002ff0:	e06c      	b.n	80030cc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	b2da      	uxtb	r2, r3
 8003002:	8979      	ldrh	r1, [r7, #10]
 8003004:	4b48      	ldr	r3, [pc, #288]	; (8003128 <HAL_I2C_Master_Transmit+0x1e0>)
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fb37 	bl	8003680 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003012:	e05b      	b.n	80030cc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	6a39      	ldr	r1, [r7, #32]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f9e3 	bl	80033e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e07b      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d034      	beq.n	80030cc <HAL_I2C_Master_Transmit+0x184>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d130      	bne.n	80030cc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f975 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e04d      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2bff      	cmp	r3, #255	; 0xff
 800308c:	d90e      	bls.n	80030ac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	22ff      	movs	r2, #255	; 0xff
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003098:	b2da      	uxtb	r2, r3
 800309a:	8979      	ldrh	r1, [r7, #10]
 800309c:	2300      	movs	r3, #0
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 faeb 	bl	8003680 <I2C_TransferConfig>
 80030aa:	e00f      	b.n	80030cc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	2300      	movs	r3, #0
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fada 	bl	8003680 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d19e      	bne.n	8003014 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	6a39      	ldr	r1, [r7, #32]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f9c2 	bl	8003464 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e01a      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2220      	movs	r2, #32
 80030f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <HAL_I2C_Master_Transmit+0x1e4>)
 80030fe:	400b      	ands	r3, r1
 8003100:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	80002000 	.word	0x80002000
 800312c:	fe00e800 	.word	0xfe00e800

08003130 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	461a      	mov	r2, r3
 800313c:	460b      	mov	r3, r1
 800313e:	817b      	strh	r3, [r7, #10]
 8003140:	4613      	mov	r3, r2
 8003142:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	f040 80db 	bne.w	8003308 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_I2C_Master_Receive+0x30>
 800315c:	2302      	movs	r3, #2
 800315e:	e0d4      	b.n	800330a <HAL_I2C_Master_Receive+0x1da>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003168:	f7fe ff4e 	bl	8002008 <HAL_GetTick>
 800316c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	2319      	movs	r3, #25
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f8f2 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0bf      	b.n	800330a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2222      	movs	r2, #34	; 0x22
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2210      	movs	r2, #16
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	893a      	ldrh	r2, [r7, #8]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2bff      	cmp	r3, #255	; 0xff
 80031ba:	d90e      	bls.n	80031da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	22ff      	movs	r2, #255	; 0xff
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	8979      	ldrh	r1, [r7, #10]
 80031ca:	4b52      	ldr	r3, [pc, #328]	; (8003314 <HAL_I2C_Master_Receive+0x1e4>)
 80031cc:	9300      	str	r3, [sp, #0]
 80031ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fa54 	bl	8003680 <I2C_TransferConfig>
 80031d8:	e06d      	b.n	80032b6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	8979      	ldrh	r1, [r7, #10]
 80031ec:	4b49      	ldr	r3, [pc, #292]	; (8003314 <HAL_I2C_Master_Receive+0x1e4>)
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fa43 	bl	8003680 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80031fa:	e05c      	b.n	80032b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	6a39      	ldr	r1, [r7, #32]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f96b 	bl	80034dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e07c      	b.n	800330a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d034      	beq.n	80032b6 <HAL_I2C_Master_Receive+0x186>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b00      	cmp	r3, #0
 8003252:	d130      	bne.n	80032b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	2200      	movs	r2, #0
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f880 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e04d      	b.n	800330a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003272:	b29b      	uxth	r3, r3
 8003274:	2bff      	cmp	r3, #255	; 0xff
 8003276:	d90e      	bls.n	8003296 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	22ff      	movs	r2, #255	; 0xff
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	b2da      	uxtb	r2, r3
 8003284:	8979      	ldrh	r1, [r7, #10]
 8003286:	2300      	movs	r3, #0
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9f6 	bl	8003680 <I2C_TransferConfig>
 8003294:	e00f      	b.n	80032b6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	8979      	ldrh	r1, [r7, #10]
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f9e5 	bl	8003680 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d19d      	bne.n	80031fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	6a39      	ldr	r1, [r7, #32]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f8cd 	bl	8003464 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e01a      	b.n	800330a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2220      	movs	r2, #32
 80032da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_I2C_Master_Receive+0x1e8>)
 80032e8:	400b      	ands	r3, r1
 80032ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003308:	2302      	movs	r3, #2
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	80002400 	.word	0x80002400
 8003318:	fe00e800 	.word	0xfe00e800

0800331c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b02      	cmp	r3, #2
 8003330:	d103      	bne.n	800333a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2200      	movs	r2, #0
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b01      	cmp	r3, #1
 8003346:	d007      	beq.n	8003358 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	619a      	str	r2, [r3, #24]
  }
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	e022      	b.n	80033bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d01e      	beq.n	80033bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe fe43 	bl	8002008 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d113      	bne.n	80033bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	f043 0220 	orr.w	r2, r3, #32
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e00f      	b.n	80033dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	4013      	ands	r3, r2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d0cd      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033f0:	e02c      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f8dc 	bl	80035b4 <I2C_IsAcknowledgeFailed>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e02a      	b.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d01e      	beq.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340e:	f7fe fdfb 	bl	8002008 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	429a      	cmp	r2, r3
 800341c:	d302      	bcc.n	8003424 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d113      	bne.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e007      	b.n	800345c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b02      	cmp	r3, #2
 8003458:	d1cb      	bne.n	80033f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003470:	e028      	b.n	80034c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f89c 	bl	80035b4 <I2C_IsAcknowledgeFailed>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e026      	b.n	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fe fdbf 	bl	8002008 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	429a      	cmp	r2, r3
 8003494:	d302      	bcc.n	800349c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d113      	bne.n	80034c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0320 	and.w	r3, r3, #32
 80034ce:	2b20      	cmp	r3, #32
 80034d0:	d1cf      	bne.n	8003472 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034e8:	e055      	b.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f860 	bl	80035b4 <I2C_IsAcknowledgeFailed>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e053      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b20      	cmp	r3, #32
 800350a:	d129      	bne.n	8003560 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b04      	cmp	r3, #4
 8003518:	d105      	bne.n	8003526 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e03f      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2220      	movs	r2, #32
 800352c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800353a:	400b      	ands	r3, r1
 800353c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e022      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003560:	f7fe fd52 	bl	8002008 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	d302      	bcc.n	8003576 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e007      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d1a2      	bne.n	80034ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	fe00e800 	.word	0xfe00e800

080035b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0310 	and.w	r3, r3, #16
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d151      	bne.n	8003672 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ce:	e022      	b.n	8003616 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d6:	d01e      	beq.n	8003616 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d8:	f7fe fd16 	bl	8002008 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <I2C_IsAcknowledgeFailed+0x3a>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d113      	bne.n	8003616 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	f043 0220 	orr.w	r2, r3, #32
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e02e      	b.n	8003674 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d1d5      	bne.n	80035d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2210      	movs	r2, #16
 800362a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2220      	movs	r2, #32
 8003632:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff fe71 	bl	800331c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b0d      	ldr	r3, [pc, #52]	; (800367c <I2C_IsAcknowledgeFailed+0xc8>)
 8003646:	400b      	ands	r3, r1
 8003648:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f043 0204 	orr.w	r2, r3, #4
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	fe00e800 	.word	0xfe00e800

08003680 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	817b      	strh	r3, [r7, #10]
 800368e:	4613      	mov	r3, r2
 8003690:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	0d5b      	lsrs	r3, r3, #21
 800369c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036a0:	4b0d      	ldr	r3, [pc, #52]	; (80036d8 <I2C_TransferConfig+0x58>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	43db      	mvns	r3, r3
 80036a6:	ea02 0103 	and.w	r1, r2, r3
 80036aa:	897b      	ldrh	r3, [r7, #10]
 80036ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80036b0:	7a7b      	ldrb	r3, [r7, #9]
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80036b8:	431a      	orrs	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	431a      	orrs	r2, r3
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80036ca:	bf00      	nop
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	03ff63ff 	.word	0x03ff63ff

080036dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d138      	bne.n	8003764 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e032      	b.n	8003766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0201 	bic.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800372e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	d139      	bne.n	80037fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003792:	2302      	movs	r3, #2
 8003794:	e033      	b.n	80037fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2224      	movs	r2, #36	; 0x24
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037fc:	2302      	movs	r3, #2
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800380a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380c:	b08f      	sub	sp, #60	; 0x3c
 800380e:	af0a      	add	r7, sp, #40	; 0x28
 8003810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e116      	b.n	8003a4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe fb10 	bl	8001e5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384c:	2b00      	cmp	r3, #0
 800384e:	d102      	bne.n	8003856 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f003 f866 	bl	800692c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	687e      	ldr	r6, [r7, #4]
 8003868:	466d      	mov	r5, sp
 800386a:	f106 0410 	add.w	r4, r6, #16
 800386e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003876:	e894 0003 	ldmia.w	r4, {r0, r1}
 800387a:	e885 0003 	stmia.w	r5, {r0, r1}
 800387e:	1d33      	adds	r3, r6, #4
 8003880:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003882:	6838      	ldr	r0, [r7, #0]
 8003884:	f002 fffa 	bl	800687c <USB_CoreInit>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e0d7      	b.n	8003a4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f003 f854 	bl	800694e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	e04a      	b.n	8003942 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	333d      	adds	r3, #61	; 0x3d
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	333c      	adds	r3, #60	; 0x3c
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038d4:	7bfa      	ldrb	r2, [r7, #15]
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	b298      	uxth	r0, r3
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3342      	adds	r3, #66	; 0x42
 80038e8:	4602      	mov	r2, r0
 80038ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	333f      	adds	r3, #63	; 0x3f
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3344      	adds	r3, #68	; 0x44
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3348      	adds	r3, #72	; 0x48
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003928:	7bfa      	ldrb	r2, [r7, #15]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	3350      	adds	r3, #80	; 0x50
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	3301      	adds	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
 8003942:	7bfa      	ldrb	r2, [r7, #15]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d3af      	bcc.n	80038ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e044      	b.n	80039dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003968:	7bfa      	ldrb	r2, [r7, #15]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003994:	7bfa      	ldrb	r2, [r7, #15]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	3301      	adds	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	7bfa      	ldrb	r2, [r7, #15]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d3b5      	bcc.n	8003952 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	687e      	ldr	r6, [r7, #4]
 80039ee:	466d      	mov	r5, sp
 80039f0:	f106 0410 	add.w	r4, r6, #16
 80039f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a00:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a04:	1d33      	adds	r3, r6, #4
 8003a06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a08:	6838      	ldr	r0, [r7, #0]
 8003a0a:	f002 ffcb 	bl	80069a4 <USB_DevInit>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e014      	b.n	8003a4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f80b 	bl	8003a54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 f97d 	bl	8006d42 <USB_DevDisconnect>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003a54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	10000003 	.word	0x10000003

08003a9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	40007000 	.word	0x40007000

08003abc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e291      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 8087 	beq.w	8003bee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae0:	4b96      	ldr	r3, [pc, #600]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d00c      	beq.n	8003b06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aec:	4b93      	ldr	r3, [pc, #588]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f003 030c 	and.w	r3, r3, #12
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d112      	bne.n	8003b1e <HAL_RCC_OscConfig+0x62>
 8003af8:	4b90      	ldr	r3, [pc, #576]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b04:	d10b      	bne.n	8003b1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b06:	4b8d      	ldr	r3, [pc, #564]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d06c      	beq.n	8003bec <HAL_RCC_OscConfig+0x130>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d168      	bne.n	8003bec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e26b      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x7a>
 8003b28:	4b84      	ldr	r3, [pc, #528]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a83      	ldr	r2, [pc, #524]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e02e      	b.n	8003b94 <HAL_RCC_OscConfig+0xd8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x9c>
 8003b3e:	4b7f      	ldr	r3, [pc, #508]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7e      	ldr	r2, [pc, #504]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4b7c      	ldr	r3, [pc, #496]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a7b      	ldr	r2, [pc, #492]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e01d      	b.n	8003b94 <HAL_RCC_OscConfig+0xd8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCC_OscConfig+0xc0>
 8003b62:	4b76      	ldr	r3, [pc, #472]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a75      	ldr	r2, [pc, #468]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b73      	ldr	r3, [pc, #460]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a72      	ldr	r2, [pc, #456]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e00b      	b.n	8003b94 <HAL_RCC_OscConfig+0xd8>
 8003b7c:	4b6f      	ldr	r3, [pc, #444]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6e      	ldr	r2, [pc, #440]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b6c      	ldr	r3, [pc, #432]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a6b      	ldr	r2, [pc, #428]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d013      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fa34 	bl	8002008 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fa30 	bl	8002008 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b64      	cmp	r3, #100	; 0x64
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e21f      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bb6:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0xe8>
 8003bc2:	e014      	b.n	8003bee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fa20 	bl	8002008 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fa1c 	bl	8002008 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e20b      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x110>
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d069      	beq.n	8003cce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bfa:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00b      	beq.n	8003c1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c06:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d11c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x190>
 8003c12:	4b4a      	ldr	r3, [pc, #296]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c1e:	4b47      	ldr	r3, [pc, #284]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_RCC_OscConfig+0x17a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d001      	beq.n	8003c36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e1df      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c36:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	493d      	ldr	r1, [pc, #244]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	e040      	b.n	8003cce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d023      	beq.n	8003c9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c54:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a38      	ldr	r2, [pc, #224]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fe f9d2 	bl	8002008 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c68:	f7fe f9ce 	bl	8002008 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e1bd      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	4929      	ldr	r1, [pc, #164]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
 8003c9a:	e018      	b.n	8003cce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9c:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a26      	ldr	r2, [pc, #152]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fe f9ae 	bl	8002008 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fe f9aa 	bl	8002008 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e199      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	4b1e      	ldr	r3, [pc, #120]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d038      	beq.n	8003d4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d019      	beq.n	8003d16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe f98b 	bl	8002008 <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe f987 	bl	8002008 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e176      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x23a>
 8003d14:	e01a      	b.n	8003d4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <HAL_RCC_OscConfig+0x280>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fe f971 	bl	8002008 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fe f96d 	bl	8002008 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d903      	bls.n	8003d40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e15c      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
 8003d3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d40:	4b91      	ldr	r3, [pc, #580]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ee      	bne.n	8003d2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a4 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5a:	4b8b      	ldr	r3, [pc, #556]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10d      	bne.n	8003d82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	4a87      	ldr	r2, [pc, #540]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6413      	str	r3, [r2, #64]	; 0x40
 8003d72:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d82:	4b82      	ldr	r3, [pc, #520]	; (8003f8c <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d118      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d8e:	4b7f      	ldr	r3, [pc, #508]	; (8003f8c <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7e      	ldr	r2, [pc, #504]	; (8003f8c <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe f935 	bl	8002008 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da2:	f7fe f931 	bl	8002008 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b64      	cmp	r3, #100	; 0x64
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e120      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db4:	4b75      	ldr	r3, [pc, #468]	; (8003f8c <HAL_RCC_OscConfig+0x4d0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x31a>
 8003dc8:	4b6f      	ldr	r3, [pc, #444]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dcc:	4a6e      	ldr	r2, [pc, #440]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd4:	e02d      	b.n	8003e32 <HAL_RCC_OscConfig+0x376>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x33c>
 8003dde:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de2:	4a69      	ldr	r2, [pc, #420]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dea:	4b67      	ldr	r3, [pc, #412]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	4a66      	ldr	r2, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003df0:	f023 0304 	bic.w	r3, r3, #4
 8003df4:	6713      	str	r3, [r2, #112]	; 0x70
 8003df6:	e01c      	b.n	8003e32 <HAL_RCC_OscConfig+0x376>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCC_OscConfig+0x35e>
 8003e00:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4a60      	ldr	r2, [pc, #384]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0c:	4b5e      	ldr	r3, [pc, #376]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e10:	4a5d      	ldr	r2, [pc, #372]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6713      	str	r3, [r2, #112]	; 0x70
 8003e18:	e00b      	b.n	8003e32 <HAL_RCC_OscConfig+0x376>
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	4a5a      	ldr	r2, [pc, #360]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	6713      	str	r3, [r2, #112]	; 0x70
 8003e26:	4b58      	ldr	r3, [pc, #352]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a57      	ldr	r2, [pc, #348]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d015      	beq.n	8003e66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fe f8e5 	bl	8002008 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe f8e1 	bl	8002008 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0ce      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e58:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ee      	beq.n	8003e42 <HAL_RCC_OscConfig+0x386>
 8003e64:	e014      	b.n	8003e90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e66:	f7fe f8cf 	bl	8002008 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fe f8cb 	bl	8002008 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e0b8      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e84:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ee      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d105      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80a4 	beq.w	8003ff4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d06b      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d149      	bne.n	8003f54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a30      	ldr	r2, [pc, #192]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f89c 	bl	8002008 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe f898 	bl	8002008 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e087      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	041b      	lsls	r3, r3, #16
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	061b      	lsls	r3, r3, #24
 8003f16:	4313      	orrs	r3, r2
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f20:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe f86c 	bl	8002008 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe f868 	bl	8002008 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e057      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d0f0      	beq.n	8003f34 <HAL_RCC_OscConfig+0x478>
 8003f52:	e04f      	b.n	8003ff4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe f852 	bl	8002008 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f68:	f7fe f84e 	bl	8002008 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e03d      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x4ac>
 8003f86:	e035      	b.n	8003ff4 <HAL_RCC_OscConfig+0x538>
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f90:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x544>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d028      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d121      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d11a      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fc6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d111      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800

08004004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0d0      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800401c:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d910      	bls.n	800404c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b67      	ldr	r3, [pc, #412]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 020f 	bic.w	r2, r3, #15
 8004032:	4965      	ldr	r1, [pc, #404]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0b8      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	494d      	ldr	r1, [pc, #308]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d040      	beq.n	8004128 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d115      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c6:	4b41      	ldr	r3, [pc, #260]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e073      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	4b3d      	ldr	r3, [pc, #244]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e06b      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e6:	4b39      	ldr	r3, [pc, #228]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 0203 	bic.w	r2, r3, #3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4936      	ldr	r1, [pc, #216]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f8:	f7fd ff86 	bl	8002008 <HAL_GetTick>
 80040fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004100:	f7fd ff82 	bl	8002008 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	; 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e053      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004116:	4b2d      	ldr	r3, [pc, #180]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 020c 	and.w	r2, r3, #12
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	429a      	cmp	r2, r3
 8004126:	d1eb      	bne.n	8004100 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d210      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004136:	4b24      	ldr	r3, [pc, #144]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f023 020f 	bic.w	r2, r3, #15
 800413e:	4922      	ldr	r1, [pc, #136]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x1cc>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1d0>)
 80041b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1d4>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fd fee2 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	08009880 	.word	0x08009880
 80041d4:	2000001c 	.word	0x2000001c
 80041d8:	20000020 	.word	0x20000020

080041dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	607b      	str	r3, [r7, #4]
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	2300      	movs	r3, #0
 80041ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f4:	4b67      	ldr	r3, [pc, #412]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d00d      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x40>
 8004200:	2b08      	cmp	r3, #8
 8004202:	f200 80bd 	bhi.w	8004380 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 800420a:	2b04      	cmp	r3, #4
 800420c:	d003      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x3a>
 800420e:	e0b7      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b61      	ldr	r3, [pc, #388]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004212:	60bb      	str	r3, [r7, #8]
      break;
 8004214:	e0b7      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004216:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004218:	60bb      	str	r3, [r7, #8]
      break;
 800421a:	e0b4      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800421c:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004226:	4b5b      	ldr	r3, [pc, #364]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04d      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004232:	4b58      	ldr	r3, [pc, #352]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	461a      	mov	r2, r3
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	ea02 0800 	and.w	r8, r2, r0
 800424a:	ea03 0901 	and.w	r9, r3, r1
 800424e:	4640      	mov	r0, r8
 8004250:	4649      	mov	r1, r9
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	014b      	lsls	r3, r1, #5
 800425c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004260:	0142      	lsls	r2, r0, #5
 8004262:	4610      	mov	r0, r2
 8004264:	4619      	mov	r1, r3
 8004266:	ebb0 0008 	subs.w	r0, r0, r8
 800426a:	eb61 0109 	sbc.w	r1, r1, r9
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	018b      	lsls	r3, r1, #6
 8004278:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800427c:	0182      	lsls	r2, r0, #6
 800427e:	1a12      	subs	r2, r2, r0
 8004280:	eb63 0301 	sbc.w	r3, r3, r1
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	f04f 0100 	mov.w	r1, #0
 800428c:	00d9      	lsls	r1, r3, #3
 800428e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004292:	00d0      	lsls	r0, r2, #3
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	eb12 0208 	adds.w	r2, r2, r8
 800429c:	eb43 0309 	adc.w	r3, r3, r9
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	0259      	lsls	r1, r3, #9
 80042aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042ae:	0250      	lsls	r0, r2, #9
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4610      	mov	r0, r2
 80042b6:	4619      	mov	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	f7fc fce2 	bl	8000c88 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4613      	mov	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e04a      	b.n	8004364 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ce:	4b31      	ldr	r3, [pc, #196]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	461a      	mov	r2, r3
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042de:	f04f 0100 	mov.w	r1, #0
 80042e2:	ea02 0400 	and.w	r4, r2, r0
 80042e6:	ea03 0501 	and.w	r5, r3, r1
 80042ea:	4620      	mov	r0, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	014b      	lsls	r3, r1, #5
 80042f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042fc:	0142      	lsls	r2, r0, #5
 80042fe:	4610      	mov	r0, r2
 8004300:	4619      	mov	r1, r3
 8004302:	1b00      	subs	r0, r0, r4
 8004304:	eb61 0105 	sbc.w	r1, r1, r5
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	018b      	lsls	r3, r1, #6
 8004312:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004316:	0182      	lsls	r2, r0, #6
 8004318:	1a12      	subs	r2, r2, r0
 800431a:	eb63 0301 	sbc.w	r3, r3, r1
 800431e:	f04f 0000 	mov.w	r0, #0
 8004322:	f04f 0100 	mov.w	r1, #0
 8004326:	00d9      	lsls	r1, r3, #3
 8004328:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800432c:	00d0      	lsls	r0, r2, #3
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	1912      	adds	r2, r2, r4
 8004334:	eb45 0303 	adc.w	r3, r5, r3
 8004338:	f04f 0000 	mov.w	r0, #0
 800433c:	f04f 0100 	mov.w	r1, #0
 8004340:	0299      	lsls	r1, r3, #10
 8004342:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004346:	0290      	lsls	r0, r2, #10
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	461a      	mov	r2, r3
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	f7fc fc96 	bl	8000c88 <__aeabi_uldivmod>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4613      	mov	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	3301      	adds	r3, #1
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	60bb      	str	r3, [r7, #8]
      break;
 800437e:	e002      	b.n	8004386 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004380:	4b05      	ldr	r3, [pc, #20]	; (8004398 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004382:	60bb      	str	r3, [r7, #8]
      break;
 8004384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004386:	68bb      	ldr	r3, [r7, #8]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800
 8004398:	00f42400 	.word	0x00f42400
 800439c:	007a1200 	.word	0x007a1200

080043a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	2000001c 	.word	0x2000001c

080043b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043bc:	f7ff fff0 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043c0:	4602      	mov	r2, r0
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	4903      	ldr	r1, [pc, #12]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ce:	5ccb      	ldrb	r3, [r1, r3]
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40023800 	.word	0x40023800
 80043dc:	08009890 	.word	0x08009890

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e4:	f7ff ffdc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	0b5b      	lsrs	r3, r3, #13
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	4903      	ldr	r1, [pc, #12]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40023800 	.word	0x40023800
 8004404:	08009890 	.word	0x08009890

08004408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d012      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004430:	4b69      	ldr	r3, [pc, #420]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a68      	ldr	r2, [pc, #416]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800443a:	6093      	str	r3, [r2, #8]
 800443c:	4b66      	ldr	r3, [pc, #408]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004444:	4964      	ldr	r1, [pc, #400]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d017      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004462:	4b5d      	ldr	r3, [pc, #372]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	4959      	ldr	r1, [pc, #356]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004480:	d101      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800448e:	2301      	movs	r3, #1
 8004490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d017      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800449e:	4b4e      	ldr	r3, [pc, #312]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	494a      	ldr	r1, [pc, #296]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044bc:	d101      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044ca:	2301      	movs	r3, #1
 80044cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 808b 	beq.w	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ec:	4b3a      	ldr	r3, [pc, #232]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	4a39      	ldr	r2, [pc, #228]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f6:	6413      	str	r3, [r2, #64]	; 0x40
 80044f8:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004500:	60bb      	str	r3, [r7, #8]
 8004502:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a34      	ldr	r2, [pc, #208]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800450a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800450e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004510:	f7fd fd7a 	bl	8002008 <HAL_GetTick>
 8004514:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004516:	e008      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004518:	f7fd fd76 	bl	8002008 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e357      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800452a:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004536:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d035      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d02e      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004554:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455e:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a1a      	ldr	r2, [pc, #104]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004574:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800457c:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b01      	cmp	r3, #1
 8004586:	d114      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fd3e 	bl	8002008 <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	e00a      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004590:	f7fd fd3a 	bl	8002008 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	f241 3288 	movw	r2, #5000	; 0x1388
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e319      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0ee      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045be:	d111      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045ce:	400b      	ands	r3, r1
 80045d0:	4901      	ldr	r1, [pc, #4]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
 80045d6:	e00b      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	0ffffcff 	.word	0x0ffffcff
 80045e4:	4bb1      	ldr	r3, [pc, #708]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	4ab0      	ldr	r2, [pc, #704]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045ee:	6093      	str	r3, [r2, #8]
 80045f0:	4bae      	ldr	r3, [pc, #696]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fc:	49ab      	ldr	r1, [pc, #684]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	d010      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800460e:	4ba7      	ldr	r3, [pc, #668]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004614:	4aa5      	ldr	r2, [pc, #660]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800461e:	4ba3      	ldr	r3, [pc, #652]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004620:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	49a0      	ldr	r1, [pc, #640]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800463c:	4b9b      	ldr	r3, [pc, #620]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800464a:	4998      	ldr	r1, [pc, #608]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800465e:	4b93      	ldr	r3, [pc, #588]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800466c:	498f      	ldr	r1, [pc, #572]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004680:	4b8a      	ldr	r3, [pc, #552]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468e:	4987      	ldr	r1, [pc, #540]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046a2:	4b82      	ldr	r3, [pc, #520]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	497e      	ldr	r1, [pc, #504]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046c4:	4b79      	ldr	r3, [pc, #484]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f023 0203 	bic.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	4976      	ldr	r1, [pc, #472]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046e6:	4b71      	ldr	r3, [pc, #452]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f023 020c 	bic.w	r2, r3, #12
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f4:	496d      	ldr	r1, [pc, #436]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004708:	4b68      	ldr	r3, [pc, #416]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004716:	4965      	ldr	r1, [pc, #404]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800472a:	4b60      	ldr	r3, [pc, #384]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004738:	495c      	ldr	r1, [pc, #368]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800474c:	4b57      	ldr	r3, [pc, #348]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	4954      	ldr	r1, [pc, #336]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800476e:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477c:	494b      	ldr	r1, [pc, #300]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004790:	4b46      	ldr	r3, [pc, #280]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	4943      	ldr	r1, [pc, #268]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80047b2:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	493a      	ldr	r1, [pc, #232]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047e2:	4932      	ldr	r1, [pc, #200]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d011      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047f6:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004804:	4929      	ldr	r1, [pc, #164]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004816:	2301      	movs	r3, #1
 8004818:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004844:	4919      	ldr	r1, [pc, #100]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004868:	4910      	ldr	r1, [pc, #64]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d006      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 80d9 	beq.w	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800488a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800488e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004890:	f7fd fbba 	bl	8002008 <HAL_GetTick>
 8004894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004896:	e00b      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004898:	f7fd fbb6 	bl	8002008 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b64      	cmp	r3, #100	; 0x64
 80048a4:	d904      	bls.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e197      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048b0:	4b6c      	ldr	r3, [pc, #432]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ed      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d021      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d11d      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048d0:	4b64      	ldr	r3, [pc, #400]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	f003 0303 	and.w	r3, r3, #3
 80048dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048de:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e4:	0e1b      	lsrs	r3, r3, #24
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	019a      	lsls	r2, r3, #6
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	061b      	lsls	r3, r3, #24
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	071b      	lsls	r3, r3, #28
 8004904:	4957      	ldr	r1, [pc, #348]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800492a:	2b00      	cmp	r3, #0
 800492c:	d02e      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004936:	d129      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004938:	4b4a      	ldr	r3, [pc, #296]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493e:	0c1b      	lsrs	r3, r3, #16
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004946:	4b47      	ldr	r3, [pc, #284]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494c:	0f1b      	lsrs	r3, r3, #28
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	019a      	lsls	r2, r3, #6
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	431a      	orrs	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	071b      	lsls	r3, r3, #28
 800496c:	493d      	ldr	r1, [pc, #244]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004974:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800497a:	f023 021f 	bic.w	r2, r3, #31
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	3b01      	subs	r3, #1
 8004984:	4937      	ldr	r1, [pc, #220]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01d      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004998:	4b32      	ldr	r3, [pc, #200]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499e:	0e1b      	lsrs	r3, r3, #24
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ac:	0f1b      	lsrs	r3, r3, #28
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	019a      	lsls	r2, r3, #6
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	431a      	orrs	r2, r3
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	061b      	lsls	r3, r3, #24
 80049c6:	431a      	orrs	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	071b      	lsls	r3, r3, #28
 80049cc:	4925      	ldr	r1, [pc, #148]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d011      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	019a      	lsls	r2, r3, #6
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	061b      	lsls	r3, r3, #24
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	071b      	lsls	r3, r3, #28
 80049fc:	4919      	ldr	r1, [pc, #100]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a04:	4b17      	ldr	r3, [pc, #92]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a16      	ldr	r2, [pc, #88]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fd fafa 	bl	8002008 <HAL_GetTick>
 8004a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a18:	f7fd faf6 	bl	8002008 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e0d7      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	f040 80cd 	bne.w	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4a:	f7fd fadd 	bl	8002008 <HAL_GetTick>
 8004a4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a50:	e00a      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a52:	f7fd fad9 	bl	8002008 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b64      	cmp	r3, #100	; 0x64
 8004a5e:	d903      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0ba      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a68:	4b5e      	ldr	r3, [pc, #376]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a74:	d0ed      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d009      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d02e      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d12a      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a9e:	4b51      	ldr	r3, [pc, #324]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004aac:	4b4d      	ldr	r3, [pc, #308]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	0f1b      	lsrs	r3, r3, #28
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	019a      	lsls	r2, r3, #6
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	061b      	lsls	r3, r3, #24
 8004acc:	431a      	orrs	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	071b      	lsls	r3, r3, #28
 8004ad2:	4944      	ldr	r1, [pc, #272]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ada:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	493d      	ldr	r1, [pc, #244]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d022      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b08:	d11d      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	0e1b      	lsrs	r3, r3, #24
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b18:	4b32      	ldr	r3, [pc, #200]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	0f1b      	lsrs	r3, r3, #28
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	019a      	lsls	r2, r3, #6
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	431a      	orrs	r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	071b      	lsls	r3, r3, #28
 8004b3e:	4929      	ldr	r1, [pc, #164]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d028      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b52:	4b24      	ldr	r3, [pc, #144]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	0e1b      	lsrs	r3, r3, #24
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b60:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	019a      	lsls	r2, r3, #6
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	041b      	lsls	r3, r3, #16
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	071b      	lsls	r3, r3, #28
 8004b86:	4917      	ldr	r1, [pc, #92]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b8e:	4b15      	ldr	r3, [pc, #84]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4911      	ldr	r1, [pc, #68]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ba4:	4b0f      	ldr	r3, [pc, #60]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a0e      	ldr	r2, [pc, #56]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb0:	f7fd fa2a 	bl	8002008 <HAL_GetTick>
 8004bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004bb8:	f7fd fa26 	bl	8002008 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e007      	b.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bd6:	d1ef      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3720      	adds	r7, #32
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023800 	.word	0x40023800

08004be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e049      	b.n	8004c8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7fd f810 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f000 fd28 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d001      	beq.n	8004cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e054      	b.n	8004d5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d022      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d01d      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a22      	ldr	r2, [pc, #136]	; (8004d6c <HAL_TIM_Base_Start_IT+0xd4>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d018      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d013      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <HAL_TIM_Base_Start_IT+0xe4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x80>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d115      	bne.n	8004d44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	4b19      	ldr	r3, [pc, #100]	; (8004d84 <HAL_TIM_Base_Start_IT+0xec>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d015      	beq.n	8004d56 <HAL_TIM_Base_Start_IT+0xbe>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d30:	d011      	beq.n	8004d56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d42:	e008      	b.n	8004d56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e000      	b.n	8004d58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40000400 	.word	0x40000400
 8004d70:	40000800 	.word	0x40000800
 8004d74:	40000c00 	.word	0x40000c00
 8004d78:	40010400 	.word	0x40010400
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40001800 	.word	0x40001800
 8004d84:	00010007 	.word	0x00010007

08004d88 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e049      	b.n	8004e2e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f841 	bl	8004e36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fc58 	bl	800567c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d109      	bne.n	8004e70 <HAL_TIM_PWM_Start+0x24>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	e03c      	b.n	8004eea <HAL_TIM_PWM_Start+0x9e>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b04      	cmp	r3, #4
 8004e74:	d109      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x3e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	bf14      	ite	ne
 8004e82:	2301      	movne	r3, #1
 8004e84:	2300      	moveq	r3, #0
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	e02f      	b.n	8004eea <HAL_TIM_PWM_Start+0x9e>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d109      	bne.n	8004ea4 <HAL_TIM_PWM_Start+0x58>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e022      	b.n	8004eea <HAL_TIM_PWM_Start+0x9e>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d109      	bne.n	8004ebe <HAL_TIM_PWM_Start+0x72>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	e015      	b.n	8004eea <HAL_TIM_PWM_Start+0x9e>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b10      	cmp	r3, #16
 8004ec2:	d109      	bne.n	8004ed8 <HAL_TIM_PWM_Start+0x8c>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	bf14      	ite	ne
 8004ed0:	2301      	movne	r3, #1
 8004ed2:	2300      	moveq	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e008      	b.n	8004eea <HAL_TIM_PWM_Start+0x9e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e092      	b.n	8005018 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Start+0xb6>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f00:	e023      	b.n	8004f4a <HAL_TIM_PWM_Start+0xfe>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_PWM_Start+0xc6>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f10:	e01b      	b.n	8004f4a <HAL_TIM_PWM_Start+0xfe>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d104      	bne.n	8004f22 <HAL_TIM_PWM_Start+0xd6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f20:	e013      	b.n	8004f4a <HAL_TIM_PWM_Start+0xfe>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d104      	bne.n	8004f32 <HAL_TIM_PWM_Start+0xe6>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f30:	e00b      	b.n	8004f4a <HAL_TIM_PWM_Start+0xfe>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d104      	bne.n	8004f42 <HAL_TIM_PWM_Start+0xf6>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f40:	e003      	b.n	8004f4a <HAL_TIM_PWM_Start+0xfe>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 ff2a 	bl	8005dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a30      	ldr	r2, [pc, #192]	; (8005020 <HAL_TIM_PWM_Start+0x1d4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_TIM_PWM_Start+0x120>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a2f      	ldr	r2, [pc, #188]	; (8005024 <HAL_TIM_PWM_Start+0x1d8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIM_PWM_Start+0x124>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <HAL_TIM_PWM_Start+0x126>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a25      	ldr	r2, [pc, #148]	; (8005020 <HAL_TIM_PWM_Start+0x1d4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d022      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x18a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f98:	d01d      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x18a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a22      	ldr	r2, [pc, #136]	; (8005028 <HAL_TIM_PWM_Start+0x1dc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d018      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x18a>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a20      	ldr	r2, [pc, #128]	; (800502c <HAL_TIM_PWM_Start+0x1e0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x18a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <HAL_TIM_PWM_Start+0x1e4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00e      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x18a>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a19      	ldr	r2, [pc, #100]	; (8005024 <HAL_TIM_PWM_Start+0x1d8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x18a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <HAL_TIM_PWM_Start+0x1e8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d004      	beq.n	8004fd6 <HAL_TIM_PWM_Start+0x18a>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	; (8005038 <HAL_TIM_PWM_Start+0x1ec>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d115      	bne.n	8005002 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <HAL_TIM_PWM_Start+0x1f0>)
 8004fde:	4013      	ands	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b06      	cmp	r3, #6
 8004fe6:	d015      	beq.n	8005014 <HAL_TIM_PWM_Start+0x1c8>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fee:	d011      	beq.n	8005014 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005000:	e008      	b.n	8005014 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e000      	b.n	8005016 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40010000 	.word	0x40010000
 8005024:	40010400 	.word	0x40010400
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40014000 	.word	0x40014000
 8005038:	40001800 	.word	0x40001800
 800503c:	00010007 	.word	0x00010007

08005040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d122      	bne.n	800509c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d11b      	bne.n	800509c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f06f 0202 	mvn.w	r2, #2
 800506c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fadc 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 8005088:	e005      	b.n	8005096 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 face 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fadf 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d122      	bne.n	80050f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d11b      	bne.n	80050f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0204 	mvn.w	r2, #4
 80050c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fab2 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 faa4 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fab5 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d122      	bne.n	8005144 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d11b      	bne.n	8005144 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f06f 0208 	mvn.w	r2, #8
 8005114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2204      	movs	r2, #4
 800511a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fa88 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 8005130:	e005      	b.n	800513e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fa7a 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fa8b 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b10      	cmp	r3, #16
 8005150:	d122      	bne.n	8005198 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b10      	cmp	r3, #16
 800515e:	d11b      	bne.n	8005198 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0210 	mvn.w	r2, #16
 8005168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2208      	movs	r2, #8
 800516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa5e 	bl	8005640 <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa50 	bl	800562c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fa61 	bl	8005654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0201 	mvn.w	r2, #1
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fc fa04 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ce:	2b80      	cmp	r3, #128	; 0x80
 80051d0:	d10e      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d107      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fe9c 	bl	8005f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051fe:	d10e      	bne.n	800521e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520a:	2b80      	cmp	r3, #128	; 0x80
 800520c:	d107      	bne.n	800521e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fe8f 	bl	8005f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d10e      	bne.n	800524a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005236:	2b40      	cmp	r3, #64	; 0x40
 8005238:	d107      	bne.n	800524a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fa0f 	bl	8005668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b20      	cmp	r3, #32
 8005256:	d10e      	bne.n	8005276 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b20      	cmp	r3, #32
 8005264:	d107      	bne.n	8005276 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f06f 0220 	mvn.w	r2, #32
 800526e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fe4f 	bl	8005f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005296:	2302      	movs	r3, #2
 8005298:	e0fd      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x216>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b14      	cmp	r3, #20
 80052a6:	f200 80f0 	bhi.w	800548a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80052aa:	a201      	add	r2, pc, #4	; (adr r2, 80052b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	08005305 	.word	0x08005305
 80052b4:	0800548b 	.word	0x0800548b
 80052b8:	0800548b 	.word	0x0800548b
 80052bc:	0800548b 	.word	0x0800548b
 80052c0:	08005345 	.word	0x08005345
 80052c4:	0800548b 	.word	0x0800548b
 80052c8:	0800548b 	.word	0x0800548b
 80052cc:	0800548b 	.word	0x0800548b
 80052d0:	08005387 	.word	0x08005387
 80052d4:	0800548b 	.word	0x0800548b
 80052d8:	0800548b 	.word	0x0800548b
 80052dc:	0800548b 	.word	0x0800548b
 80052e0:	080053c7 	.word	0x080053c7
 80052e4:	0800548b 	.word	0x0800548b
 80052e8:	0800548b 	.word	0x0800548b
 80052ec:	0800548b 	.word	0x0800548b
 80052f0:	08005409 	.word	0x08005409
 80052f4:	0800548b 	.word	0x0800548b
 80052f8:	0800548b 	.word	0x0800548b
 80052fc:	0800548b 	.word	0x0800548b
 8005300:	08005449 	.word	0x08005449
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68b9      	ldr	r1, [r7, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fa56 	bl	80057bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0208 	orr.w	r2, r2, #8
 800531e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0204 	bic.w	r2, r2, #4
 800532e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6999      	ldr	r1, [r3, #24]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	619a      	str	r2, [r3, #24]
      break;
 8005342:	e0a3      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 faa8 	bl	80058a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800535e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800536e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6999      	ldr	r1, [r3, #24]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	021a      	lsls	r2, r3, #8
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	619a      	str	r2, [r3, #24]
      break;
 8005384:	e082      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68b9      	ldr	r1, [r7, #8]
 800538c:	4618      	mov	r0, r3
 800538e:	f000 faff 	bl	8005990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69da      	ldr	r2, [r3, #28]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0208 	orr.w	r2, r2, #8
 80053a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0204 	bic.w	r2, r2, #4
 80053b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69d9      	ldr	r1, [r3, #28]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	61da      	str	r2, [r3, #28]
      break;
 80053c4:	e062      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fb55 	bl	8005a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69d9      	ldr	r1, [r3, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	021a      	lsls	r2, r3, #8
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	61da      	str	r2, [r3, #28]
      break;
 8005406:	e041      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fb8c 	bl	8005b2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005446:	e021      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fbbe 	bl	8005bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005462:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005488:	e000      	b.n	800548c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800548a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop

080054a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_ConfigClockSource+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0b3      	b.n	8005620 <HAL_TIM_ConfigClockSource+0x180>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4b55      	ldr	r3, [pc, #340]	; (8005628 <HAL_TIM_ConfigClockSource+0x188>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d03e      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0xd0>
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	f200 8087 	bhi.w	8005608 <HAL_TIM_ConfigClockSource+0x168>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	f000 8085 	beq.w	800560c <HAL_TIM_ConfigClockSource+0x16c>
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d87f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005508:	2b70      	cmp	r3, #112	; 0x70
 800550a:	d01a      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xa2>
 800550c:	2b70      	cmp	r3, #112	; 0x70
 800550e:	d87b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005510:	2b60      	cmp	r3, #96	; 0x60
 8005512:	d050      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x116>
 8005514:	2b60      	cmp	r3, #96	; 0x60
 8005516:	d877      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005518:	2b50      	cmp	r3, #80	; 0x50
 800551a:	d03c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xf6>
 800551c:	2b50      	cmp	r3, #80	; 0x50
 800551e:	d873      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d058      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x136>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d86f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d064      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d86b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d060      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d867      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d05c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d05a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005540:	e062      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f000 fc0b 	bl	8005d6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005564:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	609a      	str	r2, [r3, #8]
      break;
 800556e:	e04e      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f000 fbf4 	bl	8005d6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005592:	609a      	str	r2, [r3, #8]
      break;
 8005594:	e03b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f000 fb68 	bl	8005c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2150      	movs	r1, #80	; 0x50
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fbc1 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 80055b4:	e02b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f000 fb87 	bl	8005cd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2160      	movs	r1, #96	; 0x60
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fbb1 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 80055d4:	e01b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	461a      	mov	r2, r3
 80055e4:	f000 fb48 	bl	8005c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fba1 	bl	8005d36 <TIM_ITRx_SetConfig>
      break;
 80055f4:	e00b      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f000 fb98 	bl	8005d36 <TIM_ITRx_SetConfig>
        break;
 8005606:	e002      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800560c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	fffeff88 	.word	0xfffeff88

0800562c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a40      	ldr	r2, [pc, #256]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d013      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569a:	d00f      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d00b      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3c      	ldr	r2, [pc, #240]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d007      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3b      	ldr	r2, [pc, #236]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a3a      	ldr	r2, [pc, #232]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d108      	bne.n	80056ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2f      	ldr	r2, [pc, #188]	; (8005790 <TIM_Base_SetConfig+0x114>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d02b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056dc:	d027      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_Base_SetConfig+0x118>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d023      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_Base_SetConfig+0x11c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_Base_SetConfig+0x120>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d01b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d017      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <TIM_Base_SetConfig+0x128>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a26      	ldr	r2, [pc, #152]	; (80057ac <TIM_Base_SetConfig+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a25      	ldr	r2, [pc, #148]	; (80057b0 <TIM_Base_SetConfig+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <TIM_Base_SetConfig+0x138>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <TIM_Base_SetConfig+0x13c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d108      	bne.n	8005740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <TIM_Base_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0xf8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <TIM_Base_SetConfig+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d103      	bne.n	800577c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	615a      	str	r2, [r3, #20]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40014400 	.word	0x40014400
 80057ac:	40014800 	.word	0x40014800
 80057b0:	40001800 	.word	0x40001800
 80057b4:	40001c00 	.word	0x40001c00
 80057b8:	40002000 	.word	0x40002000

080057bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <TIM_OC1_SetConfig+0xd8>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f023 0303 	bic.w	r3, r3, #3
 80057f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f023 0302 	bic.w	r3, r3, #2
 8005804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a21      	ldr	r2, [pc, #132]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d003      	beq.n	8005820 <TIM_OC1_SetConfig+0x64>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a20      	ldr	r2, [pc, #128]	; (800589c <TIM_OC1_SetConfig+0xe0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d10c      	bne.n	800583a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0308 	bic.w	r3, r3, #8
 8005826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a16      	ldr	r2, [pc, #88]	; (8005898 <TIM_OC1_SetConfig+0xdc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d003      	beq.n	800584a <TIM_OC1_SetConfig+0x8e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a15      	ldr	r2, [pc, #84]	; (800589c <TIM_OC1_SetConfig+0xe0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d111      	bne.n	800586e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	fffeff8f 	.word	0xfffeff8f
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400

080058a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0210 	bic.w	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4b2e      	ldr	r3, [pc, #184]	; (8005984 <TIM_OC2_SetConfig+0xe4>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0320 	bic.w	r3, r3, #32
 80058ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a23      	ldr	r2, [pc, #140]	; (8005988 <TIM_OC2_SetConfig+0xe8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_OC2_SetConfig+0x68>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a22      	ldr	r2, [pc, #136]	; (800598c <TIM_OC2_SetConfig+0xec>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d10d      	bne.n	8005924 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a18      	ldr	r2, [pc, #96]	; (8005988 <TIM_OC2_SetConfig+0xe8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC2_SetConfig+0x94>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <TIM_OC2_SetConfig+0xec>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d113      	bne.n	800595c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	feff8fff 	.word	0xfeff8fff
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400

08005990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <TIM_OC3_SetConfig+0xe0>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	021b      	lsls	r3, r3, #8
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a22      	ldr	r2, [pc, #136]	; (8005a74 <TIM_OC3_SetConfig+0xe4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC3_SetConfig+0x66>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a21      	ldr	r2, [pc, #132]	; (8005a78 <TIM_OC3_SetConfig+0xe8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d10d      	bne.n	8005a12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a17      	ldr	r2, [pc, #92]	; (8005a74 <TIM_OC3_SetConfig+0xe4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d003      	beq.n	8005a22 <TIM_OC3_SetConfig+0x92>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a16      	ldr	r2, [pc, #88]	; (8005a78 <TIM_OC3_SetConfig+0xe8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d113      	bne.n	8005a4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	621a      	str	r2, [r3, #32]
}
 8005a64:	bf00      	nop
 8005a66:	371c      	adds	r7, #28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	fffeff8f 	.word	0xfffeff8f
 8005a74:	40010000 	.word	0x40010000
 8005a78:	40010400 	.word	0x40010400

08005a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <TIM_OC4_SetConfig+0xa4>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a13      	ldr	r2, [pc, #76]	; (8005b24 <TIM_OC4_SetConfig+0xa8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_OC4_SetConfig+0x68>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a12      	ldr	r2, [pc, #72]	; (8005b28 <TIM_OC4_SetConfig+0xac>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d109      	bne.n	8005af8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	019b      	lsls	r3, r3, #6
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	feff8fff 	.word	0xfeff8fff
 8005b24:	40010000 	.word	0x40010000
 8005b28:	40010400 	.word	0x40010400

08005b2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <TIM_OC5_SetConfig+0x98>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	041b      	lsls	r3, r3, #16
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a12      	ldr	r2, [pc, #72]	; (8005bc8 <TIM_OC5_SetConfig+0x9c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_OC5_SetConfig+0x5e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <TIM_OC5_SetConfig+0xa0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d109      	bne.n	8005b9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	621a      	str	r2, [r3, #32]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	fffeff8f 	.word	0xfffeff8f
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <TIM_OC6_SetConfig+0x9c>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	051b      	lsls	r3, r3, #20
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a13      	ldr	r2, [pc, #76]	; (8005c70 <TIM_OC6_SetConfig+0xa0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_OC6_SetConfig+0x60>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <TIM_OC6_SetConfig+0xa4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d109      	bne.n	8005c44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	029b      	lsls	r3, r3, #10
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	621a      	str	r2, [r3, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	feff8fff 	.word	0xfeff8fff
 8005c70:	40010000 	.word	0x40010000
 8005c74:	40010400 	.word	0x40010400

08005c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0201 	bic.w	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f023 030a 	bic.w	r3, r3, #10
 8005cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b087      	sub	sp, #28
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f023 0210 	bic.w	r2, r3, #16
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	031b      	lsls	r3, r3, #12
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	621a      	str	r2, [r3, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	371c      	adds	r7, #28
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b085      	sub	sp, #20
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f043 0307 	orr.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	401a      	ands	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e06d      	b.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a30      	ldr	r2, [pc, #192]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a2f      	ldr	r2, [pc, #188]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d108      	bne.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a20      	ldr	r2, [pc, #128]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d022      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e82:	d01d      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d018      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1c      	ldr	r2, [pc, #112]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1a      	ldr	r2, [pc, #104]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00e      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d009      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a16      	ldr	r2, [pc, #88]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a15      	ldr	r2, [pc, #84]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10c      	bne.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	40010400 	.word	0x40010400
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40014000 	.word	0x40014000
 8005f10:	40001800 	.word	0x40001800

08005f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e040      	b.n	8005fe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb ff00 	bl	8001d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2224      	movs	r2, #36	; 0x24
 8005f7c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8c0 	bl	8006114 <UART_SetConfig>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e022      	b.n	8005fe4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fb16 	bl	80065d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb9d 	bl	800671c <UART_CheckIdleState>
 8005fe2:	4603      	mov	r3, r0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08a      	sub	sp, #40	; 0x28
 8005ff0:	af02      	add	r7, sp, #8
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006000:	2b20      	cmp	r3, #32
 8006002:	f040 8081 	bne.w	8006108 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_UART_Transmit+0x26>
 800600c:	88fb      	ldrh	r3, [r7, #6]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e079      	b.n	800610a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_UART_Transmit+0x38>
 8006020:	2302      	movs	r3, #2
 8006022:	e072      	b.n	800610a <HAL_UART_Transmit+0x11e>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2221      	movs	r2, #33	; 0x21
 8006038:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800603a:	f7fb ffe5 	bl	8002008 <HAL_GetTick>
 800603e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	88fa      	ldrh	r2, [r7, #6]
 800604c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006058:	d108      	bne.n	800606c <HAL_UART_Transmit+0x80>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d104      	bne.n	800606c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	e003      	b.n	8006074 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800607c:	e02c      	b.n	80060d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2200      	movs	r2, #0
 8006086:	2180      	movs	r1, #128	; 0x80
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 fb7a 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e038      	b.n	800610a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	461a      	mov	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	3302      	adds	r3, #2
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	e007      	b.n	80060c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	781a      	ldrb	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1cc      	bne.n	800607e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2200      	movs	r2, #0
 80060ec:	2140      	movs	r1, #64	; 0x40
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fb47 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e005      	b.n	800610a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e000      	b.n	800610a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	4ba7      	ldr	r3, [pc, #668]	; (80063dc <UART_SetConfig+0x2c8>)
 8006140:	4013      	ands	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	6979      	ldr	r1, [r7, #20]
 8006148:	430b      	orrs	r3, r1
 800614a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	430a      	orrs	r2, r1
 8006160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	430a      	orrs	r2, r1
 8006184:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a95      	ldr	r2, [pc, #596]	; (80063e0 <UART_SetConfig+0x2cc>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d120      	bne.n	80061d2 <UART_SetConfig+0xbe>
 8006190:	4b94      	ldr	r3, [pc, #592]	; (80063e4 <UART_SetConfig+0x2d0>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b03      	cmp	r3, #3
 800619c:	d816      	bhi.n	80061cc <UART_SetConfig+0xb8>
 800619e:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <UART_SetConfig+0x90>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061c1 	.word	0x080061c1
 80061ac:	080061bb 	.word	0x080061bb
 80061b0:	080061c7 	.word	0x080061c7
 80061b4:	2301      	movs	r3, #1
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e14f      	b.n	800645a <UART_SetConfig+0x346>
 80061ba:	2302      	movs	r3, #2
 80061bc:	77fb      	strb	r3, [r7, #31]
 80061be:	e14c      	b.n	800645a <UART_SetConfig+0x346>
 80061c0:	2304      	movs	r3, #4
 80061c2:	77fb      	strb	r3, [r7, #31]
 80061c4:	e149      	b.n	800645a <UART_SetConfig+0x346>
 80061c6:	2308      	movs	r3, #8
 80061c8:	77fb      	strb	r3, [r7, #31]
 80061ca:	e146      	b.n	800645a <UART_SetConfig+0x346>
 80061cc:	2310      	movs	r3, #16
 80061ce:	77fb      	strb	r3, [r7, #31]
 80061d0:	e143      	b.n	800645a <UART_SetConfig+0x346>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a84      	ldr	r2, [pc, #528]	; (80063e8 <UART_SetConfig+0x2d4>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d132      	bne.n	8006242 <UART_SetConfig+0x12e>
 80061dc:	4b81      	ldr	r3, [pc, #516]	; (80063e4 <UART_SetConfig+0x2d0>)
 80061de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e2:	f003 030c 	and.w	r3, r3, #12
 80061e6:	2b0c      	cmp	r3, #12
 80061e8:	d828      	bhi.n	800623c <UART_SetConfig+0x128>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <UART_SetConfig+0xdc>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	08006225 	.word	0x08006225
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	0800623d 	.word	0x0800623d
 80061fc:	0800623d 	.word	0x0800623d
 8006200:	08006231 	.word	0x08006231
 8006204:	0800623d 	.word	0x0800623d
 8006208:	0800623d 	.word	0x0800623d
 800620c:	0800623d 	.word	0x0800623d
 8006210:	0800622b 	.word	0x0800622b
 8006214:	0800623d 	.word	0x0800623d
 8006218:	0800623d 	.word	0x0800623d
 800621c:	0800623d 	.word	0x0800623d
 8006220:	08006237 	.word	0x08006237
 8006224:	2300      	movs	r3, #0
 8006226:	77fb      	strb	r3, [r7, #31]
 8006228:	e117      	b.n	800645a <UART_SetConfig+0x346>
 800622a:	2302      	movs	r3, #2
 800622c:	77fb      	strb	r3, [r7, #31]
 800622e:	e114      	b.n	800645a <UART_SetConfig+0x346>
 8006230:	2304      	movs	r3, #4
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e111      	b.n	800645a <UART_SetConfig+0x346>
 8006236:	2308      	movs	r3, #8
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e10e      	b.n	800645a <UART_SetConfig+0x346>
 800623c:	2310      	movs	r3, #16
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e10b      	b.n	800645a <UART_SetConfig+0x346>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a69      	ldr	r2, [pc, #420]	; (80063ec <UART_SetConfig+0x2d8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d120      	bne.n	800628e <UART_SetConfig+0x17a>
 800624c:	4b65      	ldr	r3, [pc, #404]	; (80063e4 <UART_SetConfig+0x2d0>)
 800624e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006252:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	d013      	beq.n	8006282 <UART_SetConfig+0x16e>
 800625a:	2b30      	cmp	r3, #48	; 0x30
 800625c:	d814      	bhi.n	8006288 <UART_SetConfig+0x174>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d009      	beq.n	8006276 <UART_SetConfig+0x162>
 8006262:	2b20      	cmp	r3, #32
 8006264:	d810      	bhi.n	8006288 <UART_SetConfig+0x174>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <UART_SetConfig+0x15c>
 800626a:	2b10      	cmp	r3, #16
 800626c:	d006      	beq.n	800627c <UART_SetConfig+0x168>
 800626e:	e00b      	b.n	8006288 <UART_SetConfig+0x174>
 8006270:	2300      	movs	r3, #0
 8006272:	77fb      	strb	r3, [r7, #31]
 8006274:	e0f1      	b.n	800645a <UART_SetConfig+0x346>
 8006276:	2302      	movs	r3, #2
 8006278:	77fb      	strb	r3, [r7, #31]
 800627a:	e0ee      	b.n	800645a <UART_SetConfig+0x346>
 800627c:	2304      	movs	r3, #4
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e0eb      	b.n	800645a <UART_SetConfig+0x346>
 8006282:	2308      	movs	r3, #8
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e0e8      	b.n	800645a <UART_SetConfig+0x346>
 8006288:	2310      	movs	r3, #16
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e0e5      	b.n	800645a <UART_SetConfig+0x346>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a57      	ldr	r2, [pc, #348]	; (80063f0 <UART_SetConfig+0x2dc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d120      	bne.n	80062da <UART_SetConfig+0x1c6>
 8006298:	4b52      	ldr	r3, [pc, #328]	; (80063e4 <UART_SetConfig+0x2d0>)
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062a2:	2bc0      	cmp	r3, #192	; 0xc0
 80062a4:	d013      	beq.n	80062ce <UART_SetConfig+0x1ba>
 80062a6:	2bc0      	cmp	r3, #192	; 0xc0
 80062a8:	d814      	bhi.n	80062d4 <UART_SetConfig+0x1c0>
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d009      	beq.n	80062c2 <UART_SetConfig+0x1ae>
 80062ae:	2b80      	cmp	r3, #128	; 0x80
 80062b0:	d810      	bhi.n	80062d4 <UART_SetConfig+0x1c0>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <UART_SetConfig+0x1a8>
 80062b6:	2b40      	cmp	r3, #64	; 0x40
 80062b8:	d006      	beq.n	80062c8 <UART_SetConfig+0x1b4>
 80062ba:	e00b      	b.n	80062d4 <UART_SetConfig+0x1c0>
 80062bc:	2300      	movs	r3, #0
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e0cb      	b.n	800645a <UART_SetConfig+0x346>
 80062c2:	2302      	movs	r3, #2
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e0c8      	b.n	800645a <UART_SetConfig+0x346>
 80062c8:	2304      	movs	r3, #4
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e0c5      	b.n	800645a <UART_SetConfig+0x346>
 80062ce:	2308      	movs	r3, #8
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e0c2      	b.n	800645a <UART_SetConfig+0x346>
 80062d4:	2310      	movs	r3, #16
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e0bf      	b.n	800645a <UART_SetConfig+0x346>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a45      	ldr	r2, [pc, #276]	; (80063f4 <UART_SetConfig+0x2e0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d125      	bne.n	8006330 <UART_SetConfig+0x21c>
 80062e4:	4b3f      	ldr	r3, [pc, #252]	; (80063e4 <UART_SetConfig+0x2d0>)
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f2:	d017      	beq.n	8006324 <UART_SetConfig+0x210>
 80062f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f8:	d817      	bhi.n	800632a <UART_SetConfig+0x216>
 80062fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fe:	d00b      	beq.n	8006318 <UART_SetConfig+0x204>
 8006300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006304:	d811      	bhi.n	800632a <UART_SetConfig+0x216>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <UART_SetConfig+0x1fe>
 800630a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800630e:	d006      	beq.n	800631e <UART_SetConfig+0x20a>
 8006310:	e00b      	b.n	800632a <UART_SetConfig+0x216>
 8006312:	2300      	movs	r3, #0
 8006314:	77fb      	strb	r3, [r7, #31]
 8006316:	e0a0      	b.n	800645a <UART_SetConfig+0x346>
 8006318:	2302      	movs	r3, #2
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e09d      	b.n	800645a <UART_SetConfig+0x346>
 800631e:	2304      	movs	r3, #4
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e09a      	b.n	800645a <UART_SetConfig+0x346>
 8006324:	2308      	movs	r3, #8
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e097      	b.n	800645a <UART_SetConfig+0x346>
 800632a:	2310      	movs	r3, #16
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e094      	b.n	800645a <UART_SetConfig+0x346>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a30      	ldr	r2, [pc, #192]	; (80063f8 <UART_SetConfig+0x2e4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d125      	bne.n	8006386 <UART_SetConfig+0x272>
 800633a:	4b2a      	ldr	r3, [pc, #168]	; (80063e4 <UART_SetConfig+0x2d0>)
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006340:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006344:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006348:	d017      	beq.n	800637a <UART_SetConfig+0x266>
 800634a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800634e:	d817      	bhi.n	8006380 <UART_SetConfig+0x26c>
 8006350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006354:	d00b      	beq.n	800636e <UART_SetConfig+0x25a>
 8006356:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635a:	d811      	bhi.n	8006380 <UART_SetConfig+0x26c>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <UART_SetConfig+0x254>
 8006360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006364:	d006      	beq.n	8006374 <UART_SetConfig+0x260>
 8006366:	e00b      	b.n	8006380 <UART_SetConfig+0x26c>
 8006368:	2301      	movs	r3, #1
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e075      	b.n	800645a <UART_SetConfig+0x346>
 800636e:	2302      	movs	r3, #2
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e072      	b.n	800645a <UART_SetConfig+0x346>
 8006374:	2304      	movs	r3, #4
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e06f      	b.n	800645a <UART_SetConfig+0x346>
 800637a:	2308      	movs	r3, #8
 800637c:	77fb      	strb	r3, [r7, #31]
 800637e:	e06c      	b.n	800645a <UART_SetConfig+0x346>
 8006380:	2310      	movs	r3, #16
 8006382:	77fb      	strb	r3, [r7, #31]
 8006384:	e069      	b.n	800645a <UART_SetConfig+0x346>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <UART_SetConfig+0x2e8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d137      	bne.n	8006400 <UART_SetConfig+0x2ec>
 8006390:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <UART_SetConfig+0x2d0>)
 8006392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006396:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800639a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800639e:	d017      	beq.n	80063d0 <UART_SetConfig+0x2bc>
 80063a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063a4:	d817      	bhi.n	80063d6 <UART_SetConfig+0x2c2>
 80063a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063aa:	d00b      	beq.n	80063c4 <UART_SetConfig+0x2b0>
 80063ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063b0:	d811      	bhi.n	80063d6 <UART_SetConfig+0x2c2>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <UART_SetConfig+0x2aa>
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ba:	d006      	beq.n	80063ca <UART_SetConfig+0x2b6>
 80063bc:	e00b      	b.n	80063d6 <UART_SetConfig+0x2c2>
 80063be:	2300      	movs	r3, #0
 80063c0:	77fb      	strb	r3, [r7, #31]
 80063c2:	e04a      	b.n	800645a <UART_SetConfig+0x346>
 80063c4:	2302      	movs	r3, #2
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e047      	b.n	800645a <UART_SetConfig+0x346>
 80063ca:	2304      	movs	r3, #4
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e044      	b.n	800645a <UART_SetConfig+0x346>
 80063d0:	2308      	movs	r3, #8
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e041      	b.n	800645a <UART_SetConfig+0x346>
 80063d6:	2310      	movs	r3, #16
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e03e      	b.n	800645a <UART_SetConfig+0x346>
 80063dc:	efff69f3 	.word	0xefff69f3
 80063e0:	40011000 	.word	0x40011000
 80063e4:	40023800 	.word	0x40023800
 80063e8:	40004400 	.word	0x40004400
 80063ec:	40004800 	.word	0x40004800
 80063f0:	40004c00 	.word	0x40004c00
 80063f4:	40005000 	.word	0x40005000
 80063f8:	40011400 	.word	0x40011400
 80063fc:	40007800 	.word	0x40007800
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a71      	ldr	r2, [pc, #452]	; (80065cc <UART_SetConfig+0x4b8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d125      	bne.n	8006456 <UART_SetConfig+0x342>
 800640a:	4b71      	ldr	r3, [pc, #452]	; (80065d0 <UART_SetConfig+0x4bc>)
 800640c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006414:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006418:	d017      	beq.n	800644a <UART_SetConfig+0x336>
 800641a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800641e:	d817      	bhi.n	8006450 <UART_SetConfig+0x33c>
 8006420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006424:	d00b      	beq.n	800643e <UART_SetConfig+0x32a>
 8006426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642a:	d811      	bhi.n	8006450 <UART_SetConfig+0x33c>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <UART_SetConfig+0x324>
 8006430:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006434:	d006      	beq.n	8006444 <UART_SetConfig+0x330>
 8006436:	e00b      	b.n	8006450 <UART_SetConfig+0x33c>
 8006438:	2300      	movs	r3, #0
 800643a:	77fb      	strb	r3, [r7, #31]
 800643c:	e00d      	b.n	800645a <UART_SetConfig+0x346>
 800643e:	2302      	movs	r3, #2
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e00a      	b.n	800645a <UART_SetConfig+0x346>
 8006444:	2304      	movs	r3, #4
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e007      	b.n	800645a <UART_SetConfig+0x346>
 800644a:	2308      	movs	r3, #8
 800644c:	77fb      	strb	r3, [r7, #31]
 800644e:	e004      	b.n	800645a <UART_SetConfig+0x346>
 8006450:	2310      	movs	r3, #16
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e001      	b.n	800645a <UART_SetConfig+0x346>
 8006456:	2310      	movs	r3, #16
 8006458:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006462:	d15b      	bne.n	800651c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006464:	7ffb      	ldrb	r3, [r7, #31]
 8006466:	2b08      	cmp	r3, #8
 8006468:	d827      	bhi.n	80064ba <UART_SetConfig+0x3a6>
 800646a:	a201      	add	r2, pc, #4	; (adr r2, 8006470 <UART_SetConfig+0x35c>)
 800646c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006470:	08006495 	.word	0x08006495
 8006474:	0800649d 	.word	0x0800649d
 8006478:	080064a5 	.word	0x080064a5
 800647c:	080064bb 	.word	0x080064bb
 8006480:	080064ab 	.word	0x080064ab
 8006484:	080064bb 	.word	0x080064bb
 8006488:	080064bb 	.word	0x080064bb
 800648c:	080064bb 	.word	0x080064bb
 8006490:	080064b3 	.word	0x080064b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006494:	f7fd ff90 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8006498:	61b8      	str	r0, [r7, #24]
        break;
 800649a:	e013      	b.n	80064c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800649c:	f7fd ffa0 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 80064a0:	61b8      	str	r0, [r7, #24]
        break;
 80064a2:	e00f      	b.n	80064c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a4:	4b4b      	ldr	r3, [pc, #300]	; (80065d4 <UART_SetConfig+0x4c0>)
 80064a6:	61bb      	str	r3, [r7, #24]
        break;
 80064a8:	e00c      	b.n	80064c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064aa:	f7fd fe97 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 80064ae:	61b8      	str	r0, [r7, #24]
        break;
 80064b0:	e008      	b.n	80064c4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064b6:	61bb      	str	r3, [r7, #24]
        break;
 80064b8:	e004      	b.n	80064c4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	77bb      	strb	r3, [r7, #30]
        break;
 80064c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d074      	beq.n	80065b4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	005a      	lsls	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	441a      	add	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	fbb2 f3f3 	udiv	r3, r2, r3
 80064de:	b29b      	uxth	r3, r3
 80064e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b0f      	cmp	r3, #15
 80064e6:	d916      	bls.n	8006516 <UART_SetConfig+0x402>
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ee:	d212      	bcs.n	8006516 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f023 030f 	bic.w	r3, r3, #15
 80064f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	085b      	lsrs	r3, r3, #1
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	b29a      	uxth	r2, r3
 8006506:	89fb      	ldrh	r3, [r7, #14]
 8006508:	4313      	orrs	r3, r2
 800650a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	89fa      	ldrh	r2, [r7, #14]
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	e04e      	b.n	80065b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	77bb      	strb	r3, [r7, #30]
 800651a:	e04b      	b.n	80065b4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800651c:	7ffb      	ldrb	r3, [r7, #31]
 800651e:	2b08      	cmp	r3, #8
 8006520:	d827      	bhi.n	8006572 <UART_SetConfig+0x45e>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0x414>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006555 	.word	0x08006555
 8006530:	0800655d 	.word	0x0800655d
 8006534:	08006573 	.word	0x08006573
 8006538:	08006563 	.word	0x08006563
 800653c:	08006573 	.word	0x08006573
 8006540:	08006573 	.word	0x08006573
 8006544:	08006573 	.word	0x08006573
 8006548:	0800656b 	.word	0x0800656b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fd ff34 	bl	80043b8 <HAL_RCC_GetPCLK1Freq>
 8006550:	61b8      	str	r0, [r7, #24]
        break;
 8006552:	e013      	b.n	800657c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fd ff44 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8006558:	61b8      	str	r0, [r7, #24]
        break;
 800655a:	e00f      	b.n	800657c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <UART_SetConfig+0x4c0>)
 800655e:	61bb      	str	r3, [r7, #24]
        break;
 8006560:	e00c      	b.n	800657c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7fd fe3b 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 8006566:	61b8      	str	r0, [r7, #24]
        break;
 8006568:	e008      	b.n	800657c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	61bb      	str	r3, [r7, #24]
        break;
 8006570:	e004      	b.n	800657c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	77bb      	strb	r3, [r7, #30]
        break;
 800657a:	bf00      	nop
    }

    if (pclk != 0U)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	085a      	lsrs	r2, r3, #1
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	441a      	add	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	fbb2 f3f3 	udiv	r3, r2, r3
 8006594:	b29b      	uxth	r3, r3
 8006596:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b0f      	cmp	r3, #15
 800659c:	d908      	bls.n	80065b0 <UART_SetConfig+0x49c>
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a4:	d204      	bcs.n	80065b0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	e001      	b.n	80065b4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	40007c00 	.word	0x40007c00
 80065d0:	40023800 	.word	0x40023800
 80065d4:	00f42400 	.word	0x00f42400

080065d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	f003 0310 	and.w	r3, r3, #16
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00a      	beq.n	800668a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01a      	beq.n	80066ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d6:	d10a      	bne.n	80066ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af02      	add	r7, sp, #8
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800672c:	f7fb fc6c 	bl	8002008 <HAL_GetTick>
 8006730:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10e      	bne.n	800675e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006740:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f817 	bl	8006782 <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e00d      	b.n	800677a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	603b      	str	r3, [r7, #0]
 800678e:	4613      	mov	r3, r2
 8006790:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006792:	e05e      	b.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d05a      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679c:	f7fb fc34 	bl	8002008 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d11b      	bne.n	80067ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0201 	bic.w	r2, r2, #1
 80067d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2220      	movs	r2, #32
 80067dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e043      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02c      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	69db      	ldr	r3, [r3, #28]
 80067fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006806:	d124      	bne.n	8006852 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006810:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006820:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 0201 	bic.w	r2, r2, #1
 8006830:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2220      	movs	r2, #32
 8006836:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2220      	movs	r2, #32
 8006842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e00f      	b.n	8006872 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d091      	beq.n	8006794 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800687c:	b084      	sub	sp, #16
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	f107 001c 	add.w	r0, r7, #28
 800688a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2b01      	cmp	r3, #1
 8006892:	d120      	bne.n	80068d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	4b20      	ldr	r3, [pc, #128]	; (8006928 <USB_CoreInit+0xac>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d105      	bne.n	80068ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa5a 	bl	8006d84 <USB_CoreReset>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
 80068d4:	e010      	b.n	80068f8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa4e 	bl	8006d84 <USB_CoreReset>
 80068e8:	4603      	mov	r3, r0
 80068ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10b      	bne.n	8006916 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f043 0206 	orr.w	r2, r3, #6
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006922:	b004      	add	sp, #16
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	ffbdffbf 	.word	0xffbdffbf

0800692c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f023 0201 	bic.w	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d106      	bne.n	800697a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60da      	str	r2, [r3, #12]
 8006978:	e00b      	b.n	8006992 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]
 800698c:	e001      	b.n	8006992 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e003      	b.n	800699a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006992:	2032      	movs	r0, #50	; 0x32
 8006994:	f7fb fb44 	bl	8002020 <HAL_Delay>

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069a4:	b084      	sub	sp, #16
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b086      	sub	sp, #24
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	e009      	b.n	80069d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	3340      	adds	r3, #64	; 0x40
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	2200      	movs	r2, #0
 80069d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	3301      	adds	r3, #1
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b0e      	cmp	r3, #14
 80069dc:	d9f2      	bls.n	80069c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d11c      	bne.n	8006a1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f2:	f043 0302 	orr.w	r3, r3, #2
 80069f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e005      	b.n	8006a2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a30:	461a      	mov	r2, r3
 8006a32:	2300      	movs	r3, #0
 8006a34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a44:	461a      	mov	r2, r3
 8006a46:	680b      	ldr	r3, [r1, #0]
 8006a48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d10c      	bne.n	8006a6a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a56:	2100      	movs	r1, #0
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f959 	bl	8006d10 <USB_SetDevSpeed>
 8006a5e:	e018      	b.n	8006a92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a60:	2101      	movs	r1, #1
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f954 	bl	8006d10 <USB_SetDevSpeed>
 8006a68:	e013      	b.n	8006a92 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d10c      	bne.n	8006a8a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a76:	2100      	movs	r1, #0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f949 	bl	8006d10 <USB_SetDevSpeed>
 8006a7e:	e008      	b.n	8006a92 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a80:	2101      	movs	r1, #1
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f944 	bl	8006d10 <USB_SetDevSpeed>
 8006a88:	e003      	b.n	8006a92 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a8a:	2103      	movs	r1, #3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f93f 	bl	8006d10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a92:	2110      	movs	r1, #16
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f8f3 	bl	8006c80 <USB_FlushTxFifo>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f911 	bl	8006ccc <USB_FlushRxFifo>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aba:	461a      	mov	r2, r3
 8006abc:	2300      	movs	r3, #0
 8006abe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]
 8006adc:	e043      	b.n	8006b66 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af4:	d118      	bne.n	8006b28 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	461a      	mov	r2, r3
 8006b0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	e013      	b.n	8006b3a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	e008      	b.n	8006b3a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b34:	461a      	mov	r2, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	461a      	mov	r2, r3
 8006b48:	2300      	movs	r3, #0
 8006b4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b58:	461a      	mov	r2, r3
 8006b5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	3301      	adds	r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d3b7      	bcc.n	8006ade <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	e043      	b.n	8006bfc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b8a:	d118      	bne.n	8006bbe <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	e013      	b.n	8006bd0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	e008      	b.n	8006bd0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bca:	461a      	mov	r2, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bdc:	461a      	mov	r2, r3
 8006bde:	2300      	movs	r3, #0
 8006be0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	613b      	str	r3, [r7, #16]
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d3b7      	bcc.n	8006b74 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f043 0210 	orr.w	r2, r3, #16
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <USB_DevInit+0x2d4>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f043 0208 	orr.w	r2, r3, #8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d105      	bne.n	8006c68 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <USB_DevInit+0x2d8>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c74:	b004      	add	sp, #16
 8006c76:	4770      	bx	lr
 8006c78:	803c3800 	.word	0x803c3800
 8006c7c:	40000004 	.word	0x40000004

08006c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	019b      	lsls	r3, r3, #6
 8006c92:	f043 0220 	orr.w	r2, r3, #32
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <USB_FlushTxFifo+0x48>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e006      	b.n	8006cba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d0f0      	beq.n	8006c9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	00030d40 	.word	0x00030d40

08006ccc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2210      	movs	r2, #16
 8006cdc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a09      	ldr	r2, [pc, #36]	; (8006d0c <USB_FlushRxFifo+0x40>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d901      	bls.n	8006cf0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e006      	b.n	8006cfe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d0f0      	beq.n	8006cde <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3714      	adds	r7, #20
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	00030d40 	.word	0x00030d40

08006d10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	68f9      	ldr	r1, [r7, #12]
 8006d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d30:	4313      	orrs	r3, r2
 8006d32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d5c:	f023 0303 	bic.w	r3, r3, #3
 8006d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d70:	f043 0302 	orr.w	r3, r3, #2
 8006d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a13      	ldr	r2, [pc, #76]	; (8006de8 <USB_CoreReset+0x64>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e01b      	b.n	8006dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	daf2      	bge.n	8006d90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f043 0201 	orr.w	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <USB_CoreReset+0x64>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e006      	b.n	8006dda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d0f0      	beq.n	8006dba <USB_CoreReset+0x36>

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	00030d40 	.word	0x00030d40

08006dec <__errno>:
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <__errno+0x8>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000028 	.word	0x20000028

08006df8 <__libc_init_array>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	4d0d      	ldr	r5, [pc, #52]	; (8006e30 <__libc_init_array+0x38>)
 8006dfc:	4c0d      	ldr	r4, [pc, #52]	; (8006e34 <__libc_init_array+0x3c>)
 8006dfe:	1b64      	subs	r4, r4, r5
 8006e00:	10a4      	asrs	r4, r4, #2
 8006e02:	2600      	movs	r6, #0
 8006e04:	42a6      	cmp	r6, r4
 8006e06:	d109      	bne.n	8006e1c <__libc_init_array+0x24>
 8006e08:	4d0b      	ldr	r5, [pc, #44]	; (8006e38 <__libc_init_array+0x40>)
 8006e0a:	4c0c      	ldr	r4, [pc, #48]	; (8006e3c <__libc_init_array+0x44>)
 8006e0c:	f002 fd08 	bl	8009820 <_init>
 8006e10:	1b64      	subs	r4, r4, r5
 8006e12:	10a4      	asrs	r4, r4, #2
 8006e14:	2600      	movs	r6, #0
 8006e16:	42a6      	cmp	r6, r4
 8006e18:	d105      	bne.n	8006e26 <__libc_init_array+0x2e>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e20:	4798      	blx	r3
 8006e22:	3601      	adds	r6, #1
 8006e24:	e7ee      	b.n	8006e04 <__libc_init_array+0xc>
 8006e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e2a:	4798      	blx	r3
 8006e2c:	3601      	adds	r6, #1
 8006e2e:	e7f2      	b.n	8006e16 <__libc_init_array+0x1e>
 8006e30:	08009c84 	.word	0x08009c84
 8006e34:	08009c84 	.word	0x08009c84
 8006e38:	08009c84 	.word	0x08009c84
 8006e3c:	08009c88 	.word	0x08009c88

08006e40 <memset>:
 8006e40:	4402      	add	r2, r0
 8006e42:	4603      	mov	r3, r0
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d100      	bne.n	8006e4a <memset+0xa>
 8006e48:	4770      	bx	lr
 8006e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4e:	e7f9      	b.n	8006e44 <memset+0x4>

08006e50 <__cvt>:
 8006e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e54:	ec55 4b10 	vmov	r4, r5, d0
 8006e58:	2d00      	cmp	r5, #0
 8006e5a:	460e      	mov	r6, r1
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	462b      	mov	r3, r5
 8006e60:	bfbb      	ittet	lt
 8006e62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e66:	461d      	movlt	r5, r3
 8006e68:	2300      	movge	r3, #0
 8006e6a:	232d      	movlt	r3, #45	; 0x2d
 8006e6c:	700b      	strb	r3, [r1, #0]
 8006e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e74:	4691      	mov	r9, r2
 8006e76:	f023 0820 	bic.w	r8, r3, #32
 8006e7a:	bfbc      	itt	lt
 8006e7c:	4622      	movlt	r2, r4
 8006e7e:	4614      	movlt	r4, r2
 8006e80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e84:	d005      	beq.n	8006e92 <__cvt+0x42>
 8006e86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e8a:	d100      	bne.n	8006e8e <__cvt+0x3e>
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	2102      	movs	r1, #2
 8006e90:	e000      	b.n	8006e94 <__cvt+0x44>
 8006e92:	2103      	movs	r1, #3
 8006e94:	ab03      	add	r3, sp, #12
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	ab02      	add	r3, sp, #8
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	ec45 4b10 	vmov	d0, r4, r5
 8006ea0:	4653      	mov	r3, sl
 8006ea2:	4632      	mov	r2, r6
 8006ea4:	f000 fd48 	bl	8007938 <_dtoa_r>
 8006ea8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006eac:	4607      	mov	r7, r0
 8006eae:	d102      	bne.n	8006eb6 <__cvt+0x66>
 8006eb0:	f019 0f01 	tst.w	r9, #1
 8006eb4:	d022      	beq.n	8006efc <__cvt+0xac>
 8006eb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006eba:	eb07 0906 	add.w	r9, r7, r6
 8006ebe:	d110      	bne.n	8006ee2 <__cvt+0x92>
 8006ec0:	783b      	ldrb	r3, [r7, #0]
 8006ec2:	2b30      	cmp	r3, #48	; 0x30
 8006ec4:	d10a      	bne.n	8006edc <__cvt+0x8c>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4620      	mov	r0, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7f9 fe1b 	bl	8000b08 <__aeabi_dcmpeq>
 8006ed2:	b918      	cbnz	r0, 8006edc <__cvt+0x8c>
 8006ed4:	f1c6 0601 	rsb	r6, r6, #1
 8006ed8:	f8ca 6000 	str.w	r6, [sl]
 8006edc:	f8da 3000 	ldr.w	r3, [sl]
 8006ee0:	4499      	add	r9, r3
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8006eee:	b108      	cbz	r0, 8006ef4 <__cvt+0xa4>
 8006ef0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ef4:	2230      	movs	r2, #48	; 0x30
 8006ef6:	9b03      	ldr	r3, [sp, #12]
 8006ef8:	454b      	cmp	r3, r9
 8006efa:	d307      	bcc.n	8006f0c <__cvt+0xbc>
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f00:	1bdb      	subs	r3, r3, r7
 8006f02:	4638      	mov	r0, r7
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	b004      	add	sp, #16
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	1c59      	adds	r1, r3, #1
 8006f0e:	9103      	str	r1, [sp, #12]
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	e7f0      	b.n	8006ef6 <__cvt+0xa6>

08006f14 <__exponent>:
 8006f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f16:	4603      	mov	r3, r0
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	bfb8      	it	lt
 8006f1c:	4249      	neglt	r1, r1
 8006f1e:	f803 2b02 	strb.w	r2, [r3], #2
 8006f22:	bfb4      	ite	lt
 8006f24:	222d      	movlt	r2, #45	; 0x2d
 8006f26:	222b      	movge	r2, #43	; 0x2b
 8006f28:	2909      	cmp	r1, #9
 8006f2a:	7042      	strb	r2, [r0, #1]
 8006f2c:	dd2a      	ble.n	8006f84 <__exponent+0x70>
 8006f2e:	f10d 0407 	add.w	r4, sp, #7
 8006f32:	46a4      	mov	ip, r4
 8006f34:	270a      	movs	r7, #10
 8006f36:	46a6      	mov	lr, r4
 8006f38:	460a      	mov	r2, r1
 8006f3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006f3e:	fb07 1516 	mls	r5, r7, r6, r1
 8006f42:	3530      	adds	r5, #48	; 0x30
 8006f44:	2a63      	cmp	r2, #99	; 0x63
 8006f46:	f104 34ff 	add.w	r4, r4, #4294967295
 8006f4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006f4e:	4631      	mov	r1, r6
 8006f50:	dcf1      	bgt.n	8006f36 <__exponent+0x22>
 8006f52:	3130      	adds	r1, #48	; 0x30
 8006f54:	f1ae 0502 	sub.w	r5, lr, #2
 8006f58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006f5c:	1c44      	adds	r4, r0, #1
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4561      	cmp	r1, ip
 8006f62:	d30a      	bcc.n	8006f7a <__exponent+0x66>
 8006f64:	f10d 0209 	add.w	r2, sp, #9
 8006f68:	eba2 020e 	sub.w	r2, r2, lr
 8006f6c:	4565      	cmp	r5, ip
 8006f6e:	bf88      	it	hi
 8006f70:	2200      	movhi	r2, #0
 8006f72:	4413      	add	r3, r2
 8006f74:	1a18      	subs	r0, r3, r0
 8006f76:	b003      	add	sp, #12
 8006f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006f82:	e7ed      	b.n	8006f60 <__exponent+0x4c>
 8006f84:	2330      	movs	r3, #48	; 0x30
 8006f86:	3130      	adds	r1, #48	; 0x30
 8006f88:	7083      	strb	r3, [r0, #2]
 8006f8a:	70c1      	strb	r1, [r0, #3]
 8006f8c:	1d03      	adds	r3, r0, #4
 8006f8e:	e7f1      	b.n	8006f74 <__exponent+0x60>

08006f90 <_printf_float>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	ed2d 8b02 	vpush	{d8}
 8006f98:	b08d      	sub	sp, #52	; 0x34
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	461f      	mov	r7, r3
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	f001 fba9 	bl	80086fc <_localeconv_r>
 8006faa:	f8d0 a000 	ldr.w	sl, [r0]
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f7f9 f92e 	bl	8000210 <strlen>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006fc4:	3307      	adds	r3, #7
 8006fc6:	f023 0307 	bic.w	r3, r3, #7
 8006fca:	f103 0208 	add.w	r2, r3, #8
 8006fce:	f8c8 2000 	str.w	r2, [r8]
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006fda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fe2:	9307      	str	r3, [sp, #28]
 8006fe4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006fe8:	ee08 0a10 	vmov	s16, r0
 8006fec:	4b9f      	ldr	r3, [pc, #636]	; (800726c <_printf_float+0x2dc>)
 8006fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff6:	f7f9 fdb9 	bl	8000b6c <__aeabi_dcmpun>
 8006ffa:	bb88      	cbnz	r0, 8007060 <_printf_float+0xd0>
 8006ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007000:	4b9a      	ldr	r3, [pc, #616]	; (800726c <_printf_float+0x2dc>)
 8007002:	f04f 32ff 	mov.w	r2, #4294967295
 8007006:	f7f9 fd93 	bl	8000b30 <__aeabi_dcmple>
 800700a:	bb48      	cbnz	r0, 8007060 <_printf_float+0xd0>
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4640      	mov	r0, r8
 8007012:	4649      	mov	r1, r9
 8007014:	f7f9 fd82 	bl	8000b1c <__aeabi_dcmplt>
 8007018:	b110      	cbz	r0, 8007020 <_printf_float+0x90>
 800701a:	232d      	movs	r3, #45	; 0x2d
 800701c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007020:	4b93      	ldr	r3, [pc, #588]	; (8007270 <_printf_float+0x2e0>)
 8007022:	4894      	ldr	r0, [pc, #592]	; (8007274 <_printf_float+0x2e4>)
 8007024:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007028:	bf94      	ite	ls
 800702a:	4698      	movls	r8, r3
 800702c:	4680      	movhi	r8, r0
 800702e:	2303      	movs	r3, #3
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	9b05      	ldr	r3, [sp, #20]
 8007034:	f023 0204 	bic.w	r2, r3, #4
 8007038:	6022      	str	r2, [r4, #0]
 800703a:	f04f 0900 	mov.w	r9, #0
 800703e:	9700      	str	r7, [sp, #0]
 8007040:	4633      	mov	r3, r6
 8007042:	aa0b      	add	r2, sp, #44	; 0x2c
 8007044:	4621      	mov	r1, r4
 8007046:	4628      	mov	r0, r5
 8007048:	f000 f9d8 	bl	80073fc <_printf_common>
 800704c:	3001      	adds	r0, #1
 800704e:	f040 8090 	bne.w	8007172 <_printf_float+0x1e2>
 8007052:	f04f 30ff 	mov.w	r0, #4294967295
 8007056:	b00d      	add	sp, #52	; 0x34
 8007058:	ecbd 8b02 	vpop	{d8}
 800705c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007060:	4642      	mov	r2, r8
 8007062:	464b      	mov	r3, r9
 8007064:	4640      	mov	r0, r8
 8007066:	4649      	mov	r1, r9
 8007068:	f7f9 fd80 	bl	8000b6c <__aeabi_dcmpun>
 800706c:	b140      	cbz	r0, 8007080 <_printf_float+0xf0>
 800706e:	464b      	mov	r3, r9
 8007070:	2b00      	cmp	r3, #0
 8007072:	bfbc      	itt	lt
 8007074:	232d      	movlt	r3, #45	; 0x2d
 8007076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800707a:	487f      	ldr	r0, [pc, #508]	; (8007278 <_printf_float+0x2e8>)
 800707c:	4b7f      	ldr	r3, [pc, #508]	; (800727c <_printf_float+0x2ec>)
 800707e:	e7d1      	b.n	8007024 <_printf_float+0x94>
 8007080:	6863      	ldr	r3, [r4, #4]
 8007082:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007086:	9206      	str	r2, [sp, #24]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	d13f      	bne.n	800710c <_printf_float+0x17c>
 800708c:	2306      	movs	r3, #6
 800708e:	6063      	str	r3, [r4, #4]
 8007090:	9b05      	ldr	r3, [sp, #20]
 8007092:	6861      	ldr	r1, [r4, #4]
 8007094:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007098:	2300      	movs	r3, #0
 800709a:	9303      	str	r3, [sp, #12]
 800709c:	ab0a      	add	r3, sp, #40	; 0x28
 800709e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070a2:	ab09      	add	r3, sp, #36	; 0x24
 80070a4:	ec49 8b10 	vmov	d0, r8, r9
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	6022      	str	r2, [r4, #0]
 80070ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070b0:	4628      	mov	r0, r5
 80070b2:	f7ff fecd 	bl	8006e50 <__cvt>
 80070b6:	9b06      	ldr	r3, [sp, #24]
 80070b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070ba:	2b47      	cmp	r3, #71	; 0x47
 80070bc:	4680      	mov	r8, r0
 80070be:	d108      	bne.n	80070d2 <_printf_float+0x142>
 80070c0:	1cc8      	adds	r0, r1, #3
 80070c2:	db02      	blt.n	80070ca <_printf_float+0x13a>
 80070c4:	6863      	ldr	r3, [r4, #4]
 80070c6:	4299      	cmp	r1, r3
 80070c8:	dd41      	ble.n	800714e <_printf_float+0x1be>
 80070ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80070ce:	fa5f fb8b 	uxtb.w	fp, fp
 80070d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070d6:	d820      	bhi.n	800711a <_printf_float+0x18a>
 80070d8:	3901      	subs	r1, #1
 80070da:	465a      	mov	r2, fp
 80070dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070e0:	9109      	str	r1, [sp, #36]	; 0x24
 80070e2:	f7ff ff17 	bl	8006f14 <__exponent>
 80070e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070e8:	1813      	adds	r3, r2, r0
 80070ea:	2a01      	cmp	r2, #1
 80070ec:	4681      	mov	r9, r0
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	dc02      	bgt.n	80070f8 <_printf_float+0x168>
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	07d2      	lsls	r2, r2, #31
 80070f6:	d501      	bpl.n	80070fc <_printf_float+0x16c>
 80070f8:	3301      	adds	r3, #1
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007100:	2b00      	cmp	r3, #0
 8007102:	d09c      	beq.n	800703e <_printf_float+0xae>
 8007104:	232d      	movs	r3, #45	; 0x2d
 8007106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800710a:	e798      	b.n	800703e <_printf_float+0xae>
 800710c:	9a06      	ldr	r2, [sp, #24]
 800710e:	2a47      	cmp	r2, #71	; 0x47
 8007110:	d1be      	bne.n	8007090 <_printf_float+0x100>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1bc      	bne.n	8007090 <_printf_float+0x100>
 8007116:	2301      	movs	r3, #1
 8007118:	e7b9      	b.n	800708e <_printf_float+0xfe>
 800711a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800711e:	d118      	bne.n	8007152 <_printf_float+0x1c2>
 8007120:	2900      	cmp	r1, #0
 8007122:	6863      	ldr	r3, [r4, #4]
 8007124:	dd0b      	ble.n	800713e <_printf_float+0x1ae>
 8007126:	6121      	str	r1, [r4, #16]
 8007128:	b913      	cbnz	r3, 8007130 <_printf_float+0x1a0>
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	07d0      	lsls	r0, r2, #31
 800712e:	d502      	bpl.n	8007136 <_printf_float+0x1a6>
 8007130:	3301      	adds	r3, #1
 8007132:	440b      	add	r3, r1
 8007134:	6123      	str	r3, [r4, #16]
 8007136:	65a1      	str	r1, [r4, #88]	; 0x58
 8007138:	f04f 0900 	mov.w	r9, #0
 800713c:	e7de      	b.n	80070fc <_printf_float+0x16c>
 800713e:	b913      	cbnz	r3, 8007146 <_printf_float+0x1b6>
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	07d2      	lsls	r2, r2, #31
 8007144:	d501      	bpl.n	800714a <_printf_float+0x1ba>
 8007146:	3302      	adds	r3, #2
 8007148:	e7f4      	b.n	8007134 <_printf_float+0x1a4>
 800714a:	2301      	movs	r3, #1
 800714c:	e7f2      	b.n	8007134 <_printf_float+0x1a4>
 800714e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007154:	4299      	cmp	r1, r3
 8007156:	db05      	blt.n	8007164 <_printf_float+0x1d4>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	6121      	str	r1, [r4, #16]
 800715c:	07d8      	lsls	r0, r3, #31
 800715e:	d5ea      	bpl.n	8007136 <_printf_float+0x1a6>
 8007160:	1c4b      	adds	r3, r1, #1
 8007162:	e7e7      	b.n	8007134 <_printf_float+0x1a4>
 8007164:	2900      	cmp	r1, #0
 8007166:	bfd4      	ite	le
 8007168:	f1c1 0202 	rsble	r2, r1, #2
 800716c:	2201      	movgt	r2, #1
 800716e:	4413      	add	r3, r2
 8007170:	e7e0      	b.n	8007134 <_printf_float+0x1a4>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	055a      	lsls	r2, r3, #21
 8007176:	d407      	bmi.n	8007188 <_printf_float+0x1f8>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	4642      	mov	r2, r8
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	d12c      	bne.n	80071e0 <_printf_float+0x250>
 8007186:	e764      	b.n	8007052 <_printf_float+0xc2>
 8007188:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800718c:	f240 80e0 	bls.w	8007350 <_printf_float+0x3c0>
 8007190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007194:	2200      	movs	r2, #0
 8007196:	2300      	movs	r3, #0
 8007198:	f7f9 fcb6 	bl	8000b08 <__aeabi_dcmpeq>
 800719c:	2800      	cmp	r0, #0
 800719e:	d034      	beq.n	800720a <_printf_float+0x27a>
 80071a0:	4a37      	ldr	r2, [pc, #220]	; (8007280 <_printf_float+0x2f0>)
 80071a2:	2301      	movs	r3, #1
 80071a4:	4631      	mov	r1, r6
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f af51 	beq.w	8007052 <_printf_float+0xc2>
 80071b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071b4:	429a      	cmp	r2, r3
 80071b6:	db02      	blt.n	80071be <_printf_float+0x22e>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	07d8      	lsls	r0, r3, #31
 80071bc:	d510      	bpl.n	80071e0 <_printf_float+0x250>
 80071be:	ee18 3a10 	vmov	r3, s16
 80071c2:	4652      	mov	r2, sl
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f af41 	beq.w	8007052 <_printf_float+0xc2>
 80071d0:	f04f 0800 	mov.w	r8, #0
 80071d4:	f104 091a 	add.w	r9, r4, #26
 80071d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071da:	3b01      	subs	r3, #1
 80071dc:	4543      	cmp	r3, r8
 80071de:	dc09      	bgt.n	80071f4 <_printf_float+0x264>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	079b      	lsls	r3, r3, #30
 80071e4:	f100 8105 	bmi.w	80073f2 <_printf_float+0x462>
 80071e8:	68e0      	ldr	r0, [r4, #12]
 80071ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ec:	4298      	cmp	r0, r3
 80071ee:	bfb8      	it	lt
 80071f0:	4618      	movlt	r0, r3
 80071f2:	e730      	b.n	8007056 <_printf_float+0xc6>
 80071f4:	2301      	movs	r3, #1
 80071f6:	464a      	mov	r2, r9
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	f43f af27 	beq.w	8007052 <_printf_float+0xc2>
 8007204:	f108 0801 	add.w	r8, r8, #1
 8007208:	e7e6      	b.n	80071d8 <_printf_float+0x248>
 800720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720c:	2b00      	cmp	r3, #0
 800720e:	dc39      	bgt.n	8007284 <_printf_float+0x2f4>
 8007210:	4a1b      	ldr	r2, [pc, #108]	; (8007280 <_printf_float+0x2f0>)
 8007212:	2301      	movs	r3, #1
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f af19 	beq.w	8007052 <_printf_float+0xc2>
 8007220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007224:	4313      	orrs	r3, r2
 8007226:	d102      	bne.n	800722e <_printf_float+0x29e>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	07d9      	lsls	r1, r3, #31
 800722c:	d5d8      	bpl.n	80071e0 <_printf_float+0x250>
 800722e:	ee18 3a10 	vmov	r3, s16
 8007232:	4652      	mov	r2, sl
 8007234:	4631      	mov	r1, r6
 8007236:	4628      	mov	r0, r5
 8007238:	47b8      	blx	r7
 800723a:	3001      	adds	r0, #1
 800723c:	f43f af09 	beq.w	8007052 <_printf_float+0xc2>
 8007240:	f04f 0900 	mov.w	r9, #0
 8007244:	f104 0a1a 	add.w	sl, r4, #26
 8007248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724a:	425b      	negs	r3, r3
 800724c:	454b      	cmp	r3, r9
 800724e:	dc01      	bgt.n	8007254 <_printf_float+0x2c4>
 8007250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007252:	e792      	b.n	800717a <_printf_float+0x1ea>
 8007254:	2301      	movs	r3, #1
 8007256:	4652      	mov	r2, sl
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f aef7 	beq.w	8007052 <_printf_float+0xc2>
 8007264:	f109 0901 	add.w	r9, r9, #1
 8007268:	e7ee      	b.n	8007248 <_printf_float+0x2b8>
 800726a:	bf00      	nop
 800726c:	7fefffff 	.word	0x7fefffff
 8007270:	0800989c 	.word	0x0800989c
 8007274:	080098a0 	.word	0x080098a0
 8007278:	080098a8 	.word	0x080098a8
 800727c:	080098a4 	.word	0x080098a4
 8007280:	080098ac 	.word	0x080098ac
 8007284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007288:	429a      	cmp	r2, r3
 800728a:	bfa8      	it	ge
 800728c:	461a      	movge	r2, r3
 800728e:	2a00      	cmp	r2, #0
 8007290:	4691      	mov	r9, r2
 8007292:	dc37      	bgt.n	8007304 <_printf_float+0x374>
 8007294:	f04f 0b00 	mov.w	fp, #0
 8007298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800729c:	f104 021a 	add.w	r2, r4, #26
 80072a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072a2:	9305      	str	r3, [sp, #20]
 80072a4:	eba3 0309 	sub.w	r3, r3, r9
 80072a8:	455b      	cmp	r3, fp
 80072aa:	dc33      	bgt.n	8007314 <_printf_float+0x384>
 80072ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b0:	429a      	cmp	r2, r3
 80072b2:	db3b      	blt.n	800732c <_printf_float+0x39c>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	07da      	lsls	r2, r3, #31
 80072b8:	d438      	bmi.n	800732c <_printf_float+0x39c>
 80072ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072bc:	9b05      	ldr	r3, [sp, #20]
 80072be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	eba2 0901 	sub.w	r9, r2, r1
 80072c6:	4599      	cmp	r9, r3
 80072c8:	bfa8      	it	ge
 80072ca:	4699      	movge	r9, r3
 80072cc:	f1b9 0f00 	cmp.w	r9, #0
 80072d0:	dc35      	bgt.n	800733e <_printf_float+0x3ae>
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072da:	f104 0a1a 	add.w	sl, r4, #26
 80072de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072e2:	1a9b      	subs	r3, r3, r2
 80072e4:	eba3 0309 	sub.w	r3, r3, r9
 80072e8:	4543      	cmp	r3, r8
 80072ea:	f77f af79 	ble.w	80071e0 <_printf_float+0x250>
 80072ee:	2301      	movs	r3, #1
 80072f0:	4652      	mov	r2, sl
 80072f2:	4631      	mov	r1, r6
 80072f4:	4628      	mov	r0, r5
 80072f6:	47b8      	blx	r7
 80072f8:	3001      	adds	r0, #1
 80072fa:	f43f aeaa 	beq.w	8007052 <_printf_float+0xc2>
 80072fe:	f108 0801 	add.w	r8, r8, #1
 8007302:	e7ec      	b.n	80072de <_printf_float+0x34e>
 8007304:	4613      	mov	r3, r2
 8007306:	4631      	mov	r1, r6
 8007308:	4642      	mov	r2, r8
 800730a:	4628      	mov	r0, r5
 800730c:	47b8      	blx	r7
 800730e:	3001      	adds	r0, #1
 8007310:	d1c0      	bne.n	8007294 <_printf_float+0x304>
 8007312:	e69e      	b.n	8007052 <_printf_float+0xc2>
 8007314:	2301      	movs	r3, #1
 8007316:	4631      	mov	r1, r6
 8007318:	4628      	mov	r0, r5
 800731a:	9205      	str	r2, [sp, #20]
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f ae97 	beq.w	8007052 <_printf_float+0xc2>
 8007324:	9a05      	ldr	r2, [sp, #20]
 8007326:	f10b 0b01 	add.w	fp, fp, #1
 800732a:	e7b9      	b.n	80072a0 <_printf_float+0x310>
 800732c:	ee18 3a10 	vmov	r3, s16
 8007330:	4652      	mov	r2, sl
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	d1be      	bne.n	80072ba <_printf_float+0x32a>
 800733c:	e689      	b.n	8007052 <_printf_float+0xc2>
 800733e:	9a05      	ldr	r2, [sp, #20]
 8007340:	464b      	mov	r3, r9
 8007342:	4442      	add	r2, r8
 8007344:	4631      	mov	r1, r6
 8007346:	4628      	mov	r0, r5
 8007348:	47b8      	blx	r7
 800734a:	3001      	adds	r0, #1
 800734c:	d1c1      	bne.n	80072d2 <_printf_float+0x342>
 800734e:	e680      	b.n	8007052 <_printf_float+0xc2>
 8007350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007352:	2a01      	cmp	r2, #1
 8007354:	dc01      	bgt.n	800735a <_printf_float+0x3ca>
 8007356:	07db      	lsls	r3, r3, #31
 8007358:	d538      	bpl.n	80073cc <_printf_float+0x43c>
 800735a:	2301      	movs	r3, #1
 800735c:	4642      	mov	r2, r8
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	f43f ae74 	beq.w	8007052 <_printf_float+0xc2>
 800736a:	ee18 3a10 	vmov	r3, s16
 800736e:	4652      	mov	r2, sl
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f43f ae6b 	beq.w	8007052 <_printf_float+0xc2>
 800737c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007380:	2200      	movs	r2, #0
 8007382:	2300      	movs	r3, #0
 8007384:	f7f9 fbc0 	bl	8000b08 <__aeabi_dcmpeq>
 8007388:	b9d8      	cbnz	r0, 80073c2 <_printf_float+0x432>
 800738a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738c:	f108 0201 	add.w	r2, r8, #1
 8007390:	3b01      	subs	r3, #1
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	d10e      	bne.n	80073ba <_printf_float+0x42a>
 800739c:	e659      	b.n	8007052 <_printf_float+0xc2>
 800739e:	2301      	movs	r3, #1
 80073a0:	4652      	mov	r2, sl
 80073a2:	4631      	mov	r1, r6
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b8      	blx	r7
 80073a8:	3001      	adds	r0, #1
 80073aa:	f43f ae52 	beq.w	8007052 <_printf_float+0xc2>
 80073ae:	f108 0801 	add.w	r8, r8, #1
 80073b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b4:	3b01      	subs	r3, #1
 80073b6:	4543      	cmp	r3, r8
 80073b8:	dcf1      	bgt.n	800739e <_printf_float+0x40e>
 80073ba:	464b      	mov	r3, r9
 80073bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073c0:	e6dc      	b.n	800717c <_printf_float+0x1ec>
 80073c2:	f04f 0800 	mov.w	r8, #0
 80073c6:	f104 0a1a 	add.w	sl, r4, #26
 80073ca:	e7f2      	b.n	80073b2 <_printf_float+0x422>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4642      	mov	r2, r8
 80073d0:	e7df      	b.n	8007392 <_printf_float+0x402>
 80073d2:	2301      	movs	r3, #1
 80073d4:	464a      	mov	r2, r9
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f ae38 	beq.w	8007052 <_printf_float+0xc2>
 80073e2:	f108 0801 	add.w	r8, r8, #1
 80073e6:	68e3      	ldr	r3, [r4, #12]
 80073e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073ea:	1a5b      	subs	r3, r3, r1
 80073ec:	4543      	cmp	r3, r8
 80073ee:	dcf0      	bgt.n	80073d2 <_printf_float+0x442>
 80073f0:	e6fa      	b.n	80071e8 <_printf_float+0x258>
 80073f2:	f04f 0800 	mov.w	r8, #0
 80073f6:	f104 0919 	add.w	r9, r4, #25
 80073fa:	e7f4      	b.n	80073e6 <_printf_float+0x456>

080073fc <_printf_common>:
 80073fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007400:	4616      	mov	r6, r2
 8007402:	4699      	mov	r9, r3
 8007404:	688a      	ldr	r2, [r1, #8]
 8007406:	690b      	ldr	r3, [r1, #16]
 8007408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800740c:	4293      	cmp	r3, r2
 800740e:	bfb8      	it	lt
 8007410:	4613      	movlt	r3, r2
 8007412:	6033      	str	r3, [r6, #0]
 8007414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007418:	4607      	mov	r7, r0
 800741a:	460c      	mov	r4, r1
 800741c:	b10a      	cbz	r2, 8007422 <_printf_common+0x26>
 800741e:	3301      	adds	r3, #1
 8007420:	6033      	str	r3, [r6, #0]
 8007422:	6823      	ldr	r3, [r4, #0]
 8007424:	0699      	lsls	r1, r3, #26
 8007426:	bf42      	ittt	mi
 8007428:	6833      	ldrmi	r3, [r6, #0]
 800742a:	3302      	addmi	r3, #2
 800742c:	6033      	strmi	r3, [r6, #0]
 800742e:	6825      	ldr	r5, [r4, #0]
 8007430:	f015 0506 	ands.w	r5, r5, #6
 8007434:	d106      	bne.n	8007444 <_printf_common+0x48>
 8007436:	f104 0a19 	add.w	sl, r4, #25
 800743a:	68e3      	ldr	r3, [r4, #12]
 800743c:	6832      	ldr	r2, [r6, #0]
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	42ab      	cmp	r3, r5
 8007442:	dc26      	bgt.n	8007492 <_printf_common+0x96>
 8007444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007448:	1e13      	subs	r3, r2, #0
 800744a:	6822      	ldr	r2, [r4, #0]
 800744c:	bf18      	it	ne
 800744e:	2301      	movne	r3, #1
 8007450:	0692      	lsls	r2, r2, #26
 8007452:	d42b      	bmi.n	80074ac <_printf_common+0xb0>
 8007454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007458:	4649      	mov	r1, r9
 800745a:	4638      	mov	r0, r7
 800745c:	47c0      	blx	r8
 800745e:	3001      	adds	r0, #1
 8007460:	d01e      	beq.n	80074a0 <_printf_common+0xa4>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	68e5      	ldr	r5, [r4, #12]
 8007466:	6832      	ldr	r2, [r6, #0]
 8007468:	f003 0306 	and.w	r3, r3, #6
 800746c:	2b04      	cmp	r3, #4
 800746e:	bf08      	it	eq
 8007470:	1aad      	subeq	r5, r5, r2
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	6922      	ldr	r2, [r4, #16]
 8007476:	bf0c      	ite	eq
 8007478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800747c:	2500      	movne	r5, #0
 800747e:	4293      	cmp	r3, r2
 8007480:	bfc4      	itt	gt
 8007482:	1a9b      	subgt	r3, r3, r2
 8007484:	18ed      	addgt	r5, r5, r3
 8007486:	2600      	movs	r6, #0
 8007488:	341a      	adds	r4, #26
 800748a:	42b5      	cmp	r5, r6
 800748c:	d11a      	bne.n	80074c4 <_printf_common+0xc8>
 800748e:	2000      	movs	r0, #0
 8007490:	e008      	b.n	80074a4 <_printf_common+0xa8>
 8007492:	2301      	movs	r3, #1
 8007494:	4652      	mov	r2, sl
 8007496:	4649      	mov	r1, r9
 8007498:	4638      	mov	r0, r7
 800749a:	47c0      	blx	r8
 800749c:	3001      	adds	r0, #1
 800749e:	d103      	bne.n	80074a8 <_printf_common+0xac>
 80074a0:	f04f 30ff 	mov.w	r0, #4294967295
 80074a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a8:	3501      	adds	r5, #1
 80074aa:	e7c6      	b.n	800743a <_printf_common+0x3e>
 80074ac:	18e1      	adds	r1, r4, r3
 80074ae:	1c5a      	adds	r2, r3, #1
 80074b0:	2030      	movs	r0, #48	; 0x30
 80074b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074b6:	4422      	add	r2, r4
 80074b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074c0:	3302      	adds	r3, #2
 80074c2:	e7c7      	b.n	8007454 <_printf_common+0x58>
 80074c4:	2301      	movs	r3, #1
 80074c6:	4622      	mov	r2, r4
 80074c8:	4649      	mov	r1, r9
 80074ca:	4638      	mov	r0, r7
 80074cc:	47c0      	blx	r8
 80074ce:	3001      	adds	r0, #1
 80074d0:	d0e6      	beq.n	80074a0 <_printf_common+0xa4>
 80074d2:	3601      	adds	r6, #1
 80074d4:	e7d9      	b.n	800748a <_printf_common+0x8e>
	...

080074d8 <_printf_i>:
 80074d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074dc:	460c      	mov	r4, r1
 80074de:	4691      	mov	r9, r2
 80074e0:	7e27      	ldrb	r7, [r4, #24]
 80074e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074e4:	2f78      	cmp	r7, #120	; 0x78
 80074e6:	4680      	mov	r8, r0
 80074e8:	469a      	mov	sl, r3
 80074ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074ee:	d807      	bhi.n	8007500 <_printf_i+0x28>
 80074f0:	2f62      	cmp	r7, #98	; 0x62
 80074f2:	d80a      	bhi.n	800750a <_printf_i+0x32>
 80074f4:	2f00      	cmp	r7, #0
 80074f6:	f000 80d8 	beq.w	80076aa <_printf_i+0x1d2>
 80074fa:	2f58      	cmp	r7, #88	; 0x58
 80074fc:	f000 80a3 	beq.w	8007646 <_printf_i+0x16e>
 8007500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007508:	e03a      	b.n	8007580 <_printf_i+0xa8>
 800750a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800750e:	2b15      	cmp	r3, #21
 8007510:	d8f6      	bhi.n	8007500 <_printf_i+0x28>
 8007512:	a001      	add	r0, pc, #4	; (adr r0, 8007518 <_printf_i+0x40>)
 8007514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007518:	08007571 	.word	0x08007571
 800751c:	08007585 	.word	0x08007585
 8007520:	08007501 	.word	0x08007501
 8007524:	08007501 	.word	0x08007501
 8007528:	08007501 	.word	0x08007501
 800752c:	08007501 	.word	0x08007501
 8007530:	08007585 	.word	0x08007585
 8007534:	08007501 	.word	0x08007501
 8007538:	08007501 	.word	0x08007501
 800753c:	08007501 	.word	0x08007501
 8007540:	08007501 	.word	0x08007501
 8007544:	08007691 	.word	0x08007691
 8007548:	080075b5 	.word	0x080075b5
 800754c:	08007673 	.word	0x08007673
 8007550:	08007501 	.word	0x08007501
 8007554:	08007501 	.word	0x08007501
 8007558:	080076b3 	.word	0x080076b3
 800755c:	08007501 	.word	0x08007501
 8007560:	080075b5 	.word	0x080075b5
 8007564:	08007501 	.word	0x08007501
 8007568:	08007501 	.word	0x08007501
 800756c:	0800767b 	.word	0x0800767b
 8007570:	680b      	ldr	r3, [r1, #0]
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	600a      	str	r2, [r1, #0]
 8007578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800757c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007580:	2301      	movs	r3, #1
 8007582:	e0a3      	b.n	80076cc <_printf_i+0x1f4>
 8007584:	6825      	ldr	r5, [r4, #0]
 8007586:	6808      	ldr	r0, [r1, #0]
 8007588:	062e      	lsls	r6, r5, #24
 800758a:	f100 0304 	add.w	r3, r0, #4
 800758e:	d50a      	bpl.n	80075a6 <_printf_i+0xce>
 8007590:	6805      	ldr	r5, [r0, #0]
 8007592:	600b      	str	r3, [r1, #0]
 8007594:	2d00      	cmp	r5, #0
 8007596:	da03      	bge.n	80075a0 <_printf_i+0xc8>
 8007598:	232d      	movs	r3, #45	; 0x2d
 800759a:	426d      	negs	r5, r5
 800759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a0:	485e      	ldr	r0, [pc, #376]	; (800771c <_printf_i+0x244>)
 80075a2:	230a      	movs	r3, #10
 80075a4:	e019      	b.n	80075da <_printf_i+0x102>
 80075a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80075aa:	6805      	ldr	r5, [r0, #0]
 80075ac:	600b      	str	r3, [r1, #0]
 80075ae:	bf18      	it	ne
 80075b0:	b22d      	sxthne	r5, r5
 80075b2:	e7ef      	b.n	8007594 <_printf_i+0xbc>
 80075b4:	680b      	ldr	r3, [r1, #0]
 80075b6:	6825      	ldr	r5, [r4, #0]
 80075b8:	1d18      	adds	r0, r3, #4
 80075ba:	6008      	str	r0, [r1, #0]
 80075bc:	0628      	lsls	r0, r5, #24
 80075be:	d501      	bpl.n	80075c4 <_printf_i+0xec>
 80075c0:	681d      	ldr	r5, [r3, #0]
 80075c2:	e002      	b.n	80075ca <_printf_i+0xf2>
 80075c4:	0669      	lsls	r1, r5, #25
 80075c6:	d5fb      	bpl.n	80075c0 <_printf_i+0xe8>
 80075c8:	881d      	ldrh	r5, [r3, #0]
 80075ca:	4854      	ldr	r0, [pc, #336]	; (800771c <_printf_i+0x244>)
 80075cc:	2f6f      	cmp	r7, #111	; 0x6f
 80075ce:	bf0c      	ite	eq
 80075d0:	2308      	moveq	r3, #8
 80075d2:	230a      	movne	r3, #10
 80075d4:	2100      	movs	r1, #0
 80075d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075da:	6866      	ldr	r6, [r4, #4]
 80075dc:	60a6      	str	r6, [r4, #8]
 80075de:	2e00      	cmp	r6, #0
 80075e0:	bfa2      	ittt	ge
 80075e2:	6821      	ldrge	r1, [r4, #0]
 80075e4:	f021 0104 	bicge.w	r1, r1, #4
 80075e8:	6021      	strge	r1, [r4, #0]
 80075ea:	b90d      	cbnz	r5, 80075f0 <_printf_i+0x118>
 80075ec:	2e00      	cmp	r6, #0
 80075ee:	d04d      	beq.n	800768c <_printf_i+0x1b4>
 80075f0:	4616      	mov	r6, r2
 80075f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80075f6:	fb03 5711 	mls	r7, r3, r1, r5
 80075fa:	5dc7      	ldrb	r7, [r0, r7]
 80075fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007600:	462f      	mov	r7, r5
 8007602:	42bb      	cmp	r3, r7
 8007604:	460d      	mov	r5, r1
 8007606:	d9f4      	bls.n	80075f2 <_printf_i+0x11a>
 8007608:	2b08      	cmp	r3, #8
 800760a:	d10b      	bne.n	8007624 <_printf_i+0x14c>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	07df      	lsls	r7, r3, #31
 8007610:	d508      	bpl.n	8007624 <_printf_i+0x14c>
 8007612:	6923      	ldr	r3, [r4, #16]
 8007614:	6861      	ldr	r1, [r4, #4]
 8007616:	4299      	cmp	r1, r3
 8007618:	bfde      	ittt	le
 800761a:	2330      	movle	r3, #48	; 0x30
 800761c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007620:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007624:	1b92      	subs	r2, r2, r6
 8007626:	6122      	str	r2, [r4, #16]
 8007628:	f8cd a000 	str.w	sl, [sp]
 800762c:	464b      	mov	r3, r9
 800762e:	aa03      	add	r2, sp, #12
 8007630:	4621      	mov	r1, r4
 8007632:	4640      	mov	r0, r8
 8007634:	f7ff fee2 	bl	80073fc <_printf_common>
 8007638:	3001      	adds	r0, #1
 800763a:	d14c      	bne.n	80076d6 <_printf_i+0x1fe>
 800763c:	f04f 30ff 	mov.w	r0, #4294967295
 8007640:	b004      	add	sp, #16
 8007642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007646:	4835      	ldr	r0, [pc, #212]	; (800771c <_printf_i+0x244>)
 8007648:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	680e      	ldr	r6, [r1, #0]
 8007650:	061f      	lsls	r7, r3, #24
 8007652:	f856 5b04 	ldr.w	r5, [r6], #4
 8007656:	600e      	str	r6, [r1, #0]
 8007658:	d514      	bpl.n	8007684 <_printf_i+0x1ac>
 800765a:	07d9      	lsls	r1, r3, #31
 800765c:	bf44      	itt	mi
 800765e:	f043 0320 	orrmi.w	r3, r3, #32
 8007662:	6023      	strmi	r3, [r4, #0]
 8007664:	b91d      	cbnz	r5, 800766e <_printf_i+0x196>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	f023 0320 	bic.w	r3, r3, #32
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	2310      	movs	r3, #16
 8007670:	e7b0      	b.n	80075d4 <_printf_i+0xfc>
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	f043 0320 	orr.w	r3, r3, #32
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	2378      	movs	r3, #120	; 0x78
 800767c:	4828      	ldr	r0, [pc, #160]	; (8007720 <_printf_i+0x248>)
 800767e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007682:	e7e3      	b.n	800764c <_printf_i+0x174>
 8007684:	065e      	lsls	r6, r3, #25
 8007686:	bf48      	it	mi
 8007688:	b2ad      	uxthmi	r5, r5
 800768a:	e7e6      	b.n	800765a <_printf_i+0x182>
 800768c:	4616      	mov	r6, r2
 800768e:	e7bb      	b.n	8007608 <_printf_i+0x130>
 8007690:	680b      	ldr	r3, [r1, #0]
 8007692:	6826      	ldr	r6, [r4, #0]
 8007694:	6960      	ldr	r0, [r4, #20]
 8007696:	1d1d      	adds	r5, r3, #4
 8007698:	600d      	str	r5, [r1, #0]
 800769a:	0635      	lsls	r5, r6, #24
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	d501      	bpl.n	80076a4 <_printf_i+0x1cc>
 80076a0:	6018      	str	r0, [r3, #0]
 80076a2:	e002      	b.n	80076aa <_printf_i+0x1d2>
 80076a4:	0671      	lsls	r1, r6, #25
 80076a6:	d5fb      	bpl.n	80076a0 <_printf_i+0x1c8>
 80076a8:	8018      	strh	r0, [r3, #0]
 80076aa:	2300      	movs	r3, #0
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	4616      	mov	r6, r2
 80076b0:	e7ba      	b.n	8007628 <_printf_i+0x150>
 80076b2:	680b      	ldr	r3, [r1, #0]
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	600a      	str	r2, [r1, #0]
 80076b8:	681e      	ldr	r6, [r3, #0]
 80076ba:	6862      	ldr	r2, [r4, #4]
 80076bc:	2100      	movs	r1, #0
 80076be:	4630      	mov	r0, r6
 80076c0:	f7f8 fdae 	bl	8000220 <memchr>
 80076c4:	b108      	cbz	r0, 80076ca <_printf_i+0x1f2>
 80076c6:	1b80      	subs	r0, r0, r6
 80076c8:	6060      	str	r0, [r4, #4]
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	2300      	movs	r3, #0
 80076d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d4:	e7a8      	b.n	8007628 <_printf_i+0x150>
 80076d6:	6923      	ldr	r3, [r4, #16]
 80076d8:	4632      	mov	r2, r6
 80076da:	4649      	mov	r1, r9
 80076dc:	4640      	mov	r0, r8
 80076de:	47d0      	blx	sl
 80076e0:	3001      	adds	r0, #1
 80076e2:	d0ab      	beq.n	800763c <_printf_i+0x164>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	079b      	lsls	r3, r3, #30
 80076e8:	d413      	bmi.n	8007712 <_printf_i+0x23a>
 80076ea:	68e0      	ldr	r0, [r4, #12]
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	4298      	cmp	r0, r3
 80076f0:	bfb8      	it	lt
 80076f2:	4618      	movlt	r0, r3
 80076f4:	e7a4      	b.n	8007640 <_printf_i+0x168>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4632      	mov	r2, r6
 80076fa:	4649      	mov	r1, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	47d0      	blx	sl
 8007700:	3001      	adds	r0, #1
 8007702:	d09b      	beq.n	800763c <_printf_i+0x164>
 8007704:	3501      	adds	r5, #1
 8007706:	68e3      	ldr	r3, [r4, #12]
 8007708:	9903      	ldr	r1, [sp, #12]
 800770a:	1a5b      	subs	r3, r3, r1
 800770c:	42ab      	cmp	r3, r5
 800770e:	dcf2      	bgt.n	80076f6 <_printf_i+0x21e>
 8007710:	e7eb      	b.n	80076ea <_printf_i+0x212>
 8007712:	2500      	movs	r5, #0
 8007714:	f104 0619 	add.w	r6, r4, #25
 8007718:	e7f5      	b.n	8007706 <_printf_i+0x22e>
 800771a:	bf00      	nop
 800771c:	080098ae 	.word	0x080098ae
 8007720:	080098bf 	.word	0x080098bf

08007724 <iprintf>:
 8007724:	b40f      	push	{r0, r1, r2, r3}
 8007726:	4b0a      	ldr	r3, [pc, #40]	; (8007750 <iprintf+0x2c>)
 8007728:	b513      	push	{r0, r1, r4, lr}
 800772a:	681c      	ldr	r4, [r3, #0]
 800772c:	b124      	cbz	r4, 8007738 <iprintf+0x14>
 800772e:	69a3      	ldr	r3, [r4, #24]
 8007730:	b913      	cbnz	r3, 8007738 <iprintf+0x14>
 8007732:	4620      	mov	r0, r4
 8007734:	f000 ff44 	bl	80085c0 <__sinit>
 8007738:	ab05      	add	r3, sp, #20
 800773a:	9a04      	ldr	r2, [sp, #16]
 800773c:	68a1      	ldr	r1, [r4, #8]
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	4620      	mov	r0, r4
 8007742:	f001 fc6d 	bl	8009020 <_vfiprintf_r>
 8007746:	b002      	add	sp, #8
 8007748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800774c:	b004      	add	sp, #16
 800774e:	4770      	bx	lr
 8007750:	20000028 	.word	0x20000028

08007754 <__sread>:
 8007754:	b510      	push	{r4, lr}
 8007756:	460c      	mov	r4, r1
 8007758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775c:	f001 fd90 	bl	8009280 <_read_r>
 8007760:	2800      	cmp	r0, #0
 8007762:	bfab      	itete	ge
 8007764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007766:	89a3      	ldrhlt	r3, [r4, #12]
 8007768:	181b      	addge	r3, r3, r0
 800776a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800776e:	bfac      	ite	ge
 8007770:	6563      	strge	r3, [r4, #84]	; 0x54
 8007772:	81a3      	strhlt	r3, [r4, #12]
 8007774:	bd10      	pop	{r4, pc}

08007776 <__swrite>:
 8007776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800777a:	461f      	mov	r7, r3
 800777c:	898b      	ldrh	r3, [r1, #12]
 800777e:	05db      	lsls	r3, r3, #23
 8007780:	4605      	mov	r5, r0
 8007782:	460c      	mov	r4, r1
 8007784:	4616      	mov	r6, r2
 8007786:	d505      	bpl.n	8007794 <__swrite+0x1e>
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	2302      	movs	r3, #2
 800778e:	2200      	movs	r2, #0
 8007790:	f000 ffbc 	bl	800870c <_lseek_r>
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	4632      	mov	r2, r6
 80077a2:	463b      	mov	r3, r7
 80077a4:	4628      	mov	r0, r5
 80077a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077aa:	f000 b817 	b.w	80077dc <_write_r>

080077ae <__sseek>:
 80077ae:	b510      	push	{r4, lr}
 80077b0:	460c      	mov	r4, r1
 80077b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b6:	f000 ffa9 	bl	800870c <_lseek_r>
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	bf15      	itete	ne
 80077c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80077c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077ca:	81a3      	strheq	r3, [r4, #12]
 80077cc:	bf18      	it	ne
 80077ce:	81a3      	strhne	r3, [r4, #12]
 80077d0:	bd10      	pop	{r4, pc}

080077d2 <__sclose>:
 80077d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077d6:	f000 b813 	b.w	8007800 <_close_r>
	...

080077dc <_write_r>:
 80077dc:	b538      	push	{r3, r4, r5, lr}
 80077de:	4d07      	ldr	r5, [pc, #28]	; (80077fc <_write_r+0x20>)
 80077e0:	4604      	mov	r4, r0
 80077e2:	4608      	mov	r0, r1
 80077e4:	4611      	mov	r1, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	602a      	str	r2, [r5, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	f7fa f8d9 	bl	80019a2 <_write>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_write_r+0x1e>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_write_r+0x1e>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	200007f8 	.word	0x200007f8

08007800 <_close_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d06      	ldr	r5, [pc, #24]	; (800781c <_close_r+0x1c>)
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	f7fa f8e5 	bl	80019da <_close>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d102      	bne.n	800781a <_close_r+0x1a>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	b103      	cbz	r3, 800781a <_close_r+0x1a>
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	200007f8 	.word	0x200007f8

08007820 <quorem>:
 8007820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	6903      	ldr	r3, [r0, #16]
 8007826:	690c      	ldr	r4, [r1, #16]
 8007828:	42a3      	cmp	r3, r4
 800782a:	4607      	mov	r7, r0
 800782c:	f2c0 8081 	blt.w	8007932 <quorem+0x112>
 8007830:	3c01      	subs	r4, #1
 8007832:	f101 0814 	add.w	r8, r1, #20
 8007836:	f100 0514 	add.w	r5, r0, #20
 800783a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800783e:	9301      	str	r3, [sp, #4]
 8007840:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007844:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007848:	3301      	adds	r3, #1
 800784a:	429a      	cmp	r2, r3
 800784c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007850:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007854:	fbb2 f6f3 	udiv	r6, r2, r3
 8007858:	d331      	bcc.n	80078be <quorem+0x9e>
 800785a:	f04f 0e00 	mov.w	lr, #0
 800785e:	4640      	mov	r0, r8
 8007860:	46ac      	mov	ip, r5
 8007862:	46f2      	mov	sl, lr
 8007864:	f850 2b04 	ldr.w	r2, [r0], #4
 8007868:	b293      	uxth	r3, r2
 800786a:	fb06 e303 	mla	r3, r6, r3, lr
 800786e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007872:	b29b      	uxth	r3, r3
 8007874:	ebaa 0303 	sub.w	r3, sl, r3
 8007878:	0c12      	lsrs	r2, r2, #16
 800787a:	f8dc a000 	ldr.w	sl, [ip]
 800787e:	fb06 e202 	mla	r2, r6, r2, lr
 8007882:	fa13 f38a 	uxtah	r3, r3, sl
 8007886:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800788a:	fa1f fa82 	uxth.w	sl, r2
 800788e:	f8dc 2000 	ldr.w	r2, [ip]
 8007892:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007896:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800789a:	b29b      	uxth	r3, r3
 800789c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078a0:	4581      	cmp	r9, r0
 80078a2:	f84c 3b04 	str.w	r3, [ip], #4
 80078a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078aa:	d2db      	bcs.n	8007864 <quorem+0x44>
 80078ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80078b0:	b92b      	cbnz	r3, 80078be <quorem+0x9e>
 80078b2:	9b01      	ldr	r3, [sp, #4]
 80078b4:	3b04      	subs	r3, #4
 80078b6:	429d      	cmp	r5, r3
 80078b8:	461a      	mov	r2, r3
 80078ba:	d32e      	bcc.n	800791a <quorem+0xfa>
 80078bc:	613c      	str	r4, [r7, #16]
 80078be:	4638      	mov	r0, r7
 80078c0:	f001 f9ca 	bl	8008c58 <__mcmp>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	db24      	blt.n	8007912 <quorem+0xf2>
 80078c8:	3601      	adds	r6, #1
 80078ca:	4628      	mov	r0, r5
 80078cc:	f04f 0c00 	mov.w	ip, #0
 80078d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80078d4:	f8d0 e000 	ldr.w	lr, [r0]
 80078d8:	b293      	uxth	r3, r2
 80078da:	ebac 0303 	sub.w	r3, ip, r3
 80078de:	0c12      	lsrs	r2, r2, #16
 80078e0:	fa13 f38e 	uxtah	r3, r3, lr
 80078e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078f2:	45c1      	cmp	r9, r8
 80078f4:	f840 3b04 	str.w	r3, [r0], #4
 80078f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078fc:	d2e8      	bcs.n	80078d0 <quorem+0xb0>
 80078fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007906:	b922      	cbnz	r2, 8007912 <quorem+0xf2>
 8007908:	3b04      	subs	r3, #4
 800790a:	429d      	cmp	r5, r3
 800790c:	461a      	mov	r2, r3
 800790e:	d30a      	bcc.n	8007926 <quorem+0x106>
 8007910:	613c      	str	r4, [r7, #16]
 8007912:	4630      	mov	r0, r6
 8007914:	b003      	add	sp, #12
 8007916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800791a:	6812      	ldr	r2, [r2, #0]
 800791c:	3b04      	subs	r3, #4
 800791e:	2a00      	cmp	r2, #0
 8007920:	d1cc      	bne.n	80078bc <quorem+0x9c>
 8007922:	3c01      	subs	r4, #1
 8007924:	e7c7      	b.n	80078b6 <quorem+0x96>
 8007926:	6812      	ldr	r2, [r2, #0]
 8007928:	3b04      	subs	r3, #4
 800792a:	2a00      	cmp	r2, #0
 800792c:	d1f0      	bne.n	8007910 <quorem+0xf0>
 800792e:	3c01      	subs	r4, #1
 8007930:	e7eb      	b.n	800790a <quorem+0xea>
 8007932:	2000      	movs	r0, #0
 8007934:	e7ee      	b.n	8007914 <quorem+0xf4>
	...

08007938 <_dtoa_r>:
 8007938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793c:	ed2d 8b02 	vpush	{d8}
 8007940:	ec57 6b10 	vmov	r6, r7, d0
 8007944:	b095      	sub	sp, #84	; 0x54
 8007946:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007948:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800794c:	9105      	str	r1, [sp, #20]
 800794e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007952:	4604      	mov	r4, r0
 8007954:	9209      	str	r2, [sp, #36]	; 0x24
 8007956:	930f      	str	r3, [sp, #60]	; 0x3c
 8007958:	b975      	cbnz	r5, 8007978 <_dtoa_r+0x40>
 800795a:	2010      	movs	r0, #16
 800795c:	f000 fee8 	bl	8008730 <malloc>
 8007960:	4602      	mov	r2, r0
 8007962:	6260      	str	r0, [r4, #36]	; 0x24
 8007964:	b920      	cbnz	r0, 8007970 <_dtoa_r+0x38>
 8007966:	4bb2      	ldr	r3, [pc, #712]	; (8007c30 <_dtoa_r+0x2f8>)
 8007968:	21ea      	movs	r1, #234	; 0xea
 800796a:	48b2      	ldr	r0, [pc, #712]	; (8007c34 <_dtoa_r+0x2fc>)
 800796c:	f001 fd6a 	bl	8009444 <__assert_func>
 8007970:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007974:	6005      	str	r5, [r0, #0]
 8007976:	60c5      	str	r5, [r0, #12]
 8007978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800797a:	6819      	ldr	r1, [r3, #0]
 800797c:	b151      	cbz	r1, 8007994 <_dtoa_r+0x5c>
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	604a      	str	r2, [r1, #4]
 8007982:	2301      	movs	r3, #1
 8007984:	4093      	lsls	r3, r2
 8007986:	608b      	str	r3, [r1, #8]
 8007988:	4620      	mov	r0, r4
 800798a:	f000 ff27 	bl	80087dc <_Bfree>
 800798e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	1e3b      	subs	r3, r7, #0
 8007996:	bfb9      	ittee	lt
 8007998:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800799c:	9303      	strlt	r3, [sp, #12]
 800799e:	2300      	movge	r3, #0
 80079a0:	f8c8 3000 	strge.w	r3, [r8]
 80079a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80079a8:	4ba3      	ldr	r3, [pc, #652]	; (8007c38 <_dtoa_r+0x300>)
 80079aa:	bfbc      	itt	lt
 80079ac:	2201      	movlt	r2, #1
 80079ae:	f8c8 2000 	strlt.w	r2, [r8]
 80079b2:	ea33 0309 	bics.w	r3, r3, r9
 80079b6:	d11b      	bne.n	80079f0 <_dtoa_r+0xb8>
 80079b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079c4:	4333      	orrs	r3, r6
 80079c6:	f000 857a 	beq.w	80084be <_dtoa_r+0xb86>
 80079ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079cc:	b963      	cbnz	r3, 80079e8 <_dtoa_r+0xb0>
 80079ce:	4b9b      	ldr	r3, [pc, #620]	; (8007c3c <_dtoa_r+0x304>)
 80079d0:	e024      	b.n	8007a1c <_dtoa_r+0xe4>
 80079d2:	4b9b      	ldr	r3, [pc, #620]	; (8007c40 <_dtoa_r+0x308>)
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	9800      	ldr	r0, [sp, #0]
 80079de:	b015      	add	sp, #84	; 0x54
 80079e0:	ecbd 8b02 	vpop	{d8}
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e8:	4b94      	ldr	r3, [pc, #592]	; (8007c3c <_dtoa_r+0x304>)
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	3303      	adds	r3, #3
 80079ee:	e7f3      	b.n	80079d8 <_dtoa_r+0xa0>
 80079f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079f4:	2200      	movs	r2, #0
 80079f6:	ec51 0b17 	vmov	r0, r1, d7
 80079fa:	2300      	movs	r3, #0
 80079fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007a00:	f7f9 f882 	bl	8000b08 <__aeabi_dcmpeq>
 8007a04:	4680      	mov	r8, r0
 8007a06:	b158      	cbz	r0, 8007a20 <_dtoa_r+0xe8>
 8007a08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 8551 	beq.w	80084b8 <_dtoa_r+0xb80>
 8007a16:	488b      	ldr	r0, [pc, #556]	; (8007c44 <_dtoa_r+0x30c>)
 8007a18:	6018      	str	r0, [r3, #0]
 8007a1a:	1e43      	subs	r3, r0, #1
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	e7dd      	b.n	80079dc <_dtoa_r+0xa4>
 8007a20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a24:	aa12      	add	r2, sp, #72	; 0x48
 8007a26:	a913      	add	r1, sp, #76	; 0x4c
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f001 f9b9 	bl	8008da0 <__d2b>
 8007a2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a32:	4683      	mov	fp, r0
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	d07c      	beq.n	8007b32 <_dtoa_r+0x1fa>
 8007a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007a46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a52:	4b7d      	ldr	r3, [pc, #500]	; (8007c48 <_dtoa_r+0x310>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	f7f8 fc35 	bl	80002c8 <__aeabi_dsub>
 8007a5e:	a36e      	add	r3, pc, #440	; (adr r3, 8007c18 <_dtoa_r+0x2e0>)
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f7f8 fde8 	bl	8000638 <__aeabi_dmul>
 8007a68:	a36d      	add	r3, pc, #436	; (adr r3, 8007c20 <_dtoa_r+0x2e8>)
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	f7f8 fc2d 	bl	80002cc <__adddf3>
 8007a72:	4606      	mov	r6, r0
 8007a74:	4628      	mov	r0, r5
 8007a76:	460f      	mov	r7, r1
 8007a78:	f7f8 fd74 	bl	8000564 <__aeabi_i2d>
 8007a7c:	a36a      	add	r3, pc, #424	; (adr r3, 8007c28 <_dtoa_r+0x2f0>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fdd9 	bl	8000638 <__aeabi_dmul>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f8 fc1d 	bl	80002cc <__adddf3>
 8007a92:	4606      	mov	r6, r0
 8007a94:	460f      	mov	r7, r1
 8007a96:	f7f9 f87f 	bl	8000b98 <__aeabi_d2iz>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	4639      	mov	r1, r7
 8007aa4:	f7f9 f83a 	bl	8000b1c <__aeabi_dcmplt>
 8007aa8:	b148      	cbz	r0, 8007abe <_dtoa_r+0x186>
 8007aaa:	4650      	mov	r0, sl
 8007aac:	f7f8 fd5a 	bl	8000564 <__aeabi_i2d>
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	f7f9 f828 	bl	8000b08 <__aeabi_dcmpeq>
 8007ab8:	b908      	cbnz	r0, 8007abe <_dtoa_r+0x186>
 8007aba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007abe:	f1ba 0f16 	cmp.w	sl, #22
 8007ac2:	d854      	bhi.n	8007b6e <_dtoa_r+0x236>
 8007ac4:	4b61      	ldr	r3, [pc, #388]	; (8007c4c <_dtoa_r+0x314>)
 8007ac6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ad2:	f7f9 f823 	bl	8000b1c <__aeabi_dcmplt>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	d04b      	beq.n	8007b72 <_dtoa_r+0x23a>
 8007ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ade:	2300      	movs	r3, #0
 8007ae0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ae2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ae4:	1b5d      	subs	r5, r3, r5
 8007ae6:	1e6b      	subs	r3, r5, #1
 8007ae8:	9304      	str	r3, [sp, #16]
 8007aea:	bf43      	ittte	mi
 8007aec:	2300      	movmi	r3, #0
 8007aee:	f1c5 0801 	rsbmi	r8, r5, #1
 8007af2:	9304      	strmi	r3, [sp, #16]
 8007af4:	f04f 0800 	movpl.w	r8, #0
 8007af8:	f1ba 0f00 	cmp.w	sl, #0
 8007afc:	db3b      	blt.n	8007b76 <_dtoa_r+0x23e>
 8007afe:	9b04      	ldr	r3, [sp, #16]
 8007b00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007b04:	4453      	add	r3, sl
 8007b06:	9304      	str	r3, [sp, #16]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	9306      	str	r3, [sp, #24]
 8007b0c:	9b05      	ldr	r3, [sp, #20]
 8007b0e:	2b09      	cmp	r3, #9
 8007b10:	d869      	bhi.n	8007be6 <_dtoa_r+0x2ae>
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	bfc4      	itt	gt
 8007b16:	3b04      	subgt	r3, #4
 8007b18:	9305      	strgt	r3, [sp, #20]
 8007b1a:	9b05      	ldr	r3, [sp, #20]
 8007b1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007b20:	bfcc      	ite	gt
 8007b22:	2500      	movgt	r5, #0
 8007b24:	2501      	movle	r5, #1
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d869      	bhi.n	8007bfe <_dtoa_r+0x2c6>
 8007b2a:	e8df f003 	tbb	[pc, r3]
 8007b2e:	4e2c      	.short	0x4e2c
 8007b30:	5a4c      	.short	0x5a4c
 8007b32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007b36:	441d      	add	r5, r3
 8007b38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	bfc1      	itttt	gt
 8007b40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b48:	fa09 f303 	lslgt.w	r3, r9, r3
 8007b4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b50:	bfda      	itte	le
 8007b52:	f1c3 0320 	rsble	r3, r3, #32
 8007b56:	fa06 f003 	lslle.w	r0, r6, r3
 8007b5a:	4318      	orrgt	r0, r3
 8007b5c:	f7f8 fcf2 	bl	8000544 <__aeabi_ui2d>
 8007b60:	2301      	movs	r3, #1
 8007b62:	4606      	mov	r6, r0
 8007b64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b68:	3d01      	subs	r5, #1
 8007b6a:	9310      	str	r3, [sp, #64]	; 0x40
 8007b6c:	e771      	b.n	8007a52 <_dtoa_r+0x11a>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e7b6      	b.n	8007ae0 <_dtoa_r+0x1a8>
 8007b72:	900e      	str	r0, [sp, #56]	; 0x38
 8007b74:	e7b5      	b.n	8007ae2 <_dtoa_r+0x1aa>
 8007b76:	f1ca 0300 	rsb	r3, sl, #0
 8007b7a:	9306      	str	r3, [sp, #24]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	eba8 080a 	sub.w	r8, r8, sl
 8007b82:	930d      	str	r3, [sp, #52]	; 0x34
 8007b84:	e7c2      	b.n	8007b0c <_dtoa_r+0x1d4>
 8007b86:	2300      	movs	r3, #0
 8007b88:	9308      	str	r3, [sp, #32]
 8007b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dc39      	bgt.n	8007c04 <_dtoa_r+0x2cc>
 8007b90:	f04f 0901 	mov.w	r9, #1
 8007b94:	f8cd 9004 	str.w	r9, [sp, #4]
 8007b98:	464b      	mov	r3, r9
 8007b9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007b9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	6042      	str	r2, [r0, #4]
 8007ba4:	2204      	movs	r2, #4
 8007ba6:	f102 0614 	add.w	r6, r2, #20
 8007baa:	429e      	cmp	r6, r3
 8007bac:	6841      	ldr	r1, [r0, #4]
 8007bae:	d92f      	bls.n	8007c10 <_dtoa_r+0x2d8>
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fdd3 	bl	800875c <_Balloc>
 8007bb6:	9000      	str	r0, [sp, #0]
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d14b      	bne.n	8007c54 <_dtoa_r+0x31c>
 8007bbc:	4b24      	ldr	r3, [pc, #144]	; (8007c50 <_dtoa_r+0x318>)
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007bc4:	e6d1      	b.n	800796a <_dtoa_r+0x32>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e7de      	b.n	8007b88 <_dtoa_r+0x250>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	9308      	str	r3, [sp, #32]
 8007bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd0:	eb0a 0903 	add.w	r9, sl, r3
 8007bd4:	f109 0301 	add.w	r3, r9, #1
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	bfb8      	it	lt
 8007bde:	2301      	movlt	r3, #1
 8007be0:	e7dd      	b.n	8007b9e <_dtoa_r+0x266>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7f2      	b.n	8007bcc <_dtoa_r+0x294>
 8007be6:	2501      	movs	r5, #1
 8007be8:	2300      	movs	r3, #0
 8007bea:	9305      	str	r3, [sp, #20]
 8007bec:	9508      	str	r5, [sp, #32]
 8007bee:	f04f 39ff 	mov.w	r9, #4294967295
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bf8:	2312      	movs	r3, #18
 8007bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8007bfc:	e7cf      	b.n	8007b9e <_dtoa_r+0x266>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	9308      	str	r3, [sp, #32]
 8007c02:	e7f4      	b.n	8007bee <_dtoa_r+0x2b6>
 8007c04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007c08:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c0c:	464b      	mov	r3, r9
 8007c0e:	e7c6      	b.n	8007b9e <_dtoa_r+0x266>
 8007c10:	3101      	adds	r1, #1
 8007c12:	6041      	str	r1, [r0, #4]
 8007c14:	0052      	lsls	r2, r2, #1
 8007c16:	e7c6      	b.n	8007ba6 <_dtoa_r+0x26e>
 8007c18:	636f4361 	.word	0x636f4361
 8007c1c:	3fd287a7 	.word	0x3fd287a7
 8007c20:	8b60c8b3 	.word	0x8b60c8b3
 8007c24:	3fc68a28 	.word	0x3fc68a28
 8007c28:	509f79fb 	.word	0x509f79fb
 8007c2c:	3fd34413 	.word	0x3fd34413
 8007c30:	080098dd 	.word	0x080098dd
 8007c34:	080098f4 	.word	0x080098f4
 8007c38:	7ff00000 	.word	0x7ff00000
 8007c3c:	080098d9 	.word	0x080098d9
 8007c40:	080098d0 	.word	0x080098d0
 8007c44:	080098ad 	.word	0x080098ad
 8007c48:	3ff80000 	.word	0x3ff80000
 8007c4c:	08009a50 	.word	0x08009a50
 8007c50:	08009953 	.word	0x08009953
 8007c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c56:	9a00      	ldr	r2, [sp, #0]
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	2b0e      	cmp	r3, #14
 8007c5e:	f200 80ad 	bhi.w	8007dbc <_dtoa_r+0x484>
 8007c62:	2d00      	cmp	r5, #0
 8007c64:	f000 80aa 	beq.w	8007dbc <_dtoa_r+0x484>
 8007c68:	f1ba 0f00 	cmp.w	sl, #0
 8007c6c:	dd36      	ble.n	8007cdc <_dtoa_r+0x3a4>
 8007c6e:	4ac3      	ldr	r2, [pc, #780]	; (8007f7c <_dtoa_r+0x644>)
 8007c70:	f00a 030f 	and.w	r3, sl, #15
 8007c74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c78:	ed93 7b00 	vldr	d7, [r3]
 8007c7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007c80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007c84:	eeb0 8a47 	vmov.f32	s16, s14
 8007c88:	eef0 8a67 	vmov.f32	s17, s15
 8007c8c:	d016      	beq.n	8007cbc <_dtoa_r+0x384>
 8007c8e:	4bbc      	ldr	r3, [pc, #752]	; (8007f80 <_dtoa_r+0x648>)
 8007c90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c98:	f7f8 fdf8 	bl	800088c <__aeabi_ddiv>
 8007c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ca0:	f007 070f 	and.w	r7, r7, #15
 8007ca4:	2503      	movs	r5, #3
 8007ca6:	4eb6      	ldr	r6, [pc, #728]	; (8007f80 <_dtoa_r+0x648>)
 8007ca8:	b957      	cbnz	r7, 8007cc0 <_dtoa_r+0x388>
 8007caa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cae:	ec53 2b18 	vmov	r2, r3, d8
 8007cb2:	f7f8 fdeb 	bl	800088c <__aeabi_ddiv>
 8007cb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cba:	e029      	b.n	8007d10 <_dtoa_r+0x3d8>
 8007cbc:	2502      	movs	r5, #2
 8007cbe:	e7f2      	b.n	8007ca6 <_dtoa_r+0x36e>
 8007cc0:	07f9      	lsls	r1, r7, #31
 8007cc2:	d508      	bpl.n	8007cd6 <_dtoa_r+0x39e>
 8007cc4:	ec51 0b18 	vmov	r0, r1, d8
 8007cc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ccc:	f7f8 fcb4 	bl	8000638 <__aeabi_dmul>
 8007cd0:	ec41 0b18 	vmov	d8, r0, r1
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	107f      	asrs	r7, r7, #1
 8007cd8:	3608      	adds	r6, #8
 8007cda:	e7e5      	b.n	8007ca8 <_dtoa_r+0x370>
 8007cdc:	f000 80a6 	beq.w	8007e2c <_dtoa_r+0x4f4>
 8007ce0:	f1ca 0600 	rsb	r6, sl, #0
 8007ce4:	4ba5      	ldr	r3, [pc, #660]	; (8007f7c <_dtoa_r+0x644>)
 8007ce6:	4fa6      	ldr	r7, [pc, #664]	; (8007f80 <_dtoa_r+0x648>)
 8007ce8:	f006 020f 	and.w	r2, r6, #15
 8007cec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cf8:	f7f8 fc9e 	bl	8000638 <__aeabi_dmul>
 8007cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d00:	1136      	asrs	r6, r6, #4
 8007d02:	2300      	movs	r3, #0
 8007d04:	2502      	movs	r5, #2
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	f040 8085 	bne.w	8007e16 <_dtoa_r+0x4de>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1d2      	bne.n	8007cb6 <_dtoa_r+0x37e>
 8007d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 808c 	beq.w	8007e30 <_dtoa_r+0x4f8>
 8007d18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d1c:	4b99      	ldr	r3, [pc, #612]	; (8007f84 <_dtoa_r+0x64c>)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4630      	mov	r0, r6
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fefa 	bl	8000b1c <__aeabi_dcmplt>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	f000 8081 	beq.w	8007e30 <_dtoa_r+0x4f8>
 8007d2e:	9b01      	ldr	r3, [sp, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d07d      	beq.n	8007e30 <_dtoa_r+0x4f8>
 8007d34:	f1b9 0f00 	cmp.w	r9, #0
 8007d38:	dd3c      	ble.n	8007db4 <_dtoa_r+0x47c>
 8007d3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007d3e:	9307      	str	r3, [sp, #28]
 8007d40:	2200      	movs	r2, #0
 8007d42:	4b91      	ldr	r3, [pc, #580]	; (8007f88 <_dtoa_r+0x650>)
 8007d44:	4630      	mov	r0, r6
 8007d46:	4639      	mov	r1, r7
 8007d48:	f7f8 fc76 	bl	8000638 <__aeabi_dmul>
 8007d4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d50:	3501      	adds	r5, #1
 8007d52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007d56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f7f8 fc02 	bl	8000564 <__aeabi_i2d>
 8007d60:	4632      	mov	r2, r6
 8007d62:	463b      	mov	r3, r7
 8007d64:	f7f8 fc68 	bl	8000638 <__aeabi_dmul>
 8007d68:	4b88      	ldr	r3, [pc, #544]	; (8007f8c <_dtoa_r+0x654>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f7f8 faae 	bl	80002cc <__adddf3>
 8007d70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007d74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d15c      	bne.n	8007e3a <_dtoa_r+0x502>
 8007d80:	4b83      	ldr	r3, [pc, #524]	; (8007f90 <_dtoa_r+0x658>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	4630      	mov	r0, r6
 8007d86:	4639      	mov	r1, r7
 8007d88:	f7f8 fa9e 	bl	80002c8 <__aeabi_dsub>
 8007d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d90:	4606      	mov	r6, r0
 8007d92:	460f      	mov	r7, r1
 8007d94:	f7f8 fee0 	bl	8000b58 <__aeabi_dcmpgt>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	f040 8296 	bne.w	80082ca <_dtoa_r+0x992>
 8007d9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007da2:	4630      	mov	r0, r6
 8007da4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007da8:	4639      	mov	r1, r7
 8007daa:	f7f8 feb7 	bl	8000b1c <__aeabi_dcmplt>
 8007dae:	2800      	cmp	r0, #0
 8007db0:	f040 8288 	bne.w	80082c4 <_dtoa_r+0x98c>
 8007db4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007db8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007dbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f2c0 8158 	blt.w	8008074 <_dtoa_r+0x73c>
 8007dc4:	f1ba 0f0e 	cmp.w	sl, #14
 8007dc8:	f300 8154 	bgt.w	8008074 <_dtoa_r+0x73c>
 8007dcc:	4b6b      	ldr	r3, [pc, #428]	; (8007f7c <_dtoa_r+0x644>)
 8007dce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007dd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f280 80e3 	bge.w	8007fa4 <_dtoa_r+0x66c>
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f300 80df 	bgt.w	8007fa4 <_dtoa_r+0x66c>
 8007de6:	f040 826d 	bne.w	80082c4 <_dtoa_r+0x98c>
 8007dea:	4b69      	ldr	r3, [pc, #420]	; (8007f90 <_dtoa_r+0x658>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f7f8 fc21 	bl	8000638 <__aeabi_dmul>
 8007df6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dfa:	f7f8 fea3 	bl	8000b44 <__aeabi_dcmpge>
 8007dfe:	9e01      	ldr	r6, [sp, #4]
 8007e00:	4637      	mov	r7, r6
 8007e02:	2800      	cmp	r0, #0
 8007e04:	f040 8243 	bne.w	800828e <_dtoa_r+0x956>
 8007e08:	9d00      	ldr	r5, [sp, #0]
 8007e0a:	2331      	movs	r3, #49	; 0x31
 8007e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e10:	f10a 0a01 	add.w	sl, sl, #1
 8007e14:	e23f      	b.n	8008296 <_dtoa_r+0x95e>
 8007e16:	07f2      	lsls	r2, r6, #31
 8007e18:	d505      	bpl.n	8007e26 <_dtoa_r+0x4ee>
 8007e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e1e:	f7f8 fc0b 	bl	8000638 <__aeabi_dmul>
 8007e22:	3501      	adds	r5, #1
 8007e24:	2301      	movs	r3, #1
 8007e26:	1076      	asrs	r6, r6, #1
 8007e28:	3708      	adds	r7, #8
 8007e2a:	e76c      	b.n	8007d06 <_dtoa_r+0x3ce>
 8007e2c:	2502      	movs	r5, #2
 8007e2e:	e76f      	b.n	8007d10 <_dtoa_r+0x3d8>
 8007e30:	9b01      	ldr	r3, [sp, #4]
 8007e32:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e36:	930c      	str	r3, [sp, #48]	; 0x30
 8007e38:	e78d      	b.n	8007d56 <_dtoa_r+0x41e>
 8007e3a:	9900      	ldr	r1, [sp, #0]
 8007e3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e40:	4b4e      	ldr	r3, [pc, #312]	; (8007f7c <_dtoa_r+0x644>)
 8007e42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e46:	4401      	add	r1, r0
 8007e48:	9102      	str	r1, [sp, #8]
 8007e4a:	9908      	ldr	r1, [sp, #32]
 8007e4c:	eeb0 8a47 	vmov.f32	s16, s14
 8007e50:	eef0 8a67 	vmov.f32	s17, s15
 8007e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	d045      	beq.n	8007eec <_dtoa_r+0x5b4>
 8007e60:	494c      	ldr	r1, [pc, #304]	; (8007f94 <_dtoa_r+0x65c>)
 8007e62:	2000      	movs	r0, #0
 8007e64:	f7f8 fd12 	bl	800088c <__aeabi_ddiv>
 8007e68:	ec53 2b18 	vmov	r2, r3, d8
 8007e6c:	f7f8 fa2c 	bl	80002c8 <__aeabi_dsub>
 8007e70:	9d00      	ldr	r5, [sp, #0]
 8007e72:	ec41 0b18 	vmov	d8, r0, r1
 8007e76:	4639      	mov	r1, r7
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f7f8 fe8d 	bl	8000b98 <__aeabi_d2iz>
 8007e7e:	900c      	str	r0, [sp, #48]	; 0x30
 8007e80:	f7f8 fb70 	bl	8000564 <__aeabi_i2d>
 8007e84:	4602      	mov	r2, r0
 8007e86:	460b      	mov	r3, r1
 8007e88:	4630      	mov	r0, r6
 8007e8a:	4639      	mov	r1, r7
 8007e8c:	f7f8 fa1c 	bl	80002c8 <__aeabi_dsub>
 8007e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e92:	3330      	adds	r3, #48	; 0x30
 8007e94:	f805 3b01 	strb.w	r3, [r5], #1
 8007e98:	ec53 2b18 	vmov	r2, r3, d8
 8007e9c:	4606      	mov	r6, r0
 8007e9e:	460f      	mov	r7, r1
 8007ea0:	f7f8 fe3c 	bl	8000b1c <__aeabi_dcmplt>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d165      	bne.n	8007f74 <_dtoa_r+0x63c>
 8007ea8:	4632      	mov	r2, r6
 8007eaa:	463b      	mov	r3, r7
 8007eac:	4935      	ldr	r1, [pc, #212]	; (8007f84 <_dtoa_r+0x64c>)
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f7f8 fa0a 	bl	80002c8 <__aeabi_dsub>
 8007eb4:	ec53 2b18 	vmov	r2, r3, d8
 8007eb8:	f7f8 fe30 	bl	8000b1c <__aeabi_dcmplt>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f040 80b9 	bne.w	8008034 <_dtoa_r+0x6fc>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	429d      	cmp	r5, r3
 8007ec6:	f43f af75 	beq.w	8007db4 <_dtoa_r+0x47c>
 8007eca:	4b2f      	ldr	r3, [pc, #188]	; (8007f88 <_dtoa_r+0x650>)
 8007ecc:	ec51 0b18 	vmov	r0, r1, d8
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f7f8 fbb1 	bl	8000638 <__aeabi_dmul>
 8007ed6:	4b2c      	ldr	r3, [pc, #176]	; (8007f88 <_dtoa_r+0x650>)
 8007ed8:	ec41 0b18 	vmov	d8, r0, r1
 8007edc:	2200      	movs	r2, #0
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 fba9 	bl	8000638 <__aeabi_dmul>
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	460f      	mov	r7, r1
 8007eea:	e7c4      	b.n	8007e76 <_dtoa_r+0x53e>
 8007eec:	ec51 0b17 	vmov	r0, r1, d7
 8007ef0:	f7f8 fba2 	bl	8000638 <__aeabi_dmul>
 8007ef4:	9b02      	ldr	r3, [sp, #8]
 8007ef6:	9d00      	ldr	r5, [sp, #0]
 8007ef8:	930c      	str	r3, [sp, #48]	; 0x30
 8007efa:	ec41 0b18 	vmov	d8, r0, r1
 8007efe:	4639      	mov	r1, r7
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7f8 fe49 	bl	8000b98 <__aeabi_d2iz>
 8007f06:	9011      	str	r0, [sp, #68]	; 0x44
 8007f08:	f7f8 fb2c 	bl	8000564 <__aeabi_i2d>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4630      	mov	r0, r6
 8007f12:	4639      	mov	r1, r7
 8007f14:	f7f8 f9d8 	bl	80002c8 <__aeabi_dsub>
 8007f18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f1a:	3330      	adds	r3, #48	; 0x30
 8007f1c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	429d      	cmp	r5, r3
 8007f24:	4606      	mov	r6, r0
 8007f26:	460f      	mov	r7, r1
 8007f28:	f04f 0200 	mov.w	r2, #0
 8007f2c:	d134      	bne.n	8007f98 <_dtoa_r+0x660>
 8007f2e:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <_dtoa_r+0x65c>)
 8007f30:	ec51 0b18 	vmov	r0, r1, d8
 8007f34:	f7f8 f9ca 	bl	80002cc <__adddf3>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	4639      	mov	r1, r7
 8007f40:	f7f8 fe0a 	bl	8000b58 <__aeabi_dcmpgt>
 8007f44:	2800      	cmp	r0, #0
 8007f46:	d175      	bne.n	8008034 <_dtoa_r+0x6fc>
 8007f48:	ec53 2b18 	vmov	r2, r3, d8
 8007f4c:	4911      	ldr	r1, [pc, #68]	; (8007f94 <_dtoa_r+0x65c>)
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f7f8 f9ba 	bl	80002c8 <__aeabi_dsub>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 fdde 	bl	8000b1c <__aeabi_dcmplt>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	f43f af27 	beq.w	8007db4 <_dtoa_r+0x47c>
 8007f66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f68:	1e6b      	subs	r3, r5, #1
 8007f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f70:	2b30      	cmp	r3, #48	; 0x30
 8007f72:	d0f8      	beq.n	8007f66 <_dtoa_r+0x62e>
 8007f74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007f78:	e04a      	b.n	8008010 <_dtoa_r+0x6d8>
 8007f7a:	bf00      	nop
 8007f7c:	08009a50 	.word	0x08009a50
 8007f80:	08009a28 	.word	0x08009a28
 8007f84:	3ff00000 	.word	0x3ff00000
 8007f88:	40240000 	.word	0x40240000
 8007f8c:	401c0000 	.word	0x401c0000
 8007f90:	40140000 	.word	0x40140000
 8007f94:	3fe00000 	.word	0x3fe00000
 8007f98:	4baf      	ldr	r3, [pc, #700]	; (8008258 <_dtoa_r+0x920>)
 8007f9a:	f7f8 fb4d 	bl	8000638 <__aeabi_dmul>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	460f      	mov	r7, r1
 8007fa2:	e7ac      	b.n	8007efe <_dtoa_r+0x5c6>
 8007fa4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007fa8:	9d00      	ldr	r5, [sp, #0]
 8007faa:	4642      	mov	r2, r8
 8007fac:	464b      	mov	r3, r9
 8007fae:	4630      	mov	r0, r6
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	f7f8 fc6b 	bl	800088c <__aeabi_ddiv>
 8007fb6:	f7f8 fdef 	bl	8000b98 <__aeabi_d2iz>
 8007fba:	9002      	str	r0, [sp, #8]
 8007fbc:	f7f8 fad2 	bl	8000564 <__aeabi_i2d>
 8007fc0:	4642      	mov	r2, r8
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	f7f8 fb38 	bl	8000638 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4630      	mov	r0, r6
 8007fce:	4639      	mov	r1, r7
 8007fd0:	f7f8 f97a 	bl	80002c8 <__aeabi_dsub>
 8007fd4:	9e02      	ldr	r6, [sp, #8]
 8007fd6:	9f01      	ldr	r7, [sp, #4]
 8007fd8:	3630      	adds	r6, #48	; 0x30
 8007fda:	f805 6b01 	strb.w	r6, [r5], #1
 8007fde:	9e00      	ldr	r6, [sp, #0]
 8007fe0:	1bae      	subs	r6, r5, r6
 8007fe2:	42b7      	cmp	r7, r6
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	d137      	bne.n	800805a <_dtoa_r+0x722>
 8007fea:	f7f8 f96f 	bl	80002cc <__adddf3>
 8007fee:	4642      	mov	r2, r8
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	f7f8 fdaf 	bl	8000b58 <__aeabi_dcmpgt>
 8007ffa:	b9c8      	cbnz	r0, 8008030 <_dtoa_r+0x6f8>
 8007ffc:	4642      	mov	r2, r8
 8007ffe:	464b      	mov	r3, r9
 8008000:	4630      	mov	r0, r6
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fd80 	bl	8000b08 <__aeabi_dcmpeq>
 8008008:	b110      	cbz	r0, 8008010 <_dtoa_r+0x6d8>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	07d9      	lsls	r1, r3, #31
 800800e:	d40f      	bmi.n	8008030 <_dtoa_r+0x6f8>
 8008010:	4620      	mov	r0, r4
 8008012:	4659      	mov	r1, fp
 8008014:	f000 fbe2 	bl	80087dc <_Bfree>
 8008018:	2300      	movs	r3, #0
 800801a:	702b      	strb	r3, [r5, #0]
 800801c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800801e:	f10a 0001 	add.w	r0, sl, #1
 8008022:	6018      	str	r0, [r3, #0]
 8008024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008026:	2b00      	cmp	r3, #0
 8008028:	f43f acd8 	beq.w	80079dc <_dtoa_r+0xa4>
 800802c:	601d      	str	r5, [r3, #0]
 800802e:	e4d5      	b.n	80079dc <_dtoa_r+0xa4>
 8008030:	f8cd a01c 	str.w	sl, [sp, #28]
 8008034:	462b      	mov	r3, r5
 8008036:	461d      	mov	r5, r3
 8008038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800803c:	2a39      	cmp	r2, #57	; 0x39
 800803e:	d108      	bne.n	8008052 <_dtoa_r+0x71a>
 8008040:	9a00      	ldr	r2, [sp, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d1f7      	bne.n	8008036 <_dtoa_r+0x6fe>
 8008046:	9a07      	ldr	r2, [sp, #28]
 8008048:	9900      	ldr	r1, [sp, #0]
 800804a:	3201      	adds	r2, #1
 800804c:	9207      	str	r2, [sp, #28]
 800804e:	2230      	movs	r2, #48	; 0x30
 8008050:	700a      	strb	r2, [r1, #0]
 8008052:	781a      	ldrb	r2, [r3, #0]
 8008054:	3201      	adds	r2, #1
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	e78c      	b.n	8007f74 <_dtoa_r+0x63c>
 800805a:	4b7f      	ldr	r3, [pc, #508]	; (8008258 <_dtoa_r+0x920>)
 800805c:	2200      	movs	r2, #0
 800805e:	f7f8 faeb 	bl	8000638 <__aeabi_dmul>
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	4606      	mov	r6, r0
 8008068:	460f      	mov	r7, r1
 800806a:	f7f8 fd4d 	bl	8000b08 <__aeabi_dcmpeq>
 800806e:	2800      	cmp	r0, #0
 8008070:	d09b      	beq.n	8007faa <_dtoa_r+0x672>
 8008072:	e7cd      	b.n	8008010 <_dtoa_r+0x6d8>
 8008074:	9a08      	ldr	r2, [sp, #32]
 8008076:	2a00      	cmp	r2, #0
 8008078:	f000 80c4 	beq.w	8008204 <_dtoa_r+0x8cc>
 800807c:	9a05      	ldr	r2, [sp, #20]
 800807e:	2a01      	cmp	r2, #1
 8008080:	f300 80a8 	bgt.w	80081d4 <_dtoa_r+0x89c>
 8008084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008086:	2a00      	cmp	r2, #0
 8008088:	f000 80a0 	beq.w	80081cc <_dtoa_r+0x894>
 800808c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008090:	9e06      	ldr	r6, [sp, #24]
 8008092:	4645      	mov	r5, r8
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	2101      	movs	r1, #1
 8008098:	441a      	add	r2, r3
 800809a:	4620      	mov	r0, r4
 800809c:	4498      	add	r8, r3
 800809e:	9204      	str	r2, [sp, #16]
 80080a0:	f000 fc58 	bl	8008954 <__i2b>
 80080a4:	4607      	mov	r7, r0
 80080a6:	2d00      	cmp	r5, #0
 80080a8:	dd0b      	ble.n	80080c2 <_dtoa_r+0x78a>
 80080aa:	9b04      	ldr	r3, [sp, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	dd08      	ble.n	80080c2 <_dtoa_r+0x78a>
 80080b0:	42ab      	cmp	r3, r5
 80080b2:	9a04      	ldr	r2, [sp, #16]
 80080b4:	bfa8      	it	ge
 80080b6:	462b      	movge	r3, r5
 80080b8:	eba8 0803 	sub.w	r8, r8, r3
 80080bc:	1aed      	subs	r5, r5, r3
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	9b06      	ldr	r3, [sp, #24]
 80080c4:	b1fb      	cbz	r3, 8008106 <_dtoa_r+0x7ce>
 80080c6:	9b08      	ldr	r3, [sp, #32]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 809f 	beq.w	800820c <_dtoa_r+0x8d4>
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	dd11      	ble.n	80080f6 <_dtoa_r+0x7be>
 80080d2:	4639      	mov	r1, r7
 80080d4:	4632      	mov	r2, r6
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 fcf8 	bl	8008acc <__pow5mult>
 80080dc:	465a      	mov	r2, fp
 80080de:	4601      	mov	r1, r0
 80080e0:	4607      	mov	r7, r0
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fc4c 	bl	8008980 <__multiply>
 80080e8:	4659      	mov	r1, fp
 80080ea:	9007      	str	r0, [sp, #28]
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 fb75 	bl	80087dc <_Bfree>
 80080f2:	9b07      	ldr	r3, [sp, #28]
 80080f4:	469b      	mov	fp, r3
 80080f6:	9b06      	ldr	r3, [sp, #24]
 80080f8:	1b9a      	subs	r2, r3, r6
 80080fa:	d004      	beq.n	8008106 <_dtoa_r+0x7ce>
 80080fc:	4659      	mov	r1, fp
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 fce4 	bl	8008acc <__pow5mult>
 8008104:	4683      	mov	fp, r0
 8008106:	2101      	movs	r1, #1
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fc23 	bl	8008954 <__i2b>
 800810e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008110:	2b00      	cmp	r3, #0
 8008112:	4606      	mov	r6, r0
 8008114:	dd7c      	ble.n	8008210 <_dtoa_r+0x8d8>
 8008116:	461a      	mov	r2, r3
 8008118:	4601      	mov	r1, r0
 800811a:	4620      	mov	r0, r4
 800811c:	f000 fcd6 	bl	8008acc <__pow5mult>
 8008120:	9b05      	ldr	r3, [sp, #20]
 8008122:	2b01      	cmp	r3, #1
 8008124:	4606      	mov	r6, r0
 8008126:	dd76      	ble.n	8008216 <_dtoa_r+0x8de>
 8008128:	2300      	movs	r3, #0
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	6933      	ldr	r3, [r6, #16]
 800812e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008132:	6918      	ldr	r0, [r3, #16]
 8008134:	f000 fbbe 	bl	80088b4 <__hi0bits>
 8008138:	f1c0 0020 	rsb	r0, r0, #32
 800813c:	9b04      	ldr	r3, [sp, #16]
 800813e:	4418      	add	r0, r3
 8008140:	f010 001f 	ands.w	r0, r0, #31
 8008144:	f000 8086 	beq.w	8008254 <_dtoa_r+0x91c>
 8008148:	f1c0 0320 	rsb	r3, r0, #32
 800814c:	2b04      	cmp	r3, #4
 800814e:	dd7f      	ble.n	8008250 <_dtoa_r+0x918>
 8008150:	f1c0 001c 	rsb	r0, r0, #28
 8008154:	9b04      	ldr	r3, [sp, #16]
 8008156:	4403      	add	r3, r0
 8008158:	4480      	add	r8, r0
 800815a:	4405      	add	r5, r0
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	f1b8 0f00 	cmp.w	r8, #0
 8008162:	dd05      	ble.n	8008170 <_dtoa_r+0x838>
 8008164:	4659      	mov	r1, fp
 8008166:	4642      	mov	r2, r8
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fd09 	bl	8008b80 <__lshift>
 800816e:	4683      	mov	fp, r0
 8008170:	9b04      	ldr	r3, [sp, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	dd05      	ble.n	8008182 <_dtoa_r+0x84a>
 8008176:	4631      	mov	r1, r6
 8008178:	461a      	mov	r2, r3
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fd00 	bl	8008b80 <__lshift>
 8008180:	4606      	mov	r6, r0
 8008182:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008184:	2b00      	cmp	r3, #0
 8008186:	d069      	beq.n	800825c <_dtoa_r+0x924>
 8008188:	4631      	mov	r1, r6
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fd64 	bl	8008c58 <__mcmp>
 8008190:	2800      	cmp	r0, #0
 8008192:	da63      	bge.n	800825c <_dtoa_r+0x924>
 8008194:	2300      	movs	r3, #0
 8008196:	4659      	mov	r1, fp
 8008198:	220a      	movs	r2, #10
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fb40 	bl	8008820 <__multadd>
 80081a0:	9b08      	ldr	r3, [sp, #32]
 80081a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081a6:	4683      	mov	fp, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 818f 	beq.w	80084cc <_dtoa_r+0xb94>
 80081ae:	4639      	mov	r1, r7
 80081b0:	2300      	movs	r3, #0
 80081b2:	220a      	movs	r2, #10
 80081b4:	4620      	mov	r0, r4
 80081b6:	f000 fb33 	bl	8008820 <__multadd>
 80081ba:	f1b9 0f00 	cmp.w	r9, #0
 80081be:	4607      	mov	r7, r0
 80081c0:	f300 808e 	bgt.w	80082e0 <_dtoa_r+0x9a8>
 80081c4:	9b05      	ldr	r3, [sp, #20]
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	dc50      	bgt.n	800826c <_dtoa_r+0x934>
 80081ca:	e089      	b.n	80082e0 <_dtoa_r+0x9a8>
 80081cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081d2:	e75d      	b.n	8008090 <_dtoa_r+0x758>
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	1e5e      	subs	r6, r3, #1
 80081d8:	9b06      	ldr	r3, [sp, #24]
 80081da:	42b3      	cmp	r3, r6
 80081dc:	bfbf      	itttt	lt
 80081de:	9b06      	ldrlt	r3, [sp, #24]
 80081e0:	9606      	strlt	r6, [sp, #24]
 80081e2:	1af2      	sublt	r2, r6, r3
 80081e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80081e6:	bfb6      	itet	lt
 80081e8:	189b      	addlt	r3, r3, r2
 80081ea:	1b9e      	subge	r6, r3, r6
 80081ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	bfb8      	it	lt
 80081f2:	2600      	movlt	r6, #0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfb5      	itete	lt
 80081f8:	eba8 0503 	sublt.w	r5, r8, r3
 80081fc:	9b01      	ldrge	r3, [sp, #4]
 80081fe:	2300      	movlt	r3, #0
 8008200:	4645      	movge	r5, r8
 8008202:	e747      	b.n	8008094 <_dtoa_r+0x75c>
 8008204:	9e06      	ldr	r6, [sp, #24]
 8008206:	9f08      	ldr	r7, [sp, #32]
 8008208:	4645      	mov	r5, r8
 800820a:	e74c      	b.n	80080a6 <_dtoa_r+0x76e>
 800820c:	9a06      	ldr	r2, [sp, #24]
 800820e:	e775      	b.n	80080fc <_dtoa_r+0x7c4>
 8008210:	9b05      	ldr	r3, [sp, #20]
 8008212:	2b01      	cmp	r3, #1
 8008214:	dc18      	bgt.n	8008248 <_dtoa_r+0x910>
 8008216:	9b02      	ldr	r3, [sp, #8]
 8008218:	b9b3      	cbnz	r3, 8008248 <_dtoa_r+0x910>
 800821a:	9b03      	ldr	r3, [sp, #12]
 800821c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008220:	b9a3      	cbnz	r3, 800824c <_dtoa_r+0x914>
 8008222:	9b03      	ldr	r3, [sp, #12]
 8008224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008228:	0d1b      	lsrs	r3, r3, #20
 800822a:	051b      	lsls	r3, r3, #20
 800822c:	b12b      	cbz	r3, 800823a <_dtoa_r+0x902>
 800822e:	9b04      	ldr	r3, [sp, #16]
 8008230:	3301      	adds	r3, #1
 8008232:	9304      	str	r3, [sp, #16]
 8008234:	f108 0801 	add.w	r8, r8, #1
 8008238:	2301      	movs	r3, #1
 800823a:	9306      	str	r3, [sp, #24]
 800823c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823e:	2b00      	cmp	r3, #0
 8008240:	f47f af74 	bne.w	800812c <_dtoa_r+0x7f4>
 8008244:	2001      	movs	r0, #1
 8008246:	e779      	b.n	800813c <_dtoa_r+0x804>
 8008248:	2300      	movs	r3, #0
 800824a:	e7f6      	b.n	800823a <_dtoa_r+0x902>
 800824c:	9b02      	ldr	r3, [sp, #8]
 800824e:	e7f4      	b.n	800823a <_dtoa_r+0x902>
 8008250:	d085      	beq.n	800815e <_dtoa_r+0x826>
 8008252:	4618      	mov	r0, r3
 8008254:	301c      	adds	r0, #28
 8008256:	e77d      	b.n	8008154 <_dtoa_r+0x81c>
 8008258:	40240000 	.word	0x40240000
 800825c:	9b01      	ldr	r3, [sp, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	dc38      	bgt.n	80082d4 <_dtoa_r+0x99c>
 8008262:	9b05      	ldr	r3, [sp, #20]
 8008264:	2b02      	cmp	r3, #2
 8008266:	dd35      	ble.n	80082d4 <_dtoa_r+0x99c>
 8008268:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800826c:	f1b9 0f00 	cmp.w	r9, #0
 8008270:	d10d      	bne.n	800828e <_dtoa_r+0x956>
 8008272:	4631      	mov	r1, r6
 8008274:	464b      	mov	r3, r9
 8008276:	2205      	movs	r2, #5
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fad1 	bl	8008820 <__multadd>
 800827e:	4601      	mov	r1, r0
 8008280:	4606      	mov	r6, r0
 8008282:	4658      	mov	r0, fp
 8008284:	f000 fce8 	bl	8008c58 <__mcmp>
 8008288:	2800      	cmp	r0, #0
 800828a:	f73f adbd 	bgt.w	8007e08 <_dtoa_r+0x4d0>
 800828e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008290:	9d00      	ldr	r5, [sp, #0]
 8008292:	ea6f 0a03 	mvn.w	sl, r3
 8008296:	f04f 0800 	mov.w	r8, #0
 800829a:	4631      	mov	r1, r6
 800829c:	4620      	mov	r0, r4
 800829e:	f000 fa9d 	bl	80087dc <_Bfree>
 80082a2:	2f00      	cmp	r7, #0
 80082a4:	f43f aeb4 	beq.w	8008010 <_dtoa_r+0x6d8>
 80082a8:	f1b8 0f00 	cmp.w	r8, #0
 80082ac:	d005      	beq.n	80082ba <_dtoa_r+0x982>
 80082ae:	45b8      	cmp	r8, r7
 80082b0:	d003      	beq.n	80082ba <_dtoa_r+0x982>
 80082b2:	4641      	mov	r1, r8
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 fa91 	bl	80087dc <_Bfree>
 80082ba:	4639      	mov	r1, r7
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fa8d 	bl	80087dc <_Bfree>
 80082c2:	e6a5      	b.n	8008010 <_dtoa_r+0x6d8>
 80082c4:	2600      	movs	r6, #0
 80082c6:	4637      	mov	r7, r6
 80082c8:	e7e1      	b.n	800828e <_dtoa_r+0x956>
 80082ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80082cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80082d0:	4637      	mov	r7, r6
 80082d2:	e599      	b.n	8007e08 <_dtoa_r+0x4d0>
 80082d4:	9b08      	ldr	r3, [sp, #32]
 80082d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80fd 	beq.w	80084da <_dtoa_r+0xba2>
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	dd05      	ble.n	80082f0 <_dtoa_r+0x9b8>
 80082e4:	4639      	mov	r1, r7
 80082e6:	462a      	mov	r2, r5
 80082e8:	4620      	mov	r0, r4
 80082ea:	f000 fc49 	bl	8008b80 <__lshift>
 80082ee:	4607      	mov	r7, r0
 80082f0:	9b06      	ldr	r3, [sp, #24]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d05c      	beq.n	80083b0 <_dtoa_r+0xa78>
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fa2f 	bl	800875c <_Balloc>
 80082fe:	4605      	mov	r5, r0
 8008300:	b928      	cbnz	r0, 800830e <_dtoa_r+0x9d6>
 8008302:	4b80      	ldr	r3, [pc, #512]	; (8008504 <_dtoa_r+0xbcc>)
 8008304:	4602      	mov	r2, r0
 8008306:	f240 21ea 	movw	r1, #746	; 0x2ea
 800830a:	f7ff bb2e 	b.w	800796a <_dtoa_r+0x32>
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	3202      	adds	r2, #2
 8008312:	0092      	lsls	r2, r2, #2
 8008314:	f107 010c 	add.w	r1, r7, #12
 8008318:	300c      	adds	r0, #12
 800831a:	f000 fa11 	bl	8008740 <memcpy>
 800831e:	2201      	movs	r2, #1
 8008320:	4629      	mov	r1, r5
 8008322:	4620      	mov	r0, r4
 8008324:	f000 fc2c 	bl	8008b80 <__lshift>
 8008328:	9b00      	ldr	r3, [sp, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	9b00      	ldr	r3, [sp, #0]
 8008330:	444b      	add	r3, r9
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	9b02      	ldr	r3, [sp, #8]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	46b8      	mov	r8, r7
 800833c:	9306      	str	r3, [sp, #24]
 800833e:	4607      	mov	r7, r0
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	4631      	mov	r1, r6
 8008344:	3b01      	subs	r3, #1
 8008346:	4658      	mov	r0, fp
 8008348:	9302      	str	r3, [sp, #8]
 800834a:	f7ff fa69 	bl	8007820 <quorem>
 800834e:	4603      	mov	r3, r0
 8008350:	3330      	adds	r3, #48	; 0x30
 8008352:	9004      	str	r0, [sp, #16]
 8008354:	4641      	mov	r1, r8
 8008356:	4658      	mov	r0, fp
 8008358:	9308      	str	r3, [sp, #32]
 800835a:	f000 fc7d 	bl	8008c58 <__mcmp>
 800835e:	463a      	mov	r2, r7
 8008360:	4681      	mov	r9, r0
 8008362:	4631      	mov	r1, r6
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fc93 	bl	8008c90 <__mdiff>
 800836a:	68c2      	ldr	r2, [r0, #12]
 800836c:	9b08      	ldr	r3, [sp, #32]
 800836e:	4605      	mov	r5, r0
 8008370:	bb02      	cbnz	r2, 80083b4 <_dtoa_r+0xa7c>
 8008372:	4601      	mov	r1, r0
 8008374:	4658      	mov	r0, fp
 8008376:	f000 fc6f 	bl	8008c58 <__mcmp>
 800837a:	9b08      	ldr	r3, [sp, #32]
 800837c:	4602      	mov	r2, r0
 800837e:	4629      	mov	r1, r5
 8008380:	4620      	mov	r0, r4
 8008382:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008386:	f000 fa29 	bl	80087dc <_Bfree>
 800838a:	9b05      	ldr	r3, [sp, #20]
 800838c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800838e:	9d01      	ldr	r5, [sp, #4]
 8008390:	ea43 0102 	orr.w	r1, r3, r2
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	430b      	orrs	r3, r1
 8008398:	9b08      	ldr	r3, [sp, #32]
 800839a:	d10d      	bne.n	80083b8 <_dtoa_r+0xa80>
 800839c:	2b39      	cmp	r3, #57	; 0x39
 800839e:	d029      	beq.n	80083f4 <_dtoa_r+0xabc>
 80083a0:	f1b9 0f00 	cmp.w	r9, #0
 80083a4:	dd01      	ble.n	80083aa <_dtoa_r+0xa72>
 80083a6:	9b04      	ldr	r3, [sp, #16]
 80083a8:	3331      	adds	r3, #49	; 0x31
 80083aa:	9a02      	ldr	r2, [sp, #8]
 80083ac:	7013      	strb	r3, [r2, #0]
 80083ae:	e774      	b.n	800829a <_dtoa_r+0x962>
 80083b0:	4638      	mov	r0, r7
 80083b2:	e7b9      	b.n	8008328 <_dtoa_r+0x9f0>
 80083b4:	2201      	movs	r2, #1
 80083b6:	e7e2      	b.n	800837e <_dtoa_r+0xa46>
 80083b8:	f1b9 0f00 	cmp.w	r9, #0
 80083bc:	db06      	blt.n	80083cc <_dtoa_r+0xa94>
 80083be:	9905      	ldr	r1, [sp, #20]
 80083c0:	ea41 0909 	orr.w	r9, r1, r9
 80083c4:	9906      	ldr	r1, [sp, #24]
 80083c6:	ea59 0101 	orrs.w	r1, r9, r1
 80083ca:	d120      	bne.n	800840e <_dtoa_r+0xad6>
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	ddec      	ble.n	80083aa <_dtoa_r+0xa72>
 80083d0:	4659      	mov	r1, fp
 80083d2:	2201      	movs	r2, #1
 80083d4:	4620      	mov	r0, r4
 80083d6:	9301      	str	r3, [sp, #4]
 80083d8:	f000 fbd2 	bl	8008b80 <__lshift>
 80083dc:	4631      	mov	r1, r6
 80083de:	4683      	mov	fp, r0
 80083e0:	f000 fc3a 	bl	8008c58 <__mcmp>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	dc02      	bgt.n	80083f0 <_dtoa_r+0xab8>
 80083ea:	d1de      	bne.n	80083aa <_dtoa_r+0xa72>
 80083ec:	07da      	lsls	r2, r3, #31
 80083ee:	d5dc      	bpl.n	80083aa <_dtoa_r+0xa72>
 80083f0:	2b39      	cmp	r3, #57	; 0x39
 80083f2:	d1d8      	bne.n	80083a6 <_dtoa_r+0xa6e>
 80083f4:	9a02      	ldr	r2, [sp, #8]
 80083f6:	2339      	movs	r3, #57	; 0x39
 80083f8:	7013      	strb	r3, [r2, #0]
 80083fa:	462b      	mov	r3, r5
 80083fc:	461d      	mov	r5, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008404:	2a39      	cmp	r2, #57	; 0x39
 8008406:	d050      	beq.n	80084aa <_dtoa_r+0xb72>
 8008408:	3201      	adds	r2, #1
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e745      	b.n	800829a <_dtoa_r+0x962>
 800840e:	2a00      	cmp	r2, #0
 8008410:	dd03      	ble.n	800841a <_dtoa_r+0xae2>
 8008412:	2b39      	cmp	r3, #57	; 0x39
 8008414:	d0ee      	beq.n	80083f4 <_dtoa_r+0xabc>
 8008416:	3301      	adds	r3, #1
 8008418:	e7c7      	b.n	80083aa <_dtoa_r+0xa72>
 800841a:	9a01      	ldr	r2, [sp, #4]
 800841c:	9907      	ldr	r1, [sp, #28]
 800841e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008422:	428a      	cmp	r2, r1
 8008424:	d02a      	beq.n	800847c <_dtoa_r+0xb44>
 8008426:	4659      	mov	r1, fp
 8008428:	2300      	movs	r3, #0
 800842a:	220a      	movs	r2, #10
 800842c:	4620      	mov	r0, r4
 800842e:	f000 f9f7 	bl	8008820 <__multadd>
 8008432:	45b8      	cmp	r8, r7
 8008434:	4683      	mov	fp, r0
 8008436:	f04f 0300 	mov.w	r3, #0
 800843a:	f04f 020a 	mov.w	r2, #10
 800843e:	4641      	mov	r1, r8
 8008440:	4620      	mov	r0, r4
 8008442:	d107      	bne.n	8008454 <_dtoa_r+0xb1c>
 8008444:	f000 f9ec 	bl	8008820 <__multadd>
 8008448:	4680      	mov	r8, r0
 800844a:	4607      	mov	r7, r0
 800844c:	9b01      	ldr	r3, [sp, #4]
 800844e:	3301      	adds	r3, #1
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	e775      	b.n	8008340 <_dtoa_r+0xa08>
 8008454:	f000 f9e4 	bl	8008820 <__multadd>
 8008458:	4639      	mov	r1, r7
 800845a:	4680      	mov	r8, r0
 800845c:	2300      	movs	r3, #0
 800845e:	220a      	movs	r2, #10
 8008460:	4620      	mov	r0, r4
 8008462:	f000 f9dd 	bl	8008820 <__multadd>
 8008466:	4607      	mov	r7, r0
 8008468:	e7f0      	b.n	800844c <_dtoa_r+0xb14>
 800846a:	f1b9 0f00 	cmp.w	r9, #0
 800846e:	9a00      	ldr	r2, [sp, #0]
 8008470:	bfcc      	ite	gt
 8008472:	464d      	movgt	r5, r9
 8008474:	2501      	movle	r5, #1
 8008476:	4415      	add	r5, r2
 8008478:	f04f 0800 	mov.w	r8, #0
 800847c:	4659      	mov	r1, fp
 800847e:	2201      	movs	r2, #1
 8008480:	4620      	mov	r0, r4
 8008482:	9301      	str	r3, [sp, #4]
 8008484:	f000 fb7c 	bl	8008b80 <__lshift>
 8008488:	4631      	mov	r1, r6
 800848a:	4683      	mov	fp, r0
 800848c:	f000 fbe4 	bl	8008c58 <__mcmp>
 8008490:	2800      	cmp	r0, #0
 8008492:	dcb2      	bgt.n	80083fa <_dtoa_r+0xac2>
 8008494:	d102      	bne.n	800849c <_dtoa_r+0xb64>
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	07db      	lsls	r3, r3, #31
 800849a:	d4ae      	bmi.n	80083fa <_dtoa_r+0xac2>
 800849c:	462b      	mov	r3, r5
 800849e:	461d      	mov	r5, r3
 80084a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084a4:	2a30      	cmp	r2, #48	; 0x30
 80084a6:	d0fa      	beq.n	800849e <_dtoa_r+0xb66>
 80084a8:	e6f7      	b.n	800829a <_dtoa_r+0x962>
 80084aa:	9a00      	ldr	r2, [sp, #0]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d1a5      	bne.n	80083fc <_dtoa_r+0xac4>
 80084b0:	f10a 0a01 	add.w	sl, sl, #1
 80084b4:	2331      	movs	r3, #49	; 0x31
 80084b6:	e779      	b.n	80083ac <_dtoa_r+0xa74>
 80084b8:	4b13      	ldr	r3, [pc, #76]	; (8008508 <_dtoa_r+0xbd0>)
 80084ba:	f7ff baaf 	b.w	8007a1c <_dtoa_r+0xe4>
 80084be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f47f aa86 	bne.w	80079d2 <_dtoa_r+0x9a>
 80084c6:	4b11      	ldr	r3, [pc, #68]	; (800850c <_dtoa_r+0xbd4>)
 80084c8:	f7ff baa8 	b.w	8007a1c <_dtoa_r+0xe4>
 80084cc:	f1b9 0f00 	cmp.w	r9, #0
 80084d0:	dc03      	bgt.n	80084da <_dtoa_r+0xba2>
 80084d2:	9b05      	ldr	r3, [sp, #20]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	f73f aec9 	bgt.w	800826c <_dtoa_r+0x934>
 80084da:	9d00      	ldr	r5, [sp, #0]
 80084dc:	4631      	mov	r1, r6
 80084de:	4658      	mov	r0, fp
 80084e0:	f7ff f99e 	bl	8007820 <quorem>
 80084e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80084e8:	f805 3b01 	strb.w	r3, [r5], #1
 80084ec:	9a00      	ldr	r2, [sp, #0]
 80084ee:	1aaa      	subs	r2, r5, r2
 80084f0:	4591      	cmp	r9, r2
 80084f2:	ddba      	ble.n	800846a <_dtoa_r+0xb32>
 80084f4:	4659      	mov	r1, fp
 80084f6:	2300      	movs	r3, #0
 80084f8:	220a      	movs	r2, #10
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 f990 	bl	8008820 <__multadd>
 8008500:	4683      	mov	fp, r0
 8008502:	e7eb      	b.n	80084dc <_dtoa_r+0xba4>
 8008504:	08009953 	.word	0x08009953
 8008508:	080098ac 	.word	0x080098ac
 800850c:	080098d0 	.word	0x080098d0

08008510 <std>:
 8008510:	2300      	movs	r3, #0
 8008512:	b510      	push	{r4, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	e9c0 3300 	strd	r3, r3, [r0]
 800851a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800851e:	6083      	str	r3, [r0, #8]
 8008520:	8181      	strh	r1, [r0, #12]
 8008522:	6643      	str	r3, [r0, #100]	; 0x64
 8008524:	81c2      	strh	r2, [r0, #14]
 8008526:	6183      	str	r3, [r0, #24]
 8008528:	4619      	mov	r1, r3
 800852a:	2208      	movs	r2, #8
 800852c:	305c      	adds	r0, #92	; 0x5c
 800852e:	f7fe fc87 	bl	8006e40 <memset>
 8008532:	4b05      	ldr	r3, [pc, #20]	; (8008548 <std+0x38>)
 8008534:	6263      	str	r3, [r4, #36]	; 0x24
 8008536:	4b05      	ldr	r3, [pc, #20]	; (800854c <std+0x3c>)
 8008538:	62a3      	str	r3, [r4, #40]	; 0x28
 800853a:	4b05      	ldr	r3, [pc, #20]	; (8008550 <std+0x40>)
 800853c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800853e:	4b05      	ldr	r3, [pc, #20]	; (8008554 <std+0x44>)
 8008540:	6224      	str	r4, [r4, #32]
 8008542:	6323      	str	r3, [r4, #48]	; 0x30
 8008544:	bd10      	pop	{r4, pc}
 8008546:	bf00      	nop
 8008548:	08007755 	.word	0x08007755
 800854c:	08007777 	.word	0x08007777
 8008550:	080077af 	.word	0x080077af
 8008554:	080077d3 	.word	0x080077d3

08008558 <_cleanup_r>:
 8008558:	4901      	ldr	r1, [pc, #4]	; (8008560 <_cleanup_r+0x8>)
 800855a:	f000 b8af 	b.w	80086bc <_fwalk_reent>
 800855e:	bf00      	nop
 8008560:	0800958d 	.word	0x0800958d

08008564 <__sfmoreglue>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	1e4a      	subs	r2, r1, #1
 8008568:	2568      	movs	r5, #104	; 0x68
 800856a:	4355      	muls	r5, r2
 800856c:	460e      	mov	r6, r1
 800856e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008572:	f000 fcd1 	bl	8008f18 <_malloc_r>
 8008576:	4604      	mov	r4, r0
 8008578:	b140      	cbz	r0, 800858c <__sfmoreglue+0x28>
 800857a:	2100      	movs	r1, #0
 800857c:	e9c0 1600 	strd	r1, r6, [r0]
 8008580:	300c      	adds	r0, #12
 8008582:	60a0      	str	r0, [r4, #8]
 8008584:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008588:	f7fe fc5a 	bl	8006e40 <memset>
 800858c:	4620      	mov	r0, r4
 800858e:	bd70      	pop	{r4, r5, r6, pc}

08008590 <__sfp_lock_acquire>:
 8008590:	4801      	ldr	r0, [pc, #4]	; (8008598 <__sfp_lock_acquire+0x8>)
 8008592:	f000 b8b8 	b.w	8008706 <__retarget_lock_acquire_recursive>
 8008596:	bf00      	nop
 8008598:	200007f4 	.word	0x200007f4

0800859c <__sfp_lock_release>:
 800859c:	4801      	ldr	r0, [pc, #4]	; (80085a4 <__sfp_lock_release+0x8>)
 800859e:	f000 b8b3 	b.w	8008708 <__retarget_lock_release_recursive>
 80085a2:	bf00      	nop
 80085a4:	200007f4 	.word	0x200007f4

080085a8 <__sinit_lock_acquire>:
 80085a8:	4801      	ldr	r0, [pc, #4]	; (80085b0 <__sinit_lock_acquire+0x8>)
 80085aa:	f000 b8ac 	b.w	8008706 <__retarget_lock_acquire_recursive>
 80085ae:	bf00      	nop
 80085b0:	200007ef 	.word	0x200007ef

080085b4 <__sinit_lock_release>:
 80085b4:	4801      	ldr	r0, [pc, #4]	; (80085bc <__sinit_lock_release+0x8>)
 80085b6:	f000 b8a7 	b.w	8008708 <__retarget_lock_release_recursive>
 80085ba:	bf00      	nop
 80085bc:	200007ef 	.word	0x200007ef

080085c0 <__sinit>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	f7ff fff0 	bl	80085a8 <__sinit_lock_acquire>
 80085c8:	69a3      	ldr	r3, [r4, #24]
 80085ca:	b11b      	cbz	r3, 80085d4 <__sinit+0x14>
 80085cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d0:	f7ff bff0 	b.w	80085b4 <__sinit_lock_release>
 80085d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085d8:	6523      	str	r3, [r4, #80]	; 0x50
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <__sinit+0x68>)
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <__sinit+0x6c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	bf04      	itt	eq
 80085e6:	2301      	moveq	r3, #1
 80085e8:	61a3      	streq	r3, [r4, #24]
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 f820 	bl	8008630 <__sfp>
 80085f0:	6060      	str	r0, [r4, #4]
 80085f2:	4620      	mov	r0, r4
 80085f4:	f000 f81c 	bl	8008630 <__sfp>
 80085f8:	60a0      	str	r0, [r4, #8]
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 f818 	bl	8008630 <__sfp>
 8008600:	2200      	movs	r2, #0
 8008602:	60e0      	str	r0, [r4, #12]
 8008604:	2104      	movs	r1, #4
 8008606:	6860      	ldr	r0, [r4, #4]
 8008608:	f7ff ff82 	bl	8008510 <std>
 800860c:	68a0      	ldr	r0, [r4, #8]
 800860e:	2201      	movs	r2, #1
 8008610:	2109      	movs	r1, #9
 8008612:	f7ff ff7d 	bl	8008510 <std>
 8008616:	68e0      	ldr	r0, [r4, #12]
 8008618:	2202      	movs	r2, #2
 800861a:	2112      	movs	r1, #18
 800861c:	f7ff ff78 	bl	8008510 <std>
 8008620:	2301      	movs	r3, #1
 8008622:	61a3      	str	r3, [r4, #24]
 8008624:	e7d2      	b.n	80085cc <__sinit+0xc>
 8008626:	bf00      	nop
 8008628:	08009898 	.word	0x08009898
 800862c:	08008559 	.word	0x08008559

08008630 <__sfp>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	4607      	mov	r7, r0
 8008634:	f7ff ffac 	bl	8008590 <__sfp_lock_acquire>
 8008638:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <__sfp+0x84>)
 800863a:	681e      	ldr	r6, [r3, #0]
 800863c:	69b3      	ldr	r3, [r6, #24]
 800863e:	b913      	cbnz	r3, 8008646 <__sfp+0x16>
 8008640:	4630      	mov	r0, r6
 8008642:	f7ff ffbd 	bl	80085c0 <__sinit>
 8008646:	3648      	adds	r6, #72	; 0x48
 8008648:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800864c:	3b01      	subs	r3, #1
 800864e:	d503      	bpl.n	8008658 <__sfp+0x28>
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	b30b      	cbz	r3, 8008698 <__sfp+0x68>
 8008654:	6836      	ldr	r6, [r6, #0]
 8008656:	e7f7      	b.n	8008648 <__sfp+0x18>
 8008658:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800865c:	b9d5      	cbnz	r5, 8008694 <__sfp+0x64>
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <__sfp+0x88>)
 8008660:	60e3      	str	r3, [r4, #12]
 8008662:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008666:	6665      	str	r5, [r4, #100]	; 0x64
 8008668:	f000 f84c 	bl	8008704 <__retarget_lock_init_recursive>
 800866c:	f7ff ff96 	bl	800859c <__sfp_lock_release>
 8008670:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008674:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008678:	6025      	str	r5, [r4, #0]
 800867a:	61a5      	str	r5, [r4, #24]
 800867c:	2208      	movs	r2, #8
 800867e:	4629      	mov	r1, r5
 8008680:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008684:	f7fe fbdc 	bl	8006e40 <memset>
 8008688:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800868c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008690:	4620      	mov	r0, r4
 8008692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008694:	3468      	adds	r4, #104	; 0x68
 8008696:	e7d9      	b.n	800864c <__sfp+0x1c>
 8008698:	2104      	movs	r1, #4
 800869a:	4638      	mov	r0, r7
 800869c:	f7ff ff62 	bl	8008564 <__sfmoreglue>
 80086a0:	4604      	mov	r4, r0
 80086a2:	6030      	str	r0, [r6, #0]
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d1d5      	bne.n	8008654 <__sfp+0x24>
 80086a8:	f7ff ff78 	bl	800859c <__sfp_lock_release>
 80086ac:	230c      	movs	r3, #12
 80086ae:	603b      	str	r3, [r7, #0]
 80086b0:	e7ee      	b.n	8008690 <__sfp+0x60>
 80086b2:	bf00      	nop
 80086b4:	08009898 	.word	0x08009898
 80086b8:	ffff0001 	.word	0xffff0001

080086bc <_fwalk_reent>:
 80086bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c0:	4606      	mov	r6, r0
 80086c2:	4688      	mov	r8, r1
 80086c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086c8:	2700      	movs	r7, #0
 80086ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086ce:	f1b9 0901 	subs.w	r9, r9, #1
 80086d2:	d505      	bpl.n	80086e0 <_fwalk_reent+0x24>
 80086d4:	6824      	ldr	r4, [r4, #0]
 80086d6:	2c00      	cmp	r4, #0
 80086d8:	d1f7      	bne.n	80086ca <_fwalk_reent+0xe>
 80086da:	4638      	mov	r0, r7
 80086dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e0:	89ab      	ldrh	r3, [r5, #12]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d907      	bls.n	80086f6 <_fwalk_reent+0x3a>
 80086e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086ea:	3301      	adds	r3, #1
 80086ec:	d003      	beq.n	80086f6 <_fwalk_reent+0x3a>
 80086ee:	4629      	mov	r1, r5
 80086f0:	4630      	mov	r0, r6
 80086f2:	47c0      	blx	r8
 80086f4:	4307      	orrs	r7, r0
 80086f6:	3568      	adds	r5, #104	; 0x68
 80086f8:	e7e9      	b.n	80086ce <_fwalk_reent+0x12>
	...

080086fc <_localeconv_r>:
 80086fc:	4800      	ldr	r0, [pc, #0]	; (8008700 <_localeconv_r+0x4>)
 80086fe:	4770      	bx	lr
 8008700:	2000017c 	.word	0x2000017c

08008704 <__retarget_lock_init_recursive>:
 8008704:	4770      	bx	lr

08008706 <__retarget_lock_acquire_recursive>:
 8008706:	4770      	bx	lr

08008708 <__retarget_lock_release_recursive>:
 8008708:	4770      	bx	lr
	...

0800870c <_lseek_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	; (800872c <_lseek_r+0x20>)
 8008710:	4604      	mov	r4, r0
 8008712:	4608      	mov	r0, r1
 8008714:	4611      	mov	r1, r2
 8008716:	2200      	movs	r2, #0
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	f7f9 f984 	bl	8001a28 <_lseek>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_lseek_r+0x1e>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_lseek_r+0x1e>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	200007f8 	.word	0x200007f8

08008730 <malloc>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <malloc+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f000 bbef 	b.w	8008f18 <_malloc_r>
 800873a:	bf00      	nop
 800873c:	20000028 	.word	0x20000028

08008740 <memcpy>:
 8008740:	440a      	add	r2, r1
 8008742:	4291      	cmp	r1, r2
 8008744:	f100 33ff 	add.w	r3, r0, #4294967295
 8008748:	d100      	bne.n	800874c <memcpy+0xc>
 800874a:	4770      	bx	lr
 800874c:	b510      	push	{r4, lr}
 800874e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008756:	4291      	cmp	r1, r2
 8008758:	d1f9      	bne.n	800874e <memcpy+0xe>
 800875a:	bd10      	pop	{r4, pc}

0800875c <_Balloc>:
 800875c:	b570      	push	{r4, r5, r6, lr}
 800875e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008760:	4604      	mov	r4, r0
 8008762:	460d      	mov	r5, r1
 8008764:	b976      	cbnz	r6, 8008784 <_Balloc+0x28>
 8008766:	2010      	movs	r0, #16
 8008768:	f7ff ffe2 	bl	8008730 <malloc>
 800876c:	4602      	mov	r2, r0
 800876e:	6260      	str	r0, [r4, #36]	; 0x24
 8008770:	b920      	cbnz	r0, 800877c <_Balloc+0x20>
 8008772:	4b18      	ldr	r3, [pc, #96]	; (80087d4 <_Balloc+0x78>)
 8008774:	4818      	ldr	r0, [pc, #96]	; (80087d8 <_Balloc+0x7c>)
 8008776:	2166      	movs	r1, #102	; 0x66
 8008778:	f000 fe64 	bl	8009444 <__assert_func>
 800877c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008780:	6006      	str	r6, [r0, #0]
 8008782:	60c6      	str	r6, [r0, #12]
 8008784:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008786:	68f3      	ldr	r3, [r6, #12]
 8008788:	b183      	cbz	r3, 80087ac <_Balloc+0x50>
 800878a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008792:	b9b8      	cbnz	r0, 80087c4 <_Balloc+0x68>
 8008794:	2101      	movs	r1, #1
 8008796:	fa01 f605 	lsl.w	r6, r1, r5
 800879a:	1d72      	adds	r2, r6, #5
 800879c:	0092      	lsls	r2, r2, #2
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 fb5a 	bl	8008e58 <_calloc_r>
 80087a4:	b160      	cbz	r0, 80087c0 <_Balloc+0x64>
 80087a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087aa:	e00e      	b.n	80087ca <_Balloc+0x6e>
 80087ac:	2221      	movs	r2, #33	; 0x21
 80087ae:	2104      	movs	r1, #4
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fb51 	bl	8008e58 <_calloc_r>
 80087b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087b8:	60f0      	str	r0, [r6, #12]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e4      	bne.n	800878a <_Balloc+0x2e>
 80087c0:	2000      	movs	r0, #0
 80087c2:	bd70      	pop	{r4, r5, r6, pc}
 80087c4:	6802      	ldr	r2, [r0, #0]
 80087c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087ca:	2300      	movs	r3, #0
 80087cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087d0:	e7f7      	b.n	80087c2 <_Balloc+0x66>
 80087d2:	bf00      	nop
 80087d4:	080098dd 	.word	0x080098dd
 80087d8:	080099c4 	.word	0x080099c4

080087dc <_Bfree>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087e0:	4605      	mov	r5, r0
 80087e2:	460c      	mov	r4, r1
 80087e4:	b976      	cbnz	r6, 8008804 <_Bfree+0x28>
 80087e6:	2010      	movs	r0, #16
 80087e8:	f7ff ffa2 	bl	8008730 <malloc>
 80087ec:	4602      	mov	r2, r0
 80087ee:	6268      	str	r0, [r5, #36]	; 0x24
 80087f0:	b920      	cbnz	r0, 80087fc <_Bfree+0x20>
 80087f2:	4b09      	ldr	r3, [pc, #36]	; (8008818 <_Bfree+0x3c>)
 80087f4:	4809      	ldr	r0, [pc, #36]	; (800881c <_Bfree+0x40>)
 80087f6:	218a      	movs	r1, #138	; 0x8a
 80087f8:	f000 fe24 	bl	8009444 <__assert_func>
 80087fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008800:	6006      	str	r6, [r0, #0]
 8008802:	60c6      	str	r6, [r0, #12]
 8008804:	b13c      	cbz	r4, 8008816 <_Bfree+0x3a>
 8008806:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008808:	6862      	ldr	r2, [r4, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008810:	6021      	str	r1, [r4, #0]
 8008812:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	080098dd 	.word	0x080098dd
 800881c:	080099c4 	.word	0x080099c4

08008820 <__multadd>:
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	690e      	ldr	r6, [r1, #16]
 8008826:	4607      	mov	r7, r0
 8008828:	4698      	mov	r8, r3
 800882a:	460c      	mov	r4, r1
 800882c:	f101 0014 	add.w	r0, r1, #20
 8008830:	2300      	movs	r3, #0
 8008832:	6805      	ldr	r5, [r0, #0]
 8008834:	b2a9      	uxth	r1, r5
 8008836:	fb02 8101 	mla	r1, r2, r1, r8
 800883a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800883e:	0c2d      	lsrs	r5, r5, #16
 8008840:	fb02 c505 	mla	r5, r2, r5, ip
 8008844:	b289      	uxth	r1, r1
 8008846:	3301      	adds	r3, #1
 8008848:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800884c:	429e      	cmp	r6, r3
 800884e:	f840 1b04 	str.w	r1, [r0], #4
 8008852:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008856:	dcec      	bgt.n	8008832 <__multadd+0x12>
 8008858:	f1b8 0f00 	cmp.w	r8, #0
 800885c:	d022      	beq.n	80088a4 <__multadd+0x84>
 800885e:	68a3      	ldr	r3, [r4, #8]
 8008860:	42b3      	cmp	r3, r6
 8008862:	dc19      	bgt.n	8008898 <__multadd+0x78>
 8008864:	6861      	ldr	r1, [r4, #4]
 8008866:	4638      	mov	r0, r7
 8008868:	3101      	adds	r1, #1
 800886a:	f7ff ff77 	bl	800875c <_Balloc>
 800886e:	4605      	mov	r5, r0
 8008870:	b928      	cbnz	r0, 800887e <__multadd+0x5e>
 8008872:	4602      	mov	r2, r0
 8008874:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <__multadd+0x8c>)
 8008876:	480e      	ldr	r0, [pc, #56]	; (80088b0 <__multadd+0x90>)
 8008878:	21b5      	movs	r1, #181	; 0xb5
 800887a:	f000 fde3 	bl	8009444 <__assert_func>
 800887e:	6922      	ldr	r2, [r4, #16]
 8008880:	3202      	adds	r2, #2
 8008882:	f104 010c 	add.w	r1, r4, #12
 8008886:	0092      	lsls	r2, r2, #2
 8008888:	300c      	adds	r0, #12
 800888a:	f7ff ff59 	bl	8008740 <memcpy>
 800888e:	4621      	mov	r1, r4
 8008890:	4638      	mov	r0, r7
 8008892:	f7ff ffa3 	bl	80087dc <_Bfree>
 8008896:	462c      	mov	r4, r5
 8008898:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800889c:	3601      	adds	r6, #1
 800889e:	f8c3 8014 	str.w	r8, [r3, #20]
 80088a2:	6126      	str	r6, [r4, #16]
 80088a4:	4620      	mov	r0, r4
 80088a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088aa:	bf00      	nop
 80088ac:	08009953 	.word	0x08009953
 80088b0:	080099c4 	.word	0x080099c4

080088b4 <__hi0bits>:
 80088b4:	0c03      	lsrs	r3, r0, #16
 80088b6:	041b      	lsls	r3, r3, #16
 80088b8:	b9d3      	cbnz	r3, 80088f0 <__hi0bits+0x3c>
 80088ba:	0400      	lsls	r0, r0, #16
 80088bc:	2310      	movs	r3, #16
 80088be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088c2:	bf04      	itt	eq
 80088c4:	0200      	lsleq	r0, r0, #8
 80088c6:	3308      	addeq	r3, #8
 80088c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088cc:	bf04      	itt	eq
 80088ce:	0100      	lsleq	r0, r0, #4
 80088d0:	3304      	addeq	r3, #4
 80088d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088d6:	bf04      	itt	eq
 80088d8:	0080      	lsleq	r0, r0, #2
 80088da:	3302      	addeq	r3, #2
 80088dc:	2800      	cmp	r0, #0
 80088de:	db05      	blt.n	80088ec <__hi0bits+0x38>
 80088e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088e4:	f103 0301 	add.w	r3, r3, #1
 80088e8:	bf08      	it	eq
 80088ea:	2320      	moveq	r3, #32
 80088ec:	4618      	mov	r0, r3
 80088ee:	4770      	bx	lr
 80088f0:	2300      	movs	r3, #0
 80088f2:	e7e4      	b.n	80088be <__hi0bits+0xa>

080088f4 <__lo0bits>:
 80088f4:	6803      	ldr	r3, [r0, #0]
 80088f6:	f013 0207 	ands.w	r2, r3, #7
 80088fa:	4601      	mov	r1, r0
 80088fc:	d00b      	beq.n	8008916 <__lo0bits+0x22>
 80088fe:	07da      	lsls	r2, r3, #31
 8008900:	d424      	bmi.n	800894c <__lo0bits+0x58>
 8008902:	0798      	lsls	r0, r3, #30
 8008904:	bf49      	itett	mi
 8008906:	085b      	lsrmi	r3, r3, #1
 8008908:	089b      	lsrpl	r3, r3, #2
 800890a:	2001      	movmi	r0, #1
 800890c:	600b      	strmi	r3, [r1, #0]
 800890e:	bf5c      	itt	pl
 8008910:	600b      	strpl	r3, [r1, #0]
 8008912:	2002      	movpl	r0, #2
 8008914:	4770      	bx	lr
 8008916:	b298      	uxth	r0, r3
 8008918:	b9b0      	cbnz	r0, 8008948 <__lo0bits+0x54>
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	2010      	movs	r0, #16
 800891e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008922:	bf04      	itt	eq
 8008924:	0a1b      	lsreq	r3, r3, #8
 8008926:	3008      	addeq	r0, #8
 8008928:	071a      	lsls	r2, r3, #28
 800892a:	bf04      	itt	eq
 800892c:	091b      	lsreq	r3, r3, #4
 800892e:	3004      	addeq	r0, #4
 8008930:	079a      	lsls	r2, r3, #30
 8008932:	bf04      	itt	eq
 8008934:	089b      	lsreq	r3, r3, #2
 8008936:	3002      	addeq	r0, #2
 8008938:	07da      	lsls	r2, r3, #31
 800893a:	d403      	bmi.n	8008944 <__lo0bits+0x50>
 800893c:	085b      	lsrs	r3, r3, #1
 800893e:	f100 0001 	add.w	r0, r0, #1
 8008942:	d005      	beq.n	8008950 <__lo0bits+0x5c>
 8008944:	600b      	str	r3, [r1, #0]
 8008946:	4770      	bx	lr
 8008948:	4610      	mov	r0, r2
 800894a:	e7e8      	b.n	800891e <__lo0bits+0x2a>
 800894c:	2000      	movs	r0, #0
 800894e:	4770      	bx	lr
 8008950:	2020      	movs	r0, #32
 8008952:	4770      	bx	lr

08008954 <__i2b>:
 8008954:	b510      	push	{r4, lr}
 8008956:	460c      	mov	r4, r1
 8008958:	2101      	movs	r1, #1
 800895a:	f7ff feff 	bl	800875c <_Balloc>
 800895e:	4602      	mov	r2, r0
 8008960:	b928      	cbnz	r0, 800896e <__i2b+0x1a>
 8008962:	4b05      	ldr	r3, [pc, #20]	; (8008978 <__i2b+0x24>)
 8008964:	4805      	ldr	r0, [pc, #20]	; (800897c <__i2b+0x28>)
 8008966:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800896a:	f000 fd6b 	bl	8009444 <__assert_func>
 800896e:	2301      	movs	r3, #1
 8008970:	6144      	str	r4, [r0, #20]
 8008972:	6103      	str	r3, [r0, #16]
 8008974:	bd10      	pop	{r4, pc}
 8008976:	bf00      	nop
 8008978:	08009953 	.word	0x08009953
 800897c:	080099c4 	.word	0x080099c4

08008980 <__multiply>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	4614      	mov	r4, r2
 8008986:	690a      	ldr	r2, [r1, #16]
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	429a      	cmp	r2, r3
 800898c:	bfb8      	it	lt
 800898e:	460b      	movlt	r3, r1
 8008990:	460d      	mov	r5, r1
 8008992:	bfbc      	itt	lt
 8008994:	4625      	movlt	r5, r4
 8008996:	461c      	movlt	r4, r3
 8008998:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800899c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089a0:	68ab      	ldr	r3, [r5, #8]
 80089a2:	6869      	ldr	r1, [r5, #4]
 80089a4:	eb0a 0709 	add.w	r7, sl, r9
 80089a8:	42bb      	cmp	r3, r7
 80089aa:	b085      	sub	sp, #20
 80089ac:	bfb8      	it	lt
 80089ae:	3101      	addlt	r1, #1
 80089b0:	f7ff fed4 	bl	800875c <_Balloc>
 80089b4:	b930      	cbnz	r0, 80089c4 <__multiply+0x44>
 80089b6:	4602      	mov	r2, r0
 80089b8:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <__multiply+0x144>)
 80089ba:	4843      	ldr	r0, [pc, #268]	; (8008ac8 <__multiply+0x148>)
 80089bc:	f240 115d 	movw	r1, #349	; 0x15d
 80089c0:	f000 fd40 	bl	8009444 <__assert_func>
 80089c4:	f100 0614 	add.w	r6, r0, #20
 80089c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80089cc:	4633      	mov	r3, r6
 80089ce:	2200      	movs	r2, #0
 80089d0:	4543      	cmp	r3, r8
 80089d2:	d31e      	bcc.n	8008a12 <__multiply+0x92>
 80089d4:	f105 0c14 	add.w	ip, r5, #20
 80089d8:	f104 0314 	add.w	r3, r4, #20
 80089dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80089e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80089e4:	9202      	str	r2, [sp, #8]
 80089e6:	ebac 0205 	sub.w	r2, ip, r5
 80089ea:	3a15      	subs	r2, #21
 80089ec:	f022 0203 	bic.w	r2, r2, #3
 80089f0:	3204      	adds	r2, #4
 80089f2:	f105 0115 	add.w	r1, r5, #21
 80089f6:	458c      	cmp	ip, r1
 80089f8:	bf38      	it	cc
 80089fa:	2204      	movcc	r2, #4
 80089fc:	9201      	str	r2, [sp, #4]
 80089fe:	9a02      	ldr	r2, [sp, #8]
 8008a00:	9303      	str	r3, [sp, #12]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d808      	bhi.n	8008a18 <__multiply+0x98>
 8008a06:	2f00      	cmp	r7, #0
 8008a08:	dc55      	bgt.n	8008ab6 <__multiply+0x136>
 8008a0a:	6107      	str	r7, [r0, #16]
 8008a0c:	b005      	add	sp, #20
 8008a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a12:	f843 2b04 	str.w	r2, [r3], #4
 8008a16:	e7db      	b.n	80089d0 <__multiply+0x50>
 8008a18:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a1c:	f1ba 0f00 	cmp.w	sl, #0
 8008a20:	d020      	beq.n	8008a64 <__multiply+0xe4>
 8008a22:	f105 0e14 	add.w	lr, r5, #20
 8008a26:	46b1      	mov	r9, r6
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008a2e:	f8d9 b000 	ldr.w	fp, [r9]
 8008a32:	b2a1      	uxth	r1, r4
 8008a34:	fa1f fb8b 	uxth.w	fp, fp
 8008a38:	fb0a b101 	mla	r1, sl, r1, fp
 8008a3c:	4411      	add	r1, r2
 8008a3e:	f8d9 2000 	ldr.w	r2, [r9]
 8008a42:	0c24      	lsrs	r4, r4, #16
 8008a44:	0c12      	lsrs	r2, r2, #16
 8008a46:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a4a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a4e:	b289      	uxth	r1, r1
 8008a50:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a54:	45f4      	cmp	ip, lr
 8008a56:	f849 1b04 	str.w	r1, [r9], #4
 8008a5a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008a5e:	d8e4      	bhi.n	8008a2a <__multiply+0xaa>
 8008a60:	9901      	ldr	r1, [sp, #4]
 8008a62:	5072      	str	r2, [r6, r1]
 8008a64:	9a03      	ldr	r2, [sp, #12]
 8008a66:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a6a:	3304      	adds	r3, #4
 8008a6c:	f1b9 0f00 	cmp.w	r9, #0
 8008a70:	d01f      	beq.n	8008ab2 <__multiply+0x132>
 8008a72:	6834      	ldr	r4, [r6, #0]
 8008a74:	f105 0114 	add.w	r1, r5, #20
 8008a78:	46b6      	mov	lr, r6
 8008a7a:	f04f 0a00 	mov.w	sl, #0
 8008a7e:	880a      	ldrh	r2, [r1, #0]
 8008a80:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a84:	fb09 b202 	mla	r2, r9, r2, fp
 8008a88:	4492      	add	sl, r2
 8008a8a:	b2a4      	uxth	r4, r4
 8008a8c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a90:	f84e 4b04 	str.w	r4, [lr], #4
 8008a94:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a98:	f8be 2000 	ldrh.w	r2, [lr]
 8008a9c:	0c24      	lsrs	r4, r4, #16
 8008a9e:	fb09 2404 	mla	r4, r9, r4, r2
 8008aa2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008aa6:	458c      	cmp	ip, r1
 8008aa8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008aac:	d8e7      	bhi.n	8008a7e <__multiply+0xfe>
 8008aae:	9a01      	ldr	r2, [sp, #4]
 8008ab0:	50b4      	str	r4, [r6, r2]
 8008ab2:	3604      	adds	r6, #4
 8008ab4:	e7a3      	b.n	80089fe <__multiply+0x7e>
 8008ab6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1a5      	bne.n	8008a0a <__multiply+0x8a>
 8008abe:	3f01      	subs	r7, #1
 8008ac0:	e7a1      	b.n	8008a06 <__multiply+0x86>
 8008ac2:	bf00      	nop
 8008ac4:	08009953 	.word	0x08009953
 8008ac8:	080099c4 	.word	0x080099c4

08008acc <__pow5mult>:
 8008acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ad0:	4615      	mov	r5, r2
 8008ad2:	f012 0203 	ands.w	r2, r2, #3
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	460f      	mov	r7, r1
 8008ada:	d007      	beq.n	8008aec <__pow5mult+0x20>
 8008adc:	4c25      	ldr	r4, [pc, #148]	; (8008b74 <__pow5mult+0xa8>)
 8008ade:	3a01      	subs	r2, #1
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ae6:	f7ff fe9b 	bl	8008820 <__multadd>
 8008aea:	4607      	mov	r7, r0
 8008aec:	10ad      	asrs	r5, r5, #2
 8008aee:	d03d      	beq.n	8008b6c <__pow5mult+0xa0>
 8008af0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008af2:	b97c      	cbnz	r4, 8008b14 <__pow5mult+0x48>
 8008af4:	2010      	movs	r0, #16
 8008af6:	f7ff fe1b 	bl	8008730 <malloc>
 8008afa:	4602      	mov	r2, r0
 8008afc:	6270      	str	r0, [r6, #36]	; 0x24
 8008afe:	b928      	cbnz	r0, 8008b0c <__pow5mult+0x40>
 8008b00:	4b1d      	ldr	r3, [pc, #116]	; (8008b78 <__pow5mult+0xac>)
 8008b02:	481e      	ldr	r0, [pc, #120]	; (8008b7c <__pow5mult+0xb0>)
 8008b04:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008b08:	f000 fc9c 	bl	8009444 <__assert_func>
 8008b0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b10:	6004      	str	r4, [r0, #0]
 8008b12:	60c4      	str	r4, [r0, #12]
 8008b14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b1c:	b94c      	cbnz	r4, 8008b32 <__pow5mult+0x66>
 8008b1e:	f240 2171 	movw	r1, #625	; 0x271
 8008b22:	4630      	mov	r0, r6
 8008b24:	f7ff ff16 	bl	8008954 <__i2b>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b2e:	4604      	mov	r4, r0
 8008b30:	6003      	str	r3, [r0, #0]
 8008b32:	f04f 0900 	mov.w	r9, #0
 8008b36:	07eb      	lsls	r3, r5, #31
 8008b38:	d50a      	bpl.n	8008b50 <__pow5mult+0x84>
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff ff1e 	bl	8008980 <__multiply>
 8008b44:	4639      	mov	r1, r7
 8008b46:	4680      	mov	r8, r0
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff fe47 	bl	80087dc <_Bfree>
 8008b4e:	4647      	mov	r7, r8
 8008b50:	106d      	asrs	r5, r5, #1
 8008b52:	d00b      	beq.n	8008b6c <__pow5mult+0xa0>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	b938      	cbnz	r0, 8008b68 <__pow5mult+0x9c>
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ff0f 	bl	8008980 <__multiply>
 8008b62:	6020      	str	r0, [r4, #0]
 8008b64:	f8c0 9000 	str.w	r9, [r0]
 8008b68:	4604      	mov	r4, r0
 8008b6a:	e7e4      	b.n	8008b36 <__pow5mult+0x6a>
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b72:	bf00      	nop
 8008b74:	08009b18 	.word	0x08009b18
 8008b78:	080098dd 	.word	0x080098dd
 8008b7c:	080099c4 	.word	0x080099c4

08008b80 <__lshift>:
 8008b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b84:	460c      	mov	r4, r1
 8008b86:	6849      	ldr	r1, [r1, #4]
 8008b88:	6923      	ldr	r3, [r4, #16]
 8008b8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b8e:	68a3      	ldr	r3, [r4, #8]
 8008b90:	4607      	mov	r7, r0
 8008b92:	4691      	mov	r9, r2
 8008b94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b98:	f108 0601 	add.w	r6, r8, #1
 8008b9c:	42b3      	cmp	r3, r6
 8008b9e:	db0b      	blt.n	8008bb8 <__lshift+0x38>
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f7ff fddb 	bl	800875c <_Balloc>
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	b948      	cbnz	r0, 8008bbe <__lshift+0x3e>
 8008baa:	4602      	mov	r2, r0
 8008bac:	4b28      	ldr	r3, [pc, #160]	; (8008c50 <__lshift+0xd0>)
 8008bae:	4829      	ldr	r0, [pc, #164]	; (8008c54 <__lshift+0xd4>)
 8008bb0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008bb4:	f000 fc46 	bl	8009444 <__assert_func>
 8008bb8:	3101      	adds	r1, #1
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	e7ee      	b.n	8008b9c <__lshift+0x1c>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f100 0114 	add.w	r1, r0, #20
 8008bc4:	f100 0210 	add.w	r2, r0, #16
 8008bc8:	4618      	mov	r0, r3
 8008bca:	4553      	cmp	r3, sl
 8008bcc:	db33      	blt.n	8008c36 <__lshift+0xb6>
 8008bce:	6920      	ldr	r0, [r4, #16]
 8008bd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bd4:	f104 0314 	add.w	r3, r4, #20
 8008bd8:	f019 091f 	ands.w	r9, r9, #31
 8008bdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008be0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008be4:	d02b      	beq.n	8008c3e <__lshift+0xbe>
 8008be6:	f1c9 0e20 	rsb	lr, r9, #32
 8008bea:	468a      	mov	sl, r1
 8008bec:	2200      	movs	r2, #0
 8008bee:	6818      	ldr	r0, [r3, #0]
 8008bf0:	fa00 f009 	lsl.w	r0, r0, r9
 8008bf4:	4302      	orrs	r2, r0
 8008bf6:	f84a 2b04 	str.w	r2, [sl], #4
 8008bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfe:	459c      	cmp	ip, r3
 8008c00:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c04:	d8f3      	bhi.n	8008bee <__lshift+0x6e>
 8008c06:	ebac 0304 	sub.w	r3, ip, r4
 8008c0a:	3b15      	subs	r3, #21
 8008c0c:	f023 0303 	bic.w	r3, r3, #3
 8008c10:	3304      	adds	r3, #4
 8008c12:	f104 0015 	add.w	r0, r4, #21
 8008c16:	4584      	cmp	ip, r0
 8008c18:	bf38      	it	cc
 8008c1a:	2304      	movcc	r3, #4
 8008c1c:	50ca      	str	r2, [r1, r3]
 8008c1e:	b10a      	cbz	r2, 8008c24 <__lshift+0xa4>
 8008c20:	f108 0602 	add.w	r6, r8, #2
 8008c24:	3e01      	subs	r6, #1
 8008c26:	4638      	mov	r0, r7
 8008c28:	612e      	str	r6, [r5, #16]
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	f7ff fdd6 	bl	80087dc <_Bfree>
 8008c30:	4628      	mov	r0, r5
 8008c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	e7c5      	b.n	8008bca <__lshift+0x4a>
 8008c3e:	3904      	subs	r1, #4
 8008c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c44:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c48:	459c      	cmp	ip, r3
 8008c4a:	d8f9      	bhi.n	8008c40 <__lshift+0xc0>
 8008c4c:	e7ea      	b.n	8008c24 <__lshift+0xa4>
 8008c4e:	bf00      	nop
 8008c50:	08009953 	.word	0x08009953
 8008c54:	080099c4 	.word	0x080099c4

08008c58 <__mcmp>:
 8008c58:	b530      	push	{r4, r5, lr}
 8008c5a:	6902      	ldr	r2, [r0, #16]
 8008c5c:	690c      	ldr	r4, [r1, #16]
 8008c5e:	1b12      	subs	r2, r2, r4
 8008c60:	d10e      	bne.n	8008c80 <__mcmp+0x28>
 8008c62:	f100 0314 	add.w	r3, r0, #20
 8008c66:	3114      	adds	r1, #20
 8008c68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c78:	42a5      	cmp	r5, r4
 8008c7a:	d003      	beq.n	8008c84 <__mcmp+0x2c>
 8008c7c:	d305      	bcc.n	8008c8a <__mcmp+0x32>
 8008c7e:	2201      	movs	r2, #1
 8008c80:	4610      	mov	r0, r2
 8008c82:	bd30      	pop	{r4, r5, pc}
 8008c84:	4283      	cmp	r3, r0
 8008c86:	d3f3      	bcc.n	8008c70 <__mcmp+0x18>
 8008c88:	e7fa      	b.n	8008c80 <__mcmp+0x28>
 8008c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8e:	e7f7      	b.n	8008c80 <__mcmp+0x28>

08008c90 <__mdiff>:
 8008c90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	460c      	mov	r4, r1
 8008c96:	4606      	mov	r6, r0
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	4617      	mov	r7, r2
 8008c9e:	f7ff ffdb 	bl	8008c58 <__mcmp>
 8008ca2:	1e05      	subs	r5, r0, #0
 8008ca4:	d110      	bne.n	8008cc8 <__mdiff+0x38>
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	4630      	mov	r0, r6
 8008caa:	f7ff fd57 	bl	800875c <_Balloc>
 8008cae:	b930      	cbnz	r0, 8008cbe <__mdiff+0x2e>
 8008cb0:	4b39      	ldr	r3, [pc, #228]	; (8008d98 <__mdiff+0x108>)
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	f240 2132 	movw	r1, #562	; 0x232
 8008cb8:	4838      	ldr	r0, [pc, #224]	; (8008d9c <__mdiff+0x10c>)
 8008cba:	f000 fbc3 	bl	8009444 <__assert_func>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	bfa4      	itt	ge
 8008cca:	463b      	movge	r3, r7
 8008ccc:	4627      	movge	r7, r4
 8008cce:	4630      	mov	r0, r6
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	bfa6      	itte	ge
 8008cd4:	461c      	movge	r4, r3
 8008cd6:	2500      	movge	r5, #0
 8008cd8:	2501      	movlt	r5, #1
 8008cda:	f7ff fd3f 	bl	800875c <_Balloc>
 8008cde:	b920      	cbnz	r0, 8008cea <__mdiff+0x5a>
 8008ce0:	4b2d      	ldr	r3, [pc, #180]	; (8008d98 <__mdiff+0x108>)
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ce8:	e7e6      	b.n	8008cb8 <__mdiff+0x28>
 8008cea:	693e      	ldr	r6, [r7, #16]
 8008cec:	60c5      	str	r5, [r0, #12]
 8008cee:	6925      	ldr	r5, [r4, #16]
 8008cf0:	f107 0114 	add.w	r1, r7, #20
 8008cf4:	f104 0914 	add.w	r9, r4, #20
 8008cf8:	f100 0e14 	add.w	lr, r0, #20
 8008cfc:	f107 0210 	add.w	r2, r7, #16
 8008d00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008d04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008d08:	46f2      	mov	sl, lr
 8008d0a:	2700      	movs	r7, #0
 8008d0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d14:	fa1f f883 	uxth.w	r8, r3
 8008d18:	fa17 f78b 	uxtah	r7, r7, fp
 8008d1c:	0c1b      	lsrs	r3, r3, #16
 8008d1e:	eba7 0808 	sub.w	r8, r7, r8
 8008d22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d2a:	fa1f f888 	uxth.w	r8, r8
 8008d2e:	141f      	asrs	r7, r3, #16
 8008d30:	454d      	cmp	r5, r9
 8008d32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d36:	f84a 3b04 	str.w	r3, [sl], #4
 8008d3a:	d8e7      	bhi.n	8008d0c <__mdiff+0x7c>
 8008d3c:	1b2b      	subs	r3, r5, r4
 8008d3e:	3b15      	subs	r3, #21
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	3304      	adds	r3, #4
 8008d46:	3415      	adds	r4, #21
 8008d48:	42a5      	cmp	r5, r4
 8008d4a:	bf38      	it	cc
 8008d4c:	2304      	movcc	r3, #4
 8008d4e:	4419      	add	r1, r3
 8008d50:	4473      	add	r3, lr
 8008d52:	469e      	mov	lr, r3
 8008d54:	460d      	mov	r5, r1
 8008d56:	4565      	cmp	r5, ip
 8008d58:	d30e      	bcc.n	8008d78 <__mdiff+0xe8>
 8008d5a:	f10c 0203 	add.w	r2, ip, #3
 8008d5e:	1a52      	subs	r2, r2, r1
 8008d60:	f022 0203 	bic.w	r2, r2, #3
 8008d64:	3903      	subs	r1, #3
 8008d66:	458c      	cmp	ip, r1
 8008d68:	bf38      	it	cc
 8008d6a:	2200      	movcc	r2, #0
 8008d6c:	441a      	add	r2, r3
 8008d6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d72:	b17b      	cbz	r3, 8008d94 <__mdiff+0x104>
 8008d74:	6106      	str	r6, [r0, #16]
 8008d76:	e7a5      	b.n	8008cc4 <__mdiff+0x34>
 8008d78:	f855 8b04 	ldr.w	r8, [r5], #4
 8008d7c:	fa17 f488 	uxtah	r4, r7, r8
 8008d80:	1422      	asrs	r2, r4, #16
 8008d82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008d86:	b2a4      	uxth	r4, r4
 8008d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008d8c:	f84e 4b04 	str.w	r4, [lr], #4
 8008d90:	1417      	asrs	r7, r2, #16
 8008d92:	e7e0      	b.n	8008d56 <__mdiff+0xc6>
 8008d94:	3e01      	subs	r6, #1
 8008d96:	e7ea      	b.n	8008d6e <__mdiff+0xde>
 8008d98:	08009953 	.word	0x08009953
 8008d9c:	080099c4 	.word	0x080099c4

08008da0 <__d2b>:
 8008da0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008da4:	4689      	mov	r9, r1
 8008da6:	2101      	movs	r1, #1
 8008da8:	ec57 6b10 	vmov	r6, r7, d0
 8008dac:	4690      	mov	r8, r2
 8008dae:	f7ff fcd5 	bl	800875c <_Balloc>
 8008db2:	4604      	mov	r4, r0
 8008db4:	b930      	cbnz	r0, 8008dc4 <__d2b+0x24>
 8008db6:	4602      	mov	r2, r0
 8008db8:	4b25      	ldr	r3, [pc, #148]	; (8008e50 <__d2b+0xb0>)
 8008dba:	4826      	ldr	r0, [pc, #152]	; (8008e54 <__d2b+0xb4>)
 8008dbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008dc0:	f000 fb40 	bl	8009444 <__assert_func>
 8008dc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dcc:	bb35      	cbnz	r5, 8008e1c <__d2b+0x7c>
 8008dce:	2e00      	cmp	r6, #0
 8008dd0:	9301      	str	r3, [sp, #4]
 8008dd2:	d028      	beq.n	8008e26 <__d2b+0x86>
 8008dd4:	4668      	mov	r0, sp
 8008dd6:	9600      	str	r6, [sp, #0]
 8008dd8:	f7ff fd8c 	bl	80088f4 <__lo0bits>
 8008ddc:	9900      	ldr	r1, [sp, #0]
 8008dde:	b300      	cbz	r0, 8008e22 <__d2b+0x82>
 8008de0:	9a01      	ldr	r2, [sp, #4]
 8008de2:	f1c0 0320 	rsb	r3, r0, #32
 8008de6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dea:	430b      	orrs	r3, r1
 8008dec:	40c2      	lsrs	r2, r0
 8008dee:	6163      	str	r3, [r4, #20]
 8008df0:	9201      	str	r2, [sp, #4]
 8008df2:	9b01      	ldr	r3, [sp, #4]
 8008df4:	61a3      	str	r3, [r4, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	bf14      	ite	ne
 8008dfa:	2202      	movne	r2, #2
 8008dfc:	2201      	moveq	r2, #1
 8008dfe:	6122      	str	r2, [r4, #16]
 8008e00:	b1d5      	cbz	r5, 8008e38 <__d2b+0x98>
 8008e02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e06:	4405      	add	r5, r0
 8008e08:	f8c9 5000 	str.w	r5, [r9]
 8008e0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e10:	f8c8 0000 	str.w	r0, [r8]
 8008e14:	4620      	mov	r0, r4
 8008e16:	b003      	add	sp, #12
 8008e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e20:	e7d5      	b.n	8008dce <__d2b+0x2e>
 8008e22:	6161      	str	r1, [r4, #20]
 8008e24:	e7e5      	b.n	8008df2 <__d2b+0x52>
 8008e26:	a801      	add	r0, sp, #4
 8008e28:	f7ff fd64 	bl	80088f4 <__lo0bits>
 8008e2c:	9b01      	ldr	r3, [sp, #4]
 8008e2e:	6163      	str	r3, [r4, #20]
 8008e30:	2201      	movs	r2, #1
 8008e32:	6122      	str	r2, [r4, #16]
 8008e34:	3020      	adds	r0, #32
 8008e36:	e7e3      	b.n	8008e00 <__d2b+0x60>
 8008e38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e40:	f8c9 0000 	str.w	r0, [r9]
 8008e44:	6918      	ldr	r0, [r3, #16]
 8008e46:	f7ff fd35 	bl	80088b4 <__hi0bits>
 8008e4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e4e:	e7df      	b.n	8008e10 <__d2b+0x70>
 8008e50:	08009953 	.word	0x08009953
 8008e54:	080099c4 	.word	0x080099c4

08008e58 <_calloc_r>:
 8008e58:	b513      	push	{r0, r1, r4, lr}
 8008e5a:	434a      	muls	r2, r1
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	9201      	str	r2, [sp, #4]
 8008e60:	f000 f85a 	bl	8008f18 <_malloc_r>
 8008e64:	4604      	mov	r4, r0
 8008e66:	b118      	cbz	r0, 8008e70 <_calloc_r+0x18>
 8008e68:	9a01      	ldr	r2, [sp, #4]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	f7fd ffe8 	bl	8006e40 <memset>
 8008e70:	4620      	mov	r0, r4
 8008e72:	b002      	add	sp, #8
 8008e74:	bd10      	pop	{r4, pc}
	...

08008e78 <_free_r>:
 8008e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e7a:	2900      	cmp	r1, #0
 8008e7c:	d048      	beq.n	8008f10 <_free_r+0x98>
 8008e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e82:	9001      	str	r0, [sp, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f1a1 0404 	sub.w	r4, r1, #4
 8008e8a:	bfb8      	it	lt
 8008e8c:	18e4      	addlt	r4, r4, r3
 8008e8e:	f000 fc41 	bl	8009714 <__malloc_lock>
 8008e92:	4a20      	ldr	r2, [pc, #128]	; (8008f14 <_free_r+0x9c>)
 8008e94:	9801      	ldr	r0, [sp, #4]
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	4615      	mov	r5, r2
 8008e9a:	b933      	cbnz	r3, 8008eaa <_free_r+0x32>
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	6014      	str	r4, [r2, #0]
 8008ea0:	b003      	add	sp, #12
 8008ea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea6:	f000 bc3b 	b.w	8009720 <__malloc_unlock>
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	d90b      	bls.n	8008ec6 <_free_r+0x4e>
 8008eae:	6821      	ldr	r1, [r4, #0]
 8008eb0:	1862      	adds	r2, r4, r1
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	bf04      	itt	eq
 8008eb6:	681a      	ldreq	r2, [r3, #0]
 8008eb8:	685b      	ldreq	r3, [r3, #4]
 8008eba:	6063      	str	r3, [r4, #4]
 8008ebc:	bf04      	itt	eq
 8008ebe:	1852      	addeq	r2, r2, r1
 8008ec0:	6022      	streq	r2, [r4, #0]
 8008ec2:	602c      	str	r4, [r5, #0]
 8008ec4:	e7ec      	b.n	8008ea0 <_free_r+0x28>
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	b10b      	cbz	r3, 8008ed0 <_free_r+0x58>
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d9fa      	bls.n	8008ec6 <_free_r+0x4e>
 8008ed0:	6811      	ldr	r1, [r2, #0]
 8008ed2:	1855      	adds	r5, r2, r1
 8008ed4:	42a5      	cmp	r5, r4
 8008ed6:	d10b      	bne.n	8008ef0 <_free_r+0x78>
 8008ed8:	6824      	ldr	r4, [r4, #0]
 8008eda:	4421      	add	r1, r4
 8008edc:	1854      	adds	r4, r2, r1
 8008ede:	42a3      	cmp	r3, r4
 8008ee0:	6011      	str	r1, [r2, #0]
 8008ee2:	d1dd      	bne.n	8008ea0 <_free_r+0x28>
 8008ee4:	681c      	ldr	r4, [r3, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	6053      	str	r3, [r2, #4]
 8008eea:	4421      	add	r1, r4
 8008eec:	6011      	str	r1, [r2, #0]
 8008eee:	e7d7      	b.n	8008ea0 <_free_r+0x28>
 8008ef0:	d902      	bls.n	8008ef8 <_free_r+0x80>
 8008ef2:	230c      	movs	r3, #12
 8008ef4:	6003      	str	r3, [r0, #0]
 8008ef6:	e7d3      	b.n	8008ea0 <_free_r+0x28>
 8008ef8:	6825      	ldr	r5, [r4, #0]
 8008efa:	1961      	adds	r1, r4, r5
 8008efc:	428b      	cmp	r3, r1
 8008efe:	bf04      	itt	eq
 8008f00:	6819      	ldreq	r1, [r3, #0]
 8008f02:	685b      	ldreq	r3, [r3, #4]
 8008f04:	6063      	str	r3, [r4, #4]
 8008f06:	bf04      	itt	eq
 8008f08:	1949      	addeq	r1, r1, r5
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	6054      	str	r4, [r2, #4]
 8008f0e:	e7c7      	b.n	8008ea0 <_free_r+0x28>
 8008f10:	b003      	add	sp, #12
 8008f12:	bd30      	pop	{r4, r5, pc}
 8008f14:	2000021c 	.word	0x2000021c

08008f18 <_malloc_r>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	1ccd      	adds	r5, r1, #3
 8008f1c:	f025 0503 	bic.w	r5, r5, #3
 8008f20:	3508      	adds	r5, #8
 8008f22:	2d0c      	cmp	r5, #12
 8008f24:	bf38      	it	cc
 8008f26:	250c      	movcc	r5, #12
 8008f28:	2d00      	cmp	r5, #0
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	db01      	blt.n	8008f32 <_malloc_r+0x1a>
 8008f2e:	42a9      	cmp	r1, r5
 8008f30:	d903      	bls.n	8008f3a <_malloc_r+0x22>
 8008f32:	230c      	movs	r3, #12
 8008f34:	6033      	str	r3, [r6, #0]
 8008f36:	2000      	movs	r0, #0
 8008f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f3a:	f000 fbeb 	bl	8009714 <__malloc_lock>
 8008f3e:	4921      	ldr	r1, [pc, #132]	; (8008fc4 <_malloc_r+0xac>)
 8008f40:	680a      	ldr	r2, [r1, #0]
 8008f42:	4614      	mov	r4, r2
 8008f44:	b99c      	cbnz	r4, 8008f6e <_malloc_r+0x56>
 8008f46:	4f20      	ldr	r7, [pc, #128]	; (8008fc8 <_malloc_r+0xb0>)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	b923      	cbnz	r3, 8008f56 <_malloc_r+0x3e>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f000 f9a8 	bl	80092a4 <_sbrk_r>
 8008f54:	6038      	str	r0, [r7, #0]
 8008f56:	4629      	mov	r1, r5
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f000 f9a3 	bl	80092a4 <_sbrk_r>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d123      	bne.n	8008faa <_malloc_r+0x92>
 8008f62:	230c      	movs	r3, #12
 8008f64:	6033      	str	r3, [r6, #0]
 8008f66:	4630      	mov	r0, r6
 8008f68:	f000 fbda 	bl	8009720 <__malloc_unlock>
 8008f6c:	e7e3      	b.n	8008f36 <_malloc_r+0x1e>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	1b5b      	subs	r3, r3, r5
 8008f72:	d417      	bmi.n	8008fa4 <_malloc_r+0x8c>
 8008f74:	2b0b      	cmp	r3, #11
 8008f76:	d903      	bls.n	8008f80 <_malloc_r+0x68>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	441c      	add	r4, r3
 8008f7c:	6025      	str	r5, [r4, #0]
 8008f7e:	e004      	b.n	8008f8a <_malloc_r+0x72>
 8008f80:	6863      	ldr	r3, [r4, #4]
 8008f82:	42a2      	cmp	r2, r4
 8008f84:	bf0c      	ite	eq
 8008f86:	600b      	streq	r3, [r1, #0]
 8008f88:	6053      	strne	r3, [r2, #4]
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f000 fbc8 	bl	8009720 <__malloc_unlock>
 8008f90:	f104 000b 	add.w	r0, r4, #11
 8008f94:	1d23      	adds	r3, r4, #4
 8008f96:	f020 0007 	bic.w	r0, r0, #7
 8008f9a:	1ac2      	subs	r2, r0, r3
 8008f9c:	d0cc      	beq.n	8008f38 <_malloc_r+0x20>
 8008f9e:	1a1b      	subs	r3, r3, r0
 8008fa0:	50a3      	str	r3, [r4, r2]
 8008fa2:	e7c9      	b.n	8008f38 <_malloc_r+0x20>
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	6864      	ldr	r4, [r4, #4]
 8008fa8:	e7cc      	b.n	8008f44 <_malloc_r+0x2c>
 8008faa:	1cc4      	adds	r4, r0, #3
 8008fac:	f024 0403 	bic.w	r4, r4, #3
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d0e3      	beq.n	8008f7c <_malloc_r+0x64>
 8008fb4:	1a21      	subs	r1, r4, r0
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f000 f974 	bl	80092a4 <_sbrk_r>
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d1dd      	bne.n	8008f7c <_malloc_r+0x64>
 8008fc0:	e7cf      	b.n	8008f62 <_malloc_r+0x4a>
 8008fc2:	bf00      	nop
 8008fc4:	2000021c 	.word	0x2000021c
 8008fc8:	20000220 	.word	0x20000220

08008fcc <__sfputc_r>:
 8008fcc:	6893      	ldr	r3, [r2, #8]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	b410      	push	{r4}
 8008fd4:	6093      	str	r3, [r2, #8]
 8008fd6:	da08      	bge.n	8008fea <__sfputc_r+0x1e>
 8008fd8:	6994      	ldr	r4, [r2, #24]
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	db01      	blt.n	8008fe2 <__sfputc_r+0x16>
 8008fde:	290a      	cmp	r1, #10
 8008fe0:	d103      	bne.n	8008fea <__sfputc_r+0x1e>
 8008fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fe6:	f000 b96d 	b.w	80092c4 <__swbuf_r>
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	1c58      	adds	r0, r3, #1
 8008fee:	6010      	str	r0, [r2, #0]
 8008ff0:	7019      	strb	r1, [r3, #0]
 8008ff2:	4608      	mov	r0, r1
 8008ff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <__sfputs_r>:
 8008ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffc:	4606      	mov	r6, r0
 8008ffe:	460f      	mov	r7, r1
 8009000:	4614      	mov	r4, r2
 8009002:	18d5      	adds	r5, r2, r3
 8009004:	42ac      	cmp	r4, r5
 8009006:	d101      	bne.n	800900c <__sfputs_r+0x12>
 8009008:	2000      	movs	r0, #0
 800900a:	e007      	b.n	800901c <__sfputs_r+0x22>
 800900c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009010:	463a      	mov	r2, r7
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ffda 	bl	8008fcc <__sfputc_r>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d1f3      	bne.n	8009004 <__sfputs_r+0xa>
 800901c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009020 <_vfiprintf_r>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	460d      	mov	r5, r1
 8009026:	b09d      	sub	sp, #116	; 0x74
 8009028:	4614      	mov	r4, r2
 800902a:	4698      	mov	r8, r3
 800902c:	4606      	mov	r6, r0
 800902e:	b118      	cbz	r0, 8009038 <_vfiprintf_r+0x18>
 8009030:	6983      	ldr	r3, [r0, #24]
 8009032:	b90b      	cbnz	r3, 8009038 <_vfiprintf_r+0x18>
 8009034:	f7ff fac4 	bl	80085c0 <__sinit>
 8009038:	4b89      	ldr	r3, [pc, #548]	; (8009260 <_vfiprintf_r+0x240>)
 800903a:	429d      	cmp	r5, r3
 800903c:	d11b      	bne.n	8009076 <_vfiprintf_r+0x56>
 800903e:	6875      	ldr	r5, [r6, #4]
 8009040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009042:	07d9      	lsls	r1, r3, #31
 8009044:	d405      	bmi.n	8009052 <_vfiprintf_r+0x32>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	059a      	lsls	r2, r3, #22
 800904a:	d402      	bmi.n	8009052 <_vfiprintf_r+0x32>
 800904c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800904e:	f7ff fb5a 	bl	8008706 <__retarget_lock_acquire_recursive>
 8009052:	89ab      	ldrh	r3, [r5, #12]
 8009054:	071b      	lsls	r3, r3, #28
 8009056:	d501      	bpl.n	800905c <_vfiprintf_r+0x3c>
 8009058:	692b      	ldr	r3, [r5, #16]
 800905a:	b9eb      	cbnz	r3, 8009098 <_vfiprintf_r+0x78>
 800905c:	4629      	mov	r1, r5
 800905e:	4630      	mov	r0, r6
 8009060:	f000 f982 	bl	8009368 <__swsetup_r>
 8009064:	b1c0      	cbz	r0, 8009098 <_vfiprintf_r+0x78>
 8009066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009068:	07dc      	lsls	r4, r3, #31
 800906a:	d50e      	bpl.n	800908a <_vfiprintf_r+0x6a>
 800906c:	f04f 30ff 	mov.w	r0, #4294967295
 8009070:	b01d      	add	sp, #116	; 0x74
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	4b7b      	ldr	r3, [pc, #492]	; (8009264 <_vfiprintf_r+0x244>)
 8009078:	429d      	cmp	r5, r3
 800907a:	d101      	bne.n	8009080 <_vfiprintf_r+0x60>
 800907c:	68b5      	ldr	r5, [r6, #8]
 800907e:	e7df      	b.n	8009040 <_vfiprintf_r+0x20>
 8009080:	4b79      	ldr	r3, [pc, #484]	; (8009268 <_vfiprintf_r+0x248>)
 8009082:	429d      	cmp	r5, r3
 8009084:	bf08      	it	eq
 8009086:	68f5      	ldreq	r5, [r6, #12]
 8009088:	e7da      	b.n	8009040 <_vfiprintf_r+0x20>
 800908a:	89ab      	ldrh	r3, [r5, #12]
 800908c:	0598      	lsls	r0, r3, #22
 800908e:	d4ed      	bmi.n	800906c <_vfiprintf_r+0x4c>
 8009090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009092:	f7ff fb39 	bl	8008708 <__retarget_lock_release_recursive>
 8009096:	e7e9      	b.n	800906c <_vfiprintf_r+0x4c>
 8009098:	2300      	movs	r3, #0
 800909a:	9309      	str	r3, [sp, #36]	; 0x24
 800909c:	2320      	movs	r3, #32
 800909e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a6:	2330      	movs	r3, #48	; 0x30
 80090a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800926c <_vfiprintf_r+0x24c>
 80090ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090b0:	f04f 0901 	mov.w	r9, #1
 80090b4:	4623      	mov	r3, r4
 80090b6:	469a      	mov	sl, r3
 80090b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090bc:	b10a      	cbz	r2, 80090c2 <_vfiprintf_r+0xa2>
 80090be:	2a25      	cmp	r2, #37	; 0x25
 80090c0:	d1f9      	bne.n	80090b6 <_vfiprintf_r+0x96>
 80090c2:	ebba 0b04 	subs.w	fp, sl, r4
 80090c6:	d00b      	beq.n	80090e0 <_vfiprintf_r+0xc0>
 80090c8:	465b      	mov	r3, fp
 80090ca:	4622      	mov	r2, r4
 80090cc:	4629      	mov	r1, r5
 80090ce:	4630      	mov	r0, r6
 80090d0:	f7ff ff93 	bl	8008ffa <__sfputs_r>
 80090d4:	3001      	adds	r0, #1
 80090d6:	f000 80aa 	beq.w	800922e <_vfiprintf_r+0x20e>
 80090da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090dc:	445a      	add	r2, fp
 80090de:	9209      	str	r2, [sp, #36]	; 0x24
 80090e0:	f89a 3000 	ldrb.w	r3, [sl]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 80a2 	beq.w	800922e <_vfiprintf_r+0x20e>
 80090ea:	2300      	movs	r3, #0
 80090ec:	f04f 32ff 	mov.w	r2, #4294967295
 80090f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f4:	f10a 0a01 	add.w	sl, sl, #1
 80090f8:	9304      	str	r3, [sp, #16]
 80090fa:	9307      	str	r3, [sp, #28]
 80090fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009100:	931a      	str	r3, [sp, #104]	; 0x68
 8009102:	4654      	mov	r4, sl
 8009104:	2205      	movs	r2, #5
 8009106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910a:	4858      	ldr	r0, [pc, #352]	; (800926c <_vfiprintf_r+0x24c>)
 800910c:	f7f7 f888 	bl	8000220 <memchr>
 8009110:	9a04      	ldr	r2, [sp, #16]
 8009112:	b9d8      	cbnz	r0, 800914c <_vfiprintf_r+0x12c>
 8009114:	06d1      	lsls	r1, r2, #27
 8009116:	bf44      	itt	mi
 8009118:	2320      	movmi	r3, #32
 800911a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800911e:	0713      	lsls	r3, r2, #28
 8009120:	bf44      	itt	mi
 8009122:	232b      	movmi	r3, #43	; 0x2b
 8009124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009128:	f89a 3000 	ldrb.w	r3, [sl]
 800912c:	2b2a      	cmp	r3, #42	; 0x2a
 800912e:	d015      	beq.n	800915c <_vfiprintf_r+0x13c>
 8009130:	9a07      	ldr	r2, [sp, #28]
 8009132:	4654      	mov	r4, sl
 8009134:	2000      	movs	r0, #0
 8009136:	f04f 0c0a 	mov.w	ip, #10
 800913a:	4621      	mov	r1, r4
 800913c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009140:	3b30      	subs	r3, #48	; 0x30
 8009142:	2b09      	cmp	r3, #9
 8009144:	d94e      	bls.n	80091e4 <_vfiprintf_r+0x1c4>
 8009146:	b1b0      	cbz	r0, 8009176 <_vfiprintf_r+0x156>
 8009148:	9207      	str	r2, [sp, #28]
 800914a:	e014      	b.n	8009176 <_vfiprintf_r+0x156>
 800914c:	eba0 0308 	sub.w	r3, r0, r8
 8009150:	fa09 f303 	lsl.w	r3, r9, r3
 8009154:	4313      	orrs	r3, r2
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	46a2      	mov	sl, r4
 800915a:	e7d2      	b.n	8009102 <_vfiprintf_r+0xe2>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	1d19      	adds	r1, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	9103      	str	r1, [sp, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bfbb      	ittet	lt
 8009168:	425b      	neglt	r3, r3
 800916a:	f042 0202 	orrlt.w	r2, r2, #2
 800916e:	9307      	strge	r3, [sp, #28]
 8009170:	9307      	strlt	r3, [sp, #28]
 8009172:	bfb8      	it	lt
 8009174:	9204      	strlt	r2, [sp, #16]
 8009176:	7823      	ldrb	r3, [r4, #0]
 8009178:	2b2e      	cmp	r3, #46	; 0x2e
 800917a:	d10c      	bne.n	8009196 <_vfiprintf_r+0x176>
 800917c:	7863      	ldrb	r3, [r4, #1]
 800917e:	2b2a      	cmp	r3, #42	; 0x2a
 8009180:	d135      	bne.n	80091ee <_vfiprintf_r+0x1ce>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	1d1a      	adds	r2, r3, #4
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	9203      	str	r2, [sp, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	bfb8      	it	lt
 800918e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009192:	3402      	adds	r4, #2
 8009194:	9305      	str	r3, [sp, #20]
 8009196:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800927c <_vfiprintf_r+0x25c>
 800919a:	7821      	ldrb	r1, [r4, #0]
 800919c:	2203      	movs	r2, #3
 800919e:	4650      	mov	r0, sl
 80091a0:	f7f7 f83e 	bl	8000220 <memchr>
 80091a4:	b140      	cbz	r0, 80091b8 <_vfiprintf_r+0x198>
 80091a6:	2340      	movs	r3, #64	; 0x40
 80091a8:	eba0 000a 	sub.w	r0, r0, sl
 80091ac:	fa03 f000 	lsl.w	r0, r3, r0
 80091b0:	9b04      	ldr	r3, [sp, #16]
 80091b2:	4303      	orrs	r3, r0
 80091b4:	3401      	adds	r4, #1
 80091b6:	9304      	str	r3, [sp, #16]
 80091b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091bc:	482c      	ldr	r0, [pc, #176]	; (8009270 <_vfiprintf_r+0x250>)
 80091be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091c2:	2206      	movs	r2, #6
 80091c4:	f7f7 f82c 	bl	8000220 <memchr>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d03f      	beq.n	800924c <_vfiprintf_r+0x22c>
 80091cc:	4b29      	ldr	r3, [pc, #164]	; (8009274 <_vfiprintf_r+0x254>)
 80091ce:	bb1b      	cbnz	r3, 8009218 <_vfiprintf_r+0x1f8>
 80091d0:	9b03      	ldr	r3, [sp, #12]
 80091d2:	3307      	adds	r3, #7
 80091d4:	f023 0307 	bic.w	r3, r3, #7
 80091d8:	3308      	adds	r3, #8
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091de:	443b      	add	r3, r7
 80091e0:	9309      	str	r3, [sp, #36]	; 0x24
 80091e2:	e767      	b.n	80090b4 <_vfiprintf_r+0x94>
 80091e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e8:	460c      	mov	r4, r1
 80091ea:	2001      	movs	r0, #1
 80091ec:	e7a5      	b.n	800913a <_vfiprintf_r+0x11a>
 80091ee:	2300      	movs	r3, #0
 80091f0:	3401      	adds	r4, #1
 80091f2:	9305      	str	r3, [sp, #20]
 80091f4:	4619      	mov	r1, r3
 80091f6:	f04f 0c0a 	mov.w	ip, #10
 80091fa:	4620      	mov	r0, r4
 80091fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009200:	3a30      	subs	r2, #48	; 0x30
 8009202:	2a09      	cmp	r2, #9
 8009204:	d903      	bls.n	800920e <_vfiprintf_r+0x1ee>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0c5      	beq.n	8009196 <_vfiprintf_r+0x176>
 800920a:	9105      	str	r1, [sp, #20]
 800920c:	e7c3      	b.n	8009196 <_vfiprintf_r+0x176>
 800920e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009212:	4604      	mov	r4, r0
 8009214:	2301      	movs	r3, #1
 8009216:	e7f0      	b.n	80091fa <_vfiprintf_r+0x1da>
 8009218:	ab03      	add	r3, sp, #12
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	462a      	mov	r2, r5
 800921e:	4b16      	ldr	r3, [pc, #88]	; (8009278 <_vfiprintf_r+0x258>)
 8009220:	a904      	add	r1, sp, #16
 8009222:	4630      	mov	r0, r6
 8009224:	f7fd feb4 	bl	8006f90 <_printf_float>
 8009228:	4607      	mov	r7, r0
 800922a:	1c78      	adds	r0, r7, #1
 800922c:	d1d6      	bne.n	80091dc <_vfiprintf_r+0x1bc>
 800922e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009230:	07d9      	lsls	r1, r3, #31
 8009232:	d405      	bmi.n	8009240 <_vfiprintf_r+0x220>
 8009234:	89ab      	ldrh	r3, [r5, #12]
 8009236:	059a      	lsls	r2, r3, #22
 8009238:	d402      	bmi.n	8009240 <_vfiprintf_r+0x220>
 800923a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800923c:	f7ff fa64 	bl	8008708 <__retarget_lock_release_recursive>
 8009240:	89ab      	ldrh	r3, [r5, #12]
 8009242:	065b      	lsls	r3, r3, #25
 8009244:	f53f af12 	bmi.w	800906c <_vfiprintf_r+0x4c>
 8009248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800924a:	e711      	b.n	8009070 <_vfiprintf_r+0x50>
 800924c:	ab03      	add	r3, sp, #12
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	462a      	mov	r2, r5
 8009252:	4b09      	ldr	r3, [pc, #36]	; (8009278 <_vfiprintf_r+0x258>)
 8009254:	a904      	add	r1, sp, #16
 8009256:	4630      	mov	r0, r6
 8009258:	f7fe f93e 	bl	80074d8 <_printf_i>
 800925c:	e7e4      	b.n	8009228 <_vfiprintf_r+0x208>
 800925e:	bf00      	nop
 8009260:	08009984 	.word	0x08009984
 8009264:	080099a4 	.word	0x080099a4
 8009268:	08009964 	.word	0x08009964
 800926c:	08009b24 	.word	0x08009b24
 8009270:	08009b2e 	.word	0x08009b2e
 8009274:	08006f91 	.word	0x08006f91
 8009278:	08008ffb 	.word	0x08008ffb
 800927c:	08009b2a 	.word	0x08009b2a

08009280 <_read_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d07      	ldr	r5, [pc, #28]	; (80092a0 <_read_r+0x20>)
 8009284:	4604      	mov	r4, r0
 8009286:	4608      	mov	r0, r1
 8009288:	4611      	mov	r1, r2
 800928a:	2200      	movs	r2, #0
 800928c:	602a      	str	r2, [r5, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	f7f8 fb6a 	bl	8001968 <_read>
 8009294:	1c43      	adds	r3, r0, #1
 8009296:	d102      	bne.n	800929e <_read_r+0x1e>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	b103      	cbz	r3, 800929e <_read_r+0x1e>
 800929c:	6023      	str	r3, [r4, #0]
 800929e:	bd38      	pop	{r3, r4, r5, pc}
 80092a0:	200007f8 	.word	0x200007f8

080092a4 <_sbrk_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d06      	ldr	r5, [pc, #24]	; (80092c0 <_sbrk_r+0x1c>)
 80092a8:	2300      	movs	r3, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	f7f8 fbc8 	bl	8001a44 <_sbrk>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_sbrk_r+0x1a>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_sbrk_r+0x1a>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	200007f8 	.word	0x200007f8

080092c4 <__swbuf_r>:
 80092c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092c6:	460e      	mov	r6, r1
 80092c8:	4614      	mov	r4, r2
 80092ca:	4605      	mov	r5, r0
 80092cc:	b118      	cbz	r0, 80092d6 <__swbuf_r+0x12>
 80092ce:	6983      	ldr	r3, [r0, #24]
 80092d0:	b90b      	cbnz	r3, 80092d6 <__swbuf_r+0x12>
 80092d2:	f7ff f975 	bl	80085c0 <__sinit>
 80092d6:	4b21      	ldr	r3, [pc, #132]	; (800935c <__swbuf_r+0x98>)
 80092d8:	429c      	cmp	r4, r3
 80092da:	d12b      	bne.n	8009334 <__swbuf_r+0x70>
 80092dc:	686c      	ldr	r4, [r5, #4]
 80092de:	69a3      	ldr	r3, [r4, #24]
 80092e0:	60a3      	str	r3, [r4, #8]
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	071a      	lsls	r2, r3, #28
 80092e6:	d52f      	bpl.n	8009348 <__swbuf_r+0x84>
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	b36b      	cbz	r3, 8009348 <__swbuf_r+0x84>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	6820      	ldr	r0, [r4, #0]
 80092f0:	1ac0      	subs	r0, r0, r3
 80092f2:	6963      	ldr	r3, [r4, #20]
 80092f4:	b2f6      	uxtb	r6, r6
 80092f6:	4283      	cmp	r3, r0
 80092f8:	4637      	mov	r7, r6
 80092fa:	dc04      	bgt.n	8009306 <__swbuf_r+0x42>
 80092fc:	4621      	mov	r1, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f944 	bl	800958c <_fflush_r>
 8009304:	bb30      	cbnz	r0, 8009354 <__swbuf_r+0x90>
 8009306:	68a3      	ldr	r3, [r4, #8]
 8009308:	3b01      	subs	r3, #1
 800930a:	60a3      	str	r3, [r4, #8]
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	6022      	str	r2, [r4, #0]
 8009312:	701e      	strb	r6, [r3, #0]
 8009314:	6963      	ldr	r3, [r4, #20]
 8009316:	3001      	adds	r0, #1
 8009318:	4283      	cmp	r3, r0
 800931a:	d004      	beq.n	8009326 <__swbuf_r+0x62>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	07db      	lsls	r3, r3, #31
 8009320:	d506      	bpl.n	8009330 <__swbuf_r+0x6c>
 8009322:	2e0a      	cmp	r6, #10
 8009324:	d104      	bne.n	8009330 <__swbuf_r+0x6c>
 8009326:	4621      	mov	r1, r4
 8009328:	4628      	mov	r0, r5
 800932a:	f000 f92f 	bl	800958c <_fflush_r>
 800932e:	b988      	cbnz	r0, 8009354 <__swbuf_r+0x90>
 8009330:	4638      	mov	r0, r7
 8009332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009334:	4b0a      	ldr	r3, [pc, #40]	; (8009360 <__swbuf_r+0x9c>)
 8009336:	429c      	cmp	r4, r3
 8009338:	d101      	bne.n	800933e <__swbuf_r+0x7a>
 800933a:	68ac      	ldr	r4, [r5, #8]
 800933c:	e7cf      	b.n	80092de <__swbuf_r+0x1a>
 800933e:	4b09      	ldr	r3, [pc, #36]	; (8009364 <__swbuf_r+0xa0>)
 8009340:	429c      	cmp	r4, r3
 8009342:	bf08      	it	eq
 8009344:	68ec      	ldreq	r4, [r5, #12]
 8009346:	e7ca      	b.n	80092de <__swbuf_r+0x1a>
 8009348:	4621      	mov	r1, r4
 800934a:	4628      	mov	r0, r5
 800934c:	f000 f80c 	bl	8009368 <__swsetup_r>
 8009350:	2800      	cmp	r0, #0
 8009352:	d0cb      	beq.n	80092ec <__swbuf_r+0x28>
 8009354:	f04f 37ff 	mov.w	r7, #4294967295
 8009358:	e7ea      	b.n	8009330 <__swbuf_r+0x6c>
 800935a:	bf00      	nop
 800935c:	08009984 	.word	0x08009984
 8009360:	080099a4 	.word	0x080099a4
 8009364:	08009964 	.word	0x08009964

08009368 <__swsetup_r>:
 8009368:	4b32      	ldr	r3, [pc, #200]	; (8009434 <__swsetup_r+0xcc>)
 800936a:	b570      	push	{r4, r5, r6, lr}
 800936c:	681d      	ldr	r5, [r3, #0]
 800936e:	4606      	mov	r6, r0
 8009370:	460c      	mov	r4, r1
 8009372:	b125      	cbz	r5, 800937e <__swsetup_r+0x16>
 8009374:	69ab      	ldr	r3, [r5, #24]
 8009376:	b913      	cbnz	r3, 800937e <__swsetup_r+0x16>
 8009378:	4628      	mov	r0, r5
 800937a:	f7ff f921 	bl	80085c0 <__sinit>
 800937e:	4b2e      	ldr	r3, [pc, #184]	; (8009438 <__swsetup_r+0xd0>)
 8009380:	429c      	cmp	r4, r3
 8009382:	d10f      	bne.n	80093a4 <__swsetup_r+0x3c>
 8009384:	686c      	ldr	r4, [r5, #4]
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800938c:	0719      	lsls	r1, r3, #28
 800938e:	d42c      	bmi.n	80093ea <__swsetup_r+0x82>
 8009390:	06dd      	lsls	r5, r3, #27
 8009392:	d411      	bmi.n	80093b8 <__swsetup_r+0x50>
 8009394:	2309      	movs	r3, #9
 8009396:	6033      	str	r3, [r6, #0]
 8009398:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800939c:	81a3      	strh	r3, [r4, #12]
 800939e:	f04f 30ff 	mov.w	r0, #4294967295
 80093a2:	e03e      	b.n	8009422 <__swsetup_r+0xba>
 80093a4:	4b25      	ldr	r3, [pc, #148]	; (800943c <__swsetup_r+0xd4>)
 80093a6:	429c      	cmp	r4, r3
 80093a8:	d101      	bne.n	80093ae <__swsetup_r+0x46>
 80093aa:	68ac      	ldr	r4, [r5, #8]
 80093ac:	e7eb      	b.n	8009386 <__swsetup_r+0x1e>
 80093ae:	4b24      	ldr	r3, [pc, #144]	; (8009440 <__swsetup_r+0xd8>)
 80093b0:	429c      	cmp	r4, r3
 80093b2:	bf08      	it	eq
 80093b4:	68ec      	ldreq	r4, [r5, #12]
 80093b6:	e7e6      	b.n	8009386 <__swsetup_r+0x1e>
 80093b8:	0758      	lsls	r0, r3, #29
 80093ba:	d512      	bpl.n	80093e2 <__swsetup_r+0x7a>
 80093bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093be:	b141      	cbz	r1, 80093d2 <__swsetup_r+0x6a>
 80093c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c4:	4299      	cmp	r1, r3
 80093c6:	d002      	beq.n	80093ce <__swsetup_r+0x66>
 80093c8:	4630      	mov	r0, r6
 80093ca:	f7ff fd55 	bl	8008e78 <_free_r>
 80093ce:	2300      	movs	r3, #0
 80093d0:	6363      	str	r3, [r4, #52]	; 0x34
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093d8:	81a3      	strh	r3, [r4, #12]
 80093da:	2300      	movs	r3, #0
 80093dc:	6063      	str	r3, [r4, #4]
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	f043 0308 	orr.w	r3, r3, #8
 80093e8:	81a3      	strh	r3, [r4, #12]
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	b94b      	cbnz	r3, 8009402 <__swsetup_r+0x9a>
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093f8:	d003      	beq.n	8009402 <__swsetup_r+0x9a>
 80093fa:	4621      	mov	r1, r4
 80093fc:	4630      	mov	r0, r6
 80093fe:	f000 f937 	bl	8009670 <__smakebuf_r>
 8009402:	89a0      	ldrh	r0, [r4, #12]
 8009404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009408:	f010 0301 	ands.w	r3, r0, #1
 800940c:	d00a      	beq.n	8009424 <__swsetup_r+0xbc>
 800940e:	2300      	movs	r3, #0
 8009410:	60a3      	str	r3, [r4, #8]
 8009412:	6963      	ldr	r3, [r4, #20]
 8009414:	425b      	negs	r3, r3
 8009416:	61a3      	str	r3, [r4, #24]
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	b943      	cbnz	r3, 800942e <__swsetup_r+0xc6>
 800941c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009420:	d1ba      	bne.n	8009398 <__swsetup_r+0x30>
 8009422:	bd70      	pop	{r4, r5, r6, pc}
 8009424:	0781      	lsls	r1, r0, #30
 8009426:	bf58      	it	pl
 8009428:	6963      	ldrpl	r3, [r4, #20]
 800942a:	60a3      	str	r3, [r4, #8]
 800942c:	e7f4      	b.n	8009418 <__swsetup_r+0xb0>
 800942e:	2000      	movs	r0, #0
 8009430:	e7f7      	b.n	8009422 <__swsetup_r+0xba>
 8009432:	bf00      	nop
 8009434:	20000028 	.word	0x20000028
 8009438:	08009984 	.word	0x08009984
 800943c:	080099a4 	.word	0x080099a4
 8009440:	08009964 	.word	0x08009964

08009444 <__assert_func>:
 8009444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009446:	4614      	mov	r4, r2
 8009448:	461a      	mov	r2, r3
 800944a:	4b09      	ldr	r3, [pc, #36]	; (8009470 <__assert_func+0x2c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4605      	mov	r5, r0
 8009450:	68d8      	ldr	r0, [r3, #12]
 8009452:	b14c      	cbz	r4, 8009468 <__assert_func+0x24>
 8009454:	4b07      	ldr	r3, [pc, #28]	; (8009474 <__assert_func+0x30>)
 8009456:	9100      	str	r1, [sp, #0]
 8009458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800945c:	4906      	ldr	r1, [pc, #24]	; (8009478 <__assert_func+0x34>)
 800945e:	462b      	mov	r3, r5
 8009460:	f000 f8d0 	bl	8009604 <fiprintf>
 8009464:	f000 f96f 	bl	8009746 <abort>
 8009468:	4b04      	ldr	r3, [pc, #16]	; (800947c <__assert_func+0x38>)
 800946a:	461c      	mov	r4, r3
 800946c:	e7f3      	b.n	8009456 <__assert_func+0x12>
 800946e:	bf00      	nop
 8009470:	20000028 	.word	0x20000028
 8009474:	08009b35 	.word	0x08009b35
 8009478:	08009b42 	.word	0x08009b42
 800947c:	08009b70 	.word	0x08009b70

08009480 <__sflush_r>:
 8009480:	898a      	ldrh	r2, [r1, #12]
 8009482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009486:	4605      	mov	r5, r0
 8009488:	0710      	lsls	r0, r2, #28
 800948a:	460c      	mov	r4, r1
 800948c:	d458      	bmi.n	8009540 <__sflush_r+0xc0>
 800948e:	684b      	ldr	r3, [r1, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	dc05      	bgt.n	80094a0 <__sflush_r+0x20>
 8009494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	dc02      	bgt.n	80094a0 <__sflush_r+0x20>
 800949a:	2000      	movs	r0, #0
 800949c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094a2:	2e00      	cmp	r6, #0
 80094a4:	d0f9      	beq.n	800949a <__sflush_r+0x1a>
 80094a6:	2300      	movs	r3, #0
 80094a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094ac:	682f      	ldr	r7, [r5, #0]
 80094ae:	602b      	str	r3, [r5, #0]
 80094b0:	d032      	beq.n	8009518 <__sflush_r+0x98>
 80094b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	075a      	lsls	r2, r3, #29
 80094b8:	d505      	bpl.n	80094c6 <__sflush_r+0x46>
 80094ba:	6863      	ldr	r3, [r4, #4]
 80094bc:	1ac0      	subs	r0, r0, r3
 80094be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094c0:	b10b      	cbz	r3, 80094c6 <__sflush_r+0x46>
 80094c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094c4:	1ac0      	subs	r0, r0, r3
 80094c6:	2300      	movs	r3, #0
 80094c8:	4602      	mov	r2, r0
 80094ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094cc:	6a21      	ldr	r1, [r4, #32]
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b0      	blx	r6
 80094d2:	1c43      	adds	r3, r0, #1
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	d106      	bne.n	80094e6 <__sflush_r+0x66>
 80094d8:	6829      	ldr	r1, [r5, #0]
 80094da:	291d      	cmp	r1, #29
 80094dc:	d82c      	bhi.n	8009538 <__sflush_r+0xb8>
 80094de:	4a2a      	ldr	r2, [pc, #168]	; (8009588 <__sflush_r+0x108>)
 80094e0:	40ca      	lsrs	r2, r1
 80094e2:	07d6      	lsls	r6, r2, #31
 80094e4:	d528      	bpl.n	8009538 <__sflush_r+0xb8>
 80094e6:	2200      	movs	r2, #0
 80094e8:	6062      	str	r2, [r4, #4]
 80094ea:	04d9      	lsls	r1, r3, #19
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	6022      	str	r2, [r4, #0]
 80094f0:	d504      	bpl.n	80094fc <__sflush_r+0x7c>
 80094f2:	1c42      	adds	r2, r0, #1
 80094f4:	d101      	bne.n	80094fa <__sflush_r+0x7a>
 80094f6:	682b      	ldr	r3, [r5, #0]
 80094f8:	b903      	cbnz	r3, 80094fc <__sflush_r+0x7c>
 80094fa:	6560      	str	r0, [r4, #84]	; 0x54
 80094fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094fe:	602f      	str	r7, [r5, #0]
 8009500:	2900      	cmp	r1, #0
 8009502:	d0ca      	beq.n	800949a <__sflush_r+0x1a>
 8009504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009508:	4299      	cmp	r1, r3
 800950a:	d002      	beq.n	8009512 <__sflush_r+0x92>
 800950c:	4628      	mov	r0, r5
 800950e:	f7ff fcb3 	bl	8008e78 <_free_r>
 8009512:	2000      	movs	r0, #0
 8009514:	6360      	str	r0, [r4, #52]	; 0x34
 8009516:	e7c1      	b.n	800949c <__sflush_r+0x1c>
 8009518:	6a21      	ldr	r1, [r4, #32]
 800951a:	2301      	movs	r3, #1
 800951c:	4628      	mov	r0, r5
 800951e:	47b0      	blx	r6
 8009520:	1c41      	adds	r1, r0, #1
 8009522:	d1c7      	bne.n	80094b4 <__sflush_r+0x34>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0c4      	beq.n	80094b4 <__sflush_r+0x34>
 800952a:	2b1d      	cmp	r3, #29
 800952c:	d001      	beq.n	8009532 <__sflush_r+0xb2>
 800952e:	2b16      	cmp	r3, #22
 8009530:	d101      	bne.n	8009536 <__sflush_r+0xb6>
 8009532:	602f      	str	r7, [r5, #0]
 8009534:	e7b1      	b.n	800949a <__sflush_r+0x1a>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	e7ad      	b.n	800949c <__sflush_r+0x1c>
 8009540:	690f      	ldr	r7, [r1, #16]
 8009542:	2f00      	cmp	r7, #0
 8009544:	d0a9      	beq.n	800949a <__sflush_r+0x1a>
 8009546:	0793      	lsls	r3, r2, #30
 8009548:	680e      	ldr	r6, [r1, #0]
 800954a:	bf08      	it	eq
 800954c:	694b      	ldreq	r3, [r1, #20]
 800954e:	600f      	str	r7, [r1, #0]
 8009550:	bf18      	it	ne
 8009552:	2300      	movne	r3, #0
 8009554:	eba6 0807 	sub.w	r8, r6, r7
 8009558:	608b      	str	r3, [r1, #8]
 800955a:	f1b8 0f00 	cmp.w	r8, #0
 800955e:	dd9c      	ble.n	800949a <__sflush_r+0x1a>
 8009560:	6a21      	ldr	r1, [r4, #32]
 8009562:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009564:	4643      	mov	r3, r8
 8009566:	463a      	mov	r2, r7
 8009568:	4628      	mov	r0, r5
 800956a:	47b0      	blx	r6
 800956c:	2800      	cmp	r0, #0
 800956e:	dc06      	bgt.n	800957e <__sflush_r+0xfe>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009576:	81a3      	strh	r3, [r4, #12]
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e78e      	b.n	800949c <__sflush_r+0x1c>
 800957e:	4407      	add	r7, r0
 8009580:	eba8 0800 	sub.w	r8, r8, r0
 8009584:	e7e9      	b.n	800955a <__sflush_r+0xda>
 8009586:	bf00      	nop
 8009588:	20400001 	.word	0x20400001

0800958c <_fflush_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	690b      	ldr	r3, [r1, #16]
 8009590:	4605      	mov	r5, r0
 8009592:	460c      	mov	r4, r1
 8009594:	b913      	cbnz	r3, 800959c <_fflush_r+0x10>
 8009596:	2500      	movs	r5, #0
 8009598:	4628      	mov	r0, r5
 800959a:	bd38      	pop	{r3, r4, r5, pc}
 800959c:	b118      	cbz	r0, 80095a6 <_fflush_r+0x1a>
 800959e:	6983      	ldr	r3, [r0, #24]
 80095a0:	b90b      	cbnz	r3, 80095a6 <_fflush_r+0x1a>
 80095a2:	f7ff f80d 	bl	80085c0 <__sinit>
 80095a6:	4b14      	ldr	r3, [pc, #80]	; (80095f8 <_fflush_r+0x6c>)
 80095a8:	429c      	cmp	r4, r3
 80095aa:	d11b      	bne.n	80095e4 <_fflush_r+0x58>
 80095ac:	686c      	ldr	r4, [r5, #4]
 80095ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0ef      	beq.n	8009596 <_fflush_r+0xa>
 80095b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095b8:	07d0      	lsls	r0, r2, #31
 80095ba:	d404      	bmi.n	80095c6 <_fflush_r+0x3a>
 80095bc:	0599      	lsls	r1, r3, #22
 80095be:	d402      	bmi.n	80095c6 <_fflush_r+0x3a>
 80095c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095c2:	f7ff f8a0 	bl	8008706 <__retarget_lock_acquire_recursive>
 80095c6:	4628      	mov	r0, r5
 80095c8:	4621      	mov	r1, r4
 80095ca:	f7ff ff59 	bl	8009480 <__sflush_r>
 80095ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095d0:	07da      	lsls	r2, r3, #31
 80095d2:	4605      	mov	r5, r0
 80095d4:	d4e0      	bmi.n	8009598 <_fflush_r+0xc>
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	059b      	lsls	r3, r3, #22
 80095da:	d4dd      	bmi.n	8009598 <_fflush_r+0xc>
 80095dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095de:	f7ff f893 	bl	8008708 <__retarget_lock_release_recursive>
 80095e2:	e7d9      	b.n	8009598 <_fflush_r+0xc>
 80095e4:	4b05      	ldr	r3, [pc, #20]	; (80095fc <_fflush_r+0x70>)
 80095e6:	429c      	cmp	r4, r3
 80095e8:	d101      	bne.n	80095ee <_fflush_r+0x62>
 80095ea:	68ac      	ldr	r4, [r5, #8]
 80095ec:	e7df      	b.n	80095ae <_fflush_r+0x22>
 80095ee:	4b04      	ldr	r3, [pc, #16]	; (8009600 <_fflush_r+0x74>)
 80095f0:	429c      	cmp	r4, r3
 80095f2:	bf08      	it	eq
 80095f4:	68ec      	ldreq	r4, [r5, #12]
 80095f6:	e7da      	b.n	80095ae <_fflush_r+0x22>
 80095f8:	08009984 	.word	0x08009984
 80095fc:	080099a4 	.word	0x080099a4
 8009600:	08009964 	.word	0x08009964

08009604 <fiprintf>:
 8009604:	b40e      	push	{r1, r2, r3}
 8009606:	b503      	push	{r0, r1, lr}
 8009608:	4601      	mov	r1, r0
 800960a:	ab03      	add	r3, sp, #12
 800960c:	4805      	ldr	r0, [pc, #20]	; (8009624 <fiprintf+0x20>)
 800960e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009612:	6800      	ldr	r0, [r0, #0]
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	f7ff fd03 	bl	8009020 <_vfiprintf_r>
 800961a:	b002      	add	sp, #8
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	20000028 	.word	0x20000028

08009628 <__swhatbuf_r>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	460e      	mov	r6, r1
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	2900      	cmp	r1, #0
 8009632:	b096      	sub	sp, #88	; 0x58
 8009634:	4614      	mov	r4, r2
 8009636:	461d      	mov	r5, r3
 8009638:	da07      	bge.n	800964a <__swhatbuf_r+0x22>
 800963a:	2300      	movs	r3, #0
 800963c:	602b      	str	r3, [r5, #0]
 800963e:	89b3      	ldrh	r3, [r6, #12]
 8009640:	061a      	lsls	r2, r3, #24
 8009642:	d410      	bmi.n	8009666 <__swhatbuf_r+0x3e>
 8009644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009648:	e00e      	b.n	8009668 <__swhatbuf_r+0x40>
 800964a:	466a      	mov	r2, sp
 800964c:	f000 f882 	bl	8009754 <_fstat_r>
 8009650:	2800      	cmp	r0, #0
 8009652:	dbf2      	blt.n	800963a <__swhatbuf_r+0x12>
 8009654:	9a01      	ldr	r2, [sp, #4]
 8009656:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800965a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800965e:	425a      	negs	r2, r3
 8009660:	415a      	adcs	r2, r3
 8009662:	602a      	str	r2, [r5, #0]
 8009664:	e7ee      	b.n	8009644 <__swhatbuf_r+0x1c>
 8009666:	2340      	movs	r3, #64	; 0x40
 8009668:	2000      	movs	r0, #0
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	b016      	add	sp, #88	; 0x58
 800966e:	bd70      	pop	{r4, r5, r6, pc}

08009670 <__smakebuf_r>:
 8009670:	898b      	ldrh	r3, [r1, #12]
 8009672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009674:	079d      	lsls	r5, r3, #30
 8009676:	4606      	mov	r6, r0
 8009678:	460c      	mov	r4, r1
 800967a:	d507      	bpl.n	800968c <__smakebuf_r+0x1c>
 800967c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	6123      	str	r3, [r4, #16]
 8009684:	2301      	movs	r3, #1
 8009686:	6163      	str	r3, [r4, #20]
 8009688:	b002      	add	sp, #8
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	ab01      	add	r3, sp, #4
 800968e:	466a      	mov	r2, sp
 8009690:	f7ff ffca 	bl	8009628 <__swhatbuf_r>
 8009694:	9900      	ldr	r1, [sp, #0]
 8009696:	4605      	mov	r5, r0
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff fc3d 	bl	8008f18 <_malloc_r>
 800969e:	b948      	cbnz	r0, 80096b4 <__smakebuf_r+0x44>
 80096a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a4:	059a      	lsls	r2, r3, #22
 80096a6:	d4ef      	bmi.n	8009688 <__smakebuf_r+0x18>
 80096a8:	f023 0303 	bic.w	r3, r3, #3
 80096ac:	f043 0302 	orr.w	r3, r3, #2
 80096b0:	81a3      	strh	r3, [r4, #12]
 80096b2:	e7e3      	b.n	800967c <__smakebuf_r+0xc>
 80096b4:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <__smakebuf_r+0x7c>)
 80096b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	6020      	str	r0, [r4, #0]
 80096bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	9b00      	ldr	r3, [sp, #0]
 80096c4:	6163      	str	r3, [r4, #20]
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	6120      	str	r0, [r4, #16]
 80096ca:	b15b      	cbz	r3, 80096e4 <__smakebuf_r+0x74>
 80096cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096d0:	4630      	mov	r0, r6
 80096d2:	f000 f851 	bl	8009778 <_isatty_r>
 80096d6:	b128      	cbz	r0, 80096e4 <__smakebuf_r+0x74>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	f023 0303 	bic.w	r3, r3, #3
 80096de:	f043 0301 	orr.w	r3, r3, #1
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	89a0      	ldrh	r0, [r4, #12]
 80096e6:	4305      	orrs	r5, r0
 80096e8:	81a5      	strh	r5, [r4, #12]
 80096ea:	e7cd      	b.n	8009688 <__smakebuf_r+0x18>
 80096ec:	08008559 	.word	0x08008559

080096f0 <__ascii_mbtowc>:
 80096f0:	b082      	sub	sp, #8
 80096f2:	b901      	cbnz	r1, 80096f6 <__ascii_mbtowc+0x6>
 80096f4:	a901      	add	r1, sp, #4
 80096f6:	b142      	cbz	r2, 800970a <__ascii_mbtowc+0x1a>
 80096f8:	b14b      	cbz	r3, 800970e <__ascii_mbtowc+0x1e>
 80096fa:	7813      	ldrb	r3, [r2, #0]
 80096fc:	600b      	str	r3, [r1, #0]
 80096fe:	7812      	ldrb	r2, [r2, #0]
 8009700:	1e10      	subs	r0, r2, #0
 8009702:	bf18      	it	ne
 8009704:	2001      	movne	r0, #1
 8009706:	b002      	add	sp, #8
 8009708:	4770      	bx	lr
 800970a:	4610      	mov	r0, r2
 800970c:	e7fb      	b.n	8009706 <__ascii_mbtowc+0x16>
 800970e:	f06f 0001 	mvn.w	r0, #1
 8009712:	e7f8      	b.n	8009706 <__ascii_mbtowc+0x16>

08009714 <__malloc_lock>:
 8009714:	4801      	ldr	r0, [pc, #4]	; (800971c <__malloc_lock+0x8>)
 8009716:	f7fe bff6 	b.w	8008706 <__retarget_lock_acquire_recursive>
 800971a:	bf00      	nop
 800971c:	200007f0 	.word	0x200007f0

08009720 <__malloc_unlock>:
 8009720:	4801      	ldr	r0, [pc, #4]	; (8009728 <__malloc_unlock+0x8>)
 8009722:	f7fe bff1 	b.w	8008708 <__retarget_lock_release_recursive>
 8009726:	bf00      	nop
 8009728:	200007f0 	.word	0x200007f0

0800972c <__ascii_wctomb>:
 800972c:	b149      	cbz	r1, 8009742 <__ascii_wctomb+0x16>
 800972e:	2aff      	cmp	r2, #255	; 0xff
 8009730:	bf85      	ittet	hi
 8009732:	238a      	movhi	r3, #138	; 0x8a
 8009734:	6003      	strhi	r3, [r0, #0]
 8009736:	700a      	strbls	r2, [r1, #0]
 8009738:	f04f 30ff 	movhi.w	r0, #4294967295
 800973c:	bf98      	it	ls
 800973e:	2001      	movls	r0, #1
 8009740:	4770      	bx	lr
 8009742:	4608      	mov	r0, r1
 8009744:	4770      	bx	lr

08009746 <abort>:
 8009746:	b508      	push	{r3, lr}
 8009748:	2006      	movs	r0, #6
 800974a:	f000 f84d 	bl	80097e8 <raise>
 800974e:	2001      	movs	r0, #1
 8009750:	f7f8 f900 	bl	8001954 <_exit>

08009754 <_fstat_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_fstat_r+0x20>)
 8009758:	2300      	movs	r3, #0
 800975a:	4604      	mov	r4, r0
 800975c:	4608      	mov	r0, r1
 800975e:	4611      	mov	r1, r2
 8009760:	602b      	str	r3, [r5, #0]
 8009762:	f7f8 f946 	bl	80019f2 <_fstat>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d102      	bne.n	8009770 <_fstat_r+0x1c>
 800976a:	682b      	ldr	r3, [r5, #0]
 800976c:	b103      	cbz	r3, 8009770 <_fstat_r+0x1c>
 800976e:	6023      	str	r3, [r4, #0]
 8009770:	bd38      	pop	{r3, r4, r5, pc}
 8009772:	bf00      	nop
 8009774:	200007f8 	.word	0x200007f8

08009778 <_isatty_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d06      	ldr	r5, [pc, #24]	; (8009794 <_isatty_r+0x1c>)
 800977c:	2300      	movs	r3, #0
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7f8 f945 	bl	8001a12 <_isatty>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_isatty_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_isatty_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	200007f8 	.word	0x200007f8

08009798 <_raise_r>:
 8009798:	291f      	cmp	r1, #31
 800979a:	b538      	push	{r3, r4, r5, lr}
 800979c:	4604      	mov	r4, r0
 800979e:	460d      	mov	r5, r1
 80097a0:	d904      	bls.n	80097ac <_raise_r+0x14>
 80097a2:	2316      	movs	r3, #22
 80097a4:	6003      	str	r3, [r0, #0]
 80097a6:	f04f 30ff 	mov.w	r0, #4294967295
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80097ae:	b112      	cbz	r2, 80097b6 <_raise_r+0x1e>
 80097b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097b4:	b94b      	cbnz	r3, 80097ca <_raise_r+0x32>
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 f830 	bl	800981c <_getpid_r>
 80097bc:	462a      	mov	r2, r5
 80097be:	4601      	mov	r1, r0
 80097c0:	4620      	mov	r0, r4
 80097c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097c6:	f000 b817 	b.w	80097f8 <_kill_r>
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d00a      	beq.n	80097e4 <_raise_r+0x4c>
 80097ce:	1c59      	adds	r1, r3, #1
 80097d0:	d103      	bne.n	80097da <_raise_r+0x42>
 80097d2:	2316      	movs	r3, #22
 80097d4:	6003      	str	r3, [r0, #0]
 80097d6:	2001      	movs	r0, #1
 80097d8:	e7e7      	b.n	80097aa <_raise_r+0x12>
 80097da:	2400      	movs	r4, #0
 80097dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097e0:	4628      	mov	r0, r5
 80097e2:	4798      	blx	r3
 80097e4:	2000      	movs	r0, #0
 80097e6:	e7e0      	b.n	80097aa <_raise_r+0x12>

080097e8 <raise>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <raise+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f7ff bfd3 	b.w	8009798 <_raise_r>
 80097f2:	bf00      	nop
 80097f4:	20000028 	.word	0x20000028

080097f8 <_kill_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d07      	ldr	r5, [pc, #28]	; (8009818 <_kill_r+0x20>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	4611      	mov	r1, r2
 8009804:	602b      	str	r3, [r5, #0]
 8009806:	f7f8 f895 	bl	8001934 <_kill>
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	d102      	bne.n	8009814 <_kill_r+0x1c>
 800980e:	682b      	ldr	r3, [r5, #0]
 8009810:	b103      	cbz	r3, 8009814 <_kill_r+0x1c>
 8009812:	6023      	str	r3, [r4, #0]
 8009814:	bd38      	pop	{r3, r4, r5, pc}
 8009816:	bf00      	nop
 8009818:	200007f8 	.word	0x200007f8

0800981c <_getpid_r>:
 800981c:	f7f8 b882 	b.w	8001924 <_getpid>

08009820 <_init>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	bf00      	nop
 8009824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009826:	bc08      	pop	{r3}
 8009828:	469e      	mov	lr, r3
 800982a:	4770      	bx	lr

0800982c <_fini>:
 800982c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982e:	bf00      	nop
 8009830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009832:	bc08      	pop	{r3}
 8009834:	469e      	mov	lr, r3
 8009836:	4770      	bx	lr
