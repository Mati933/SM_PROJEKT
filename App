import tkinter as tk
from tkinter import *
import numpy as np
from matplotlib import pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure
import matplotlib
import serial
matplotlib.use("TkAgg")

A=1
start = False
cnt=1
ser = serial.Serial('COM8', 9600) #check that port on your device from Device Manager
i=0
x=[]
y=[]
t=list()
PV_vec=list()
SP_vec=list()
CV_vec=list()



def display_text():
   global entry1
   global entry2
   global entry3
   global entry4
   global r
   if r == 1:
       reset.set("CONFIRM")
       r=0
   else:
       reset.set("RESET")
       r=1

   string1= entry1.get()
   string2= entry2.get()
   string3 = entry3.get()
   string4 = entry4.get()
   tk.Button(root, textvariable=text, width=40, command=start_program, state=ACTIVE).place(x=10, y=10)
   message = f"Kp{string1}Kd{string2}Ki{string3}Z{string4}\n"
   ser.write(bytes(message, 'utf-8'))






def graph_ploting():
    global cnt
    global i
    if start:

        f=Figure(figsize=(4,4), dpi=100)
        s = f.add_subplot(111)

        f1 = Figure(figsize=(4, 4), dpi=100)
        s1 = f1.add_subplot(111)

        s.set_ylim(0, 50)
        s.clear()
        elo = ser.readline().decode()
        PV = elo.find("PV")
        SP = elo.find("SP")
        CV = elo.find("CV")
        x = elo[PV + len("PV"):SP]
        y = elo[SP + len("SP"):CV]
        z = elo[CV + len("CV"):len(elo)]
        CV_vec.append(int(z))
        t.append(i)
        PV_vec.append(int(x))
        SP_vec.append(int(y))
        if (len(PV_vec) > 150):
            PV_vec.clear()
            SP_vec.clear()
            CV_vec.clear()
            t.clear()
            i=0
        s.plot(t, PV_vec)
        s.plot(t, SP_vec)
        s1.plot(t, CV_vec, 'm')
        e=0
        if(len(PV_vec)>0):
            e = (SP_vec[i-1]-PV_vec[i-1])/SP_vec[i-1]*100
        f.legend([f"Uchyb: {np.round(e)}%"])

        canvas = FigureCanvasTkAgg(f, root)
        canvas.draw()
        canvas.get_tk_widget().place(x=380, y=10)

        canvas = FigureCanvasTkAgg(f1, root)
        canvas.draw()
        canvas.get_tk_widget().place(x=380, y=420)
        # time.sleep(0.1)
        i += 1
        plt.pause(0.0001)

    root.after(1,graph_ploting)



root = tk.Tk()
def start_program():
    global start
    start = not start
    if start == True:
        text.set("STOP")
    else:
        text.set("START")
        ser.write(bytes("STOP\0", 'utf-8'))




root.title("Project control")
root.geometry('800x800')
root.configure(background='pink')
#start
text = tk.StringVar()
text.set("START")
reset = tk.StringVar()
r=1
reset.set("RESET")
tk.Button(root, textvariable= text,width= 40, command= start_program, state = DISABLED).place(x=10, y=10)


#Kp
label = Label(root, text="PID - Kp",font=("Courier 10 bold"), bg="pink")
label.place(x=50,y=200)

entry1 = Entry(root ,width=30)
entry1.insert(0, "4.38127169718089")
entry1.focus_set()
entry1.place(x=50,y=220)
#Kd
label = Label(root, text="PID - Kd",font=("Courier 10 bold"), bg="pink")
label.place(x=50,y=250)

entry2 = Entry(root, width=30)
entry2.insert(0, "0")
entry2.focus_set()
entry2.place(x=50,y=270)

#Ki
label = Label(root, text="PID - Ki",font=("Courier 10 bold"), bg="pink")
label.place(x=50,y=300)

entry3 = Entry(root, width=30)
entry3.insert(0, "0.355762323613465")
entry3.focus_set()
entry3.place(x=50,y=320)


#disruption
label = Label(root, text="Disruption",font=("Courier 10 bold"), bg="pink")
label.place(x=50,y=350)

entry4 = Entry(root, width=30)
entry4.insert(0, "0")
entry4.focus_set()
entry4.place(x=50,y=380)

tk.Button(root, textvariable= reset,width= 20, command= display_text).place(x=60, y=450)


root.after(1,graph_ploting)

root.mainloop()
